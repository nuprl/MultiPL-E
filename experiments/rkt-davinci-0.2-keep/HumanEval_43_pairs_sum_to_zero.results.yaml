name: HumanEval_43_pairs_sum_to_zero
language: racket
results:
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (second\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9u89cl7q.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp9u89cl7q.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) false]\n        [(empty? (rest l)) false]\n        [(= (sum (first\
    \ l) (first (rest l))) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph6iauuqn.rkt:19:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmph6iauuqn.rkt:19:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(member (first l) (rest\
    \ l)) #t]\n      [else (helper (rest l))]))\n  (helper (map (lambda (x) (- 0 x))\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal?\
    \ (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7))\
    \ #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal?\
    \ (candidate (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3\
    \ 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn5plc3em.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn5plc3em.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpn5plc3em.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn5plc3em.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvh8r0oms.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpvh8r0oms.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyaw_2eza.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpyaw_2eza.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4dnl3a3.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc4dnl3a3.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpc4dnl3a3.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgh993g0.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkgh993g0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkgh993g0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(zero? (+ (first l) (first (rest l)))) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppk0rwz8c.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppk0rwz8c.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppk0rwz8c.rkt:36:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcwjbp22.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (second\
    \ l)) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpderd1fiv.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpderd1fiv.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpldnftdz9.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpldnftdz9.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz01ibxi1.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz01ibxi1.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz01ibxi1.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (abs (first l))\
    \ (abs (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjug8pqn0.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjug8pqn0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjug8pqn0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnwq1rtz.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7lgq6tcn.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7lgq6tcn.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7lgq6tcn.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (abs (first l)) (abs\
    \ (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz_295thy.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz_295thy.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz_295thy.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsnh2sfhw.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsnh2sfhw.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsnh2sfhw.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2moqn5dt.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2moqn5dt.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2moqn5dt.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzbjtuzn.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuzbjtuzn.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuzbjtuzn.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwh0qmk_z.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwh0qmk_z.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwh0qmk_z.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphejh1iwz.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmphejh1iwz.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnmvglbz.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxj5on7x3.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpxj5on7x3.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_r1ja9d8.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_r1ja9d8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_r1ja9d8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu17r61kg.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu17r61kg.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpu17r61kg.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3l22jehz.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3l22jehz.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3l22jehz.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l))\n          (not (zero?\
    \ (car l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kax1z0s.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_kax1z0s.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_kax1z0s.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_kax1z0s.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1010shh.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb1010shh.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb1010shh.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(= (abs (car l)) (abs (car\
    \ (cdr l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0olls9c_.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0olls9c_.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0olls9c_.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqha2jl6s.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqha2jl6s.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqha2jl6s.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqha2jl6s.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp09nb49k7.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp09nb49k7.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(= (length l) 1) #f]\n    [(member (- (car l) (cadr\
    \ l)) (cdr l)) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd6x18jvg.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpd6x18jvg.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpd6x18jvg.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpd6x18jvg.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd6x18jvg.rkt:35:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpd6x18jvg.rkt:36:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (apply + (map (lambda\
    \ (x) (if (equal? x (first l)) 0 x)) l))) #t]\n    [else (pairs_sum_to_zero (rest\
    \ l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal?\
    \ (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7))\
    \ #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal?\
    \ (candidate (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3\
    \ 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptb945i9c.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptb945i9c.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptb945i9c.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptb945i9c.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(= (car l) (- (car (cdr l))))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv0gvuxqt.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv0gvuxqt.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpv0gvuxqt.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwqjplwvq.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwqjplwvq.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwqjplwvq.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2etc1y3j.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2etc1y3j.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2etc1y3j.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp13ptnwkk.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp13ptnwkk.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp13ptnwkk.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd7jqhzj.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfd7jqhzj.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfd7jqhzj.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (not (zero? (first\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpog3w8nhy.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpog3w8nhy.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpog3w8nhy.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpog3w8nhy.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(member (add1 (first\
    \ l)) (rest l)) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5khjb6no.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5khjb6no.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5khjb6no.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9uzc0xpx.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9uzc0xpx.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9uzc0xpx.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoiwmk3ef.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoiwmk3ef.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpoiwmk3ef.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzpwhpzfh.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzpwhpzfh.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpzpwhpzfh.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6nddxl21.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp6nddxl21.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (modulo (first l)\
    \ 2)) #f]\n    [(zero? (modulo (second l) 2)) #f]\n    [else #t]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq70os3s1.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq70os3s1.rkt:30:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpq70os3s1.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq70os3s1.rkt:36:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq70os3s1.rkt:37:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (modulo (first l)\
    \ 2)) #f]\n    [(zero? (modulo (first (rest l)) 2)) #f]\n    [else #t]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc0wblot5.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc0wblot5.rkt:30:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpc0wblot5.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc0wblot5.rkt:36:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc0wblot5.rkt:37:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkqato89_.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpkqato89_.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxr98u7ta.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxr98u7ta.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxr98u7ta.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= 0 (+ (first l)\
    \ (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvld832wt.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvld832wt.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvld832wt.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgn6zd6f0.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgn6zd6f0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgn6zd6f0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk838kof8.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpk838kof8.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpofjflsq_.rkt:20:13: add: unbound identifier\n  in: add\n  location...:\n\
    \   /tmp/tmpofjflsq_.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9udlqdbt.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9udlqdbt.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9udlqdbt.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ww8tjep.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6ww8tjep.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6ww8tjep.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(= (sum (first l) (first (rest l))) 0) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo9gq2n_m.rkt:21:11: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpo9gq2n_m.rkt:21:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsp4d6wvj.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpsp4d6wvj.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(= 0 (+ (car l) (car (cdr\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvy71fpcx.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvy71fpcx.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvy71fpcx.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (- (first l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwb0pnekw.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpwb0pnekw.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbfy4xw2p.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpbfy4xw2p.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (abs (first l))\
    \ (abs (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl0qhbiie.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl0qhbiie.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpl0qhbiie.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4oyupqzj.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp4oyupqzj.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo8h5_ckr.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo8h5_ckr.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpo8h5_ckr.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjwzkq89h.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjwzkq89h.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjwzkq89h.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphmitxhmj.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmphmitxhmj.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqv7d5l1j.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqv7d5l1j.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqv7d5l1j.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (abs (first l)) (abs\
    \ (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvcotcux8.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvcotcux8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvcotcux8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmvf9gxvn.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmvf9gxvn.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmvf9gxvn.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3d13uuri.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp3d13uuri.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpscskvyp6.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpscskvyp6.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpscskvyp6.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(= 0 (+ (first l) (first (rest l)))) #t]\n      [else (helper (rest l))]))\n\
    \  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0))\
    \ #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n\
    \    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate (list\
    \ -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsn2fhyn8.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsn2fhyn8.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsn2fhyn8.rkt:36:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (second\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpee8spoy8.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpee8spoy8.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpck58rjj9.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpck58rjj9.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) #f]\n        [(empty? (rest l)) #f]\n        [(= 0 (+ (first l)\
    \ (first (rest l)))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp669s49d7.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp669s49d7.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp669s49d7.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnh9888vf.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnh9888vf.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnh9888vf.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbys19c.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuuhfiv5z.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuuhfiv5z.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuuhfiv5z.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb04z5g5n.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb04z5g5n.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb04z5g5n.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb04z5g5n.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpr82h6sbu.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpr82h6sbu.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= 0 (abs (- (first\
    \ l) (first (rest l))))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_o2r0np2.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_o2r0np2.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_o2r0np2.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbicl5oni.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpbicl5oni.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(zero? (+ (car l) (car (cdr\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprzv1ehlz.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprzv1ehlz.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprzv1ehlz.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnm_ha7ht.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnm_ha7ht.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnm_ha7ht.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp46by353m.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp46by353m.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp46by353m.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_nn24nb6.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_nn24nb6.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_nn24nb6.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiyx7rv91.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpiyx7rv91.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (abs (- (first l)\
    \ (first (rest l))))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqh_e8zl2.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqh_e8zl2.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqh_e8zl2.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(member (add1 (first\
    \ l)) (rest l)) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpul0_cvsq.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpul0_cvsq.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpul0_cvsq.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0yg1_fja.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0yg1_fja.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0yg1_fja.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0yg1_fja.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(member (- (car l)) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(member (car l) (cdr l))\
    \ #t]\n      [else (helper (cdr l))]))\n  (helper l))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd5d4e9v.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyd5d4e9v.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyd5d4e9v.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyd5d4e9v.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzx1s9tg1.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzx1s9tg1.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpzx1s9tg1.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzx1s9tg1.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa3az5ym8.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa3az5ym8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpa3az5ym8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa73saph_.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa73saph_.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpa73saph_.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbsxx4gui.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbsxx4gui.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbsxx4gui.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (second\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcuwr3bri.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpcuwr3bri.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm167h_1w.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpm167h_1w.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(member (zero? (-\
    \ (first l) (first (rest l)))) l) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgqoxigv3.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgqoxigv3.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgqoxigv3.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2rdnnp72.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2rdnnp72.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2rdnnp72.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= 0 (abs (- (first l)\
    \ (first (rest l))))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuznh11lu.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuznh11lu.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuznh11lu.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpemjqc7vk.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpemjqc7vk.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpemjqc7vk.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(and (member (car l) (cdr l)) (not (zero? (car l))))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8dzr6xbw.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8dzr6xbw.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8dzr6xbw.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8dzr6xbw.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpedzqyjin.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpedzqyjin.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(zero? (+ (car l) (car (cdr\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8gntkfs7.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8gntkfs7.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8gntkfs7.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf_2kc5mk.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpf_2kc5mk.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuez31nes.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuez31nes.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuez31nes.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuez31nes.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (remainder\
    \ (first l) (second l))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj0qfexfx.rkt:28:4\n\
    \nremainder: division by zero\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj0qfexfx.rkt:29:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj0qfexfx.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj0qfexfx.rkt:35:4\nactual:     #t\nexpected:   #f\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj0qfexfx.rkt:36:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnnnbr7o_.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpnnnbr7o_.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83dccmdg.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp83dccmdg.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp83dccmdg.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (pairs_sum_to_zero_helper l)\n    (cond\n      [(empty? l) #f]\n      [(member\
    \ (- (first l)) (rest l)) #t]\n      [else (pairs_sum_to_zero_helper (rest l))]))\n\
    \  (pairs_sum_to_zero_helper l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list\
    \ 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8247i1xc.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp8247i1xc.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz2odbtr_.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz2odbtr_.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz2odbtr_.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz2odbtr_.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(= (length l) 1) false]\n    [else\n     (let ([first\
    \ (first l)]\n           [rest (rest l)])\n       (or (pairs_sum_to_zero rest)\n\
    \           (or (member (- first) rest)\n               (member (- first) (rest\
    \ rest))\n               (member (- first) (rest (rest rest))))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:33:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '(0)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:34:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(1)\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:35:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: '(7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:36:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '(7)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:38:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(30)\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:39:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: '(31)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:40:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: '(30)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3gjkf7tc.rkt:41:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: '(31)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0zlw5wfp.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp0zlw5wfp.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3kd_vh3.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu3kd_vh3.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpu3kd_vh3.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps4l6osfw.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8uxr4ilc.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp8uxr4ilc.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5jqg47zn.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp5jqg47zn.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpea6u672k.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpea6u672k.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpea6u672k.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjc8pwcv8.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjc8pwcv8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjc8pwcv8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (second l)) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptfopwu1e.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmptfopwu1e.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp421k7j5j.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj2rft1td.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj2rft1td.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj2rft1td.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(zero? (+ (first l) (first (rest l)))) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5y5ki3v5.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5y5ki3v5.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5y5ki3v5.rkt:36:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp40qdmoof.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp40qdmoof.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rrv5qoj.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add1 (first l)\
    \ (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:28:4\n\
    \nadd1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:29:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:30:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:31:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:33:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:34:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:35:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkksubzj.rkt:36:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwtff9qke.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwtff9qke.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwtff9qke.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= 0 (abs (- (first\
    \ l) (first (rest l))))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbizb96k0.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbizb96k0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbizb96k0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (add (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzchoq2j6.rkt:20:13: add: unbound identifier\n  in: add\n  location...:\n\
    \   /tmp/tmpzchoq2j6.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(member (car l) (cdr l))\
    \ #t]\n      [else (helper (cdr l))]))\n  (helper l))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoelqhrni.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoelqhrni.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpoelqhrni.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoelqhrni.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (if\
    \ (null? l)\n      #f\n      (or (member (- (car l)) (cdr l))\n          (pairs_sum_to_zero\
    \ (cdr l)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0))\
    \ #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n\
    \    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate (list\
    \ -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcub32jhz.rkt:30:4\n\
    actual:     '(5 7)\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcub32jhz.rkt:32:4\nactual:\
    \     '(3 2 30)\nexpected:   #t\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcub32jhz.rkt:33:4\nactual:\
    \     '(3 2 31)\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp52yhhq6w.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp52yhhq6w.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) #f]\n        [(empty? (rest l)) #f]\n        [(zero? (+ (first l)\
    \ (first (rest l)))) #t]\n        [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqztf34m.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqqztf34m.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqqztf34m.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfdra3fkd.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add1 (first l)\
    \ (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:28:4\n\
    \nadd1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:29:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:30:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:31:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:33:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:34:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:35:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgseyaa42.rkt:36:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sum (first l)\
    \ (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc9cktu36.rkt:20:14: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpc9cktu36.rkt:20:14\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) #f]\n        [(and (member (first l) (rest l))\n              (zero?\
    \ (- (first l) (first (rest l))))) #t]\n        [else (pairs_sum_to_zero (rest\
    \ l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal?\
    \ (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7))\
    \ #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal?\
    \ (candidate (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3\
    \ 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaul32pt_.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpaul32pt_.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpaul32pt_.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpczvtw6i6.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpczvtw6i6.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) false]\n        [(empty? (rest l)) false]\n        [(= (sum (first\
    \ l) (first (rest l))) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5l_jf3p9.rkt:19:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp5l_jf3p9.rkt:19:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpydzdextk.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpydzdextk.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz6n6h1wa.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpz6n6h1wa.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(= 0 (+ (first l) (first (rest l)))) #t]\n      [else (helper (rest l))]))\n\
    \  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0))\
    \ #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n\
    \    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate (list\
    \ -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7sexq1lp.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7sexq1lp.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7sexq1lp.rkt:36:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyos3hqzy.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpyos3hqzy.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) false]\n        [(empty? (rest l)) false]\n        [(or (member\
    \ (add1 (first l)) (rest l))\n             (member (sub1 (first l)) (rest l)))\n\
    \         true]\n        [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzk19w7uz.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzk19w7uz.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn1ygs0eh.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpn1ygs0eh.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0pgmetv0.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0pgmetv0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0pgmetv0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps6nhvqgw.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmps6nhvqgw.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqg0rrtjn.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqg0rrtjn.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqg0rrtjn.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (not (zero? (car l))))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk7fxzr9e.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk7fxzr9e.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk7fxzr9e.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk7fxzr9e.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (add1 (first l))\
    \ (rest l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpej0lw3ba.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpej0lw3ba.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpej0lw3ba.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx2l3gswy.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpx2l3gswy.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(= (length l) 2) (or (=\
    \ (car l) (cadr l)) (= (car l) (- (cadr l))))]\n    [else\n     (or (pairs_sum_to_zero\
    \ (cdr l))\n         (pairs_sum_to_zero (cons (car l) (cddr l))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyb0i1mve.rkt:31:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyb0i1mve.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyb0i1mve.rkt:35:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyb0i1mve.rkt:36:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjuoqphrq.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpjuoqphrq.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(zero? (+ (first l) (first (rest l)))) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ovlk6t5.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ovlk6t5.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1ovlk6t5.rkt:36:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(= (length l) 1) false]\n    [else\n     (or\n \
    \     (member 0 l)\n      (or\n       (pairs_sum_to_zero (cdr l))\n       (pairs_sum_to_zero\
    \ (cdr (cdr l)))\n       (member (- (car l) (car (cdr l))) (cdr (cdr l)))\n  \
    \     (member (+ (car l) (car (cdr l))) (cdr (cdr l)))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:34:4\n\
    actual:     '(0)\nexpected:   #f\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:35:4\nactual:\
    \     '(1)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:36:4\nactual:     '(3\
    \ 7)\nexpected:   #f\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:39:4\nactual:     '(2 30)\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj3flcc38.rkt:40:4\nactual:     '(2 31)\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= 0 (abs (- (first\
    \ l) (first (rest l))))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphqbvgavy.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphqbvgavy.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphqbvgavy.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm71mo2b2.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpm71mo2b2.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_76nlia.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0_76nlia.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0_76nlia.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(member (add1 (first\
    \ l)) (rest l)) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqj28x0g0.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqj28x0g0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqj28x0g0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(member (sub1 (first\
    \ l) (second l)) (rest (rest l))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3bzlg840.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphkju0mra.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphkju0mra.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphkju0mra.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (first l) 0) true]\n\
    \    [(= (first l) (- 0 (first (rest l)))) true]\n    [else (pairs_sum_to_zero\
    \ (rest l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0))\
    \ #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n\
    \    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate (list\
    \ -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptr4v7087.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptr4v7087.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptr4v7087.rkt:35:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) false]\n        [(empty? (rest l)) false]\n        [(= (sum (first\
    \ l) (first (rest l))) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpieydwl5s.rkt:19:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpieydwl5s.rkt:19:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpea2qhymq.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpea2qhymq.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\
    \ [(empty? l) false]\n        [(empty? (rest l)) false]\n        [(= (sum (first\
    \ l) (first (rest l))) 0) true]\n        [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj49xiam1.rkt:19:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpj49xiam1.rkt:19:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxx3ri4r9.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxx3ri4r9.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxx3ri4r9.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdgkqg07r.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdgkqg07r.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdgkqg07r.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (abs (first l)) (abs\
    \ (second l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpshpg0qzo.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpshpg0qzo.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpshpg0qzo.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(= (sum (first l) (first (rest l))) 0) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp40b7ka7t.rkt:21:11: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp40b7ka7t.rkt:21:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfygi2t9t.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfygi2t9t.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfygi2t9t.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (abs (first l))\
    \ (abs (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8nt5ytt8.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8nt5ytt8.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8nt5ytt8.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (- (first l)) (rest\
    \ l)) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add1 (list-ref\
    \ l 0) (list-ref l 1))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:28:4\n\
    \nadd1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:29:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:30:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:31:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:33:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:34:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:35:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjvbxp5e.rkt:36:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9i4iwk8h.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp9i4iwk8h.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (sum (first l)\
    \ (first (rest l))) 0) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2pau6i3n.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp2pau6i3n.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(= (length l) 1) false]\n    [else\n     (or (pairs_sum_to_zero\
    \ (rest l))\n         (member (abs (first l)) (rest l)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3ygi3h8.rkt:30:4\n\
    actual:     '(1)\nexpected:   #f\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk3ygi3h8.rkt:32:4\nactual:\
    \     '(5 7)\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk3ygi3h8.rkt:34:4\nactual:     '(3\
    \ 2 30)\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk3ygi3h8.rkt:35:4\nactual:     '(3\
    \ 2 31)\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplyf_br14.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmplyf_br14.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pka5511.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5pka5511.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5pka5511.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyv99749a.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpyv99749a.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (sum (first l) (second\
    \ l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjfbl7trg.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpjfbl7trg.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(= (sum (first l) (first\
    \ (rest l))) 0) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8mvt3uay.rkt:20:9: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmp8mvt3uay.rkt:20:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(zero? (+ (car l) (car (cdr\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg7n0xh9r.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg7n0xh9r.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpg7n0xh9r.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(member (car l) (cdr l)) #t]\n    [else (pairs_sum_to_zero\
    \ (cdr l))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1 3 5 0))\
    \ #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n\
    \    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate (list\
    \ -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpivmh47ou.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpivmh47ou.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpivmh47ou.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpivmh47ou.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6n9in3t_.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6n9in3t_.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6n9in3t_.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (add1 (first l)\
    \ (first (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:28:4\n\
    \nadd1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:29:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:30:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:31:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:33:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:34:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:35:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl8vqsj0c.rkt:36:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(member (car l) (cdr l))\
    \ #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3mg57t23.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3mg57t23.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3mg57t23.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3mg57t23.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(= (abs (first l))\
    \ (abs (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4s2u_jx0.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4s2u_jx0.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4s2u_jx0.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdms4rwfk.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdms4rwfk.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdms4rwfk.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7dxhbqjm.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7dxhbqjm.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7dxhbqjm.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdu1laqw_.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpdu1laqw_.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(= (length l) 1) false]\n    [else\n     (or (pairs_sum_to_zero\
    \ (rest l))\n         (member (zero? (add1 (first l) (first (rest l)))) l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:29:4\n\
    \nadd1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:30:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:31:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:32:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:34:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:35:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:36:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdg34pef2.rkt:37:4\n\nadd1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(null? l) #f]\n    [(null? (cdr l)) #f]\n    [(or (member (- (car l) (car\
    \ (cdr l))) (cdr (cdr l)))\n         (member (- (car l) (car (cdr l))) (cdr (cdr\
    \ l)))) #t]\n    [else (pairs_sum_to_zero (cdr l))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ujkbc4d.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0ujkbc4d.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0ujkbc4d.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0ujkbc4d.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (+ (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ywstve1.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3ywstve1.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3ywstve1.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(zero? (sum (first\
    \ l) (first (rest l)))) true]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgy020os5.rkt:20:13: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpgy020os5.rkt:20:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (first (rest l))) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps32pcjsy.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (define\
    \ (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n\
    \      [(= (sum (first l) (first (rest l))) 0) #t]\n      [else (helper (rest\
    \ l))]))\n  (helper l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pairs_sum_to_zero))\n    (check-equal? (candidate (list 1\
    \ 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #f)\n    (check-equal?\
    \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 2 4 -5 3\
    \ 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal? (candidate\
    \ (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3 9 -1 3 2 31))\
    \ #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpskcojfa0.rkt:21:11: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpskcojfa0.rkt:21:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(member (sub1 (first l)\
    \ (second l)) (rest (rest l))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n\
    \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
    \ (list 1 3 -2 1)) #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n   \
    \ (check-equal? (candidate (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate\
    \ (list 1)) #f)\n    (check-equal? (candidate (list -3 9 -1 3 2 30)) #t)\n   \
    \ (check-equal? (candidate (list -3 9 -1 3 2 31)) #t)\n    (check-equal? (candidate\
    \ (list -3 9 -1 4 2 30)) #f)\n    (check-equal? (candidate (list -3 9 -1 4 2 31))\
    \ #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:28:4\n\
    \nsub1: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:29:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:30:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:31:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:33:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:34:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:35:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1iyetwke.rkt:36:4\n\nsub1:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; pairs_sum_to_zero takes a list of integers as an input.\n\
    ;; it returns True if there are two distinct elements in the list that\n;; sum\
    \ to zero, and False otherwise.\n;; >>> pairs_sum_to_zero([1, 3, 5, 0])\n;; False\n\
    ;; >>> pairs_sum_to_zero([1, 3, -2, 1])\n;; False\n;; >>> pairs_sum_to_zero([1,\
    \ 2, 3, 7])\n;; False\n;; >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n;; True\n\
    ;; >>> pairs_sum_to_zero([1])\n;; False\n(define (pairs_sum_to_zero l)\n  (cond\n\
    \    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(zero? (+ (first l) (first\
    \ (rest l)))) #t]\n    [else (pairs_sum_to_zero (rest l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pairs_sum_to_zero))\n    (check-equal?\
    \ (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate (list 1 3 -2 1))\
    \ #f)\n    (check-equal? (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate\
    \ (list 2 4 -5 3 5 7)) #t)\n    (check-equal? (candidate (list 1)) #f)\n    (check-equal?\
    \ (candidate (list -3 9 -1 3 2 30)) #t)\n    (check-equal? (candidate (list -3\
    \ 9 -1 3 2 31)) #t)\n    (check-equal? (candidate (list -3 9 -1 4 2 30)) #f)\n\
    \    (check-equal? (candidate (list -3 9 -1 4 2 31)) #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pgx4q97.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4pgx4q97.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4pgx4q97.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
