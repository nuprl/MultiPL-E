name: HumanEval_57_monotonic
language: racket
prompt: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
  \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
  \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
  \ l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
  \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
  \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n   \
  \ (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list\
  \ 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal?\
  \ (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9\
  \ 9)) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(or (and (< (first l) (second l)) (monotonic (rest l)))\n          \
    \   (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n        [else #f]))\n",
  "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic (rest\
    \ l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and (< (first l) (second l)) (monotonic\
    \ (rest l)))\n         (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else false]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(and (< (car l) (cadr l)) (monotonic (cdr l))) #t]\n    [(and (> (car l)\
    \ (cadr l)) (monotonic (cdr l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing l)]\n    [(< (first l) (second\
    \ l)) (monotonic-increasing l)]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(or (and (positive? (first l)) (positive?\
    \ (sub1 (first l))))\n         (and (negative? (first l)) (negative? (sub1 (first\
    \ l)))))\n     (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l)\
    \ #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(> (first l) (second l)) (monotonic-dec (rest l))]\n        [(< (first\
    \ l) (second l)) (monotonic-inc (rest l))]\n        [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (<= (first l) (second l)))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (>=\
    \ (first l) (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (not (member (first l) (rest l))))]\n    [(> (first l)\
    \ (second l))\n     (and (monotonic (rest l))\n          (not (member (first l)\
    \ (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (not (member (first l) (rest l))))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (not (member (first l) (rest l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (not\
    \ (member (first l) (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing l)]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ l)]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n       \
    \   (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n", "  (define (monotonic-helper l)\n    (cond\n      [(empty? l) #t]\n\
    \      [(empty? (rest l)) #t]\n      [(< (first l) (second l)) (monotonic-helper\
    \ (rest l))]\n      [(> (first l) (second l)) (monotonic-helper (rest l))]\n \
    \     [else #f]))\n  (monotonic-helper l))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second l))\
    \ (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n\
    \        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n         (and\
    \ (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n         \
    \         (< (second l) (third l))))]\n        [(> (first l) (second l))\n   \
    \      (and (monotonic (rest l))\n              (or (empty? (rest (rest l)))\n\
    \                  (> (second l) (third l))))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (define (monotonic-helper l increasing)\n    (cond\n \
    \     [(empty? l) true]\n      [(empty? (rest l)) true]\n      [(and increasing\
    \ (or (> (first l) (second l)) (= (first l) (second l))))\n       (monotonic-helper\
    \ (rest l) increasing)]\n      [(and (not increasing) (or (< (first l) (second\
    \ l)) (= (first l) (second l))))\n       (monotonic-helper (rest l) increasing)]\n\
    \      [else false]))\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l))\
    \ true]\n    [(> (first l) (second l)) (monotonic-helper (rest l) #f)]\n    [(<\
    \ (first l) (second l)) (monotonic-helper (rest l) #t)]\n    [else true]))\n",
  "  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else false]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (apply > (rest l)))]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (apply < (rest l)))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (and (monotonic (rest l)) (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l)) (and (monotonic (rest l)) (>= (first l)\
    \ (second l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing l)]\n   \
    \ [(< (first l) (second l)) (monotonic-increasing l)]\n    [else #f]))\n", " \
    \ (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (and (first l) (second l)))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (and (first l) (second l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-dec (rest l))]\n    [(< (first l) (second l)) (monotonic-inc\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n    \
    \          (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic (rest\
    \ l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n  \
    \  [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l)) (monotonic (rest l))]\n        [(> (first l)\
    \ (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l)) (not (member (first l) (rest l))))]\n  \
    \  [(> (first l) (second l))\n     (and (monotonic (rest l)) (not (member (first\
    \ l) (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else false]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) true]\n    [(empty?\
    \ (rest l)) true]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else false]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (not (member (first l) (rest\
    \ l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n    \
    \      (not (member (first l) (rest l))))]\n    [else #f]))\n", "  (cond\n   \
    \ [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (positive? (first l))\n              (positive? (sub1 (first l))))\n\
    \         (and (negative? (first l))\n              (negative? (sub1 (first l)))))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(or (= (first l) (first (rest l)))\n       \
    \  (< (first l) (first (rest l)))\n         (> (first l) (first (rest l))))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (< (second\
    \ l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (or (empty? (rest (rest l)))\n              (> (second l) (third\
    \ l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (or (empty? (rest (rest l)))\n              (< (second l) (third l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (or\
    \ (empty? (rest (rest l)))\n              (> (second l) (third l))))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n  \
    \  [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else true]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-dec (rest l))]\n   \
    \ [(< (first l) (second l)) (monotonic-inc (rest l))]\n    [else #f]))\n", " \
    \ (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l))\
    \ (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [else\
    \ #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car\
    \ l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l))\
    \ #t]\n        [(< (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n\
    \    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (not (member (first l) (rest\
    \ l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n    \
    \      (not (member (first l) (rest l))))]\n    [else #f]))\n", "  (cond\n   \
    \ [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (monotonic (rest l))]\n    [(> (first l) (second l))\n     (monotonic\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (every (lambda (x) (< (first l) x))\
    \ (rest l)))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (every (lambda (x) (> (first l) x)) (rest l)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n \
    \       [(> (car l) (cadr l)) (monotonic (cdr l))]\n        [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n        [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l)) (monotonic (rest l)))\n         (and (>\
    \ (first l) (second l)) (monotonic (rest l)))) #t]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l)\n     #t]\n    [(empty? (rest l))\n\
    \     #t]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (for/and ([x (in-list (rest l))])\n            (< (first l) x)))]\n  \
    \  [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (for/and\
    \ ([x (in-list (rest l))])\n            (> (first l) x)))]\n    [else\n     #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n\
    \        [(> (first l) (second l)) (monotonic (rest l))]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [else false]))\n", "  (cond\n   \
    \ [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (apply\
    \ < (rest l)))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (apply > (rest l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ l)]\n    [(< (first l) (second l)) (monotonic-increasing l)]\n    [else #f]))\n",
  "  (define (monotonic-helper l)\n    (cond\n      [(empty? l) #t]\n      [(empty?\
    \ (rest l)) #t]\n      [(> (first l) (second l)) (monotonic-helper (rest l))]\n\
    \      [(< (first l) (second l)) (monotonic-helper (rest l))]\n      [else #f]))\n\
    \  (monotonic-helper l))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (and (not (empty? (rest (rest l))))\n      \
    \         (or (< (second l) (third l))\n                   (= (second l) (third\
    \ l)))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n   \
    \       (and (not (empty? (rest (rest l))))\n               (or (> (second l)\
    \ (third l))\n                   (= (second l) (third l)))))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (apply < (rest\
    \ l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (apply > (rest l)))]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n   \
    \     [(> (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (monotonic (rest l))]\n    [(> (first l)\
    \ (second l))\n     (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l))\n\
    \         (and (monotonic (rest l))\n              (not (member (first l) (rest\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (not (member (first l) (rest l))))]\n        [else #f]))\n", " \
    \ (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l)\
    \ (second l))\n         (and (monotonic (rest l))\n              (not (member\
    \ (first l) (rest l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (not (member (first l) (rest l))))]\n        [else\
    \ #f]))\n", "  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(< (first l) (second l))\n         (and (monotonic (rest l))\n     \
    \         (or (empty? (rest (rest l)))\n                  (< (second l) (third\
    \ l))))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (or (empty? (rest (rest l)))\n                  (> (second l) (third\
    \ l))))]\n        [else #f]))\n", "  (cond [(empty? l) true]\n        [(empty?\
    \ (rest l)) true]\n        [(> (first l) (second l)) (monotonic (rest l))]\n \
    \       [(< (first l) (second l)) (monotonic (rest l))]\n        [else false]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (and (empty? (rest (rest l)))\
    \ #t))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n     \
    \     (and (empty? (rest (rest l))) #t))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n  \
    \      [(null? (cdr l)) #t]\n        [(< (car l) (cadr l))\n         (and (monotonic\
    \ (cdr l))\n              (not (member (car l) (cdr l))))]\n        [(> (car l)\
    \ (cadr l))\n         (and (monotonic (cdr l))\n              (not (member (car\
    \ l) (cdr l))))]\n        [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) true]\n        [(empty? (rest l)) true]\n        [(> (first l) (second l))\
    \ (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic (rest l))]\n\
    \        [else false]))\n", "  (cond [(empty? l) true]\n        [(empty? (rest\
    \ l)) true]\n        [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n        [else\
    \ false]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n   \
    \ [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n \
    \   [(empty? (rest l)) #t]\n    [(and (or (< (first l) (second l)) (> (first l)\
    \ (second l)))\n          (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n        [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty?\
    \ (rest l)) #t]\n        [(> (first l) (second l)) (monotonic-decreasing (rest\
    \ l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l))\
    \ #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(<\
    \ (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (< (second l) (third l))))]\n    [(> (first l) (second l))\n  \
    \   (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n      \
    \        (> (second l) (third l))))]\n    [else #f]))\n", "  (cond [(empty? l)\
    \ #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n  \
    \  [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\
    \ [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n        [(< (first l) (second l)) (monotonic (rest\
    \ l))]\n        [else false]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n\
    \        [(or (and (< (first l) (second l)) (monotonic (rest l)))\n          \
    \   (and (> (first l) (second l)) (monotonic (rest l)))) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (every < (rest l)))]\n    [(<\
    \ (first l) (second l))\n     (and (monotonic (rest l))\n          (every > (rest\
    \ l)))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-dec (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-inc (rest l))]\n    [else #f]))\n", "  (cond [(empty?\
    \ l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n      \
    \  [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (not\
    \ (member (first l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (not (member (first l) (rest l))))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(or (and (< (first l) (second l))\n              (monotonic (rest l)))\n\
    \         (and (> (first l) (second l))\n              (monotonic (rest l))))\n\
    \     #t]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n  \
    \  [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr l))\
    \ (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and\
    \ (<= (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n",
  "  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<= (first\
    \ l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n        [else #f]))\n", "  (cond [(empty? l)\
    \ true]\n        [(empty? (rest l)) true]\n        [(> (first l) (second l)) (monotonic-decreasing\
    \ (rest l))]\n        [(< (first l) (second l)) (monotonic-increasing (rest l))]\n\
    \        [else false]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest\
    \ l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(null?\
    \ l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(< (first l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first l) (second l))\
    \ (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr\
    \ l)) #t]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n   \
    \     [(empty? (rest l)) #t]\n        [(< (first l) (second l)) (monotonic (rest\
    \ l))]\n        [(> (first l) (second l)) (monotonic (rest l))]\n        [else\
    \ #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(<\
    \ (first l) (second l))\n     (monotonic (rest l))]\n    [(> (first l) (second\
    \ l))\n     (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n             \
    \ (< (second l) (third l))))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (or (empty? (rest (rest l)))\n              (> (second\
    \ l) (third l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty?\
    \ (rest l)) #t]\n    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n\
    \    [(< (first l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n",
  "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n\
    \    [(> (car l) (cadr l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic\
    \ (cdr l))]\n    [else #f]))\n", "  (cond [(empty? l) #t]\n        [(empty? (rest\
    \ l)) #t]\n        [(< (first l) (second l)) (monotonic (rest l))]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\
    \ (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic (rest l))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first\
    \ l) (second l)) (monotonic-increasing (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first l) (second l))\n\
    \     (and (monotonic (rest l))\n          (not (member (first l) (rest l))))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (not\
    \ (member (first l) (rest l))))]\n    [else #f]))\n", "  (cond\n    [(empty? l)\
    \ #t]\n    [(empty? (rest l)) #t]\n    [(and (<= (first l) (second l)) (monotonic\
    \ (rest l))) #t]\n    [(and (>= (first l) (second l)) (monotonic (rest l))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second\
    \ l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n    [(empty? l) #t]\n\
    \    [(empty? (rest l)) #t]\n    [(< (first l) (second l)) (monotonic (rest l))]\n\
    \    [(> (first l) (second l)) (monotonic (rest l))]\n    [else #f]))\n", "  (cond\n\
    \    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first l) (second\
    \ l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ (rest l))]\n    [else false]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
