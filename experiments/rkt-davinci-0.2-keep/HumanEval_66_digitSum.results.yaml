language: racket
name: HumanEval_66_digitSum
results:
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop1v5pz6.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s\
    \ 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3iqbwbhn.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3iqbwbhn.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3iqbwbhn.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3iqbwbhn.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3iqbwbhn.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3iqbwbhn.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3iqbwbhn.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3iqbwbhn.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj0z6ji0d.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpj0z6ji0d.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (char-upcase? (string-ref s 0))\n          (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))\n          (digitSum (substring s 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1n4jt1se.rkt:16:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp1n4jt1se.rkt:16:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeyoed1zh.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpeyoed1zh.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7tcbhg9c.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp7tcbhg9c.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgemb9z5b.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgemb9z5b.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgemb9z5b.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgemb9z5b.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgemb9z5b.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgemb9z5b.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgemb9z5b.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgemb9z5b.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let loop ((s s) (sum 0))\n    (cond\
    \ ((null? s) sum)\n          ((char-upper-case? (car s))\n           (loop (cdr\
    \ s) (+ sum (char->integer (car s)))))\n          (else (loop (cdr s) sum)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvksfn999.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwlp725uu.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwlp725uu.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkzvh7lbe.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpkzvh7lbe.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([s (string-upcase s)])\n    (for/sum\
    \ ([c (in-string s)])\n      (if (char-upper-case? c)\n          (char->integer\
    \ c)\n          0))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:26:4

    actual:     262

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:27:4

    actual:     333

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:28:4

    actual:     441

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:29:4

    actual:     523

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:30:4

    actual:     478

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:31:4

    actual:     707

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4o2j6dgl.rkt:32:4

    actual:     1186

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s\
    \ 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfj2xf2iq.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfj2xf2iq.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfj2xf2iq.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfj2xf2iq.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfj2xf2iq.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfj2xf2iq.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfj2xf2iq.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfj2xf2iq.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprk90ex77.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmprk90ex77.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (and (>= c 65) (<= c 90))\n                      (- c 64)\n  \
    \                    0))\n                (string->list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpepay1vng.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpetlfst5t.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpetlfst5t.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp05904u9n.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp05904u9n.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4pztwd8a.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyhi1t4p8.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp56xy6zl6.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp56xy6zl6.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe1vtl800.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpe1vtl800.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq80e3ee.rkt:25:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoq80e3ee.rkt:26:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq80e3ee.rkt:27:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq80e3ee.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoq80e3ee.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq80e3ee.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoq80e3ee.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoq80e3ee.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm4epz27r.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpm4epz27r.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5dlswo13.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5dlswo13.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6e9g3neb.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (char-upper-case? c)\n                      (char->integer c)\n\
    \                      0))\n                s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhredy_8.rkt:32:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa1b_0xxn.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpa1b_0xxn.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq6n48jut.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq6n48jut.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwmzl_vv7.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwmzl_vv7.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9p_o144g.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp9p_o144g.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr3yb40hh.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpr3yb40hh.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (isUpper? c)\n    (and (&gt;=\
    \ c #\\A) (&lt;= c #\\Z)))\n  (define (sum s)\n    (if (null? s)\n        0\n\
    \        (+ (if (isUpper? (car s))\n               (char-&gt;integer (car s))\n\
    \               0)\n           (sum (cdr s)))))\n  (sum s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplyv457r2.rkt:15:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 16\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy_c8b3bp.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpy_c8b3bp.rkt:16:6\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (if (char-upper-case? (string-ref s 0))\n          (+ (char->integer (string-ref\
    \ s 0)) (digitSum (substring s 1)))\n          (digitSum (substring s 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n\
    \    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\"\
    ) 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb3vgh1bu.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpb3vgh1bu.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaw9ntrh_.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpaw9ntrh_.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (isUpper? c)\n    (and (char?\
    \ c)\n         (char-upper-case? c)))\n  (apply + (map char->integer (filter isUpper?\
    \ s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:24:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:25:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:26:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:27:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:28:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:29:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd8vs70t.rkt:30:4\n\
    \nfilter: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphd8vs70t.rkt:31:4\n\nfilter: contract violation\n  expected:\
    \ list?\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (and (>= c #\\A) (<= c #\\Z))\n                      (- c #\\\
    A)\n                      0))\n                s)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rui2lva.rkt:32:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps7tdpsyp.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmps7tdpsyp.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x)\n       \
    \           (if (and (>= x 65) (<= x 90))\n                      (- x 64)\n  \
    \                    0))\n                (string->list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx21iwne_.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm4wnc3it.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpm4wnc3it.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphbwatv2a.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphbwatv2a.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmo0p6d3c.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpmo0p6d3c.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprwpl9z4l.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmprwpl9z4l.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptplrzicy.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmptplrzicy.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwwj70wjc.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwwj70wjc.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphdxq2a2j.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphdxq2a2j.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsv9h5qdx.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpsv9h5qdx.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprds6j71v.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmprds6j71v.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfotl45qp.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf5dzqgo0.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpf5dzqgo0.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr7mv7nk9.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpr7mv7nk9.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (char-upper-case? c)\n                      (char->integer c)\n\
    \                      0))\n                s)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:31:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpesa48sld.rkt:32:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (sum-upper-ascii s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (sum-upper-ascii (rest s)))]\n      [else (sum-upper-ascii (rest s))]))\n\
    \  (sum-upper-ascii (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpot9a9r_m.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpot9a9r_m.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (sum s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(char-upper-case? (car s)) (+ (char->integer (car s)) (sum (cdr\
    \ s)))]\n      [else (sum (cdr s))]))\n  (sum (string->list s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp2rqeb3y.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpp2rqeb3y.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppddklr5o.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (let ([s (string-upcase s)])\n    (apply\
    \ + (map char->integer (filter char-alphabetic? (string->list s))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:23:4

    actual:     262

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:24:4

    actual:     333

    expected:   67

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:25:4

    actual:     441

    expected:   69

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:26:4

    actual:     523

    expected:   131

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:27:4

    actual:     478

    expected:   153

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:28:4

    actual:     707

    expected:   151

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo15742ro.rkt:29:4

    actual:     1186

    expected:   327

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n```\n\n### [Is it a palindrome?](https://www.codewars.com/kata/57a1fd2ce298a731b20006a4)\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptnof5s6c.rkt:17:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpluuwedz3.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpluuwedz3.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpulm87x5k.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpulm87x5k.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4gt38y9r.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp4gt38y9r.rkt:16:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpip165ezi.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpip165ezi.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdh5lmauc.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsnm_ple5.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpsnm_ple5.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkf_2lmzf.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpkf_2lmzf.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfe50pk6y.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpfe50pk6y.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5h2cj45_.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5h2cj45_.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxam5qv0p.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpxam5qv0p.rkt:16:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjhcwui_g.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpjhcwui_g.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzrrg6tku.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpzrrg6tku.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2bztviop.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp2bztviop.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwqq0agvr.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwqq0agvr.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpq5zvchdh.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpq5zvchdh.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcyg45zgb.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpcyg45zgb.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3k3wujnq.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp3k3wujnq.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_c125khl.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp_c125khl.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiuyswm8d.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpiuyswm8d.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpym9vxpyd.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpym9vxpyd.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lbtwit3.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (upper? c)\n    (and (char?\
    \ c)\n         (char-upper-case? c)))\n  (define (sum-upper-chars s)\n    (cond\
    \ ((null? s) 0)\n          ((upper? (car s)) (+ (char->integer (car s)) (sum-upper-chars\
    \ (cdr s))))\n          (else (sum-upper-chars (cdr s)))))\n  (sum-upper-chars\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy_rn44vo.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09p686g_.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp09p686g_.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (if (string=? s \"\")\n      0\n  \
    \    (let ([c (string-ref s 0)])\n        (+ (if (char-upper-case? c)\n      \
    \         (char->integer c)\n               0)\n           (digitSum (substring\
    \ s 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal?\
    \ (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n\
    \    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpckwyrygg.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpckwyrygg.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-&gt;int c)\n    (char-&gt;integer\
    \ c))\n  (define (sum-upper-chars s)\n    (cond\n      [(empty? s) 0]\n      [(char-upper-case?\
    \ (first s)) (+ (char-&gt;int (first s)) (sum-upper-chars (rest s)))]\n      [else\
    \ (sum-upper-chars (rest s))]))\n  (sum-upper-chars s))\n</code>\nI'm not sure\
    \ if I'm using the right approach here. I'm not sure if I should be using <code>char-&gt;integer</code>\
    \ or <code>char-&gt;ascii</code> or something else.\nI'm also not sure if I should\
    \ be using <code>char-upper-case?</code> or <code>char-lower-case?</code> or something\
    \ else.\nI'm also not sure if I should be using <code>char-&gt;int</code> or <code>char-&gt;ascii</code>\
    \ or something else.\nI'm also not sure if I should be using <code>char-&gt;integer</code>\
    \ or <code>char-&gt;ascii</code> or something else.\nI'm also not sure if I should\
    \ be using <code>char-&gt;integer</code> or <code>char-&gt;ascii</code> or something\
    \ else.\nI'm also not sure if I should be using <code>char-&gt;integer</code>\
    \ or <code>char-&gt;ascii</code> or something else.\nI'm also not sure if I should\
    \ be using <code>char-&gt;integer</code> or <code>char-&gt;ascii</code> or something\
    \ else.\nI'm also not sure if I should be using <code>char-&gt;integer</code>\
    \ or <code>char-&gt;ascii</code> or something else.\nI'm also not sure if I should\
    \ be using <code>char-&gt;integer</code> or <code>char-&gt;ascii</code> or something\
    \ else.\nI'm also not\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptgnuncnn.rkt:21:21: read-syntax: missing `]` to close `[` on line\
    \ 19, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 21\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl5ski34v.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpl5ski34v.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcm1uvxbm.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpcm1uvxbm.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpure78u_8.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpure78u_8.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyjoey38h.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpyjoey38h.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1d_sd_ly.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp1d_sd_ly.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (sum (map char->integer (filter char-upcase?\
    \ (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi5bilo_4.rkt:14:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpi5bilo_4.rkt:14:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upcase?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5p7jd632.rkt:16:6: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5p7jd632.rkt:16:6\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphu9aqd4m.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphu9aqd4m.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp71wurf7g.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp71wurf7g.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8biqqf_r.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp8biqqf_r.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnmd0ex40.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpnmd0ex40.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe6h3vx4s.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpe6h3vx4s.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpirn_fe6q.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpirn_fe6q.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp3bj_48e.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9tjqd0n5.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp9tjqd0n5.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxynip_59.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpxynip_59.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzsfx55vd.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpzsfx55vd.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (sum-upper-chars s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n\
    \  (sum-upper-chars s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3uud78cz.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3uud78cz.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3uud78cz.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3uud78cz.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3uud78cz.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3uud78cz.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3uud78cz.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3uud78cz.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c)\n       \
    \           (if (and (>= c 65) (<= c 90))\n                      (- c 64)\n  \
    \                    0))\n                (string->list s))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal?\
    \ (candidate \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n  \
    \  (check-equal? (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"\
    aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal?\
    \ (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:29:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:30:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:31:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphv39tlxs.rkt:32:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (sum-upper-chars s)\n    (cond\n\
    \      [(empty? s) 0]\n      [(char-upper-case? (first s)) (+ (char->integer (first\
    \ s)) (sum-upper-chars (rest s)))]\n      [else (sum-upper-chars (rest s))]))\n\
    \  (sum-upper-chars s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph3glcal4.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph3glcal4.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph3glcal4.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph3glcal4.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph3glcal4.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph3glcal4.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph3glcal4.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph3glcal4.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjmr6svio.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpjmr6svio.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9gpdtc3q.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp9gpdtc3q.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv_gsn0v2.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpv_gsn0v2.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwjkv_yvi.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwjkv_yvi.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc1pa0a_q.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpc1pa0a_q.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (digitSum (substring s 1)) (char->integer (string-ref s\
    \ 0)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpweq8vjwz.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpweq8vjwz.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpweq8vjwz.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpweq8vjwz.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpweq8vjwz.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpweq8vjwz.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpweq8vjwz.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpweq8vjwz.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe_fm7jhe.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp72m8p004.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp72m8p004.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpig5f3n84.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpig5f3n84.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwqhsrrm5.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpwqhsrrm5.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppqk0v6b4.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmppqk0v6b4.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3aby4ept.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphe356iv3.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmphe356iv3.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (define (char-&gt;int c)\n    (char-&gt;integer\
    \ c))\n  (define (is-upper? c)\n    (and (&gt;= c #\\A) (&lt;= c #\\Z)))\n  (define\
    \ (sum-upper-chars s)\n    (if (empty? s)\n        0\n        (+ (if (is-upper?\
    \ (first s))\n               (char-&gt;int (first s))\n               0)\n   \
    \        (sum-upper-chars (rest s)))))\n  (sum-upper-chars s))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate digitSum))\n \
    \   (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"abAB\")\
    \ 131)\n    (check-equal? (candidate \"abcCd\") 67)\n    (check-equal? (candidate\
    \ \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\") 131)\n    (check-equal?\
    \ (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate \" How are yOu?\"\
    ) 151)\n    (check-equal? (candidate \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpptvqujop.rkt:17:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 18\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuowmqr5r.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpuowmqr5r.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsusvo66v.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpsusvo66v.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqk9r6dv1.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpqk9r6dv1.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upcase?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw1uq2nwn.rkt:14:33: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpw1uq2nwn.rkt:14:33\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx_0j_wf0.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx_0j_wf0.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx_0j_wf0.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx_0j_wf0.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx_0j_wf0.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx_0j_wf0.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx_0j_wf0.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx_0j_wf0.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpll37r__z.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpll37r__z.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuqh9hj7m.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpuqh9hj7m.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1l8wfa_o.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp1l8wfa_o.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp64v1m2uo.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp64v1m2uo.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzzeedlcs.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpzzeedlcs.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1zr89s0o.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp1zr89s0o.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (\u03BB (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7foil182.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp7foil182.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv8_vyvez.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpv8_vyvez.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc_rvvykw.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpc_rvvykw.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp85rkn5gy.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp85rkn5gy.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpany3c_c6.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpany3c_c6.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpef09xwnc.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpef09xwnc.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (char-upper-case?\
    \ x) (char->integer x) 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upper-case? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf58us0qq.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpf58us0qq.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4961wtkr.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp4961wtkr.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (first s)) (+ (char->integer (first s)) (digitSum (rest s)))]\n    [else (digitSum\
    \ (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"abAB\") 131)\n    (check-equal? (candidate \"abcCd\") 67)\n   \
    \ (check-equal? (candidate \"helloE\") 69)\n    (check-equal? (candidate \"woArBld\"\
    ) 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n    (check-equal? (candidate\
    \ \" How are yOu?\") 151)\n    (check-equal? (candidate \"You arE Very Smart\"\
    ) 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw3i6pn7.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaw3i6pn7.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abAB\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw3i6pn7.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcCd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaw3i6pn7.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"helloE\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw3i6pn7.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"woArBld\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaw3i6pn7.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aAaaaXa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw3i6pn7.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \" How\
    \ are yOu?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaw3i6pn7.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"You arE Very Smart\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (c) (if (char-upper-case?\
    \ c) (char->integer c) 0)) s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:21:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:22:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abAB\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:23:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"abcCd\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:24:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"helloE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:25:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"woArBld\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:26:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"aAaaaXa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \" How are yOu?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyw15nrz8.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"You arE Very Smart\"\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map (lambda (x) (if (and\
    \ (>= x 65) (<= x 90)) x 0)) (string->list s))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:22:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:23:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:24:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\h\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:25:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\w\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:26:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\a\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:27:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\space\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz6q52jr0.rkt:28:4\n\
    \n>=: contract violation\n  expected: real?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0))\n     (+ (char->integer (string-ref s 0)) (digitSum (substring\
    \ s 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3omi310v.rkt:25:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3omi310v.rkt:26:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3omi310v.rkt:27:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3omi310v.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3omi310v.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3omi310v.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3omi310v.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3omi310v.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfp79lb5m.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpfp79lb5m.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqn39tu04.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpqn39tu04.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp50tadvvg.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp50tadvvg.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplhho6qgi.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplhho6qgi.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5lmd7riu.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp5lmd7riu.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0mruzx6w.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp0mruzx6w.rkt:14:38\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (apply + (map char->integer (filter\
    \ char-upcase? (string->list s)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate \"\") 0)\n\
    \    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate \"\
    abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv_rqnsil.rkt:14:38: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpv_rqnsil.rkt:14:38\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Task\n;; Write a function that takes a string as input\
    \ and returns the sum of the upper characters only'\n;; ASCII codes.\n;; Examples:\n\
    ;; digitSum(\"\") => 0\n;; digitSum(\"abAB\") => 131\n;; digitSum(\"abcCd\") =>\
    \ 67\n;; digitSum(\"helloE\") => 69\n;; digitSum(\"woArBld\") => 131\n;; digitSum(\"\
    aAaaaXa\") => 153\n(define (digitSum s)\n  (cond\n    [(empty? s) 0]\n    [(char-upper-case?\
    \ (string-ref s 0)) (+ (char->integer (string-ref s 0)) (digitSum (substring s\
    \ 1)))]\n    [else (digitSum (substring s 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate digitSum))\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"abAB\") 131)\n    (check-equal? (candidate\
    \ \"abcCd\") 67)\n    (check-equal? (candidate \"helloE\") 69)\n    (check-equal?\
    \ (candidate \"woArBld\") 131)\n    (check-equal? (candidate \"aAaaaXa\") 153)\n\
    \    (check-equal? (candidate \" How are yOu?\") 151)\n    (check-equal? (candidate\
    \ \"You arE Very Smart\") 327)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqf3x0lm.rkt:24:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsqf3x0lm.rkt:25:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqf3x0lm.rkt:26:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqf3x0lm.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsqf3x0lm.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqf3x0lm.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsqf3x0lm.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsqf3x0lm.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n"
  stdout: ''
