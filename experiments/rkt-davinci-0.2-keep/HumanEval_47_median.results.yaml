name: HumanEval_47_median
language: racket
results:
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph52zwui6.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph52zwui6.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph52zwui6.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph52zwui6.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dj5vko6.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5dj5vko6.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5dj5vko6.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5dj5vko6.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph7gnnmwd.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph7gnnmwd.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph7gnnmwd.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph7gnnmwd.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-l l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) (first l)]\n    \
    \      [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else\
    \ (median-helper (rest l))]))\n  (median-helper (sorted-l l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpinfxgqs6.rkt:23:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpinfxgqs6.rkt:24:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpinfxgqs6.rkt:26:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpinfxgqs6.rkt:27:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdybl8di.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmdybl8di.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmdybl8di.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmdybl8di.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l n)\n    (cond\n      [(= n 0) (car l)]\n\
    \      [(= n 1) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 2) (car (cdr l))]\n \
    \     [else\n       (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptrovzfpy.rkt:23:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptrovzfpy.rkt:24:4\nactual:     20\n\
    expected:   8.0\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmptrovzfpy.rkt:25:4\n\ncadr: contract violation\n\
    \  expected: (cons/c any/c pair?)\n  given: '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptrovzfpy.rkt:26:4\nactual:\
    \     5\nexpected:   5.5\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv4n7q0ro.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4n7q0ro.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpv4n7q0ro.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4n7q0ro.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpv4n7q0ro.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l n)\n    (cond\n      [(= n 1) (car l)]\n\
    \      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 3) (car l)]\n      [else\
    \ (median-helper (cdr l) (- n 1))]))\n  (median-helper l (length l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqk3xnsw0.rkt:22:4\n\
    actual:     2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqk3xnsw0.rkt:23:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqk3xnsw0.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqk3xnsw0.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7vu7mqg.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy7vu7mqg.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy7vu7mqg.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy7vu7mqg.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8835khn1.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8835khn1.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8835khn1.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8835khn1.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpidii7l4x.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpidii7l4x.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpidii7l4x.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpidii7l4x.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfocp_j56.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfocp_j56.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfocp_j56.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfocp_j56.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3n1n38kt.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3n1n38kt.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3n1n38kt.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3n1n38kt.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp3n1n38kt.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfg_xtwi8.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfg_xtwi8.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfg_xtwi8.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-list l)\n    (sort l <))\n  (define (middle l)\n\
    \    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n   \
    \           (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle (sorted-list l)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5qyz7b5.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph5qyz7b5.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph5qyz7b5.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph5qyz7b5.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmph5qyz7b5.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptsoodghy.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptsoodghy.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptsoodghy.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptsoodghy.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf4_e4qgz.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf4_e4qgz.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf4_e4qgz.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf4_e4qgz.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (if (null? l)\n        '()\n      \
    \  (insert (car l) (sort-list (cdr l)))))\n  (define (insert x l)\n    (if (null?\
    \ l)\n        (list x)\n        (if (<= x (car l))\n            (cons x l)\n \
    \           (cons (car l) (insert x (cdr l))))))\n  (define (median-helper l)\n\
    \    (if (null? l)\n        0\n        (if (null? (cdr l))\n            (car l)\n\
    \            (/ (+ (car l) (car (cdr l))) 2))))\n  (median-helper (sort-list l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8xpqdfmy.rkt:32:4\n\
    actual:     3/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8xpqdfmy.rkt:33:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8xpqdfmy.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8xpqdfmy.rkt:36:4\nactual:     3/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (merge-sort l)\n    (if (null? l)\n        '()\n     \
    \   (let* ([half-len (quotient (length l) 2)]\n               [left (merge-sort\
    \ (take l half-len))]\n               [right (merge-sort (drop l half-len))])\n\
    \          (merge left right))))\n  (let* ([sorted (merge-sort l)]\n         [len\
    \ (length sorted)])\n    (if (odd? len)\n        (list-ref sorted (quotient len\
    \ 2))\n        (/ (+ (list-ref sorted (quotient len 2))\n              (list-ref\
    \ sorted (- (quotient len 2) 1)))\n           2.0))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqfpt29ja.rkt:15:11: merge: unbound identifier\n  in: merge\n  location...:\n\
    \   /tmp/tmpqfpt29ja.rkt:15:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp28ljt_gd.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp28ljt_gd.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp28ljt_gd.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp28ljt_gd.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyv5m0qp9.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyv5m0qp9.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyv5m0qp9.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ossx7n_.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ossx7n_.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4ossx7n_.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4ossx7n_.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaeec4f18.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpaeec4f18.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpaeec4f18.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpaeec4f18.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85xzo2cq.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp85xzo2cq.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp85xzo2cq.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp85xzo2cq.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       (first l)\n            (middle (rest l)))))\n  (define (average l)\n \
    \   (/ (apply + l) (length l)))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n\
    \  (define (even? n)\n    (not (odd? n)))\n  (define (odd-length? l)\n    (odd?\
    \ (length l)))\n  (define (even-length? l)\n    (even? (length l)))\n  (cond\n\
    \    [(empty? l) empty]\n    [(odd-length? l) (middle (sort l))]\n    [(even-length?\
    \ l) (average (list (middle l) (middle (rest l))))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpemwj6lcv.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (cond [(empty?\
    \ l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest\
    \ l))) (average (first l) (first (rest l)))]\n        [else (middle (sort l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa51_4m_i.rkt:32:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa51_4m_i.rkt:33:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa51_4m_i.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa51_4m_i.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert n l)\n    (cond [(empty?\
    \ l) (list n)]\n          [(< n (first l)) (cons n l)]\n          [else (cons\
    \ (first l) (insert n (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (first-and-last l)\n    (cond [(empty? l) empty]\n \
    \         [(empty? (rest l)) (list (first l) (first l))]\n          [else (cons\
    \ (first l) (first-and-last (rest (rest l))))]))\n  (define (average l)\n    (cond\
    \ [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n          [else\
    \ (/ (+ (first l) (first (rest l))) 2)]))\n  (cond [(empty? l) empty]\n      \
    \  [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest l))) (first l)]\n\
    \        [else (average (first-and-last (sort l)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmizfmab4.rkt:38:4\n\
    actual:     2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmizfmab4.rkt:39:4\nactual:     -2\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmizfmab4.rkt:41:4\nactual:     6\nexpected:\
    \   5.5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmizfmab4.rkt:42:4\nactual:     2\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj_wcnahd.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj_wcnahd.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj_wcnahd.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj_wcnahd.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (define (insert-in-order x l)\n         (cond\n          \
    \ [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n           [else\
    \ (cons (first l) (insert-in-order x (rest l)))])\n         )\n       (insert-in-order\
    \ (first l) (sort-list (rest l)))]))\n  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbwhv9v5.rkt:33:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfbwhv9v5.rkt:34:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfbwhv9v5.rkt:36:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfbwhv9v5.rkt:37:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-iter l)\n    (cond [(empty? l) 0]\n          [(empty?\
    \ (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first l) (second\
    \ l)) 2)]\n          [else (median-iter (rest l))]))\n  (median-iter (sort l <)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslemx7r9.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpslemx7r9.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpslemx7r9.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpslemx7r9.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf589qql2.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf589qql2.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf589qql2.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf589qql2.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdpwf7m2p.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdpwf7m2p.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdpwf7m2p.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdpwf7m2p.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp83jn_l_u.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp83jn_l_u.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp83jn_l_u.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp83jn_l_u.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi37hv0wy.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi37hv0wy.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi37hv0wy.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi37hv0wy.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       (first l)\n            (middle (rest l)))))\n  (define (middle-two l)\n\
    \    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n          \
    \  empty\n            (if (empty? (rest (rest l)))\n                (first l)\n\
    \                (if (empty? (rest (rest (rest l))))\n                    (list\
    \ (first l) (first (rest l)))\n                    (middle-two (rest (rest l))))))))\n\
    \  (define (average l)\n    (if (empty? l)\n        empty\n        (/ (apply +\
    \ l) (length l))))\n  (define sorted (sort l))\n  (if (empty? sorted)\n      empty\n\
    \      (if (empty? (rest sorted))\n          (first sorted)\n          (if (empty?\
    \ (rest (rest sorted)))\n              (average (middle-two sorted))\n       \
    \       (middle sorted)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu4yhmegm.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (define (insert x l)\n         (cond\n           [(empty?\
    \ l) (list x)]\n           [(< x (first l)) (cons x l)]\n           [else (cons\
    \ (first l) (insert x (rest l)))]))\n       (insert (first l) (sort-list (rest\
    \ l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort-list l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n \
    \   (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn15ayj7m.rkt:32:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn15ayj7m.rkt:33:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn15ayj7m.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn15ayj7m.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (let ([mid (quotient (length l) 2)])\n        \
    \ (median-helper (sort l <)))]))\n  (median-helper l))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbibsneh3.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbibsneh3.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbibsneh3.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbibsneh3.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define (insert x l)\n         (cond\n           [(empty? l) (list x)]\n\
    \           [(< x (first l)) (cons x l)]\n           [else (cons (first l) (insert\
    \ x (rest l)))]))\n       (insert (first l) (sort (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl9s0nu16.rkt:32:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl9s0nu16.rkt:33:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpl9s0nu16.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpl9s0nu16.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc49cberp.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc49cberp.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc49cberp.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc49cberp.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_7s56hw.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb_7s56hw.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb_7s56hw.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb_7s56hw.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n          [else\n           (let* ([mid (quotient (length l)\
    \ 2)]\n                  [left (take l mid)]\n                  [right (drop l\
    \ mid)])\n             (if (= (first left) (first right))\n                 (first\
    \ left)\n                 (median-helper (append left (rest right)))))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zllu4_2.rkt:28:4\n\
    actual:     495\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zllu4_2.rkt:30:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2zllu4_2.rkt:31:4\nactual:     5\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfah8ngcb.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfah8ngcb.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfah8ngcb.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfah8ngcb.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6triy_m.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm6triy_m.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm6triy_m.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm6triy_m.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (if (= (length l) 1)\n           \
    \ (car l)\n            (if (= (length l) 2)\n                (/ (+ (car l) (cadr\
    \ l)) 2)\n                (if (= (modulo (length l) 2) 0)\n                  \
    \  (/ (+ (list-ref l (/ (length l) 2)) (list-ref l (- (/ (length l) 2) 1))) 2)\n\
    \                    (list-ref l (/ (length l) 2)))))))\n  (median-helper (sort-list\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7vxmf4xe.rkt:28:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vxmf4xe.rkt:29:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7vxmf4xe.rkt:31:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp7vxmf4xe.rkt:32:4\n\nlist-ref: index 7/2\
    \ is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsui_9jf3.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsui_9jf3.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsui_9jf3.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppwdsyx_z.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxdk181rz.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxdk181rz.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxdk181rz.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxdk181rz.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmdebw4_y.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdebw4_y.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmdebw4_y.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmdebw4_y.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmdebw4_y.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyrkkratj.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyrkkratj.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyrkkratj.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyrkkratj.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp76bhqq1x.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp76bhqq1x.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp76bhqq1x.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp76bhqq1x.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqwz948nd.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqwz948nd.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqwz948nd.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqwz948nd.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        (error \"\
    median: empty list\")\n        (if (null? (cdr l))\n            (car l)\n    \
    \        (if (null? (cddr l))\n                (/ (+ (car l) (cadr l)) 2)\n  \
    \              (median-helper (cdr l))))))\n  (median-helper (sort l <)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjvd7h95x.rkt:24:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjvd7h95x.rkt:25:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjvd7h95x.rkt:27:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjvd7h95x.rkt:28:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyxwpsag.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfyxwpsag.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfyxwpsag.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfyxwpsag.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdy6yil5.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdy6yil5.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzdy6yil5.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy00g8uxp.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy00g8uxp.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy00g8uxp.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy00g8uxp.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8b0n4b1n.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8b0n4b1n.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8b0n4b1n.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8b0n4b1n.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcsele69o.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcsele69o.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcsele69o.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsy_akgib.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsy_akgib.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsy_akgib.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsy_akgib.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-l l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(= (length l) 1) (first l)]\n  \
    \    [(= (length l) 2) (/ (+ (first l) (second l)) 2)]\n      [else\n       (define\
    \ (median-helper-helper l)\n         (cond\n           [(empty? l) 0]\n      \
    \     [(= (length l) 1) (first l)]\n           [(= (length l) 2) (/ (+ (first\
    \ l) (second l)) 2)]\n           [else\n            (define (median-helper-helper-helper\
    \ l)\n              (cond\n                [(empty? l) 0]\n                [(=\
    \ (length l) 1) (first l)]\n                [(= (length l) 2) (/ (+ (first l)\
    \ (second l)) 2)]\n                [else\n                 (median-helper-helper-helper\
    \ (rest (rest l)))]))\n            (median-helper-helper-helper (rest (rest l)))]))\n\
    \       (median-helper-helper (rest (rest l)))]))\n  (median-helper (sorted-l\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwt7y6pyk.rkt:39:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwt7y6pyk.rkt:40:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwt7y6pyk.rkt:42:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwt7y6pyk.rkt:43:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfyqdbq66.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfyqdbq66.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfyqdbq66.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfyqdbq66.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-list l)\n    (sort l <))\n  (define (middle l)\n\
    \    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n   \
    \           (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle (sorted-list l)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp18jkzh66.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp18jkzh66.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp18jkzh66.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp18jkzh66.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp18jkzh66.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond [(empty? l) empty]\n        \
    \  [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond [(empty? l) (list x)]\n          [(< x (first l)) (cons x l)]\n   \
    \       [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n\
    \    (if (empty? (rest l))\n        (first l)\n        (middle (rest l))))\n \
    \ (define (middle-two l)\n    (if (empty? (rest (rest l)))\n        (first l)\n\
    \        (middle-two (rest (rest l)))))\n  (define (even? l)\n    (empty? (rest\
    \ (rest l))))\n  (define (odd? l)\n    (not (even? l)))\n  (if (even? l)\n   \
    \   (/ (+ (middle-two (sort-list l)) (middle (sort-list l))) 2)\n      (middle\
    \ (sort-list l))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n \
    \   (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio9te_xc.rkt:37:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpio9te_xc.rkt:38:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpio9te_xc.rkt:39:4\n\nrest: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio9te_xc.rkt:40:4\n\
    actual:     11/2\nexpected:   5.5\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpio9te_xc.rkt:41:4\nactual:\
    \     9\nexpected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkvn814om.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkvn814om.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkvn814om.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkvn814om.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkvn814om.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcffg4va7.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp059luqpa.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp059luqpa.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp059luqpa.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp059luqpa.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppumep757.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppumep757.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppumep757.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppumep757.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-list l)\n    (sort l <))\n  (define (middle l)\n\
    \    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n   \
    \           (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle (sorted-list l)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2h5_mxbq.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2h5_mxbq.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2h5_mxbq.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2h5_mxbq.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2h5_mxbq.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp455hhsd2.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp455hhsd2.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp455hhsd2.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu249wwwm.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu249wwwm.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu249wwwm.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu249wwwm.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltvsk0w9.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpltvsk0w9.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpltvsk0w9.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpltvsk0w9.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ghpumc2.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8ghpumc2.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8ghpumc2.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8ghpumc2.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (let ([mid (quotient (length l) 2)])\n        \
    \ (median-helper (list (list-ref l mid) (list-ref l (- mid 1)))))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwkg_5l5a.rkt:24:4\n\
    actual:     5/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwkg_5l5a.rkt:25:4\nactual:     8\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwkg_5l5a.rkt:27:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwkg_5l5a.rkt:28:4\nactual:     5\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5c6mpfgy.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5c6mpfgy.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5c6mpfgy.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5c6mpfgy.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) (error \"Empty\
    \ list\")]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe7nlrykb.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe7nlrykb.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe7nlrykb.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe7nlrykb.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0d1kprea.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0d1kprea.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0d1kprea.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0d1kprea.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56l8rxyh.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp56l8rxyh.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp56l8rxyh.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp56l8rxyh.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcq87gmry.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcq87gmry.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcq87gmry.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcq87gmry.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeoh6k2cz.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeoh6k2cz.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeoh6k2cz.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (sort (filter (lambda (x)\
    \ (< x pivot)) (rest l))))\n       (define right (sort (filter (lambda (x) (>=\
    \ x pivot)) (rest l))))\n       (append left (cons pivot right))]])\n  (define\
    \ (median-helper l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest\
    \ l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest\
    \ l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjbk59mfj.rkt:16:40: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzr3re0dq.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzr3re0dq.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzr3re0dq.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzr3re0dq.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy19v59ha.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy19v59ha.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy19v59ha.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy19v59ha.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeo9b_f75.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeo9b_f75.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeo9b_f75.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbb8bb7zr.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbb8bb7zr.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbb8bb7zr.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbb8bb7zr.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt4j27ltr.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt4j27ltr.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpt4j27ltr.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpt4j27ltr.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlf9eb7t.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdlf9eb7t.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdlf9eb7t.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdlf9eb7t.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"median: empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cl1ozjt.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9cl1ozjt.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9cl1ozjt.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9cl1ozjt.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-iter l acc)\n    (if (null? l)\n        acc\n\
    \        (median-iter (cdr l) (cons (car l) acc))))\n  (define (median-helper\
    \ l)\n    (if (null? l)\n        0\n        (if (= (length l) 1)\n           \
    \ (car l)\n            (/ (+ (car l) (car (cdr l))) 2))))\n  (median-helper (sort\
    \ (median-iter l '()) <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5))\
    \ 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi9h6ky75.rkt:26:4\n\
    actual:     3/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi9h6ky75.rkt:27:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi9h6ky75.rkt:29:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi9h6ky75.rkt:30:4\nactual:     3/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1gexebag.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1gexebag.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1gexebag.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1gexebag.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond [(empty? l) empty]\n          [else\
    \ (insert (first l) (sort (rest l)))]))\n  (define (insert x l)\n    (cond [(empty?\
    \ l) (list x)]\n          [(< x (first l)) (cons x l)]\n          [else (cons\
    \ (first l) (insert x (rest l)))]))\n  (define (middle l)\n    (cond [(empty?\
    \ l) empty]\n          [(empty? (rest l)) (first l)]\n          [else (middle\
    \ (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n  (cond [(empty?\
    \ l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty? (rest (rest\
    \ l))) (average (first l) (first (rest l)))]\n        [else (middle (sort l))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdk3udfgj.rkt:32:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdk3udfgj.rkt:33:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdk3udfgj.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdk3udfgj.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpltfv7g8d.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpltfv7g8d.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpltfv7g8d.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpltfv7g8d.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1jl9la0s.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1jl9la0s.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp1jl9la0s.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1jl9la0s.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp1jl9la0s.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6pl3aibi.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6pl3aibi.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6pl3aibi.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6pl3aibi.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6pl3aibi.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3f8bhtd.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu3f8bhtd.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu3f8bhtd.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu3f8bhtd.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpip_2jqcq.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpip_2jqcq.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpip_2jqcq.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpip_2jqcq.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8pno0d1w.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8pno0d1w.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8pno0d1w.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8pno0d1w.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnsjz8l8o.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnsjz8l8o.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnsjz8l8o.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnsjz8l8o.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7aqlhxca.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7aqlhxca.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7aqlhxca.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7aqlhxca.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (empty? l)\n        0\n   \
    \     (+ (first l) (median-helper (rest l)))))\n  (/ (median-helper l) (length\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbmz78b1.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwbmz78b1.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwbmz78b1.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnjt463_.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvnjt463_.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpvnjt463_.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpvnjt463_.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpws71efsc.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpws71efsc.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpws71efsc.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpws71efsc.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define (insert x l)\n         (cond\n           [(empty? l) (list x)]\n\
    \           [(< x (first l)) (cons x l)]\n           [else (cons (first l) (insert\
    \ x (rest l)))]))\n       (insert (first l) (sort (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n     \
    \ [else (median-helper (rest l))]))\n  (median-helper (sort l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphflipqi0.rkt:32:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphflipqi0.rkt:33:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphflipqi0.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphflipqi0.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l &lt;)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfwuflgsq.rkt:14:49: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (define (insert-in-order x l)\n         (cond\n          \
    \ [(empty? l) (list x)]\n           [(< x (first l)) (cons x l)]\n           [else\
    \ (cons (first l) (insert-in-order x (rest l)))])\n         )\n       (insert-in-order\
    \ (first l) (sort-list (rest l)))]))\n  (define (median-helper l)\n    (cond\n\
    \      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n      [(empty?\
    \ (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpchfvc_gh.rkt:33:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpchfvc_gh.rkt:34:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpchfvc_gh.rkt:36:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpchfvc_gh.rkt:37:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define smaller (filter (lambda (x) (<\
    \ x pivot)) (rest l)))\n       (define larger (filter (lambda (x) (>= x pivot))\
    \ (rest l)))\n       (append (sort smaller) (list pivot) (sort larger))]))\n \
    \ (define (middle l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest\
    \ l))\n            (first l)\n            (middle (rest l)))))\n  (define (middle-two\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       empty\n            (if (empty? (rest (rest l)))\n                (list\
    \ (first l) (first (rest l)))\n                (middle-two (rest (rest l)))))))\n\
    \  (define (average l)\n    (/ (apply + l) (length l)))\n  (cond\n    [(empty?\
    \ l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty? (rest (rest l)))\
    \ (average (list (first l) (first (rest l))))]\n    [else\n     (define sorted\
    \ (sort l))\n     (define middle-two (middle-two sorted))\n     (if (empty? middle-two)\n\
    \         (middle sorted)\n         (average middle-two))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gafmeg1.rkt:49:4\n\
    \nmiddle-two: undefined;\n cannot use before initialization\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gafmeg1.rkt:50:4\n\
    \nmiddle-two: undefined;\n cannot use before initialization\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9gafmeg1.rkt:52:4\n\
    actual:     11/2\nexpected:   5.5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9gafmeg1.rkt:53:4\n\nmiddle-two:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort-list l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_uohf87i.rkt:24:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_uohf87i.rkt:25:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_uohf87i.rkt:27:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_uohf87i.rkt:28:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else\n       (let ([mid (quotient (length l) 2)])\n        \
    \ (median-helper (append (take l mid) (drop l (+ mid 1)))))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaqb1v7k.rkt:25:4\n\
    actual:     495\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzaqb1v7k.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzaqb1v7k.rkt:28:4\nactual:     5\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg67njss3.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg67njss3.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg67njss3.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpg67njss3.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xu5mkdr.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9xu5mkdr.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9xu5mkdr.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9xu5mkdr.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (middle (rest l))]))\n  (define (average l)\n    (/ (apply + l) (length\
    \ l)))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first l)]\n \
    \   [(even? (length l)) (average (list (middle l) (middle (rest l))))]\n    [else\
    \ (middle l)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx83bs0y4.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond [(empty? l) empty]\n        \
    \  [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert n l)\n\
    \    (cond [(empty? l) (list n)]\n          [(< n (first l)) (cons n l)]\n   \
    \       [else (cons (first l) (insert n (rest l)))]))\n  (define (middle l)\n\
    \    (cond [(empty? l) empty]\n          [(empty? (rest l)) (first l)]\n     \
    \     [else (middle (rest l))]))\n  (define (middle-2 l)\n    (cond [(empty? l)\
    \ empty]\n          [(empty? (rest l)) empty]\n          [(empty? (rest (rest\
    \ l))) (first l)]\n          [else (middle-2 (rest (rest l)))]))\n  (define (sum-2\
    \ l)\n    (cond [(empty? l) 0]\n          [(empty? (rest l)) 0]\n          [else\
    \ (+ (first l) (first (rest l)))]))\n  (define (sum-3 l)\n    (cond [(empty? l)\
    \ 0]\n          [(empty? (rest l)) 0]\n          [(empty? (rest (rest l))) 0]\n\
    \          [else (+ (first l) (first (rest l)) (first (rest (rest l))))]))\n \
    \ (cond [(empty? l) empty]\n        [(empty? (rest l)) (first l)]\n        [(empty?\
    \ (rest (rest l))) (/ (sum-2 l) 2)]\n        [(empty? (rest (rest (rest l))))\
    \ (middle l)]\n        [else (/ (sum-3 l) 3)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9jdv7sjy.rkt:45:4\n\
    actual:     2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9jdv7sjy.rkt:46:4\nactual:     0\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9jdv7sjy.rkt:48:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9jdv7sjy.rkt:49:4\nactual:     4\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3r46bxp0.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3r46bxp0.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3r46bxp0.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3r46bxp0.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0b8_ffn0.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0b8_ffn0.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0b8_ffn0.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0b8_ffn0.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ky8pf5m.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ky8pf5m.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1ky8pf5m.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1ky8pf5m.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n   \
    \   [else (middle (rest l))]))\n  (cond\n    [(empty? l) empty]\n    [(empty?\
    \ (rest l)) (first l)]\n    [(empty? (rest (rest l))) (/ (+ (first l) (first (rest\
    \ l))) 2)]\n    [else (middle (sort-list l))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa0rbyqb6.rkt:34:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa0rbyqb6.rkt:35:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa0rbyqb6.rkt:37:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa0rbyqb6.rkt:38:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb1zmn8f4.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb1zmn8f4.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb1zmn8f4.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpb1zmn8f4.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuz1uxwyd.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuz1uxwyd.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuz1uxwyd.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuz1uxwyd.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) empty]\n    \
    \      [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+\
    \ (first l) (first (rest l))) 2)]\n          [else (median-helper (rest l))]))\n\
    \  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmp9xkxuv.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmp9xkxuv.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmp9xkxuv.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmp9xkxuv.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprz94uw7b.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprz94uw7b.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprz94uw7b.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprz94uw7b.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l n)\n    (cond\n      [(= n 1) (car l)]\n\
    \      [(= n 2) (/ (+ (car l) (cadr l)) 2)]\n      [(= n 3) (car l)]\n      [else\n\
    \       (let ([mid (/ n 2)])\n         (cond\n           [(= (modulo n 2) 0)\n\
    \            (median-helper (cdr l) (- n 1))]\n           [else\n            (median-helper\
    \ (cdr l) (- n 1))]))]))\n  (median-helper l (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe80wbc61.rkt:28:4\n\
    actual:     2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe80wbc61.rkt:29:4\nactual:     1000\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe80wbc61.rkt:31:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe80wbc61.rkt:32:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqdv3o1md.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqdv3o1md.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqdv3o1md.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqdv3o1md.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       (first l)\n            (middle (rest l)))))\n  (define (average l)\n \
    \   (/ (apply + l) (length l)))\n  (define (odd? n)\n    (= (remainder n 2) 1))\n\
    \  (define (even? n)\n    (not (odd? n)))\n  (if (empty? l)\n      empty\n   \
    \   (if (odd? (length l))\n          (middle (sort l))\n          (average (list\
    \ (middle (sort l)) (middle (rest (sort l))))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplwwgu59y.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp86fcw448.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp86fcw448.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp86fcw448.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp86fcw448.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp86fcw448.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oflbljf.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6oflbljf.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6oflbljf.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6oflbljf.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoxl7khpv.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoxl7khpv.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoxl7khpv.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoxl7khpv.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoduhnk7s.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoduhnk7s.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoduhnk7s.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-iter l acc)\n    (if (null? l)\n        (if (null?\
    \ (cdr acc))\n            (car acc)\n            (/ (+ (car acc) (cadr acc)) 2))\n\
    \        (median-iter (cdr l) (insert-into-sorted-list (car l) acc))))\n  (median-iter\
    \ l '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsoijjugr.rkt:14:30: insert-into-sorted-list: unbound identifier\n\
    \  in: insert-into-sorted-list\n  location...:\n   /tmp/tmpsoijjugr.rkt:14:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1tib56ma.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1tib56ma.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1tib56ma.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1tib56ma.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6789hf3_.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6789hf3_.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6789hf3_.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6789hf3_.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2y_oh5d.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf2y_oh5d.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf2y_oh5d.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf2y_oh5d.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmjf_p9t.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppmjf_p9t.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppmjf_p9t.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppmjf_p9t.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmqbk1gwy.rkt:31:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmqbk1gwy.rkt:32:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmqbk1gwy.rkt:34:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmqbk1gwy.rkt:35:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else (insert (first l) (sort-list (rest l)))]))\n  (define (insert x l)\n\
    \    (cond\n      [(empty? l) (list x)]\n      [(< x (first l)) (cons x l)]\n\
    \      [else (cons (first l) (insert x (rest l)))]))\n  (define (middle l)\n \
    \   (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) empty]\n      [(empty?\
    \ (rest (rest l))) (first l)]\n      [else (middle (rest l))]))\n  (define (average\
    \ x y)\n    (/ (+ x y) 2))\n  (cond\n    [(empty? l) empty]\n    [(empty? (rest\
    \ l)) (first l)]\n    [(empty? (rest (rest l))) (average (first l) (first (rest\
    \ l)))]\n    [else (cond\n            [(even? (length l)) (average (middle l)\
    \ (middle (rest l)))]\n            [else (middle (sort-list l))])]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7fid6zz.rkt:39:4\n\
    actual:     4\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpp7fid6zz.rkt:40:4\nactual:     10\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpp7fid6zz.rkt:42:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpp7fid6zz.rkt:43:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zoassat.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zoassat.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2zoassat.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9p7wuln.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf9p7wuln.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf9p7wuln.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf9p7wuln.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpetvkzioh.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpetvkzioh.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpetvkzioh.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpetvkzioh.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyz1iuj00.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyz1iuj00.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyz1iuj00.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyz1iuj00.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_kq7rz7k.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_kq7rz7k.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_kq7rz7k.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_kq7rz7k.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2520mufu.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2520mufu.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2520mufu.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2520mufu.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5fdjjlqe.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5fdjjlqe.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5fdjjlqe.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5fdjjlqe.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps_s892p2.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps_s892p2.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmps_s892p2.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmps_s892p2.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyyfm5nnr.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyyfm5nnr.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyyfm5nnr.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyyfm5nnr.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_z3clpmr.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_z3clpmr.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_z3clpmr.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_z3clpmr.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7_ly1_oy.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7_ly1_oy.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7_ly1_oy.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7_ly1_oy.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (if (empty? l)\n        empty\n        (if (empty? (rest l))\n     \
    \       (first l)\n            (middle (rest l)))))\n  (define sorted (sort l))\n\
    \  (if (empty? sorted)\n      empty\n      (if (empty? (rest sorted))\n      \
    \    (first sorted)\n          (/ (+ (middle sorted) (middle (rest sorted))) 2.0))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4oqiqmo0.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(empty? l) empty]\n      [else\n\
    \       (define pivot (first l))\n       (define left (filter (lambda (x) (< x\
    \ pivot)) (rest l)))\n       (define right (filter (lambda (x) (>= x pivot)) (rest\
    \ l)))\n       (append (sort left) (list pivot) (sort right))]])\n  (define (middle\
    \ l)\n    (cond\n      [(empty? l) empty]\n      [(empty? (rest l)) (first l)]\n\
    \      [else (middle (rest l))]))\n  (define (average x y)\n    (/ (+ x y) 2))\n\
    \  (cond\n    [(empty? l) empty]\n    [(empty? (rest l)) (first l)]\n    [(empty?\
    \ (rest (rest l))) (average (first l) (first (rest l)))]\n    [else\n     (define\
    \ sorted (sort l))\n     (if (even? (length l))\n         (average (middle sorted)\
    \ (middle (rest sorted)))\n         (middle sorted))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsirw4krj.rkt:16:54: read-syntax: expected `)` to close `(` on line\
    \ 10, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(null? l) '()]\n    \
    \  [else (append (sort-list (filter (lambda (x) (< x (car l))) (cdr l)))\n   \
    \                 (cons (car l)\n                          (sort-list (filter\
    \ (lambda (x) (>= x (car l))) (cdr l)))))]))\n  (define (median-helper l)\n  \
    \  (cond\n      [(null? l) 0]\n      [(null? (cdr l)) (car l)]\n      [else (/\
    \ (+ (car l) (car (cdr l))) 2)]))\n  (median-helper (sort-list l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n   \
    \ (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yi86ud_.rkt:27:4\n\
    actual:     3/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8yi86ud_.rkt:28:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8yi86ud_.rkt:30:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8yi86ud_.rkt:31:4\nactual:     3/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcx0da0k7.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcx0da0k7.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcx0da0k7.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcx0da0k7.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcx0da0k7.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (if (null? l)\n        '()\n        (append\
    \ (sort (filter (lambda (x) (< x (car l))) (cdr l)))\n                (cons (car\
    \ l)\n                      (sort (filter (lambda (x) (>= x (car l))) (cdr l)))))))\n\
    \  (define (median-helper l)\n    (if (null? l)\n        0\n        (if (= (length\
    \ l) 1)\n            (car l)\n            (/ (+ (car l) (cadr l)) 2))))\n  (median-helper\
    \ (sort l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp08bi0tlq.rkt:28:4\n\
    actual:     3/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp08bi0tlq.rkt:29:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp08bi0tlq.rkt:31:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp08bi0tlq.rkt:32:4\nactual:     3/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l n)\n    (cond\n      [(empty? l) 0]\n\
    \      [(= n 1) (first l)]\n      [(= n 2) (/ (+ (first l) (second l)) 2)]\n \
    \     [else (median-helper (rest l) (- n 1))]))\n  (median-helper l (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3_xsmhlx.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3_xsmhlx.rkt:23:4\nactual:     15\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3_xsmhlx.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3_xsmhlx.rkt:26:4\nactual:     9/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (sort l <))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(even? (length l)) (/ (+ (list-ref l (/ (length l) 2)) (list-ref l (- (/\
    \ (length l) 2) 1))) 2)]\n      [else (list-ref l (/ (length l) 2))]))\n  (median-helper\
    \ (sort-list l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n \
    \   (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_aogc6yj.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_aogc6yj.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_aogc6yj.rkt:27:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp_aogc6yj.rkt:28:4\n\nlist-ref: index 7/2\
    \ is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_bhb737f.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_bhb737f.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_bhb737f.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_bhb737f.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgc310p15.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgc310p15.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgc310p15.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgc310p15.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpicm96031.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpicm96031.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpicm96031.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpicm96031.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"Empty list!\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n      [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpez2ddeoa.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpez2ddeoa.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpez2ddeoa.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpez2ddeoa.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphuoig84j.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphuoig84j.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphuoig84j.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphuoig84j.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvkmwzb_2.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkmwzb_2.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvkmwzb_2.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkmwzb_2.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvkmwzb_2.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoleg37ag.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoleg37ag.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoleg37ag.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoleg37ag.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2b5k1u6.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf2b5k1u6.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf2b5k1u6.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf2b5k1u6.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(even? (length l)) (/ (+ (first l)\
    \ (first (rest l))) 2)]\n      [else (first (rest l))]))\n  (median-helper (sort\
    \ l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwuobg_ia.rkt:22:4\n\
    actual:     2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwuobg_ia.rkt:23:4\nactual:     -3\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwuobg_ia.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwuobg_ia.rkt:26:4\nactual:     2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (empty? l)\n        0\n   \
    \     (+ (first l) (median-helper (rest l)))))\n  (/ (median-helper l) (length\
    \ l)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlxwewue.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlxwewue.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdlxwewue.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbg6qaqwi.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbg6qaqwi.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbg6qaqwi.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbg6qaqwi.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) (error \"Empty\
    \ list\")]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmenfzjh1.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmenfzjh1.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmenfzjh1.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmenfzjh1.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23cig2pe.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp23cig2pe.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp23cig2pe.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp23cig2pe.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp23cig2pe.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa8hoopgc.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa8hoopgc.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa8hoopgc.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa8hoopgc.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4p38kfuj.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4p38kfuj.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4p38kfuj.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4p38kfuj.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsz3wf74k.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsz3wf74k.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsz3wf74k.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsz3wf74k.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l n)\n    (if (= n 1)\n        (car l)\n\
    \        (if (= n 2)\n            (/ (+ (car l) (cadr l)) 2)\n            (median-helper\
    \ (cdr l) (- n 1)))))\n  (median-helper l (length l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpifqpxd5b.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpifqpxd5b.rkt:23:4\nactual:     15\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpifqpxd5b.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpifqpxd5b.rkt:26:4\nactual:     9/2\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (empty? l)\n        (error\
    \ \"median: empty list\")\n        (let ([n (length l)])\n          (if (odd?\
    \ n)\n              (list-ref l (quotient n 2))\n              (/ (+ (list-ref\
    \ l (quotient n 2))\n                    (list-ref l (- (quotient n 2) 1)))\n\
    \                 2.0)))))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ukj6la7.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ukj6la7.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1ukj6la7.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1ukj6la7.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-list l)\n    (sort l <))\n  (define (middle-element\
    \ l)\n    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n\
    \              (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle-element (sorted-list l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4h7no5w4.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4h7no5w4.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4h7no5w4.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4h7no5w4.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4h7no5w4.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3377c25r.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3377c25r.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3377c25r.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3377c25r.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (even? (length sorted))\n\
    \        (/ (+ (list-ref sorted (/ (length sorted) 2))\n              (list-ref\
    \ sorted (- (/ (length sorted) 2) 1)))\n           2)\n        (list-ref sorted\
    \ (/ (length sorted) 2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg8frhvtw.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8frhvtw.rkt:22:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg8frhvtw.rkt:23:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg8frhvtw.rkt:24:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg8frhvtw.rkt:25:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns36abk3.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns36abk3.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpns36abk3.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1jlmovc_.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1jlmovc_.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1jlmovc_.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1jlmovc_.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) (error \"Empty\
    \ list\")]\n          [(empty? (rest l)) (first l)]\n          [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (second l)) 2)]\n          [else (median-helper (rest\
    \ l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5so3ywwd.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5so3ywwd.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5so3ywwd.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5so3ywwd.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_2kmf6bs.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_2kmf6bs.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_2kmf6bs.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_2kmf6bs.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_b2h4bw.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf_b2h4bw.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf_b2h4bw.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf_b2h4bw.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (sort l <))\n  (define (get-middle\
    \ l)\n    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n\
    \              (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (get-middle (sort-list l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkahypbvw.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkahypbvw.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkahypbvw.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkahypbvw.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkahypbvw.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(= (length l) 2) (/ (+ (first l) (second\
    \ l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper (sort l <)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp51mr8c4_.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp51mr8c4_.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp51mr8c4_.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp51mr8c4_.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpixhf1spu.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpixhf1spu.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpixhf1spu.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpixhf1spu.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpufyd41ph.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpufyd41ph.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpufyd41ph.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpufyd41ph.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sorted-l l)\n    (sort l <))\n  (define (middle l)\n\
    \    (if (even? (length l))\n        (/ (+ (list-ref l (/ (length l) 2))\n   \
    \           (list-ref l (- (/ (length l) 2) 1)))\n           2)\n        (list-ref\
    \ l (/ (length l) 2))))\n  (middle (sorted-l l)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpefc3zbx0.rkt:24:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpefc3zbx0.rkt:25:4\n\
    actual:     8\nexpected:   8.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpefc3zbx0.rkt:26:4\n\nlist-ref: index\
    \ 1/2 is not an exact nonnegative integer\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpefc3zbx0.rkt:27:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpefc3zbx0.rkt:28:4\n\nlist-ref: index\
    \ 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplk86l3dq.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplk86l3dq.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplk86l3dq.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplk86l3dq.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) (error\
    \ \"Empty list\")]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest\
    \ (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper\
    \ (rest l))]))\n  (median-helper (sort l <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal? (candidate\
    \ (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20))\
    \ 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal? (candidate\
    \ (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\
    \n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppv7o4p70.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppv7o4p70.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppv7o4p70.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppv7o4p70.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmhr18bux.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmhr18bux.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmhr18bux.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmhr18bux.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (define (insert-element x l)\n         (cond\n           [(empty?\
    \ l) (list x)]\n           [(< x (first l)) (cons x l)]\n           [else (cons\
    \ (first l) (insert-element x (rest l)))]))\n       (insert-element (first l)\
    \ (sort-list (rest l)))]))\n  (define (median-helper l)\n    (cond\n      [(empty?\
    \ l) 0]\n      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l)))\
    \ (/ (+ (first l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n\
    \  (median-helper (sort-list l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpacpfctah.rkt:32:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpacpfctah.rkt:33:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpacpfctah.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpacpfctah.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3527vca.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm3527vca.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm3527vca.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm3527vca.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(null? l) '()]\n    \
    \  [else (insert (car l) (sort-list (cdr l)))]))\n  (define (insert n l)\n   \
    \ (cond\n      [(null? l) (list n)]\n      [(< n (car l)) (cons n l)]\n      [else\
    \ (cons (car l) (insert n (cdr l)))]))\n  (define (median-helper l)\n    (cond\n\
    \      [(null? l) 0]\n      [(null? (cdr l)) (car l)]\n      [(null? (cdr (cdr\
    \ l))) (/ (+ (car l) (cadr l)) 2)]\n      [else (median-helper (cdr l))]))\n \
    \ (median-helper (sort-list l)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxotdea6d.rkt:31:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxotdea6d.rkt:32:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxotdea6d.rkt:34:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxotdea6d.rkt:35:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv16tsdkb.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv16tsdkb.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpv16tsdkb.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpv16tsdkb.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort-list l)\n    (cond\n      [(empty? l) empty]\n \
    \     [else\n       (insert (first l) (sort-list (rest l)))]))\n  (define (insert\
    \ n l)\n    (cond\n      [(empty? l) (list n)]\n      [(< n (first l)) (cons n\
    \ l)]\n      [else (cons (first l) (insert n (rest l)))]))\n  (define (median-helper\
    \ l)\n    (cond\n      [(empty? l) 0]\n      [(empty? (rest l)) (first l)]\n \
    \     [(empty? (rest (rest l))) (/ (+ (first l) (first (rest l))) 2)]\n      [else\
    \ (median-helper (rest l))]))\n  (median-helper (sort-list l)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptwkuk5vx.rkt:32:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptwkuk5vx.rkt:33:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptwkuk5vx.rkt:35:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptwkuk5vx.rkt:36:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfv1583n9.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfv1583n9.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfv1583n9.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfv1583n9.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0umfhy3c.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0umfhy3c.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0umfhy3c.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm98blhw2.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm98blhw2.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm98blhw2.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm98blhw2.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) 0]\n \
    \     [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9fiaz6n.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa9fiaz6n.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa9fiaz6n.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa9fiaz6n.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond [(empty? l) 0]\n        \
    \  [(empty? (rest l)) (first l)]\n          [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (second l)) 2)]\n          [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuexo5vte.rkt:21:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuexo5vte.rkt:22:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuexo5vte.rkt:24:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuexo5vte.rkt:25:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (let ([sorted (sort l <)])\n    (if (odd? (length sorted))\n \
    \       (list-ref sorted (/ (length sorted) 2))\n        (/ (+ (list-ref sorted\
    \ (/ (length sorted) 2))\n              (list-ref sorted (- (/ (length sorted)\
    \ 2) 1)))\n           2.0))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate median))\n    (check-equal? (candidate (list 3 1 2 4\
    \ 5)) 3)\n    (check-equal? (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal?\
    \ (candidate (list 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n   \
    \ (check-equal? (candidate (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nu163it.rkt:21:4\n\
    \nlist-ref: index 5/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nu163it.rkt:23:4\n\
    \nlist-ref: index 1/2 is not an exact nonnegative integer\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nu163it.rkt:25:4\n\
    \nlist-ref: index 7/2 is not an exact nonnegative integer\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (sort l)\n    (cond\n      [(null? l) '()]\n      [else\
    \ (insert (car l) (sort (cdr l)))]))\n  (define (insert x l)\n    (cond\n    \
    \  [(null? l) (list x)]\n      [(<= x (car l)) (cons x l)]\n      [else (cons\
    \ (car l) (insert x (cdr l)))]))\n  (define (middle l)\n    (cond\n      [(null?\
    \ l) '()]\n      [(null? (cdr l)) (car l)]\n      [else (middle (cdr l))]))\n\
    \  (define (length l)\n    (cond\n      [(null? l) 0]\n      [else (+ 1 (length\
    \ (cdr l)))]))\n  (define (nth-element l n)\n    (cond\n      [(= n 0) (car l)]\n\
    \      [else (nth-element (cdr l) (- n 1))]))\n  (define (nth-element-from-end\
    \ l n)\n    (nth-element (reverse l) n))\n  (define (average x y)\n    (/ (+ x\
    \ y) 2))\n  (cond\n    [(= (length l) 0) 0]\n    [(= (modulo (length l) 2) 0)\n\
    \     (average (nth-element (sort l) (/ (length l) 2))\n              (nth-element-from-end\
    \ (sort l) (/ (length l) 2)))]\n    [else (middle (sort l))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate median))\n    (check-equal?\
    \ (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate (list -10 4 6\
    \ 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n    (check-equal?\
    \ (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list 8 1 3 9 9 2\
    \ 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6g0y0n6.rkt:47:4\n\
    actual:     5\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu6g0y0n6.rkt:48:4\nactual:     8\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu6g0y0n6.rkt:50:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpu6g0y0n6.rkt:51:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (if (null? l)\n        0\n    \
    \    (+ (car l) (median-helper (cdr l)))))\n  (/ (median-helper l) (length l)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate median))\n\
    \    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal? (candidate\
    \ (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list 5)) 5)\n\
    \    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate (list\
    \ 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo5wxv3za.rkt:21:4\n\
    actual:     515/3\nexpected:   8.0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo5wxv3za.rkt:23:4\nactual:\
    \     11/2\nexpected:   5.5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo5wxv3za.rkt:24:4\nactual:     39/7\n\
    expected:   7\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return median of elements in the list l.\n;; >>> median([3,\
    \ 1, 2, 4, 5])\n;; 3\n;; >>> median([-10, 4, 6, 1000, 10, 20])\n;; 15.0\n(define\
    \ (median l)\n  (define (median-helper l)\n    (cond\n      [(empty? l) empty]\n\
    \      [(empty? (rest l)) (first l)]\n      [(empty? (rest (rest l))) (/ (+ (first\
    \ l) (first (rest l))) 2)]\n      [else (median-helper (rest l))]))\n  (median-helper\
    \ (sort l <)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate median))\n    (check-equal? (candidate (list 3 1 2 4 5)) 3)\n    (check-equal?\
    \ (candidate (list -10 4 6 1000 10 20)) 8.0)\n    (check-equal? (candidate (list\
    \ 5)) 5)\n    (check-equal? (candidate (list 6 5)) 5.5)\n    (check-equal? (candidate\
    \ (list 8 1 3 9 9 2 7)) 7)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppx923yuk.rkt:22:4\n\
    actual:     9/2\nexpected:   3\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppx923yuk.rkt:23:4\nactual:     510\n\
    expected:   8.0\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppx923yuk.rkt:25:4\nactual:     11/2\n\
    expected:   5.5\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppx923yuk.rkt:26:4\nactual:     9\nexpected:\
    \   7\n--------------------\n"
  exit_code: 0
  status: Exception
