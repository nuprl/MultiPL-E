language: racket
name: HumanEval_14_all_prefixes
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4mq3nj4w.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4mq3nj4w.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp4mq3nj4w.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49lebwle.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp49lebwle.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuvp13ffp.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuvp13ffp.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15o21py3.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp15o21py3.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfo4c322g.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfo4c322g.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplsw85cfz.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplsw85cfz.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdp4gx1d1.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdp4gx1d1.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqin_1lz.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplqin_1lz.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqsf_pp8a.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqsf_pp8a.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (list (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt3rogjoq.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt3rogjoq.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt3rogjoq.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsaeon3_q.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsaeon3_q.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (string-append prefixes (string (first string))) prefixes))))\n\
    \  (all_prefixes-helper string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_5mzfd_.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8_5mzfd_.rkt:19:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_5mzfd_.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"WWW\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkp6qw4_1.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkp6qw4_1.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjzy00qsw.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjzy00qsw.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjzy00qsw.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptym38hl0.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmptym38hl0.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmptym38hl0.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnw8h6cf.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfnw8h6cf.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfnw8h6cf.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp29kx_j_d.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp29kx_j_d.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp29kx_j_d.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3t08xz_e.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3t08xz_e.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0lhao8gh.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0lhao8gh.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgih5nln.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprgih5nln.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (rest string))\n              (list (string-append (first string) (rest string))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kckowct.rkt:17:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7kckowct.rkt:18:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kckowct.rkt:19:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6j3psdox.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6j3psdox.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp6j3psdox.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (let loop ([string string]\n             [prefixes\
    \ '()])\n    (if (string=? string \"\")\n        prefixes\n        (loop (substring\
    \ string 1)\n              (cons (substring string 0 1) prefixes)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2vvqz1sy.rkt:20:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2vvqz1sy.rkt:21:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5z1i6j6n.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5z1i6j6n.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicx5mw3d.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpicx5mw3d.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpicx5mw3d.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1qjv1pl.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb1qjv1pl.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnn2sif3e.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnn2sif3e.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnn2sif3e.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (empty? string)\n      '()\n      (append (all_prefixes\
    \ (substring string 0 (- (string-length string) 1)))\n              (list string))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk9b45dtr.rkt:17:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk9b45dtr.rkt:18:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk9b45dtr.rkt:19:4\n\nsubstring:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfkaje5zs.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfkaje5zs.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefix)\n    (if\
    \ (string=? string \"\")\n        (list prefix)\n        (append (all_prefixes-helper\
    \ (substring string 1) (string-append prefix (substring string 0 1)))\n      \
    \          (list prefix))))\n  (all_prefixes-helper string \"\"))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplw8ucog6.rkt:19:4

    actual:     ''("")

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplw8ucog6.rkt:20:4

    actual:     ''("asdfgh" "asdfg" "asdf" "asd" "as" "a" "")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplw8ucog6.rkt:21:4

    actual:     ''("WWW" "WW" "W" "")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (string-append prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyyvtk_51.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpyyvtk_51.rkt:19:4\n\nstring-append:\
    \ contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyyvtk_51.rkt:20:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (string-append prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_b24igt.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpp_b24igt.rkt:19:4\n\nstring-append:\
    \ contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_b24igt.rkt:20:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (string=? \"\" string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuenlzuk3.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuenlzuk3.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8fumadro.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8fumadro.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjlraagj6.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjlraagj6.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjlraagj6.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbiqs92o.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkbiqs92o.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkbiqs92o.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplo_kmv5s.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplo_kmv5s.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_veb1lnx.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_veb1lnx.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_veb1lnx.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6ntlqj4.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy6ntlqj4.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6bx4gbvr.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp6bx4gbvr.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp6bx4gbvr.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string acc)\n    (if (empty? string)\n\
    \        acc\n        (helper (rest string) (append acc (list (string-append (first\
    \ acc) (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxq2chjo.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyxq2chjo.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyxq2chjo.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z3j6dcd.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0z3j6dcd.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0z3j6dcd.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdvrz4_7w.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdvrz4_7w.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudhbw2a3.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpudhbw2a3.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (iter string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (iter (substring string 1) (cons (substring string\
    \ 0 1) prefixes))))\n  (iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8p1bfi53.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8p1bfi53.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp8p1bfi53.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (iter string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (iter (substring string 1) (cons (substring string\
    \ 0 1) prefixes))))\n  (iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjujdzqun.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpjujdzqun.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjujdzqun.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (string-append prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcds7eeap.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcds7eeap.rkt:19:4\n\nstring-append:\
    \ contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcds7eeap.rkt:20:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps2rqeb_3.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps2rqeb_3.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmps2rqeb_3.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes_helper (substring\
    \ string 1) (append prefixes (list (substring string 0 1))))))\n  (all_prefixes_helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy8e9vab7.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpy8e9vab7.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpy8e9vab7.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7twfevr.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7twfevr.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx55iu7r.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvx55iu7r.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtsu1090.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjtsu1090.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjtsu1090.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal?\
    \ (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"\
    a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate\
    \ \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv9c3zsi.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkv9c3zsi.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkv9c3zsi.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi1juylq1.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi1juylq1.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9oao80q7.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9oao80q7.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwm5p3yob.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwm5p3yob.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (cons\
    \ (substring string 0 1)\n            (all_prefixes (substring string 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kcxz97k.rkt:18:4

    actual:     ''("a" "s" "d" "f" "g" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kcxz97k.rkt:19:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (iter string prefixes)\n    (if (string=? string\
    \ \"\")\n        prefixes\n        (iter (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (iter string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeoqtt1b.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjeoqtt1b.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsl93odl.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwsl93odl.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwsl93odl.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm0h__bsd.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm0h__bsd.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiomlyxfu.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiomlyxfu.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5tdy11mk.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5tdy11mk.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcf_koets.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcf_koets.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpcf_koets.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (cons\
    \ (substring string 0 1)\n            (all_prefixes (substring string 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw1neoh6z.rkt:18:4

    actual:     ''("a" "s" "d" "f" "g" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw1neoh6z.rkt:19:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbfftd1g.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgbfftd1g.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_helper string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw82p_ccn.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw82p_ccn.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvh1ytncx.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvh1ytncx.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpvh1ytncx.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        (reverse prefixes)\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgroswogm.rkt:19:4

    actual:     ''("a" "s" "d" "f" "g" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgroswogm.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0uuxkej.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_0uuxkej.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_0uuxkej.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppx7rvi5t.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppx7rvi5t.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppx7rvi5t.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw4yrweph.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw4yrweph.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1vl7kpwv.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1vl7kpwv.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaeqirses.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaeqirses.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaeqirses.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpajthmhky.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpajthmhky.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpajthmhky.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpawp_plez.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpawp_plez.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpawp_plez.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (substring string 1) (append prefixes (list\
    \ (substring string 0 1))))))\n  (helper string '()))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal?\
    \ (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"\
    a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate\
    \ \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq857rq8d.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq857rq8d.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq857rq8d.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqud80lt2.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqud80lt2.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2sei22_u.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2sei22_u.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (let loop ([i 0] [acc '()])\n    (if (= i (string-length\
    \ string))\n        acc\n        (loop (+ i 1) (cons (substring string 0 i) acc)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplto1wl4z.rkt:18:4

    actual:     ''("asdfg" "asdf" "asd" "as" "a" "")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplto1wl4z.rkt:19:4

    actual:     ''("WW" "W" "")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnh9cqliu.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnh9cqliu.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes_iter (substring string\
    \ 1) (cons string prefixes))))\n  (all_prefixes_iter string '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmbl9rp7.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppmbl9rp7.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmppmbl9rp7.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwyjloxqk.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwyjloxqk.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpwyjloxqk.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8k4m2szd.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8k4m2szd.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp8k4m2szd.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgpw8v1bz.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgpw8v1bz.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpgpw8v1bz.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwq9g38s7.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwq9g38s7.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwq9g38s7.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuy4_2kwz.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpuy4_2kwz.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpuy4_2kwz.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprh4xvvkz.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprh4xvvkz.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprh4xvvkz.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_102z7u8.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_102z7u8.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprlxcc3yb.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprlxcc3yb.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprlxcc3yb.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphlt45wab.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmphlt45wab.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmphlt45wab.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (string-append prefixes (substring string 0 1)) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vx_sp0x.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp2vx_sp0x.rkt:19:4\n\nstring-append:\
    \ contract violation\n  expected: string?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2vx_sp0x.rkt:20:4\n\
    \nstring-append: contract violation\n  expected: string?\n  given: '()\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefix-list)\n  \
    \  (if (string=? string \"\")\n        prefix-list\n        (all_prefixes-iter\
    \ (substring string 1)\n                           (append prefix-list (list string)))))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimi_5g82.rkt:20:4

    actual:     ''("asdfgh" "sdfgh" "dfgh" "fgh" "gh" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimi_5g82.rkt:21:4

    actual:     ''("WWW" "WW" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt66jyvtw.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt66jyvtw.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt66jyvtw.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk77lge0e.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpk77lge0e.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk77lge0e.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpek3q4qzi.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpek3q4qzi.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpek3q4qzi.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpouk9ccc8.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpouk9ccc8.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpouk9ccc8.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ewwj7uh.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3ewwj7uh.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ewwj7uh.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9cl5j2tq.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9cl5j2tq.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpioovd1lj.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpioovd1lj.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpioovd1lj.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7cl43b3y.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp7cl43b3y.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp7cl43b3y.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cogtbpf.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0cogtbpf.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp0cogtbpf.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmple7zj8hr.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmple7zj8hr.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmple7zj8hr.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk2wzj0vx.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk2wzj0vx.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp17i6_yp5.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp17i6_yp5.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp17i6_yp5.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefix-list)\n  \
    \  (if (empty? string)\n        prefix-list\n        (all_prefixes-iter (substring\
    \ string 1)\n                           (append prefix-list (list (substring string\
    \ 0 1))))))\n  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpykwgp6kg.rkt:19:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpykwgp6kg.rkt:20:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpykwgp6kg.rkt:21:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes_iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyyif_raf.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyyif_raf.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyyif_raf.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (cond [(empty? string) empty]\n        [else (append\
    \ (all_prefixes (rest string))\n                      (list (string-append (first\
    \ string) (rest string))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1wzjm47.rkt:16:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe1wzjm47.rkt:17:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe1wzjm47.rkt:18:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes-helper (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-helper string (list \"\")))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpempoyepx.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpempoyepx.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpempoyepx.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr69shp65.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr69shp65.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps5yzlqqm.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmps5yzlqqm.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmps5yzlqqm.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnzbym8ds.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnzbym8ds.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbba5w2vu.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbba5w2vu.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string acc)\n    (if (string=? string\
    \ \"\")\n        acc\n        (helper (substring string 1) (cons string acc))))\n\
    \  (helper string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp50dz9qm9.rkt:19:4

    actual:     ''("h" "gh" "fgh" "dfgh" "sdfgh" "asdfgh")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0goutqw.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpf0goutqw.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpf0goutqw.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbo724zio.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbo724zio.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpbo724zio.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqeny09_.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvqeny09_.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvqeny09_.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (let loop ([i 0] [prefixes '()])\n    (if (= i (string-length\
    \ string))\n        prefixes\n        (loop (+ i 1) (cons (substring string 0\
    \ i) prefixes)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n \
    \   (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"\
    asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\"\
    \ \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hkgv93d.rkt:18:4

    actual:     ''("asdfg" "asdf" "asd" "as" "a" "")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_hkgv93d.rkt:19:4

    actual:     ''("WW" "W" "")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnx__at1g.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpnx__at1g.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpnx__at1g.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes_iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoprr7w30.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoprr7w30.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8e23hz3x.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8e23hz3x.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp8e23hz3x.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsw9vqh4.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmsw9vqh4.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmsw9vqh4.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_helper string prefix)\n    (if\
    \ (empty? string)\n        (list prefix)\n        (append (all_prefixes_helper\
    \ (rest string) (string-append prefix (string (first string))))\n            \
    \    (list prefix))))\n  (all_prefixes_helper string \"\"))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal?\
    \ (candidate \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"\
    a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate\
    \ \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcslc5q9b.rkt:19:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcslc5q9b.rkt:20:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcslc5q9b.rkt:21:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp70e0vml8.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp70e0vml8.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp70e0vml8.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7um4o1q9.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7um4o1q9.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? \"\" string)\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oef3wc.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3oef3wc.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq4pxrbf7.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq4pxrbf7.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq4pxrbf7.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpekgnzjfx.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpekgnzjfx.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpekgnzjfx.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb_46eaew.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb_46eaew.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpb_46eaew.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7p2f1i8.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7p2f1i8.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        (reverse prefixes)\n        (all_prefixes-iter\
    \ (substring string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmply5odsls.rkt:19:4

    actual:     ''("a" "s" "d" "f" "g" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmply5odsls.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fmy33ep.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fmy33ep.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (helper (rest string) (append prefixes (list (string-append\
    \ prefixes (string (first string))))))))\n  (helper string (list \"\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgjqtm2nk.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgjqtm2nk.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgjqtm2nk.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn4hlqxnd.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn4hlqxnd.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ec1b01u.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ec1b01u.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7vmjh0n.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpa7vmjh0n.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7vmjh0n.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg971l1x9.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpg971l1x9.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpg971l1x9.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmu3d535.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprmu3d535.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprmu3d535.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi6nt80xk.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi6nt80xk.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (cond\n      [(empty? string) prefixes]\n      [else (all_prefixes-helper (rest\
    \ string) (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-helper string (list \"\")))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw486e0x.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaw486e0x.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaw486e0x.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiqpy791u.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiqpy791u.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes_helper (substring\
    \ string 1) (append prefixes (list (substring string 0 1))))))\n  (all_prefixes_helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprp6utpm4.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmprp6utpm4.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprp6utpm4.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmm9p41e0.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmm9p41e0.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwzu2suqm.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwzu2suqm.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwzu2suqm.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeqp__mjj.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeqp__mjj.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 -1))\n              (list string))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiof1xz9b.rkt:18:4\n\
    \nsubstring: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiof1xz9b.rkt:19:4\n\nsubstring: contract violation\n  expected:\
    \ exact-nonnegative-integer?\n  given: -1\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpowcpvzk3.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpowcpvzk3.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvse51yv.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpzvse51yv.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpzvse51yv.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2npkv_f1.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2npkv_f1.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_u7aiyc1.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_u7aiyc1.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_u7aiyc1.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjfx105a0.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjfx105a0.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjfx105a0.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd57f4zda.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd57f4zda.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcng4dkv.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptcng4dkv.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptftwtn0j.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptftwtn0j.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes_iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes_iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh2lf05o.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmh2lf05o.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh2lf05o.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcn2cgmrn.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcn2cgmrn.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (cons\
    \ (substring string 0 1)\n            (all_prefixes (substring string 1)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexz9gr02.rkt:18:4

    actual:     ''("a" "s" "d" "f" "g" "h")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpexz9gr02.rkt:19:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72am3qfz.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp72am3qfz.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplibqefek.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmplibqefek.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmplibqefek.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbteultg6.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbteultg6.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpbteultg6.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (empty? string)\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq2mkpyq6.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpq2mkpyq6.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq2mkpyq6.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0yb8gsd.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu0yb8gsd.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes_helper string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes_helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes_helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpay3hf8rm.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpay3hf8rm.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgnnodu3.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphgnnodu3.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfhjzawdq.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfhjzawdq.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfhjzawdq.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyep3gl4r.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyep3gl4r.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4vi_porg.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4vi_porg.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp35sjbmqm.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp35sjbmqm.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppx93jx5i.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppx93jx5i.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (substring string\
    \ 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate all_prefixes))\n\
    \    (check-equal? (candidate \"\") (list ))\n    (check-equal? (candidate \"\
    asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal?\
    \ (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb26jg9iw.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpb26jg9iw.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpb26jg9iw.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplkm9y0q8.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplkm9y0q8.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplkm9y0q8.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (empty? string)\n        prefixes\n        (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvz4ohpq8.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvz4ohpq8.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvz4ohpq8.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmxj2oo.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdcmxj2oo.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (iter string prefixes)\n    (if (empty? string)\n\
    \        prefixes\n        (iter (substring string 1) (cons (substring string\
    \ 0 1) prefixes))))\n  (iter string '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqz9s8a0d.rkt:18:4\n\
    \nsubstring: starting index is out of range\n  starting index: 1\n  valid range:\
    \ [0, 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpqz9s8a0d.rkt:19:4\n\nsubstring:\
    \ starting index is out of range\n  starting index: 1\n  valid range: [0, 0]\n\
    \  string: \"\"\n--------------------\n--------------------\nERROR\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpqz9s8a0d.rkt:20:4\n\nsubstring: starting\
    \ index is out of range\n  starting index: 1\n  valid range: [0, 0]\n  string:\
    \ \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (for/list ([i (in-range (string-length string))])\n\
    \    (substring string 0 (+ i 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string prefixes)\n   \
    \ (if (string=? string \"\")\n        prefixes\n        (all_prefixes-helper (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-helper\
    \ string '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvfy5av4z.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvfy5av4z.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (if (string=? string \"\")\n      '()\n      (append\
    \ (all_prefixes (substring string 0 (- (string-length string) 1)))\n         \
    \     (list string))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (if\
    \ (string=? string \"\")\n        prefixes\n        (all_prefixes-iter (substring\
    \ string 1) (cons (substring string 0 1) prefixes))))\n  (all_prefixes-iter string\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ all_prefixes))\n    (check-equal? (candidate \"\") (list ))\n    (check-equal?\
    \ (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"\
    ))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"WW\" \"WWW\"))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_xotqya.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_xotqya.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (helper string prefixes)\n    (if (string=?\
    \ string \"\")\n        prefixes\n        (helper (substring string 1) (cons (substring\
    \ string 0 1) prefixes))))\n  (helper string '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate\
    \ \"\") (list ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\"\
    \ \"asd\" \"asdf\" \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\"\
    ) (list \"W\" \"WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbvgipc6.rkt:19:4

    actual:     ''("h" "g" "f" "d" "s" "a")

    expected:   ''("a" "as" "asd" "asdf" "asdfg" "asdfgh")

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbvgipc6.rkt:20:4

    actual:     ''("W" "W" "W")

    expected:   ''("W" "WW" "WWW")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-iter string prefixes)\n    (cond\n\
    \      [(empty? string) prefixes]\n      [else (all_prefixes-iter (rest string)\
    \ (append prefixes (list (string-append prefixes (string (first string))))))]))\n\
    \  (all_prefixes-iter string (list \"\")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyf_dm400.rkt:18:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyf_dm400.rkt:19:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"asdfgh\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyf_dm400.rkt:20:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"WWW\"\
    \n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return list of all prefixes from shortest to longest\
    \ of the input string\n;; >>> all_prefixes('abc')\n;; ['a', 'ab', 'abc']\n(define\
    \ (all_prefixes string)\n  (define (all_prefixes-helper string index)\n    (if\
    \ (= index (string-length string))\n        '()\n        (cons (substring string\
    \ 0 (+ index 1))\n              (all_prefixes-helper string (+ index 1)))))\n\
    \  (all_prefixes-helper string 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate all_prefixes))\n    (check-equal? (candidate \"\") (list\
    \ ))\n    (check-equal? (candidate \"asdfgh\") (list \"a\" \"as\" \"asd\" \"asdf\"\
    \ \"asdfg\" \"asdfgh\"))\n    (check-equal? (candidate \"WWW\") (list \"W\" \"\
    WW\" \"WWW\"))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
