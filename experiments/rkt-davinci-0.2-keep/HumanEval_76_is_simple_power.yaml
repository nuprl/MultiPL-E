name: HumanEval_76_is_simple_power
language: racket
prompt: "#lang racket\n\n;; Your task is to write a function that returns true if\
  \ a number x is a simple\n;; power of n and false in other cases.\n;; x is a simple\
  \ power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) => true\n;;\
  \ is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;; is_simple_power(3,\
  \ 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5, 3) => false\n\
  (define (is_simple_power x n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
  \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
  \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
  \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24 2)\
  \ #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate 12\
  \ 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate 1\
  \ 12) #t)\n))\n\n(test-humaneval)"
completions: ["  (cond ((= x 1) #t)\n        ((= x n) #t)\n        ((< x n) #f)\n\
    \        (else (is_simple_power (/ x n) n))))\n", "  (define (is-power-of? x n)\n\
    \    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          #f)))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n      \
    \      #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (let loop ([x x]\
    \ [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n          [(< x\
    \ n) false]\n          [else (loop (/ x n) n)])))\n", "  (let loop ([x x] [n n])\n\
    \    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n    \
    \      [else (loop (/ x n) n)])))\n", "  (define (is-power? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x\
    \ n) n)\n            #f)))\n  (is-power? x n))\n", "  (define (is-power? x n)\n\
    \    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (define (is-power?\
    \ x n)\n    (cond ((= n 1) #t)\n          ((= x 1) #f)\n          ((= (modulo\
    \ x n) 0) (is-power? (/ x n) n))\n          (else #f)))\n  (is-power? x n))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n\
    \      [(= (modulo x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n \
    \ (is-power-of? x n))\n", "  (define (is_simple_power-iter x n i)\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n i)) #t]\n      [(> x\
    \ (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else #f]))\n  (is_simple_power-iter\
    \ x n 1))\n", "  (let ([x (exact->inexact x)])\n    (if (= x 1)\n        true\n\
    \        (let loop ([i 1])\n          (if (= (expt n i) x)\n              true\n\
    \              (if (< (expt n i) x)\n                  (loop (+ i 1))\n      \
    \            false))))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n   \
    \     #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n\
    \            #f)))\n  (is-power? x n))\n", "  (if (zero? (modulo x n))\n     \
    \ (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n\
    \      [(= (modulo x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n \
    \ (is-power-of? x n))\n", "  (define (is-power-of? n x)\n    (if (= n 1)\n   \
    \     #t\n        (if (= (remainder x n) 0)\n            (is-power-of? n (/ x\
    \ n))\n            #f)))\n  (is-power-of? n x))\n", "  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n\
    \              (if (= x n)\n                  #t\n                  (if (= (modulo\
    \ x n) 0)\n                      (is_simple_power (/ x n) n)\n               \
    \       #f))))\n      #f))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n\
    \        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n)\
    \ n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is-power? x n)\n\
    \    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is-power? x n)\n    (cond ((= x\
    \ 1) #t)\n          ((= (remainder x n) 0) (is-power? (/ x n) n))\n          (else\
    \ #f)))\n  (is-power? x n))\n", "  (define (is-power? x n)\n    (cond\n      [(=\
    \ x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (is-power?\
    \ (/ x n) n)]))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= (modulo\
    \ x n) 0)\n              (is_simple_power (/ x n) n)\n              #f))))\n",
  "  (if (= x 1)\n      true\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          false)))\n", "  (define (is-power-of? x n)\n    (if (=\
    \ x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (if (= x 1)\n  \
    \    #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n\
    \          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n \
    \     #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (let loop ([x x] [n n])\n    (cond\n      [(= x 1)\
    \ #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop (/ x n) n)])))\n",
  "  (define (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of? x n))\n",
  "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/\
    \ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is_simple_power-helper (/ x n) n)\n            #f)))\n  (if (= x n)\n  \
    \    #t\n      (is_simple_power-helper x n)))\n", "  (if (= x 1)\n      #t\n \
    \     (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n        \
    \  #f)))\n", "  (if (and (not (= x 1)) (= (expt n (round (log x n))) x))\n   \
    \   #t\n      #f))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n         \
    \ #t\n          (if (= (remainder x n) 0)\n              (is_simple_power (/ x\
    \ n) n)\n              #f))))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n\
    \          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (define (is-power-of? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is-power?\
    \ x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n)\
    \ (is-power? (/ x n) n)]\n      [else false]))\n  (is-power? x n))\n", "  (if\
    \ (and (integer? x) (integer? n))\n      (if (= x 1)\n          #t\n         \
    \ (if (= n 1)\n              #f\n              (if (= (expt n (round (log x n)))\
    \ x)\n                  #t\n                  #f)))\n      #f))\n", "  (define\
    \ (is-power? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n   \
    \   [(< x n) false]\n      [else (is-power? (/ x n) n)]))\n  (is-power? x n))\n",
  "  (let ([x (exact->inexact x)])\n    (and (integer? x)\n         (integer? n)\n\
    \         (let loop ([n n] [x x])\n           (cond [(= n 1) (= x 1)]\n      \
    \           [(= n x) #t]\n                 [(> n x) #f]\n                 [else\
    \ (loop (* n n) x)])))))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo x\
    \ n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (=\
    \ x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/\
    \ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n    \
    \  [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (is-power-of?\
    \ (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n   \
    \ (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (let\
    \ loop ([x x] [n n])\n    (if (zero? x)\n        #t\n        (if (zero? (modulo\
    \ x n))\n            (loop (/ x n) n)\n            #f))))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n)\
    \ true]\n      [(< x n) false]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power-helper x n)\n    (if (= x 1)\n       \
    \ #t\n        (if (= x n)\n            #t\n            (if (> x n)\n         \
    \       (is_simple_power-helper (/ x n) n)\n                #f))))\n  (is_simple_power-helper\
    \ x n))\n", "  (if (zero? x)\n      #f\n      (if (zero? n)\n          #f\n  \
    \        (if (zero? (modulo x n))\n              (is_simple_power (/ x n) n)\n\
    \              #f))))\n", "  (let loop ([x x] [n n])\n    (if (zero? n)\n    \
    \    #f\n        (if (zero? x)\n            #t\n            (if (zero? (modulo\
    \ x n))\n                (loop (/ x n) n)\n                #f)))))\n", "  (let\
    \ loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n   \
    \       [(< x n) false]\n          [else (loop (/ x n) n)])))\n", "  (if (= x\
    \ 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/\
    \ x n) n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n    \
    \  [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n) 0) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          #f)))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n      \
    \      #f)))\n  (is-power-of? x n))\n", "  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x\
    \ n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x n)\n        #t\n        (if (< x n)\n     \
    \       #f\n            (is-power-of? (/ x n) n))))\n  (is-power-of? x n))\n",
  "  (if (= x 1)\n      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (and (integer? x) (integer? n))\n   \
    \   (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n     \
    \         (if (= x n)\n                  #t\n                  (if (= (remainder\
    \ x n) 0)\n                      (is_simple_power (/ x n) n)\n               \
    \       #f))))\n      #f))\n", "  (define (is-power? x n)\n    (cond ((= x 1)\
    \ #t)\n          ((= x n) #t)\n          ((< x n) #f)\n          (else (is-power?\
    \ (/ x n) n))))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of? x n))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n\
    \      [(< x n) false]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power-helper x n i)\n    (cond\n      [(= x\
    \ (* n n)) true]\n      [(> x (* n n)) false]\n      [else (is_simple_power-helper\
    \ x n (+ i 1))]))\n  (is_simple_power-helper x n 1))\n", "  (let loop ([x x] [n\
    \ n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n\
    \          [else (loop (quotient x n) n)])))\n", "  (let loop ([x x] [n n])\n\
    \    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n    \
    \      [else (loop (/ x n) n)])))\n", "  (define (is-power? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x\
    \ n) n)\n            #f)))\n  (is-power? x n))\n", "  (define (is-power-of? x\
    \ n)\n    (cond\n      [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= (modulo\
    \ x n) 0) (is-power-of? (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n",
  "  (let ([root (exact-floor (sqrt x))])\n    (and (= x (expt n root))\n        \
    \ (= (expt n (add1 root)) (add1 x)))))\n", "  (define (is-power-of? x n)\n   \
    \ (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (cond\n      [(=\
    \ x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else (is-power-of?\
    \ (/ x n) n)]))\n  (is-power-of? x n))\n", "  (if (zero? (modulo x n))\n     \
    \ (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n",
  "  (define (is-power-of? x n)\n    (define (is-power-of-iter x n)\n      (cond\n\
    \        [(= x 1) true]\n        [(= x n) true]\n        [(< x n) false]\n   \
    \     [else (is-power-of-iter (/ x n) n)]))\n    (is-power-of-iter x n))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power? x n)\n    (cond\n      [(= x 1) #t]\n      [(=\
    \ x n) #t]\n      [(< x n) #f]\n      [else (is-power? (/ x n) n)]))\n  (is-power?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n \
    \     [(= x n) true]\n      [(< x n) false]\n      [else (is-power-of? (/ x n)\
    \ n)]))\n  (is-power-of? x n))\n", "  (if (= n 1)\n      (= x 1)\n      (if (=\
    \ x 1)\n          #t\n          (if (and (integer? (/ x n))\n                \
    \   (is_simple_power (/ x n) n))\n              #t\n              #f))))\n", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n      \
    \    (if (= (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n  \
    \            #f))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n         \
    \   #f)))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n\
    \            (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(zero? n) #f]\n          [(zero?\
    \ x) #t]\n          [(zero? (modulo x n)) (loop (/ x n) n)]\n          [else #f])))\n",
  "  (define (is-power-of n x)\n    (if (zero? x)\n        #t\n        (if (zero?\
    \ (modulo x n))\n            (is-power-of n (/ x n))\n            #f)))\n  (is-power-of\
    \ n x))\n", "  (define (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((=\
    \ (modulo x n) 0) (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of?\
    \ x n))\n", "  (if (= x (expt n (round (log x n))))\n      #t\n      #f))\n",
  "  (define (is_simple_power-iter x n i)\n    (cond\n      [(= x n) true]\n     \
    \ [(= x (* n i)) true]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n\
    \      [else false]))\n  (is_simple_power-iter x n 1))\n", "  (define (is-power?\
    \ x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power? (/ x\
    \ n) n))\n          (else #f)))\n  (is-power? x n))\n", "  (define (is-power-of?\
    \ x n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo\
    \ x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) true]\n      [(= x n) true]\n\
    \      [(> x n) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of?\
    \ x n))\n", "  (define (is_simple_power-iter x n i)\n    (cond ((= x 1) #t)\n\
    \          ((= x (expt n i)) #t)\n          ((> x (expt n i)) (is_simple_power-iter\
    \ x n (+ i 1)))\n          (else #f)))\n  (is_simple_power-iter x n 1))\n", " \
    \ (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(=\
    \ x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n) n)])))\n", " \
    \ (let loop ([x x] [n n])\n    (cond [(= x 1) true]\n          [(= x n) true]\n\
    \          [(< x n) false]\n          [else (loop (quotient x n) n)])))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n          (if (= x (*\
    \ n n))\n              #t\n              (if (= x (* n (* n n)))\n           \
    \       #t\n                  (if (= x (* n (* n (* n n))))\n                \
    \      #t\n                      (if (= x (* n (* n (* n (* n n)))))\n       \
    \                   #t\n                          (if (= x (* n (* n (* n (* n\
    \ (* n n))))))\n                              #t\n                           \
    \   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n                        \
    \          #t\n                                  (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n n))))))))\n                                      #t\n       \
    \                               (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n)))))))))\n                                          #t\n               \
    \                           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n n))))))))))\n                                              #t\n          \
    \                                    (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \     #t\n                                                  (if (= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n                \
    \                                      #t\n                                  \
    \                    (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n))))))))))))\n                                                \
    \          #t\n                                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                              #t\n          \
    \                                                    (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n       \
    \                                                           #t\n             \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (if (zero? x)\n      #f\n      (if (zero? n)\n          #f\n  \
    \        (if (zero? (modulo x n))\n              (is_simple_power (/ x n) n)\n\
    \              #f))))\n", "  (if (= x 1)\n      #t\n      (if (and (integer? (log\
    \ x n))\n               (= (expt n (log x n)) x))\n          #t\n          #f)))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= n 1) true]\n      [(= x 1) false]\n\
    \      [(= (modulo x n) 0) (is-power-of? (/ x n) n)]\n      [else false]))\n \
    \ (is-power-of? x n))\n", "  (cond\n    [(= x 1) true]\n    [(= x n) true]\n \
    \   [(= x (* n n)) true]\n    [(= x (* n (* n n))) true]\n    [(= x (* n (* n\
    \ (* n n)))) true]\n    [(= x (* n (* n (* n (* n n))))) true]\n    [(= x (* n\
    \ (* n (* n (* n (* n n)))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n n)))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n n)))))))) true]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n n))))))))) true]\n    [(= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))) true]\n    [(= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))) true]\n    [(= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))) true]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n)))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n))))))))))))))) true]\n    [(= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n n))))))))))))))))) true]\n    [(= x (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))))\
    \ true", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n         \
    \ (if (= (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n     \
    \         #f))))\n", "  (let loop ([x x] [n n])\n    (if (zero? n)\n        (zero?\
    \ x)\n        (if (zero? x)\n            #f\n            (loop (quotient x n)\
    \ n)))))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n       \
    \ (if (= (remainder x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n\
    \  (is-power? x n))\n", "  (if (zero? (modulo x n))\n      (if (zero? (modulo\
    \ x (* n n)))\n          (is_simple_power x (* n n))\n          #t)\n      #f))\n",
  "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n   \
    \       [(> x n) (loop (- x n) n)]\n          [else #f])))\n", "  (define (is-power-of-n?\
    \ x n)\n    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n\
    \          (else (is-power-of-n? (/ x n) n))))\n  (is-power-of-n? x n))\n", " \
    \ (if (= x 1)\n      #t\n      (if (and (integer? (log x n))\n               (=\
    \ (expt n (log x n)) x))\n          #t\n          #f)))\n", "  (define (is-power?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power? (/ x n) n)\n            #f)))\n  (is-power? x n))\n", "  (if (zero?\
    \ (modulo x n))\n      (if (zero? (modulo x (expt n 2)))\n          #f\n     \
    \     #t)\n      #f))\n", "  (if (= x 1)\n      #t\n      (if (= (modulo x n)\
    \ 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n\
    \          [(= x n) #t]\n          [(< x n) #f]\n          [else (loop (/ x n)\
    \ n)])))\n", "  (cond [(= x 1) #t]\n        [(= x n) #t]\n        [(= x (* n n))\
    \ #t]\n        [else #f]))\n", "  (define (is-power? n x)\n    (if (= n 1)\n \
    \       #t\n        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n\
    \            #f)))\n  (is-power? x n))\n", "  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n     \
    \   (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n           \
    \ #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n    (if (= x\
    \ 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/\
    \ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is-power x\
    \ n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n          \
    \  (is-power (/ x n) n)\n            #f)))\n  (is-power x n))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (define (is_simple_power-helper x n)\n    (if (= x 1)\n        #t\n        (if\
    \ (= (modulo x n) 0)\n            (is_simple_power-helper (/ x n) n)\n       \
    \     #f)))\n  (is_simple_power-helper x n))\n", "  (if (and (integer? x) (integer?\
    \ n))\n      (if (and (not (= x 0)) (not (= n 0)))\n          (if (= (expt n (round\
    \ (log x n))) x)\n              #t\n              #f)\n          #f)\n      #f))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power? x n)\n    (cond ((= x 1) #t)\n          ((=\
    \ (modulo x n) 0) (is-power? (/ x n) n))\n          (else #f)))\n  (is-power?\
    \ x n))\n", "  (let loop ([x x] [n n])\n    (cond\n      [(= x 1) true]\n    \
    \  [(= x n) true]\n      [(< x n) false]\n      [else (loop (quotient x n) n)])))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (if (= x\
    \ 1)\n      #t\n      (is-power-of? x n)))\n", "  (define (is-power-of? x n)\n\
    \    (cond\n      [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= x n) #t]\n\
    \      [(< x n) #f]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (zero? (remainder x n))\n \
    \       (if (= x n)\n            #t\n            (is-power-of? (/ x n) n))\n \
    \       #f))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (define (is-power?\
    \ x n)\n    (cond ((= n 1) #t)\n          ((= x 1) #f)\n          ((= (modulo\
    \ x n) 0) (is-power? (/ x n) n))\n          (else #f)))\n  (is-power? x n))\n",
  "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power? x n)\n    (cond ((= x 1) #t)\n          ((=\
    \ x n) #t)\n          ((< x n) #f)\n          (else (is-power? (/ x n) n))))\n\
    \  (is-power? x n))\n", "  (and (integer? (expt n (round (log x n))))\n      \
    \ (= (expt n (round (log x n))) x)))\n", "  (if (= x 1)\n      #t\n      (if (=\
    \ x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n", "  (define (is-power-of-n? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n          (else\
    \ (is-power-of-n? (/ x n) n))))\n  (is-power-of-n? x n))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power (/ x n)\
    \ n)\n          #f)))\n", "  (define (is-power-of? x n)\n    (if (= n 1)\n   \
    \     #t\n        (if (= x 1)\n            #f\n            (if (= (modulo x n)\
    \ 0)\n                (is-power-of? (/ x n) n)\n                #f))))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n     \
    \   (if (= (remainder x n) 0)\n            (is-power-of? (/ x n) n)\n        \
    \    #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n    (cond\
    \ ((= n 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n    \
    \      (else #f)))\n  (is-power-of? x n))\n", "  (if (zero? (modulo x n))\n  \
    \    (if (zero? (modulo n x))\n          #t\n          (is_simple_power (quotient\
    \ x n) n))\n      #f))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n  \
    \      #t\n        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n\
    \            #f)))\n  (is-power-of? x n))\n", "  (let loop ([x x] [n n])\n   \
    \ (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n       \
    \   [else (loop (/ x n) n)])))\n", "  (define (is-power-of? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of? (/ x\
    \ n) n)]\n      [else false]))\n  (is-power-of? x n))\n", "  (let loop ([x x]\
    \ [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n\
    \          [else (loop (/ x n) n)])))\n", "  (define (is-power-of? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of\
    \ x n)\n    (if (= n 1)\n        #t\n        (if (= (remainder x n) 0)\n     \
    \       (is-power-of (/ x n) n)\n            #f)))\n  (is-power-of x n))\n", " \
    \ (if (and (integer? x) (integer? n))\n      (if (= x 1)\n          true\n   \
    \       (if (= n 1)\n              false\n              (if (= (expt n (floor\
    \ (log x n))) x)\n                  true\n                  false)))\n      false))\n",
  "  (define (is-power-of? x n)\n    (cond ((= n 1) #t)\n          ((= x 1) #f)\n\
    \          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n          (else #f)))\n\
    \  (is-power-of? x n))\n", "  (if (and (integer? x) (integer? n))\n      (if (=\
    \ x 1)\n          #t\n          (if (= n 1)\n              #f\n              (if\
    \ (= n 0)\n                  #f\n                  (if (= x n)\n             \
    \         #t\n                      (if (= x 0)\n                          #f\n\
    \                          (if (= (modulo x n) 0)\n                          \
    \    (is_simple_power (/ x n) n)\n                              #f))))))\n   \
    \   #f))\n", "  (define (is-power-of? x n)\n    (cond\n      [(= n 1) true]\n\
    \      [(= x 1) false]\n      [(= (modulo x n) 0) (is-power-of? (/ x n) n)]\n\
    \      [else false]))\n  (is-power-of? x n))\n", "  (define (is-power-of? x n)\n\
    \    (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n", "  (and (integer?\
    \ (expt n (log x n)))\n       (= x (expt n (log x n)))))\n", "  (if (= 1 n)\n\
    \      (= 1 x)\n      (if (= 1 x)\n          #f\n          (if (= (expt n (floor\
    \ (log x n))) x)\n              #t\n              #f))))\n", "  (if (not (integer?\
    \ x))\n      false\n      (if (not (integer? n))\n          false\n          (if\
    \ (not (positive? n))\n              false\n              (if (not (positive?\
    \ x))\n                  false\n                  (if (= x 1)\n              \
    \        true\n                      (if (= n 1)\n                          false\n\
    \                          (if (= x n)\n                              true\n \
    \                             (if (= x (* n n))\n                            \
    \      true\n                                  (if (= x (* n (* n n)))\n     \
    \                                 true\n                                     \
    \ (if (= x (* n (* n (* n n))))\n                                          true\n\
    \                                          (if (= x (* n (* n (* n (* n n)))))\n\
    \                                              true\n                        \
    \                      (if (= x (* n (* n (* n (* n (* n n))))))\n           \
    \                                       true\n                               \
    \                   (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n        \
    \                                              true\n                        \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n\
    \                                                          true\n            \
    \                                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n)))))))))\n                                              \
    \                true\n                                                      \
    \        (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n \
    \                                                                 true\n     \
    \                                                             (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                    \
    \                                                  true\n                    \
    \                                                  (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                         \
    \                                                 true\n                     \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                 \
    \                                                             true\n         \
    \                                                                     (if (= x\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                                            \
    \      true\n                                                                \
    \                  (if (= x (* n (* n", "  (define (iter x n i)\n    (cond\n \
    \     [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n     \
    \ [(= x (* n (* i i))) true]\n      [(= x (* n (* i (* i i)))) true]\n      [(=\
    \ x (* n (* i (* i (* i i))))) true]\n      [(= x (* n (* i (* i (* i (* i i))))))\
    \ true]\n      [(= x (* n (* i (* i (* i (* i (* i i))))))) true]\n      [(= x\
    \ (* n (* i (* i (* i (* i (* i (* i i)))))))) true]\n      [(= x (* n (* i (*\
    \ i (* i (* i (* i (* i (* i i))))))))) true]\n      [(= x (* n (* i (* i (* i\
    \ (* i (* i (* i (* i (* i i)))))))))) true]\n      [(= x (* n (* i (* i (* i\
    \ (* i (* i (* i (* i (* i (* i i))))))))))) true]\n      [(= x (* n (* i (* i\
    \ (* i (* i (* i (* i (* i (* i (* i (* i i)))))))))))) true]\n      [(= x (*\
    \ n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i i))))))))))))) true]\n\
    \      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i\
    \ i)))))))))))))) true]\n      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (*\
    \ i (* i (* i (* i (* i (* i i))))))))))))))) true]\n      [(= x (* n (* i (*\
    \ i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i i))))))))))))))))\
    \ true]\n      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (*\
    \ i (* i (* i (* i (* i i))))))))))))))))) true]\n      [(= x (* n (* i (* i (*\
    \ i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (*", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (define (is-power-of? x n)\n    (cond ((= x 1) #t)\n          ((= (modulo x\
    \ n) 0) (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of? x n))\n",
  "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo\
    \ x n) 0)\n            (is-power? (/ x n) n)\n            #f)))\n  (is-power?\
    \ x n))\n", "  (cond\n    [(= x 1) #t]\n    [(= x n) #t]\n    [(= x (* n n)) #t]\n\
    \    [(= x (* n (* n n))) #t]\n    [(= x (* n (* n (* n n)))) #t]\n    [(= x (*\
    \ n (* n (* n (* n n))))) #t]\n    [(= x (* n (* n (* n (* n (* n n)))))) #t]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n n))))))) #t]\n    [(= x (* n (* n (*\
    \ n (* n (* n (* n (* n n)))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n\
    \ (* n (* n n))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n)))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n)))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n n))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))) #t]\n    [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n n)))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))) #t]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n          (is_simple_power\
    \ (/ x n) n)\n          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n      \
    \    (if (= (remainder x n) 0)\n              (is_simple_power (/ x n) n)\n  \
    \            #f))))\n", "  (define (is-power-of? x n)\n    (cond ((= n 0) #f)\n\
    \          ((= x 0) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n", "  (cond\n    [(= x 1) true]\n\
    \    [(= x n) true]\n    [(= x (* n n)) true]\n    [(= x (* n (* n n))) true]\n\
    \    [(= x (* n (* n (* n n)))) true]\n    [(= x (* n (* n (* n (* n n))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n n)))))) true]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n n))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n n))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n n))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))) true]\n  \
    \  [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n n)))))))))))))) true]\n    [(= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))) true]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n)))))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))) true]\n    [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n)))))))))))))))))) true", "  (if (= x 1)\n      #t\n      (if (= (modulo\
    \ x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define\
    \ (is-power-of? x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n)\
    \ 0)\n            (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n     \
    \   (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n           \
    \ #f)))\n  (is-power-of? x n))\n", "  (define (is-power-of-n? x n)\n    (if (=\
    \ x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of-n?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of-n? x n))\n", "  (let loop ([x\
    \ x] [n n])\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n)\
    \ #f]\n      [else (loop (/ x n) n)])))\n", "  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(> x n) (loop (- x n) n)]\n\
    \          [else false])))\n", "  (define (iter x n)\n    (cond\n      [(= n 1)\
    \ (= x 1)]\n      [(= x 1) false]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (iter (/ x n) n)]))\n  (iter x n))\n", "  (if (= x 1)\n      #t\n\
    \      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n       \
    \   #f)))\n", "  (define (iter x n)\n    (cond ((= x 1) true)\n          ((= x\
    \ n) true)\n          ((< x n) false)\n          (else (iter (/ x n) n))))\n \
    \ (iter x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n      \
    \      #f)))\n  (is-power-of? x n))\n", "  (if (= x 1)\n      #t\n      (let loop\
    \ ([x x] [n n])\n        (if (= x n)\n            #t\n            (if (> x n)\n\
    \                (loop (/ x n) n)\n                #f)))))\n", "  (if (= x 1)\n\
    \      #t\n      (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n\
    \          #f)))\n", "  (if (= x 1)\n      #t\n      (if (= x n)\n          #t\n\
    \          (if (= x (* n n))\n              #t\n              (if (= x (* n (*\
    \ n n)))\n                  #t\n                  (if (= x (* n (* n (* n n))))\n\
    \                      #t\n                      (if (= x (* n (* n (* n (* n\
    \ n)))))\n                          #t\n                          (if (= x (*\
    \ n (* n (* n (* n (* n n))))))\n                              #t\n          \
    \                    (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n       \
    \                           #t\n                                  (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n n))))))))\n                                \
    \      #t\n                                      (if (= x (* n (* n (* n (* n\
    \ (* n (* n (* n (* n n)))))))))\n                                          #t\n\
    \                                          (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n))))))))))\n                                             \
    \ #t\n                                              (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n))))))))))\n                              \
    \                    #t\n                                                  (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))\n \
    \                                                     #t\n                   \
    \                                   (if (= x (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n n))))))))))))\n                                 \
    \                         #t\n                                               \
    \           (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n)))))))))))))\n                                                    \
    \          #t\n                                                              (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                  #t\n      \
    \                                                            (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n\
    \                                                                      #t", " \
    \ (let loop ([x x] [n n])\n    (cond [(= x 1) #t]\n          [(= x n) #t]\n  \
    \        [(< x n) #f]\n          [else (loop (/ x n) n)])))\n", "  (define (is-power-of?\
    \ x n)\n    (cond\n      [(= x 1) #t]\n      [(< x 1) #f]\n      [(= (modulo x\
    \ n) 0) (is-power-of? (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n",
  "  (let ([x (exact->inexact x)])\n    (and (not (zero? (remainder x n)))\n     \
    \    (or (zero? (remainder x 1))\n             (zero? (remainder x n))))))\n",
  "  (define (is-power-of? x n)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n\
    \      [(> x n) (is-power-of? (/ x n) n)]\n      [else #f]))\n  (is-power-of?\
    \ x n))\n", "  (define (is-power-of? x n)\n    (if (= x 1)\n        #t\n     \
    \   (if (= (modulo x n) 0)\n            (is-power-of? (/ x n) n)\n           \
    \ #f)))\n  (is-power-of? x n))\n", "  (if (zero? (remainder x n))\n      (if (zero?\
    \ (remainder x (expt n 2)))\n          (is_simple_power (/ x n) n)\n         \
    \ #t)\n      #f))\n", "  (define (is-power? x n)\n    (if (= x 1)\n        #t\n\
    \        (if (= (modulo x n) 0)\n            (is-power? (/ x n) n)\n         \
    \   #f)))\n  (is-power? x n))\n", "  (let loop ([i 1])\n    (if (= (expt n i)\
    \ x)\n        #t\n        (if (< (expt n i) x)\n            (loop (+ i 1))\n \
    \           #f))))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n)\
    \ 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n", "  (define (is-power-of?\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is-power-of? (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n", " \
    \ (define (power n)\n    (if (= n 1)\n        1\n        (* n (power (- n 1)))))\n\
    \  (define (is_power? x n)\n    (if (= x (power n))\n        #t\n        (if (&lt;\
    \ x (power n))\n            #f\n            (is_power? x (+ n 1)))))\n  (is_power?\
    \ x n))\n", "  (if (= x 1)\n      #t\n      (if (= (remainder x n) 0)\n      \
    \    (is_simple_power (/ x n) n)\n          #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
