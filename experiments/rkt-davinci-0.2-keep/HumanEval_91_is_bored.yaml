name: HumanEval_91_is_bored
language: racket
prompt: "#lang racket\n\n;; You'll be given a string of words, and your task is to\
  \ count the number\n;; of boredoms. A boredom is a sentence that starts with the\
  \ word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
  ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The sun\
  \ is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
  \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
  \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n \
  \   (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
  \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
  \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
completions: ["  (length (filter (lambda (x) (string=? (substring x 0 1) \"I\"))\n\
    \                  (regexp-split #rx\"[.?!]\" S))))\n", "  (count (lambda (s)\
    \ (string=? (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\\
    ?|!\" S)))\n", "  (define (is_bored-helper S n)\n    (cond\n      [(empty? S)\
    \ n]\n      [(string=? (first S) \"I\") (is_bored-helper (rest S) (+ n 1))]\n\
    \      [else (is_bored-helper (rest S) n)]))\n  (is_bored-helper (string-split\
    \ S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else (is_bored\
    \ (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (string-take S 1) \"I\") (+ 1 (is_bored (string-drop S 1)))]\n    [else (is_bored\
    \ (string-drop S 1))]))\n", "  (length (filter (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n                  (regexp-split #rx\"\\.|\\?|!\" S))))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop S\
    \ 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (cond\n    [(string=?\
    \ S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(string=? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else\
    \ (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n",
  "  (cond [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n        [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2 (string-length\
    \ S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (and\
    \ (equal? (first x) \"I\")\n                          (not (equal? (second x)\
    \ \"am\"))))\n         (split-string S \"\\\\.|\\\\?|!\")))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"\
    I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (if\
    \ (string-contains S \"I\")\n      1\n      0))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=? \"\
    I\" (car x))) (split S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1)\
    \ \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (define (is-bored-helper S)\n    (cond [(empty? S) 0]\n          [(equal? (first\
    \ S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n          [else (is-bored-helper\
    \ (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n", "  (count-if (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n \
    \     [(equal? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else\
    \ (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"\\.|\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1)\
    \ \"I\")\n     (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (string-take S 1) \"I\")\n     (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (define (is_bored-helper\
    \ S i)\n    (cond\n      [(= i (string-length S)) 0]\n      [(string=? (substring\
    \ S i (+ i 2)) \"I \") (+ 1 (is_bored-helper S (+ i 2)))]\n      [else (is_bored-helper\
    \ S (+ i 1))]))\n  (is_bored-helper S 0))\n", "  (count (lambda (s) (string=?\
    \ (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\\.|\\?|!\" S)))\n",
  "  (define (is_bored-helper S i)\n    (cond\n      [(= i (string-length S)) 0]\n\
    \      [(= (string-ref S i) #\\I) (+ 1 (is_bored-helper S (+ i 1)))]\n      [else\
    \ (is_bored-helper S (+ i 1))]))\n  (is_bored-helper S 0))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (let loop ([S (string-split S #\\.)]\n             [n 0])\n\
    \    (cond [(empty? S) n]\n          [(string=? (string-trim (first S)) \"I\"\
    )\n           (loop (rest S) (+ n 1))]\n          [else (loop (rest S) n)])))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored-helper S acc)\n    (cond\n      [(empty? S)\
    \ acc]\n      [(equal? (first S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n\
    \      [else (is_bored-helper (rest S) acc)]))\n  (is_bored-helper (string-split\
    \ S) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"\
    I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (count (lambda (s) (string=? (substring s 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"[.?!]\" S)))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"\
    ))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? \"I\" (car (string-split S #\\space))) (+ 1 (is_bored (cdr (string-split\
    \ S #\\space))))]\n    [else (is_bored (cdr (string-split S #\\space)))]))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string\
    \ S \"[.?!]\")))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty?\
    \ S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n\
    \      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S\
    \ #\\.)))\n", "  (define (is_bored-helper S acc)\n    (cond\n      [(empty? S)\
    \ acc]\n      [(string=? (first S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n\
    \      [else (is_bored-helper (rest S) acc)]))\n  (is_bored-helper (string-split\
    \ S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop S\
    \ 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (define (count-boredoms S)\n    (cond\n\
    \      [(string=? S \"\") 0]\n      [(string=? (substring S 0 2) \"I \") (+ 1\
    \ (count-boredoms (substring S 2)))]\n      [else (count-boredoms (substring S\
    \ 1))]))\n  (count-boredoms S))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else\
    \ (is_bored (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (let\
    \ ([sentences (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix?\
    \ \"I\" s)) sentences))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n   \
    \      (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (first (string-split S #\\.)) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n", "  (let ([words (string-split\
    \ S #\\space)])\n    (length (filter (lambda (x) (string=? x \"I\")) words))))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (count (string-split\
    \ S #rx\"[.?!]\")\n         (lambda (S) (string-prefix? \"I\" (string-trim S)))))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (cond [(string=? S \"\") 0]\n        [(string=? (substring S\
    \ 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n        [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (define (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n\
    \      [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else\
    \ (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S #\\.)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (count (lambda (x) (string=? \"I\" (substring\
    \ x 0 1)))\n         (regexp-split #rx\"\\.|\\?|!\" S)))\n", "  (count (lambda\
    \ (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\"\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I\
    \ \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (define (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n    \
    \  [(string=? (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n     \
    \ [else (is_bored-helper (rest S) count)]))\n  (is_bored-helper (string-split\
    \ S #\\.) 0))\n", "  (define (is_bored-iter S count)\n    (cond ((string=? S \"\
    \") count)\n          ((string=? (substring S 0 1) \"I\")\n           (is_bored-iter\
    \ (substring S 1 (string-length S)) (+ count 1)))\n          (else (is_bored-iter\
    \ (substring S 1 (string-length S)) count))))\n  (is_bored-iter S 0))\n", "  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"\
    I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (define (is_bored-helper S count)\n    (cond\n      [(empty? S)\
    \ count]\n      [(equal? (first S) \"I\")\n       (is_bored-helper (rest S) (+\
    \ count 1))]\n      [else (is_bored-helper (rest S) count)]))\n  (is_bored-helper\
    \ (string-split S #\\.) 0))\n", "  (count-if (lambda (x) (string=? (string-take\
    \ x 1) \"I\"))\n            (split-string S \"[.?!]\")))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1\
    \ (string-length S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"\\.|\\?|!\" S)))\n", "  (define (count-boredoms S)\n    (cond\n      [(null?\
    \ S) 0]\n      [(string=? (car S) \"I\") (+ 1 (count-boredoms (cdr S)))]\n   \
    \   [else (count-boredoms (cdr S))]))\n  (count-boredoms (string-split S #\\.)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper S i)\n\
    \    (cond\n      [(= i (string-length S)) 0]\n      [(and (= (string-ref S i)\
    \ #\\I)\n            (or (= (string-ref S (+ i 1)) #\\.)\n                (= (string-ref\
    \ S (+ i 1)) #\\?)\n                (= (string-ref S (+ i 1)) #\\!)))\n      \
    \ (+ 1 (is_bored-helper S (+ i 1)))]\n      [else (is_bored-helper S (+ i 1))]))\n\
    \  (is_bored-helper S 0))\n", "  (cond [(empty? S) 0]\n        [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n        [else (is_bored (rest S))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n \
    \   [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (define (is-bored-helper S)\n    (cond\n      [(empty? S)\
    \ 0]\n      [(string=? (first S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n  \
    \    [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split S #\\\
    .)))\n", "  (define (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n   \
    \   [(string=? (first S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else\
    \ (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split S #\\.)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is_bored-helper\
    \ S)\n    (cond [(empty? S) 0]\n          [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n          [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond [(empty? S) 0]\n\
    \        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \        [else (is_bored (substring S 1))]))\n", "  (count-if (lambda (x) (string=?\
    \ (substring x 0 1) \"I\"))\n            (regexp-split #rx\"[.?!]\" S)))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([sentences\
    \ (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"\
    I\" s)) sentences))))\n", "  (cond\n    [(empty? S) 0]\n    [(equal? (first S)\
    \ \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (string-upcase (substring S 0 1)) \"I\")\n     (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n \
    \   [(string=? S \"\") 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond [(string=?\
    \ S \"\") 0]\n        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n        [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n  \
    \  [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (define (is_bored-helper S count)\n    (cond\n      [(empty?\
    \ S) count]\n      [(string=? (first S) \"I\") (is_bored-helper (rest S) (+ count\
    \ 1))]\n      [else (is_bored-helper (rest S) count)]))\n  (is_bored-helper (string-split\
    \ S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\"\
    ) (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n", "  (define\
    \ (is_bored-iter S acc)\n    (cond\n      [(empty? S) acc]\n      [(string=? (first\
    \ S) \"I\") (is_bored-iter (rest S) (+ acc 1))]\n      [else (is_bored-iter (rest\
    \ S) acc)]))\n  (is_bored-iter (string-split S #\\.) 0))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1\
    \ (string-length S))))]\n    [else (is_bored (substring S 1 (string-length S)))]))\n",
  "  (count-boredoms (string-split S #\\.)\n                  0))\n", "  (cond\n \
    \   [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (cond [(string=? S \"\") 0]\n        [(string=? (substring S\
    \ 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n        [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1)\
    \ \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split\
    \ #rx\"\\.|\\?|!\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (let ([sentences\
    \ (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"\
    I\" s)) sentences))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", " \
    \ (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (length (regexp-match\
    \ #rx\"^I\" (string-split S #rx\"[.?!]\"))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n \
    \   [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n", "  (count (lambda (x) (string=? (substring x 0 1) \"I\"))\n    \
    \     (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (let ([words (string-split S #\\space)])\n    (length (filter\
    \ (lambda (w) (string=? w \"I\")) words))))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"\\\\.|\\\\?|!\" S)))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (count-if (lambda (x) (string=? (string-upcase\
    \ (substring x 0 1)) \"I\"))\n            (regexp-split #rx\"[.?!]\" S)))\n",
  "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (define (is-bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(equal? (first S) \"I\") (+ 1 (is-bored-helper\
    \ (rest S)))]\n      [else (is-bored-helper (rest S))]))\n  (is-bored-helper (string-split\
    \ S)))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I\
    \ \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n",
  "  (cond [(empty? S) 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else\
    \ (is_bored (rest S))]))\n", "  (cond\n    [(string=? S \"\") 0]\n    [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (define (is_bored-helper S count)\n    (cond\n  \
    \    [(empty? S) count]\n      [(string=? (first S) \"I\") (is_bored-helper (rest\
    \ S) (+ count 1))]\n      [else (is_bored-helper (rest S) count)]))\n  (is_bored-helper\
    \ (string-split S) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 2)\
    \ \"I \") (+ 1 (is_bored (substring S 2)))]\n    [else (is_bored (substring S\
    \ 1))]))\n", "  (count (lambda (x) (and (string=? (substring x 0 1) \"I\") (string=?\
    \ (substring x 1 1) \" \"))) (string-split S #\\.)))\n", "  (define (is_bored-helper\
    \ S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1\
    \ (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper\
    \ (string-split S #\\.)))\n", "  (count-boredoms (string-split S #\\.)\n     \
    \             0))\n", "  (cond [(empty? S) 0]\n        [(string=? (first S) \"\
    I\") (+ 1 (is_bored (rest S)))]\n        [else (is_bored (rest S))]))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (define (is_bored-helper S)\n    (cond\n\
    \      [(empty? S) 0]\n      [(string=? (first S) \"I\") (+ 1 (is_bored-helper\
    \ (rest S)))]\n      [else (is_bored-helper (rest S))]))\n  (is_bored-helper (string-split\
    \ S #\\.)))\n", "  (let ([S (string-split S #\\.)])\n    (length (filter (lambda\
    \ (S) (string-prefix? \"I\" S)) S))))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored\
    \ (substring S 1))]))\n", "  (define (is_bored-helper S count)\n    (cond\n  \
    \    [(empty? S) count]\n      [(string=? (first S) \"I\") (is_bored-helper (rest\
    \ S) (+ count 1))]\n      [else (is_bored-helper (rest S) count)]))\n  (is_bored-helper\
    \ (string-split S #\\.) 0))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring\
    \ S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0 1)\
    \ \"I\") (+ 1 (is_bored (substring S 1 (string-length S))))]\n    [else (is_bored\
    \ (substring S 1 (string-length S)))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n   \
    \ [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=?\
    \ (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n",
  "  (define (is_bored-helper S acc)\n    (cond\n      [(empty? S) acc]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n      [else (is_bored-helper\
    \ (rest S) acc)]))\n  (is_bored-helper (string-split S #\\.) 0))\n", "  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n", "  (count (lambda (x) (string=? (substring\
    \ x 0 1) \"I\"))\n         (regexp-split #rx\"[.?!]\" S)))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (let ([words (string-split S #\\\
    space)])\n    (length (filter (lambda (w) (string=? w \"I\")) words))))\n", " \
    \ (cond [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest\
    \ S)))]\n        [else (is_bored (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n\
    \    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n \
    \   [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n   \
    \ [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n    [else (is_bored\
    \ (rest S))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (substring S 0\
    \ 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring\
    \ S 1))]))\n", "  (cond\n    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+\
    \ 1 (is_bored (rest S)))]\n    [else (is_bored (rest S))]))\n", "  (cond\n   \
    \ [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty?\
    \ S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S\
    \ 2)))]\n    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S)\
    \ 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring S 2)))]\n\
    \    [else (is_bored (substring S 1))]))\n", "  (cond\n    [(empty? S) 0]\n  \
    \  [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring S 1)))]\n   \
    \ [else (is_bored (substring S 1))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
