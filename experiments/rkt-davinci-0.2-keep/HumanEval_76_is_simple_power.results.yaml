name: HumanEval_76_is_simple_power
language: racket
results:
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (cond ((= x 1) #t)\n        ((=\
    \ x n) #t)\n        ((< x n) #f)\n        (else (is_simple_power (/ x n) n))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(< x n) false]\n      \
    \    [else (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= n 1) #t)\n          ((= x 1) #f)\n          ((= (modulo x n) 0) (is-power?\
    \ (/ x n) n))\n          (else #f)))\n  (is-power? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpggi60d02.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpggi60d02.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpggi60d02.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpggi60d02.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpggi60d02.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt9q7s5vh.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt9q7s5vh.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpt9q7s5vh.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt9q7s5vh.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt9q7s5vh.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(= x (* n\
    \ i)) #t]\n      [(> x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else\
    \ #f]))\n  (is_simple_power-iter x n 1))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyj31qt0m.rkt:33:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyj31qt0m.rkt:34:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyj31qt0m.rkt:35:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let ([x (exact->inexact x)])\n\
    \    (if (= x 1)\n        true\n        (let loop ([i 1])\n          (if (= (expt\
    \ n i) x)\n              true\n              (if (< (expt n i) x)\n          \
    \        (loop (+ i 1))\n                  false))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (modulo x n))\n   \
    \   (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptvfe8mbb.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:32:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptvfe8mbb.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwzxg_a3d.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwzxg_a3d.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwzxg_a3d.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwzxg_a3d.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwzxg_a3d.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? n x)\n \
    \   (if (= n 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power-of?\
    \ n (/ x n))\n            #f)))\n  (is-power-of? n x))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7rol80q.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa7rol80q.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpa7rol80q.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa7rol80q.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7rol80q.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n\
    \              (if (= x n)\n                  #t\n                  (if (= (modulo\
    \ x n) 0)\n                      (is_simple_power (/ x n) n)\n               \
    \       #f))))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power? (/ x n) n)]))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= (remainder x n) 0) (is-power? (/ x n) n))\n    \
    \      (else #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power? (/ x n) n)]))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      true\n    \
    \  (if (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          false)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop\
    \ (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n   \
    \ (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n\
    \    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n\
    \    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n\
    \    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n\
    \    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is_simple_power-helper (/ x n) n)\n            #f)))\n  (if (= x n)\n  \
    \    #t\n      (is_simple_power-helper x n)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (not (= x 1)) (= (expt\
    \ n (round (log x n))) x))\n      #t\n      #f))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbruu31vm.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbruu31vm.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power? (/ x n)\
    \ n)]\n      [else false]))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n\
    \              (if (= (expt n (round (log x n))) x)\n                  #t\n  \
    \                #f)))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (is-power? (/ x n) n)]))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let ([x (exact->inexact x)])\n\
    \    (and (integer? x)\n         (integer? n)\n         (let loop ([n n] [x x])\n\
    \           (cond [(= n 1) (= x 1)]\n                 [(= n x) #t]\n         \
    \        [(> n x) #f]\n                 [else (loop (* n n) x)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm9qg77xk.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else\
    \ (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (if\
    \ (zero? x)\n        #t\n        (if (zero? (modulo x n))\n            (loop (/\
    \ x n) n)\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg_8w5dsy.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_8w5dsy.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpg_8w5dsy.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpg_8w5dsy.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= x n)\n            #t\n   \
    \         (if (> x n)\n                (is_simple_power-helper (/ x n) n)\n  \
    \              #f))))\n  (is_simple_power-helper x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? x)\n      #f\n    \
    \  (if (zero? n)\n          #f\n          (if (zero? (modulo x n))\n         \
    \     (is_simple_power (/ x n) n)\n              #f))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr00msmr1.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr00msmr1.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpr00msmr1.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpr00msmr1.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (if\
    \ (zero? n)\n        #f\n        (if (zero? x)\n            #t\n            (if\
    \ (zero? (modulo x n))\n                (loop (/ x n) n)\n                #f)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkv408hr4.rkt:28:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkv408hr4.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkv408hr4.rkt:31:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkv408hr4.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(< x n) false]\n      \
    \    [else (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphb1h7tdc.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphb1h7tdc.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphb1h7tdc.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphb1h7tdc.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphb1h7tdc.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x n)\n        #t\n        (if (< x n)\n            #f\n           \
    \ (is-power-of? (/ x n) n))))\n  (is-power-of? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp590urzd7.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n\
    \              (if (= x n)\n                  #t\n                  (if (= (remainder\
    \ x n) 0)\n                      (is_simple_power (/ x n) n)\n               \
    \       #f))))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n          (else\
    \ (is-power? (/ x n) n))))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (modulo x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-helper\
    \ x n i)\n    (cond\n      [(= x (* n n)) true]\n      [(> x (* n n)) false]\n\
    \      [else (is_simple_power-helper x n (+ i 1))]))\n  (is_simple_power-helper\
    \ x n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg3deg09y.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (quotient x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmop1sns0.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmfqknxzz.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmfqknxzz.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmfqknxzz.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmfqknxzz.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmfqknxzz.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let ([root (exact-floor (sqrt\
    \ x))])\n    (and (= x (expt n root))\n         (= (expt n (add1 root)) (add1\
    \ x)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53z9tur6.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp53z9tur6.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp53z9tur6.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp53z9tur6.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53z9tur6.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp53z9tur6.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (modulo x n))\n   \
    \   (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprp63taib.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprp63taib.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprp63taib.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprp63taib.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprp63taib.rkt:32:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprp63taib.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprp63taib.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (define (is-power-of-iter x n)\n      (cond\n        [(= x 1) true]\n    \
    \    [(= x n) true]\n        [(< x n) false]\n        [else (is-power-of-iter\
    \ (/ x n) n)]))\n    (is-power-of-iter x n))\n  (is-power-of? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (is-power?\
    \ (/ x n) n)]))\n  (is-power? x n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= n 1)\n      (= x 1)\n \
    \     (if (= x 1)\n          #t\n          (if (and (integer? (/ x n))\n     \
    \              (is_simple_power (/ x n) n))\n              #t\n              #f))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(zero? n) #f]\n          [(zero? x) #t]\n          [(zero? (modulo x n)) (loop\
    \ (/ x n) n)]\n          [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp26ewjyyg.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp26ewjyyg.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp26ewjyyg.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp26ewjyyg.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of n x)\n  \
    \  (if (zero? x)\n        #t\n        (if (zero? (modulo x n))\n            (is-power-of\
    \ n (/ x n))\n            #f)))\n  (is-power-of n x))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_2swzva.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9_2swzva.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9_2swzva.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9_2swzva.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x (expt n (round (log x\
    \ n))))\n      #t\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmtcjjmiv.rkt:31:4\n\
    \n/: division by zero\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-iter\
    \ x n i)\n    (cond\n      [(= x n) true]\n      [(= x (* n i)) true]\n      [(>\
    \ x (* n i)) (is_simple_power-iter x n (+ i 1))]\n      [else false]))\n  (is_simple_power-iter\
    \ x n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuix7lnxm.rkt:32:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuix7lnxm.rkt:33:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuix7lnxm.rkt:34:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuix7lnxm.rkt:36:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power? (/ x n) n))\n       \
    \   (else #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6oyluij.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf6oyluij.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf6oyluij.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf6oyluij.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6oyluij.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-iter\
    \ x n i)\n    (cond ((= x 1) #t)\n          ((= x (expt n i)) #t)\n          ((>\
    \ x (expt n i)) (is_simple_power-iter x n (+ i 1)))\n          (else #f)))\n \
    \ (is_simple_power-iter x n 1))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(< x n) false]\n      \
    \    [else (loop (quotient x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuu_bsikz.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= x (* n n))\n              #t\n     \
    \         (if (= x (* n (* n n)))\n                  #t\n                  (if\
    \ (= x (* n (* n (* n n))))\n                      #t\n                      (if\
    \ (= x (* n (* n (* n (* n n)))))\n                          #t\n            \
    \              (if (= x (* n (* n (* n (* n (* n n))))))\n                   \
    \           #t\n                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n n)))))))\n                                  #t\n                    \
    \              (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n       \
    \                               #t\n                                      (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n                  \
    \                        #t\n                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n               \
    \                               #t\n                                         \
    \     (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                  #t\n                      \
    \                            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))))))\n                                              \
    \        #t\n                                                      (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\n   \
    \                                                       #t\n                 \
    \                                         (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                      \
    \                                        #t\n                                \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                           \
    \                                       #t\n                                 \
    \                                 (if (= x (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                   \
    \                                                   #t\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpapnsrnv7.rkt:46:80: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 47\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? x)\n      #f\n    \
    \  (if (zero? n)\n          #f\n          (if (zero? (modulo x n))\n         \
    \     (is_simple_power (/ x n) n)\n              #f))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pkwrf18.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4pkwrf18.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4pkwrf18.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4pkwrf18.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (and (integer? (log x n))\n               (= (expt n (log x n)) x))\n      \
    \    #t\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_t5brnvt.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_t5brnvt.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_t5brnvt.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_t5brnvt.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_t5brnvt.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (cond\n    [(= x 1) true]\n  \
    \  [(= x n) true]\n    [(= x (* n n)) true]\n    [(= x (* n (* n n))) true]\n\
    \    [(= x (* n (* n (* n n)))) true]\n    [(= x (* n (* n (* n (* n n))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n n)))))) true]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n n))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n n))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n n))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))) true]\n  \
    \  [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n n)))))))))))))) true]\n    [(= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))) true]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n)))))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))) true]\n    [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n)))))))))))))))))) true\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa8ypbepc.rkt:33:4: read-syntax: expected a `]` to close `[`\n \
    \ possible cause: indentation suggests a missing `]` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (if\
    \ (zero? n)\n        (zero? x)\n        (if (zero? x)\n            #f\n      \
    \      (loop (quotient x n) n)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnvfjmoyo.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnvfjmoyo.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpnvfjmoyo.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnvfjmoyo.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (modulo x n))\n   \
    \   (if (zero? (modulo x (* n n)))\n          (is_simple_power x (* n n))\n  \
    \        #t)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6jx781er.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6jx781er.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6jx781er.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(> x n) (loop (- x n) n)]\n\
    \          [else #f])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr484imnc.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr484imnc.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpr484imnc.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of-n? x n)\n\
    \    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n    \
    \      (else (is-power-of-n? (/ x n) n))))\n  (is-power-of-n? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (and (integer? (log x n))\n               (= (expt n (log x n)) x))\n      \
    \    #t\n          #f)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (modulo x n))\n   \
    \   (if (zero? (modulo x (expt n 2)))\n          #f\n          #t)\n      #f))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgx5x72yz.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:32:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgx5x72yz.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (cond [(= x 1) #t]\n        [(=\
    \ x n) #t]\n        [(= x (* n n)) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfflq69m.rkt:24:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? n x)\n    (if\
    \ (= n 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxj6s_zj0.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxj6s_zj0.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxj6s_zj0.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxj6s_zj0.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power (/\
    \ x n) n)\n            #f)))\n  (is-power x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is_simple_power-helper\
    \ x n)\n    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n        \
    \    (is_simple_power-helper (/ x n) n)\n            #f)))\n  (is_simple_power-helper\
    \ x n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (and (not (= x 0)) (not (= n 0)))\n          (if (= (expt n (round\
    \ (log x n))) x)\n              #t\n              #f)\n          #f)\n      #f))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbguzu559.rkt:35:4\n\
    \n/: division by zero\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power? (/ x n) n))\n       \
    \   (else #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n      [else\
    \ (loop (quotient x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8jezdqvx.rkt:31:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (if (= x 1)\n      #t\n      (is-power-of?\
    \ x n)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) (= x 1)]\n      [(= x 1) #f]\n      [(= x n) #t]\n \
    \     [(< x n) #f]\n      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x\
    \ n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n    (check-equal?\
    \ (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal?\
    \ (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal?\
    \ (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal?\
    \ (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal?\
    \ (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7enggxnm.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (zero? (remainder x n))\n        (if (= x n)\n            #t\n       \
    \     (is-power-of? (/ x n) n))\n        #f))\n  (is-power-of? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfw90b5u.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= n 1) #t)\n          ((= x 1) #f)\n          ((= (modulo x n) 0) (is-power?\
    \ (/ x n) n))\n          (else #f)))\n  (is-power? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl8m_bo5.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsl8m_bo5.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsl8m_bo5.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsl8m_bo5.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl8m_bo5.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (cond\
    \ ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n          (else\
    \ (is-power? (/ x n) n))))\n  (is-power? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (and (integer? (expt n (round\
    \ (log x n))))\n       (= (expt n (round (log x n))) x)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp2c5w3na.rkt:30:4\n\
    \n/: division by zero\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of-n? x n)\n\
    \    (cond ((= x 1) #t)\n          ((= x n) #t)\n          ((< x n) #f)\n    \
    \      (else (is-power-of-n? (/ x n) n))))\n  (is-power-of-n? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= n 1)\n        #t\n        (if (= x 1)\n            #f\n           \
    \ (if (= (modulo x n) 0)\n                (is-power-of? (/ x n) n)\n         \
    \       #f))))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp78qtdfp6.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp78qtdfp6.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp78qtdfp6.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp78qtdfp6.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp78qtdfp6.rkt:38:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= n 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcaberib.rkt:25:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqcaberib.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqcaberib.rkt:28:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqcaberib.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcaberib.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (modulo x n))\n   \
    \   (if (zero? (modulo n x))\n          #t\n          (is_simple_power (quotient\
    \ x n) n))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ptzetav.rkt:34:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of x n)\n  \
    \  (if (= n 1)\n        #t\n        (if (= (remainder x n) 0)\n            (is-power-of\
    \ (/ x n) n)\n            #f)))\n  (is-power-of x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuh7h0ck.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcuh7h0ck.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpcuh7h0ck.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcuh7h0ck.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuh7h0ck.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          true\n          (if (= n 1)\n            \
    \  false\n              (if (= (expt n (floor (log x n))) x)\n               \
    \   true\n                  false)))\n      false))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= n 1) #t)\n          ((= x 1) #f)\n          ((= (modulo x n) 0)\
    \ (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn22ljmv.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwn22ljmv.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwn22ljmv.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwn22ljmv.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn22ljmv.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (and (integer? x) (integer?\
    \ n))\n      (if (= x 1)\n          #t\n          (if (= n 1)\n              #f\n\
    \              (if (= n 0)\n                  #f\n                  (if (= x n)\n\
    \                      #t\n                      (if (= x 0)\n               \
    \           #f\n                          (if (= (modulo x n) 0)\n           \
    \                   (is_simple_power (/ x n) n)\n                            \
    \  #f))))))\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= n 1) true]\n      [(= x 1) false]\n      [(= (modulo x n)\
    \ 0) (is-power-of? (/ x n) n)]\n      [else false]))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pz_8oy3.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5pz_8oy3.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5pz_8oy3.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5pz_8oy3.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5pz_8oy3.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) true]\n      [(= x n) true]\n      [(< x n) false]\n\
    \      [else (is-power-of? (/ x n) n)]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (and (integer? (expt n (log x\
    \ n)))\n       (= x (expt n (log x n)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1ot6qjr8.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp1ot6qjr8.rkt:30:4\n\n/: division\
    \ by zero\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= 1 n)\n      (= 1 x)\n \
    \     (if (= 1 x)\n          #f\n          (if (= (expt n (floor (log x n))) x)\n\
    \              #t\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpevs607yt.rkt:36:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (not (integer? x))\n     \
    \ false\n      (if (not (integer? n))\n          false\n          (if (not (positive?\
    \ n))\n              false\n              (if (not (positive? x))\n          \
    \        false\n                  (if (= x 1)\n                      true\n  \
    \                    (if (= n 1)\n                          false\n          \
    \                (if (= x n)\n                              true\n           \
    \                   (if (= x (* n n))\n                                  true\n\
    \                                  (if (= x (* n (* n n)))\n                 \
    \                     true\n                                      (if (= x (*\
    \ n (* n (* n n))))\n                                          true\n        \
    \                                  (if (= x (* n (* n (* n (* n n)))))\n     \
    \                                         true\n                             \
    \                 (if (= x (* n (* n (* n (* n (* n n))))))\n                \
    \                                  true\n                                    \
    \              (if (= x (* n (* n (* n (* n (* n (* n n)))))))\n             \
    \                                         true\n                             \
    \                         (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n\
    \                                                          true\n            \
    \                                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n n)))))))))\n                                              \
    \                true\n                                                      \
    \        (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n \
    \                                                                 true\n     \
    \                                                             (if (= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                    \
    \                                                  true\n                    \
    \                                                  (if (= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                         \
    \                                                 true\n                     \
    \                                                     (if (= x (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n                 \
    \                                                             true\n         \
    \                                                                     (if (= x\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                                            \
    \      true\n                                                                \
    \                  (if (= x (* n (* n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_66__4j3.rkt:54:96: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 55\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (iter x n i)\n    (cond\n\
    \      [(= x 1) true]\n      [(= x n) true]\n      [(= x (* n i)) true]\n    \
    \  [(= x (* n (* i i))) true]\n      [(= x (* n (* i (* i i)))) true]\n      [(=\
    \ x (* n (* i (* i (* i i))))) true]\n      [(= x (* n (* i (* i (* i (* i i))))))\
    \ true]\n      [(= x (* n (* i (* i (* i (* i (* i i))))))) true]\n      [(= x\
    \ (* n (* i (* i (* i (* i (* i (* i i)))))))) true]\n      [(= x (* n (* i (*\
    \ i (* i (* i (* i (* i (* i i))))))))) true]\n      [(= x (* n (* i (* i (* i\
    \ (* i (* i (* i (* i (* i i)))))))))) true]\n      [(= x (* n (* i (* i (* i\
    \ (* i (* i (* i (* i (* i (* i i))))))))))) true]\n      [(= x (* n (* i (* i\
    \ (* i (* i (* i (* i (* i (* i (* i (* i i)))))))))))) true]\n      [(= x (*\
    \ n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i i))))))))))))) true]\n\
    \      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i\
    \ i)))))))))))))) true]\n      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (*\
    \ i (* i (* i (* i (* i (* i i))))))))))))))) true]\n      [(= x (* n (* i (*\
    \ i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i i))))))))))))))))\
    \ true]\n      [(= x (* n (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (*\
    \ i (* i (* i (* i (* i i))))))))))))))))) true]\n      [(= x (* n (* i (* i (*\
    \ i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (* i (*\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnk67xr9z.rkt:34:87: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 35\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= x 1) #t)\n          ((= (modulo x n) 0) (is-power-of? (/ x n) n))\n\
    \          (else #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (cond\n    [(= x 1) #t]\n    [(=\
    \ x n) #t]\n    [(= x (* n n)) #t]\n    [(= x (* n (* n n))) #t]\n    [(= x (*\
    \ n (* n (* n n)))) #t]\n    [(= x (* n (* n (* n (* n n))))) #t]\n    [(= x (*\
    \ n (* n (* n (* n (* n n)))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n n)))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n n)))))))) #t]\n    [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))) #t]\n    [(= x (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n)))))))))) #t]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n))))))))))) #t]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))) #t]\n    [(= x (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))) #t]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n n))))))))))))))) #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))) #t]\n    [(= x (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))))))\
    \ #t]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (*\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsotlxnc3.rkt:33:65: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= (remainder x n) 0)\n              (is_simple_power\
    \ (/ x n) n)\n              #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond ((= n 0) #f)\n          ((= x 0) #t)\n          ((= (modulo x n) 0)\
    \ (is-power-of? (/ x n) n))\n          (else #f)))\n  (is-power-of? x n))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2vz6aur5.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2vz6aur5.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2vz6aur5.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2vz6aur5.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (cond\n    [(= x 1) true]\n  \
    \  [(= x n) true]\n    [(= x (* n n)) true]\n    [(= x (* n (* n n))) true]\n\
    \    [(= x (* n (* n (* n n)))) true]\n    [(= x (* n (* n (* n (* n n))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n n)))))) true]\n    [(= x (* n (* n (* n (*\
    \ n (* n (* n n))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n n))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n n))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))) true]\n  \
    \  [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))) true]\n\
    \    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\
    \ true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n n)))))))))))))) true]\n    [(= x (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))) true]\n    [(=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ n)))))))))))))))) true]\n    [(= x (* n (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n))))))))))))))))) true]\n    [(= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n n)))))))))))))))))) true\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp926of3x1.rkt:33:4: read-syntax: expected a `]` to close `[`\n \
    \ possible cause: indentation suggests a missing `]` before line 34\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of-n? x n)\n\
    \    (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of-n?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of-n? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\n\
    \      [(= x 1) #t]\n      [(= x n) #t]\n      [(< x n) #f]\n      [else (loop\
    \ (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n   \
    \ (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2) #t)\n\
    \    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16 4) #t)\n\
    \    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate 128 4) #f)\n\
    \    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n\
    \    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) true]\n          [(= x n) true]\n          [(> x n) (loop (- x n) n)]\n\
    \          [else false])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygf8f_r2.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpygf8f_r2.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpygf8f_r2.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (iter x n)\n    (cond\n\
    \      [(= n 1) (= x 1)]\n      [(= x 1) false]\n      [(= x n) true]\n      [(<\
    \ x n) false]\n      [else (iter (/ x n) n)]))\n  (iter x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9h63xiez.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (iter x n)\n    (cond\
    \ ((= x 1) true)\n          ((= x n) true)\n          ((< x n) false)\n      \
    \    (else (iter (/ x n) n))))\n  (iter x n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (let\
    \ loop ([x x] [n n])\n        (if (= x n)\n            #t\n            (if (>\
    \ x n)\n                (loop (/ x n) n)\n                #f)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (modulo x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= x n)\n          #t\n          (if (= x (* n n))\n              #t\n     \
    \         (if (= x (* n (* n n)))\n                  #t\n                  (if\
    \ (= x (* n (* n (* n n))))\n                      #t\n                      (if\
    \ (= x (* n (* n (* n (* n n)))))\n                          #t\n            \
    \              (if (= x (* n (* n (* n (* n (* n n))))))\n                   \
    \           #t\n                              (if (= x (* n (* n (* n (* n (*\
    \ n (* n n)))))))\n                                  #t\n                    \
    \              (if (= x (* n (* n (* n (* n (* n (* n (* n n))))))))\n       \
    \                               #t\n                                      (if\
    \ (= x (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))\n                  \
    \                        #t\n                                          (if (=\
    \ x (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n               \
    \                               #t\n                                         \
    \     (if (= x (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))\n\
    \                                                  #t\n                      \
    \                            (if (= x (* n (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n n)))))))))))\n                                              \
    \        #t\n                                                      (if (= x (*\
    \ n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n (* n n))))))))))))\n   \
    \                                                       #t\n                 \
    \                                         (if (= x (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                      \
    \                                        #t\n                                \
    \                              (if (= x (* n (* n (* n (* n (* n (* n (* n (*\
    \ n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                           \
    \                                       #t\n                                 \
    \                                 (if (= x (* n (* n (* n (* n (* n (* n (* n\
    \ (* n (* n (* n (* n (* n (* n (* n (* n n)))))))))))))\n                   \
    \                                                   #t\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmputpz3v13.rkt:46:80: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 47\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([x x] [n n])\n    (cond\
    \ [(= x 1) #t]\n          [(= x n) #t]\n          [(< x n) #f]\n          [else\
    \ (loop (/ x n) n)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2) #t)\n\
    \    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate 4 2)\
    \ #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate 16\
    \ 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) #t]\n      [(< x 1) #f]\n      [(= (modulo x n) 0) (is-power-of?\
    \ (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let ([x (exact->inexact x)])\n\
    \    (and (not (zero? (remainder x n)))\n         (or (zero? (remainder x 1))\n\
    \             (zero? (remainder x n))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4ujnztf.rkt:24:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl4ujnztf.rkt:25:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpl4ujnztf.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl4ujnztf.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4ujnztf.rkt:28:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl4ujnztf.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (cond\n      [(= x 1) #t]\n      [(= x n) #t]\n      [(> x n) (is-power-of?\
    \ (/ x n) n)]\n      [else #f]))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (zero? (remainder x n))\n\
    \      (if (zero? (remainder x (expt n 2)))\n          (is_simple_power (/ x n)\
    \ n)\n          #t)\n      #f))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6t7z24d2.rkt:30:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6t7z24d2.rkt:31:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6t7z24d2.rkt:32:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power? x n)\n    (if\
    \ (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power?\
    \ (/ x n) n)\n            #f)))\n  (is-power? x n))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (let loop ([i 1])\n    (if (=\
    \ (expt n i) x)\n        #t\n        (if (< (expt n i) x)\n            (loop (+\
    \ i 1))\n            #f))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_simple_power))\n    (check-equal? (candidate 16 2)\
    \ #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal? (candidate\
    \ 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal? (candidate\
    \ 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal? (candidate\
    \ 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal? (candidate\
    \ 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu5nvuuhl.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (is-power-of? x n)\n \
    \   (if (= x 1)\n        #t\n        (if (= (modulo x n) 0)\n            (is-power-of?\
    \ (/ x n) n)\n            #f)))\n  (is-power-of? x n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n    (check-equal?\
    \ (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16) #f)\n    (check-equal?\
    \ (candidate 4 2) #t)\n    (check-equal? (candidate 9 3) #t)\n    (check-equal?\
    \ (candidate 16 4) #t)\n    (check-equal? (candidate 24 2) #f)\n    (check-equal?\
    \ (candidate 128 4) #f)\n    (check-equal? (candidate 12 6) #f)\n    (check-equal?\
    \ (candidate 1 1) #t)\n    (check-equal? (candidate 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (define (power n)\n    (if (=\
    \ n 1)\n        1\n        (* n (power (- n 1)))))\n  (define (is_power? x n)\n\
    \    (if (= x (power n))\n        #t\n        (if (&lt; x (power n))\n       \
    \     #f\n            (is_power? x (+ n 1)))))\n  (is_power? x n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgkn7vq3q.rkt:13:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Your task is to write a function that returns true\
    \ if a number x is a simple\n;; power of n and false in other cases.\n;; x is\
    \ a simple power of n if n**int=x\n;; For example:\n;; is_simple_power(1, 4) =>\
    \ true\n;; is_simple_power(2, 2) => true\n;; is_simple_power(8, 2) => true\n;;\
    \ is_simple_power(3, 2) => false\n;; is_simple_power(3, 1) => false\n;; is_simple_power(5,\
    \ 3) => false\n(define (is_simple_power x n)\n  (if (= x 1)\n      #t\n      (if\
    \ (= (remainder x n) 0)\n          (is_simple_power (/ x n) n)\n          #f)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_simple_power))\n\
    \    (check-equal? (candidate 16 2) #t)\n    (check-equal? (candidate 143214 16)\
    \ #f)\n    (check-equal? (candidate 4 2) #t)\n    (check-equal? (candidate 9 3)\
    \ #t)\n    (check-equal? (candidate 16 4) #t)\n    (check-equal? (candidate 24\
    \ 2) #f)\n    (check-equal? (candidate 128 4) #f)\n    (check-equal? (candidate\
    \ 12 6) #f)\n    (check-equal? (candidate 1 1) #t)\n    (check-equal? (candidate\
    \ 1 12) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
