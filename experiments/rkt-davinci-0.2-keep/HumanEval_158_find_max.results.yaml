name: HumanEval_158_find_max
language: racket
results:
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word) (= (unique-chars word) (max-unique-chars words))) words))\n  (apply min\
    \ (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4xjvkbk7.rkt:25:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:26:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4xjvkbk7.rkt:29:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:30:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4xjvkbk7.rkt:32:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp4xjvkbk7.rkt:33:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word acc)\n      (cond ((null? word)\
    \ acc)\n            ((member (car word) acc) (unique-chars-iter (cdr word) acc))\n\
    \            (else (unique-chars-iter (cdr word) (cons (car word) acc)))))\n \
    \   (unique-chars-iter word '()))\n  (define (find-max-iter words max-word max-count)\n\
    \    (cond ((null? words) max-word)\n          ((> (length (unique-chars (car\
    \ words))) max-count)\n           (find-max-iter (cdr words) (car words) (length\
    \ (unique-chars (car words)))))\n          ((= (length (unique-chars (car words)))\
    \ max-count)\n           (cond ((string<? (car words) max-word)\n            \
    \      (find-max-iter (cdr words) (car words) (length (unique-chars (car words)))))\n\
    \                 (else (find-max-iter (cdr words) max-word max-count))))\n  \
    \        (else (find-max-iter (cdr words) max-word max-count))))\n  (find-max-iter\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx_uj84de.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpx_uj84de.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word)\n              (= (unique-chars word) (max-unique-chars words)))\n  \
    \          words))\n  (define (lexicographical-order words)\n    (sort words string<?))\n\
    \  (car (lexicographical-order (max-unique-words words))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppmksn0w1.rkt:29:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:30:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppmksn0w1.rkt:33:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:34:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppmksn0w1.rkt:36:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmppmksn0w1.rkt:37:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars word) (max-unique-chars words)))\n            words))\n\
    \  (define (min-lex words)\n    (apply min words))\n  (min-lex (max-unique-chars-words\
    \ words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxn2_dg_2.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (helper word unique-chars)\n      (cond\n        [(empty?\
    \ word) unique-chars]\n        [(member (first word) unique-chars) (helper (rest\
    \ word) unique-chars)]\n        [else (helper (rest word) (cons (first word) unique-chars))]))\n\
    \    (helper word '()))\n  (define (max-unique-chars words)\n    (cond\n     \
    \ [(empty? words) 0]\n      [else (max (length (unique-chars (first words))) (max-unique-chars\
    \ (rest words)))]))\n  (define (helper words max-unique-chars)\n    (cond\n  \
    \    [(empty? words) '()]\n      [(= (length (unique-chars (first words))) max-unique-chars)\
    \ (cons (first words) (helper (rest words) max-unique-chars))]\n      [else (helper\
    \ (rest words) max-unique-chars)]))\n  (define (min-lex words)\n    (cond\n  \
    \    [(empty? words) '()]\n      [(= (string<? (first words) (second words)) #t)\
    \ (first words)]\n      [else (min-lex (rest words))]))\n  (min-lex (helper words\
    \ (max-unique-chars words))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:40:4\n\
    \nsecond: list contains too few elements\n  list: '(\"string\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:41:4\n\
    \n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:42:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:43:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:44:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:45:4\n\
    \n=: contract violation\n  expected: number?\n  given: #t\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:46:4\n\
    \nsecond: list contains too few elements\n  list: '(\"nation\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:47:4\n\
    \nsecond: list contains too few elements\n  list: '(\"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:48:4\n\
    \nsecond: list contains too few elements\n  list: '(\"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp58vq_wdy.rkt:49:4\n\
    \n=: contract violation\n  expected: number?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ count-unique-chars words)))\n  (define (max-unique-words words)\n    (filter\
    \ (lambda (word) (= (count-unique-chars word) (max-unique-chars words))) words))\n\
    \  (define (lexicographically-first words)\n    (apply min words))\n  (lexicographically-first\
    \ (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"string\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"gonna\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"nation\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:34:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp63klcli2.rkt:35:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (apply max words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:18:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:19:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:20:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:21:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:22:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:23:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpduhmf12l.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (count-unique-chars (first words))])\n    (for ([word (rest words)])\n     \
    \ (let ([count (count-unique-chars word)])\n        (when (or (> count max-count)\n\
    \                  (and (= count max-count)\n                       (string<?\
    \ max-word word)))\n          (set! max-word word)\n          (set! max-count\
    \ count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp43tfo8ul.rkt:12:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp43tfo8ul.rkt:12:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-iter (cdr word) unique-chars))\n            (else (unique-chars-iter\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-iter word '()))\n\
    \  (define (find-max-iter words max-word)\n    (cond ((null? words) max-word)\n\
    \          ((> (length (unique-chars (car words))) (length (unique-chars max-word)))\n\
    \           (find-max-iter (cdr words) (car words)))\n          (else (find-max-iter\
    \ (cdr words) max-word))))\n  (find-max-iter words (car words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcfl8dxkr.rkt:32:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcfl8dxkr.rkt:35:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max)\n      (cond ((null? words) max)\n            ((> (length (unique-chars\
    \ (car words))) (length (unique-chars max)))\n             (max-unique-chars-iter\
    \ (cdr words) (car words)))\n            (else (max-unique-chars-iter (cdr words)\
    \ max))))\n    (max-unique-chars-iter words (car words)))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8cqtims6.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (count-unique-chars (first words))])\n    (for ([word (rest words)])\n     \
    \ (let ([count (count-unique-chars word)])\n        (if (and (> count max-count)\n\
    \                 (string<? max-word word))\n            (begin\n            \
    \  (set! max-word word)\n              (set! max-count count)))))\n    max-word))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9lxguw80.rkt:12:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp9lxguw80.rkt:12:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond [(empty?\
    \ words) '()]\n          [(empty? (rest words)) (first words)]\n          [else\
    \ (if (> (count-unique (first words))\n                       (count-unique (max-unique-word\
    \ (rest words))))\n                    (first words)\n                    (max-unique-word\
    \ (rest words)))]))\n  (max-unique-word words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv75x2z5l.rkt:28:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv75x2z5l.rkt:29:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv75x2z5l.rkt:30:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv75x2z5l.rkt:32:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (car words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (car words))))])\n    (for ([word (cdr\
    \ words)])\n      (let ([count (length (remove-duplicates (string->list word)))])\n\
    \        (when (> count max-count)\n          (set! max-word word)\n         \
    \ (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpidxf1_ko.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpidxf1_ko.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (if (null? words)\n\
    \        \"\"\n        (let ((first-word (car words))\n              (rest-words\
    \ (cdr words)))\n          (if (null? rest-words)\n              first-word\n\
    \              (let ((max-word (max-unique-word rest-words)))\n              \
    \  (if (> (count-unique first-word) (count-unique max-word))\n               \
    \     first-word\n                    max-word))))))\n  (max-unique-word words))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3m_dle2.rkt:32:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3m_dle2.rkt:33:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3m_dle2.rkt:34:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_3m_dle2.rkt:36:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word) (= (unique-chars\
    \ word) (max-unique-chars words))) words))\n  (define (lexicographical-order words)\n\
    \    (sort words string<?))\n  (car (lexicographical-order (max-unique-words words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp765877n0.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (if (null? words)\n        max-word\n        (let ([word (car words)])\n\
    \          (let ([count (length (remove-duplicates (string->list word)))]\n  \
    \              [new-max-word (if (> count max-count) word max-word)])\n      \
    \      (find_max_helper (cdr words) new-max-word count)))))\n  (find_max_helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:28:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:29:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:30:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:31:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:32:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:33:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoiyb108k.rkt:34:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-unique-chars\
    \ (length (unique-chars (first words)))]\n        [current-unique-chars 0])\n\
    \    (for ([word words])\n      (set! current-unique-chars (length (unique-chars\
    \ word)))\n      (when (&gt; current-unique-chars max-unique-chars)\n        (set!\
    \ max-unique-chars current-unique-chars)\n        (set! max-word word)))\n   \
    \ max-word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ix8hm0y.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 21\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max_helper\
    \ (rest words) max-word)]\n      [else (find_max_helper (rest words) (first words))]))\n\
    \  (define (find_max_unique words max-word)\n    (cond\n      [(empty? words)\
    \ max-word]\n      [(> (length (unique-chars (first words))) (length (unique-chars\
    \ max-word)))\n       (find_max_unique (rest words) (first words))]\n      [else\
    \ (find_max_unique (rest words) max-word)]))\n  (find_max_helper (find_max_unique\
    \ words (first words)) (first words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxtfotqmm.rkt:19:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpxtfotqmm.rkt:19:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ (car words)]\n             [max-count (length (unique-chars (car words)))])\n\
    \    (cond [(null? words) max-word]\n          [(> (length (unique-chars (car\
    \ words))) max-count)\n           (loop (cdr words) (car words) (length (unique-chars\
    \ (car words))))]\n          [(= (length (unique-chars (car words))) max-count)\n\
    \           (if (string<? (car words) max-word)\n               (loop (cdr words)\
    \ (car words) (length (unique-chars (car words))))\n               (loop (cdr\
    \ words) max-word max-count))]\n          [else (loop (cdr words) max-word max-count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx4watwn2.rkt:15:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpx4watwn2.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp16hag279.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmp16hag279.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (helper word acc)\n      (cond ((null? word) acc)\n    \
    \        ((member (car word) acc) (helper (cdr word) acc))\n            (else\
    \ (helper (cdr word) (cons (car word) acc)))))\n    (helper word '()))\n  (define\
    \ (max-unique-chars words)\n    (cond ((null? words) '())\n          ((null? (cdr\
    \ words)) (car words))\n          (else (let ((word1 (car words))\n          \
    \             (word2 (car (cdr words))))\n                  (if (> (length (unique-chars\
    \ word1))\n                         (length (unique-chars word2)))\n         \
    \             (max-unique-chars (cons word1 (cdr (cdr words))))\n            \
    \          (max-unique-chars (cons word2 (cdr (cdr words)))))))))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf31ewbd.rkt:35:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf31ewbd.rkt:36:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf31ewbd.rkt:37:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsf31ewbd.rkt:39:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (rest (cdr words)))\n\
    \             (if (&gt; (count-unique first) (count-unique (max-unique-word rest)))\n\
    \                 first\n                 (max-unique-word rest))))))\n  (max-unique-word\
    \ words))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbbj7hvi1.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (find-max-iter words max-word)\n    (cond\n      [(empty? words)\
    \ max-word]\n      [(> (length (unique-chars (first words))) (length (unique-chars\
    \ max-word)))\n       (find-max-iter (rest words) (first words))]\n      [(= (length\
    \ (unique-chars (first words))) (length (unique-chars max-word)))\n       (cond\n\
    \         [(string<? (first words) max-word) (find-max-iter (rest words) (first\
    \ words))]\n         [else (find-max-iter (rest words) max-word)])]\n      [else\
    \ (find-max-iter (rest words) max-word)]))\n  (find-max-iter words (first words)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-len\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ words])\n      (let ([len (length (remove-duplicates (string->list word)))])\n\
    \        (when (> len max-len)\n          (set! max-word word)\n          (set!\
    \ max-len len))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqxit3xvy.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqxit3xvy.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond [(empty?\
    \ words) '()]\n          [(empty? (rest words)) (first words)]\n          [else\
    \ (if (> (count-unique (first words))\n                      (count-unique (max-unique-word\
    \ (rest words))))\n                   (first words)\n                   (max-unique-word\
    \ (rest words)))]))\n  (max-unique-word words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp8gkioke.rkt:28:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp8gkioke.rkt:29:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp8gkioke.rkt:30:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp8gkioke.rkt:32:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-unique-chars)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(string<? (first words) max-word)\
    \ (find_max_helper (rest words) max-word max-unique-chars)]\n      [(string<?\
    \ max-word (first words)) (find_max_helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-unique-chars) (find_max_helper (rest words) max-word max-unique-chars)]\n\
    \      [else (find_max_helper (rest words) (first words) (length (unique-chars\
    \ (first words))))]))\n  (find_max_helper (rest words) (first words) (length (unique-chars\
    \ (first words)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm8stpxni.rkt:15:94: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpm8stpxni.rkt:15:94\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max-word)\n      (cond\n        [(empty? words) max-word]\n        [(string=?\
    \ (unique-chars (first words)) (unique-chars max-word))\n         (max-unique-chars-helper\
    \ (rest words) max-word)]\n        [(> (string-length (unique-chars (first words)))\n\
    \            (string-length (unique-chars max-word)))\n         (max-unique-chars-helper\
    \ (rest words) (first words))]\n        [else (max-unique-chars-helper (rest words)\
    \ max-word)]))\n    (max-unique-chars-helper (rest words) (first words)))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0jd7pl0x.rkt:34:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0jd7pl0x.rkt:37:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (unique-chars (first words))]\n      [else\
    \ (max-unique-chars (cons (first words) (max-unique-chars (rest words))))]))\n\
    \  (define (find-max-iter words max-unique-chars)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(equal? (unique-chars (first words)) max-unique-chars) (first words)]\n\
    \      [else (find-max-iter (rest words) max-unique-chars)]))\n  (find-max-iter\
    \ words (max-unique-chars words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:36:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\s\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:37:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\g\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:38:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\c\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:39:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\c\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:40:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:41:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\r\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:42:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\n\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:43:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq5j7qprr.rkt:45:4\n\
    \nstring->list: contract violation\n  expected: string?\n  given: #\\p\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max_helper\
    \ (rest words) max-word)]\n      [else (find_max_helper (rest words) (first words))]))\n\
    \  (define (unique-chars word)\n    (define (unique-chars-helper word chars)\n\
    \      (cond\n        [(empty? word) chars]\n        [(member (first word) chars)\
    \ (unique-chars-helper (rest word) chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) chars))]))\n    (unique-chars-helper word '()))\n\
    \  (define (find_max_unique words max-word)\n    (cond\n      [(empty? words)\
    \ max-word]\n      [(> (length (unique-chars (first words))) (length (unique-chars\
    \ max-word)))\n       (find_max_unique (rest words) (first words))]\n      [else\
    \ (find_max_unique (rest words) max-word)]))\n  (find_max_helper (find_max_unique\
    \ words (first words)) (first words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprhnz00n8.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprhnz00n8.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprhnz00n8.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprhnz00n8.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprhnz00n8.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprhnz00n8.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprhnz00n8.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprhnz00n8.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprhnz00n8.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprhnz00n8.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-len)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-len)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-len)\n       (cond\n         [(string<? (first words) max-word)\n      \
    \    (find_max-helper (rest words) (first words) (length (unique-chars (first\
    \ words))))]\n         [else (find_max-helper (rest words) max-word max-len)])]\n\
    \      [else (find_max-helper (rest words) max-word max-len)]))\n  (find_max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvbrs94lf.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpvbrs94lf.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word)\n    (cond\
    \ [(empty? words) max-word]\n          [(string=? (first words) max-word) (find_max-helper\
    \ (rest words) max-word)]\n          [(> (length (unique-chars (first words)))\
    \ (length (unique-chars max-word)))\n           (find_max-helper (rest words)\
    \ (first words))]\n          [else (find_max-helper (rest words) max-word)]))\n\
    \  (find_max-helper words (first words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw9ahd4xb.rkt:14:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpw9ahd4xb.rkt:14:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(or (empty? max-word)\n           (<\
    \ (length (unique-chars (first words)))\n              (length (unique-chars max-word))))\n\
    \       (find_max_helper (rest words) (first words))]\n      [else (find_max_helper\
    \ (rest words) max-word)]))\n  (find_max_helper words \"\"))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn2yhajvn.rkt:15:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpn2yhajvn.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) \"\")\n          ((null? (cdr words)) (car words))\n          (else (if\
    \ (> (count-unique (car words))\n                       (count-unique (cadr words)))\n\
    \                    (car words)\n                    (max-unique-word (cdr words))))))\n\
    \  (max-unique-word words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:27:4\n\
    actual:     \"name\"\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:28:4\nactual:\
    \     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:29:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:30:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:31:4\nactual:\
    \     \"game\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:32:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66o3s9sz.rkt:33:4\nactual:\
    \     \"are\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique words)\n    (apply max (map unique-chars words)))\n  (define\
    \ (max-unique-words words)\n    (filter (lambda (word) (= (unique-chars word)\
    \ (max-unique words))) words))\n  (define (lexicographical-order words)\n    (sort\
    \ words string<?))\n  (car (lexicographical-order (max-unique-words words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqzn37fid.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word max-unique-chars)\n      (cond\n        [(empty? words) max-word]\n\
    \        [(string<? (unique-chars (first words)) max-unique-chars)\n         (max-unique-chars-iter\
    \ (rest words) max-word max-unique-chars)]\n        [(string=? (unique-chars (first\
    \ words)) max-unique-chars)\n         (max-unique-chars-iter (rest words) (first\
    \ words) max-unique-chars)]\n        [else (max-unique-chars-iter (rest words)\
    \ (first words) (unique-chars (first words)))]))\n    (max-unique-chars-iter words\
    \ \"\" \"\"))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:33:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:34:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:35:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:36:4\nactual:\
    \     \"this\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:37:4\nactual:\
    \     \"we\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyp5yd47.rkt:38:4\nactual:\
    \     \"we\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max_word)\n    (cond\n\
    \      [(empty? words) max_word]\n      [(string<? (first words) max_word) (find_max_helper\
    \ (rest words) max_word)]\n      [else (find_max_helper (rest words) (first words))]))\n\
    \  (define (unique_chars word)\n    (define (unique_chars_helper word chars)\n\
    \      (cond\n        [(empty? word) chars]\n        [(member (first word) chars)\
    \ (unique_chars_helper (rest word) chars)]\n        [else (unique_chars_helper\
    \ (rest word) (cons (first word) chars))]))\n    (unique_chars_helper word '()))\n\
    \  (define (max_unique_chars words)\n    (define (max_unique_chars_helper words\
    \ max_word)\n      (cond\n        [(empty? words) max_word]\n        [(string<?\
    \ (first words) max_word) (max_unique_chars_helper (rest words) max_word)]\n \
    \       [else (max_unique_chars_helper (rest words) (first words))]))\n    (max_unique_chars_helper\
    \ words (first words)))\n  (define (max_unique_chars_count words)\n    (length\
    \ (unique_chars (max_unique_chars words))))\n  (define (max_unique_chars_count_words\
    \ words)\n    (define (max_unique_chars_count_words_helper words max_count max_words)\n\
    \      (cond\n        [(empty? words) max_words]\n        [(= (length (unique_chars\
    \ (first words))) max_count)\n         (max_unique_chars_count_words_helper (rest\
    \ words) max_count (cons (first words) max_words))]\n        [else (max_unique_chars_count_words_helper\
    \ (rest words) max_count max_words)]))\n    (max_unique_chars_count_words_helper\
    \ words (max_unique_chars_count words) '()))\n  (find_\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbpwciqnh.rkt:40:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 41\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max)\n    (cond\n\
    \      [(empty? words) max]\n      [(> (length (set (first words))) (length (set\
    \ max)))\n       (find_max_helper (rest words) (first words))]\n      [else (find_max_helper\
    \ (rest words) max)]))\n  (find_max_helper words (first words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:24:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:25:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:26:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"aaaaaaa\")\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7kwr_key.rkt:27:4\n\nlength: contract violation\n  expected:\
    \ list?\n  given: (set \"abc\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:28:4\n\nlength:\
    \ contract violation\n  expected: list?\n  given: (set \"play\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7kwr_key.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: (set \"play\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-count)\n       (find_max_helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max_helper (rest words) max-word\
    \ max-count)]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_t985t21.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmp_t985t21.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (if (null? words)\n      \"\"\n      (let ((max-word\
    \ (car words))\n            (max-len (length (remove-duplicates (string->list\
    \ (car words))))))\n        (for ([word (cdr words)])\n          (let ((word-len\
    \ (length (remove-duplicates (string->list word)))))\n            (if (> word-len\
    \ max-len)\n                (begin\n                  (set! max-word word)\n \
    \                 (set! max-len word-len)))))\n        max-word)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm7knv2p1.rkt:17:12: if: missing an \"else\" expression\n  in: (if\
    \ (> word-len max-len) (begin (set! max-word word) (set! max-len word-len)))\n\
    \  location...:\n   /tmp/tmpm7knv2p1.rkt:17:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word max-unique-chars)\n      (cond ((null? words) max-word)\n         \
    \   ((> (length (unique-chars (car words))) max-unique-chars)\n             (max-unique-chars-iter\
    \ (cdr words) (car words) (length (unique-chars (car words)))))\n            (else\
    \ (max-unique-chars-iter (cdr words) max-word max-unique-chars))))\n    (max-unique-chars-iter\
    \ words \"\" 0))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprfmri80b.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (if (null? words)\n      \"\"\n      (let ([max-word\
    \ (car words)]\n            [max-uniq (length (unique-chars (car words)))]\n \
    \           [rest (cdr words)])\n        (while (not (null? rest))\n         \
    \ (let ([word (car rest)]\n                [uniq (length (unique-chars word))])\n\
    \            (if (and (&gt; uniq max-uniq)\n                     (string&lt;?\
    \ max-word word))\n                (set! max-word word)\n                (set!\
    \ max-uniq uniq))\n            (set! rest (cdr rest))))\n        max-word)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfsya33xx.rkt:13:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (apply\
    \ min (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnk4roba0.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars word) (max-unique-chars words)))\n            words))\n\
    \  (define (lexicographical-order words)\n    (apply min words))\n  (lexicographical-order\
    \ (max-unique-chars-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23o5olpz.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max-word\
    \ (find_max (rest words))])\n       (if (> (length (unique-chars (first words)))\n\
    \              (length (unique-chars max-word)))\n           (first words)\n \
    \          max-word))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjqg5w0f7.rkt:16:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpjqg5w0f7.rkt:16:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (first words)]\n      [else (if (> (length\
    \ (unique-chars (first words))) (length (unique-chars (second words))))\n    \
    \            (max-unique-chars (cons (first words) (rest (rest words))))\n   \
    \             (max-unique-chars (cons (second words) (rest (rest words)))))]))\n\
    \  (max-unique-chars words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyp8aq56.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyp8aq56.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyp8aq56.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppyp8aq56.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-word-len)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique (first\
    \ words))) max-word-len)\n       (find_max_helper (rest words) (first words) (length\
    \ (unique (first words))))]\n      [else (find_max_helper (rest words) max-word\
    \ max-word-len)]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsr14a2ke.rkt:14:19: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpsr14a2ke.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy6jmsxzk.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy6jmsxzk.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word)\n      (cond\n        [(empty? words) max-word]\n        [(string=?\
    \ (unique-chars (first words)) (unique-chars max-word))\n         (max-unique-chars-iter\
    \ (rest words) max-word)]\n        [(> (string-length (unique-chars (first words)))\n\
    \            (string-length (unique-chars max-word)))\n         (max-unique-chars-iter\
    \ (rest words) (first words))]\n        [else (max-unique-chars-iter (rest words)\
    \ max-word)]))\n    (max-unique-chars-iter (rest words) (first words)))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwyxixzme.rkt:34:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwyxixzme.rkt:37:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-unique-chars)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (find-max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (cond\n         [(string<? (first words) max-word)\
    \ (find-max-helper (rest words) (first words) max-unique-chars)]\n         [else\
    \ (find-max-helper (rest words) max-word max-unique-chars)])]\n      [else (find-max-helper\
    \ (rest words) max-word max-unique-chars)]))\n  (find-max-helper words \"\" 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word)\n    (cond\
    \ [(empty? words) max-word]\n          [(> (length (unique-chars (first words)))\n\
    \              (length (unique-chars max-word)))\n           (find_max-helper\
    \ (rest words) (first words))]\n          [else (find_max-helper (rest words)\
    \ max-word)]))\n  (find_max-helper words (first words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgongsgt0.rkt:13:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpgongsgt0.rkt:13:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (if (null? words)\n      \"\"\n      (let ([max-word\
    \ (car words)]\n            [max-count (length (remove-duplicates (string->list\
    \ (car words))))])\n        (for ([word (cdr words)])\n          (let ([count\
    \ (length (remove-duplicates (string->list word)))])\n            (if (> count\
    \ max-count)\n                (begin\n                  (set! max-word word)\n\
    \                  (set! max-count count)))))\n        max-word)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoaah1hz5.rkt:17:12: if: missing an \"else\" expression\n  in: (if\
    \ (> count max-count) (begin (set! max-word word) (set! max-count count)))\n \
    \ location...:\n   /tmp/tmpoaah1hz5.rkt:17:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-count)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max-helper (rest words) max-word\
    \ max-count)]))\n  (find_max-helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpazq6jzpw.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpazq6jzpw.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word) (= (unique-chars\
    \ word) (max-unique-chars words))) words))\n  (define (lexicographical-order words)\n\
    \    (sort words string<?))\n  (car (lexicographical-order (max-unique-words words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn5pku75h.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ 0]\n      [else (max (length (unique-chars (first words))) (max-unique-chars\
    \ (rest words)))]))\n  (define (find-max-iter words max-unique-chars)\n    (cond\n\
    \      [(empty? words) '()]\n      [(= (length (unique-chars (first words))) max-unique-chars)\
    \ (first words)]\n      [else (find-max-iter (rest words) max-unique-chars)]))\n\
    \  (find-max-iter words (max-unique-chars words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvy13e4eo.rkt:36:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvy13e4eo.rkt:39:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique (first\
    \ words))) max-count)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique (first words))))]\n      [else (find_max-helper (rest words) max-word\
    \ max-count)]))\n  (find_max-helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6ejg57uc.rkt:14:19: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmp6ejg57uc.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphava6_6f.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmphava6_6f.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (sort\
    \ word string<?))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n\
    \        [(empty? word) unique-chars]\n        [(char=? (first word) (first (rest\
    \ word))) (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (unique-chars (first words))]\n      [else\
    \ (if (> (length (unique-chars (first words))) (length (unique-chars (first (rest\
    \ words)))))\n                (max-unique-chars (cons (first words) (rest (rest\
    \ words))))\n                (max-unique-chars (rest words)))]))\n  (define (first-word-with-max-unique-chars\
    \ words)\n    (cond\n      [(empty? words) '()]\n      [(equal? (unique-chars\
    \ (first words)) (max-unique-chars words)) (first words)]\n      [else (first-word-with-max-unique-chars\
    \ (rest words))]))\n  (first-word-with-max-unique-chars words))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:38:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:39:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:40:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:41:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:42:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:43:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:44:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:45:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:46:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx0z385bn.rkt:47:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-count)\n       (find_max_helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max_helper (rest words) max-word\
    \ max-count)]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbjre_jhw.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpbjre_jhw.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (for/list ([c (in-string\
    \ word)])\n      (if (not (member c (rest (in-string word))))\n          c)))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (length (unique-chars word))\n                 (max-unique-chars words)))\n\
    \            words))\n  (define (first-lexicographically words)\n    (apply min\
    \ words))\n  (first-lexicographically (max-unique-words words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpexadmfad.rkt:13:6: if: missing an \"else\" expression\n  in: (if\
    \ (not (member c (rest (in-string word)))) c)\n  location...:\n   /tmp/tmpexadmfad.rkt:13:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (count-unique-chars (first words))])\n    (for ([word (rest words)])\n     \
    \ (let ([count (count-unique-chars word)])\n        (if (> count max-count)\n\
    \            (begin\n              (set! max-word word)\n              (set! max-count\
    \ count))\n            (if (= count max-count)\n                (if (string<?\
    \ word max-word)\n                    (set! max-word word))))))\n    max-word))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp640z3mfe.rkt:12:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp640z3mfe.rkt:12:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (rest (cdr words)))\n\
    \             (if (> (count-unique first) (count-unique (max-unique-word rest)))\n\
    \                 first\n                 (max-unique-word rest))))))\n  (max-unique-word\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpab_xv4jo.rkt:30:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpab_xv4jo.rkt:31:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpab_xv4jo.rkt:32:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpab_xv4jo.rkt:34:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max_helper\
    \ (rest words) max-word)]\n      [else (find_max_helper (rest words) (first words))]))\n\
    \  (define (count-unique-chars word)\n    (define (count-unique-chars-helper word\
    \ unique-chars)\n      (cond\n        [(empty? word) (length unique-chars)]\n\
    \        [(member (first word) unique-chars) (count-unique-chars-helper (rest\
    \ word) unique-chars)]\n        [else (count-unique-chars-helper (rest word) (cons\
    \ (first word) unique-chars))]))\n    (count-unique-chars-helper word '()))\n\
    \  (define (find_max_unique words max-word max-unique)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (count-unique-chars (first words)) max-unique) (find_max_unique\
    \ (rest words) (first words) (count-unique-chars (first words)))]\n      [(= (count-unique-chars\
    \ (first words)) max-unique) (find_max_helper (rest words) (first words) max-word)]\n\
    \      [else (find_max_unique (rest words) max-word max-unique)]))\n  (find_max_unique\
    \ words (first words) (count-unique-chars (first words))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfa7uh0e.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfa7uh0e.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfa7uh0e.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfa7uh0e.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfa7uh0e.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfa7uh0e.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfa7uh0e.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfa7uh0e.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqfa7uh0e.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqfa7uh0e.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word)\n              (= (unique-chars word) (max-unique-chars words)))\n  \
    \          words))\n  (define (first-lex words)\n    (apply min words))\n  (first-lex\
    \ (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpef98db4t.rkt:29:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:30:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpef98db4t.rkt:33:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:34:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpef98db4t.rkt:36:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpef98db4t.rkt:37:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) \"\"]\n    [(= (length\
    \ words) 1) (first words)]\n    [else\n     (let ([max-word (first words)]\n \
    \          [max-unique-chars (length (unique-chars (first words)))]\n        \
    \   [rest-words (rest words)])\n       (for ([word rest-words])\n         (let\
    \ ([unique-chars (length (unique-chars word))])\n           (cond\n          \
    \   [(> unique-chars max-unique-chars)\n              (set! max-word word)\n \
    \             (set! max-unique-chars unique-chars)]\n             [(= unique-chars\
    \ max-unique-chars)\n              (cond\n                [(string<? word max-word)\n\
    \                 (set! max-word word)])])))))\n     max-word]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfeoyt_jt.rkt:27:44: read-syntax: missing `]` to close `[` on line\
    \ 14, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 15\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word acc)\n      (cond ((null? word)\
    \ acc)\n            ((member (car word) acc) (unique-chars-iter (cdr word) acc))\n\
    \            (else (unique-chars-iter (cdr word) (cons (car word) acc)))))\n \
    \   (unique-chars-iter word '()))\n  (define (find-max-iter words max-word max-count)\n\
    \    (cond ((null? words) max-word)\n          ((> (length (unique-chars (car\
    \ words))) max-count)\n           (find-max-iter (cdr words) (car words) (length\
    \ (unique-chars (car words)))))\n          ((= (length (unique-chars (car words)))\
    \ max-count)\n           (cond ((string<? (car words) max-word)\n            \
    \      (find-max-iter (cdr words) (car words) (length (unique-chars (car words)))))\n\
    \                 (else (find-max-iter (cdr words) max-word max-count))))\n  \
    \        (else (find-max-iter (cdr words) max-word max-count))))\n  (find-max-iter\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (find-max-iter words max-word)\n    (cond\n      [(empty? words)\
    \ max-word]\n      [(> (length (unique-chars (first words))) (length (unique-chars\
    \ max-word)))\n       (find-max-iter (rest words) (first words))]\n      [(= (length\
    \ (unique-chars (first words))) (length (unique-chars max-word)))\n       (if\
    \ (string<? (first words) max-word)\n           (find-max-iter (rest words) (first\
    \ words))\n           (find-max-iter (rest words) max-word))]\n      [else (find-max-iter\
    \ (rest words) max-word)]))\n  (find-max-iter words (first words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr2ht6ggf.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr2ht6ggf.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-iter (cdr word) unique-chars))\n            (else (unique-chars-iter\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-iter word '()))\n\
    \  (define (max-unique-chars words)\n    (cond ((null? words) 0)\n          ((=\
    \ (length (unique-chars (car words)))\n              (max-unique-chars (cdr words)))\n\
    \           (max-unique-chars (cdr words)))\n          (else (length (unique-chars\
    \ (car words))))))\n  (define (find-max-iter words max-unique-chars)\n    (cond\
    \ ((null? words) '())\n          ((= (length (unique-chars (car words))) max-unique-chars)\n\
    \           (list (car words)))\n          (else (find-max-iter (cdr words) max-unique-chars))))\n\
    \  (define (min-lex words)\n    (cond ((null? (cdr words)) (car words))\n    \
    \      ((string<? (car words) (car (cdr words)))\n           (min-lex (cdr words)))\n\
    \          (else (min-lex (cons (car words) (cdr (cdr words)))))))\n  (min-lex\
    \ (find-max-iter words (max-unique-chars words))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4699d2ov.rkt:42:4\n\
    actual:     \"name\"\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4699d2ov.rkt:43:4\nactual:\
    \     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4699d2ov.rkt:46:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4699d2ov.rkt:47:4\nactual:\
    \     \"we\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4699d2ov.rkt:48:4\nactual:\
    \     \"we\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word acc)\n      (cond ((null? word)\
    \ acc)\n            ((member (car word) acc) (unique-chars-helper (cdr word) acc))\n\
    \            (else (unique-chars-helper (cdr word) (cons (car word) acc)))))\n\
    \    (unique-chars-helper word '()))\n  (define (find-max-helper words max-word\
    \ max-len)\n    (cond ((null? words) max-word)\n          ((> (length (unique-chars\
    \ (car words))) max-len)\n           (find-max-helper (cdr words) (car words)\
    \ (length (unique-chars (car words)))))\n          ((= (length (unique-chars (car\
    \ words))) max-len)\n           (cond ((string<? (car words) max-word)\n     \
    \             (find-max-helper (cdr words) (car words) (length (unique-chars (car\
    \ words)))))\n                 (else (find-max-helper (cdr words) max-word max-len))))\n\
    \          (else (find-max-helper (cdr words) max-word max-len))))\n  (find-max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word)\n      (cond ((null? words) max-word)\n            ((> (length (unique-chars\
    \ (car words)))\n                (length (unique-chars max-word)))\n         \
    \    (max-unique-chars-iter (cdr words) (car words)))\n            (else (max-unique-chars-iter\
    \ (cdr words) max-word))))\n    (max-unique-chars-iter words (car words)))\n \
    \ (max-unique-chars words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyudd2dl1.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max)\n      (cond\n        [(empty? words) max]\n        [(> (string-length\
    \ (unique-chars (first words)))\n            (string-length (unique-chars max)))\n\
    \         (max-unique-chars-iter (rest words) (first words))]\n        [else (max-unique-chars-iter\
    \ (rest words) max)]))\n    (max-unique-chars-iter words (first words)))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1f8ns2z.rkt:32:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1f8ns2z.rkt:35:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ (car words)]\n             [max-word-count (length (unique-chars (car words)))])\n\
    \    (cond [(empty? words) max-word]\n          [(> (length (unique-chars (car\
    \ words))) max-word-count)\n           (loop (cdr words) (car words) (length (unique-chars\
    \ (car words))))]\n          [(= (length (unique-chars (car words))) max-word-count)\n\
    \           (loop (cdr words) (if (string<? (car words) max-word) (car words)\
    \ max-word) max-word-count)]\n          [else (loop (cdr words) max-word max-word-count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfaz8u1ft.rkt:15:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpfaz8u1ft.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (rest (cdr words)))\n\
    \             (if (> (count-unique first) (count-unique (max-unique-word rest)))\n\
    \                 first\n                 (max-unique-word rest))))))\n  (max-unique-word\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpblxkwzr4.rkt:30:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpblxkwzr4.rkt:31:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpblxkwzr4.rkt:32:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpblxkwzr4.rkt:34:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (unique-chars-count word)\n    (string-length (unique-chars word)))\n\
    \  (define (max-unique-chars-count words)\n    (apply max (map unique-chars-count\
    \ words)))\n  (define (max-unique-chars-words words)\n    (filter (lambda (word)\
    \ (= (unique-chars-count word) (max-unique-chars-count words))) words))\n  (define\
    \ (lexicographical-order words)\n    (sort words string<?))\n  (first (lexicographical-order\
    \ (max-unique-chars-words words))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (apply max (map string-length words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:18:4\n\
    actual:     6\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:19:4\nactual:\
    \     4\nexpected:   \"enam\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:20:4\nactual:     7\n\
    expected:   \"aaaaaaa\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:21:4\nactual:     3\n\
    expected:   \"abc\"\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:22:4\nactual:     8\nexpected:\
    \   \"footbott\"\n--------------------\n--------------------\nFAILURE\nname: \
    \      check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:23:4\nactual:     5\nexpected:\
    \   \"gonna\"\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:24:4\nactual:     6\nexpected:\
    \   \"nation\"\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:25:4\nactual:     4\nexpected:\
    \   \"this\"\n--------------------\n--------------------\nFAILURE\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpw6boh91q.rkt:26:4\nactual:     1\nexpected:\
    \   \"b\"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw6boh91q.rkt:27:4\nactual:     4\nexpected:   \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max)\n      (cond ((null? words) max)\n            ((> (length (unique-chars\
    \ (car words))) (length (unique-chars max)))\n             (max-unique-chars-helper\
    \ (cdr words) (car words)))\n            (else (max-unique-chars-helper (cdr words)\
    \ max))))\n    (max-unique-chars-helper words (car words)))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr1j44q53.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcsxonhhb.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpcsxonhhb.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (unique-chars (first words))]\n      [else\
    \ (if (> (length (unique-chars (first words))) (length (unique-chars (second words))))\n\
    \                (max-unique-chars (cons (first words) (rest (rest words))))\n\
    \                (max-unique-chars (cons (second words) (rest (rest words)))))]))\n\
    \  (define (find-max-helper words max-unique-chars)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(equal? (unique-chars (first words)) max-unique-chars) (first\
    \ words)]\n      [else (find-max-helper (rest words) max-unique-chars)]))\n  (find-max-helper\
    \ words (max-unique-chars words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60cpbx9w.rkt:39:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60cpbx9w.rkt:40:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60cpbx9w.rkt:41:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60cpbx9w.rkt:43:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (unique-chars (first words))]\n      [else\
    \ (if (> (length (unique-chars (first words))) (length (unique-chars (second words))))\n\
    \                (max-unique-chars (cons (first words) (rest (rest words))))\n\
    \                (max-unique-chars (cons (second words) (rest (rest words)))))]))\n\
    \  (first (max-unique-chars words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:33:4\n\
    actual:     #\\g\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:34:4\nactual:\
    \     #\\e\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:35:4\nactual:\
    \     #\\c\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:36:4\nactual:\
    \     #\\a\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:37:4\nactual:\
    \     #\\b\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:38:4\nactual:\
    \     #\\k\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:39:4\nactual:\
    \     #\\o\nexpected:   \"nation\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:40:4\nactual:\
    \     #\\s\nexpected:   \"this\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:41:4\nactual:\
    \     #\\b\nexpected:   \"b\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpucfubou1.rkt:42:4\nactual:     #\\\
    y\nexpected:   \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (unique-chars (first words))]\n      [else\
    \ (if (> (length (unique-chars (first words))) (length (unique-chars (second words))))\n\
    \                (max-unique-chars (cons (first words) (rest (rest words))))\n\
    \                (max-unique-chars (cons (second words) (rest (rest words)))))]))\n\
    \  (first (max-unique-chars words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:33:4\n\
    actual:     #\\g\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:34:4\nactual:\
    \     #\\e\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:35:4\nactual:\
    \     #\\c\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:36:4\nactual:\
    \     #\\a\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:37:4\nactual:\
    \     #\\b\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:38:4\nactual:\
    \     #\\k\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:39:4\nactual:\
    \     #\\o\nexpected:   \"nation\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:40:4\nactual:\
    \     #\\s\nexpected:   \"this\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:41:4\nactual:\
    \     #\\b\nexpected:   \"b\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ngbtxkq.rkt:42:4\nactual:     #\\\
    y\nexpected:   \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(string=? (first words) max-word)\
    \ (find_max_helper (rest words) max-word max-count)]\n      [(> (count-unique-chars\
    \ (first words)) max-count) (find_max_helper (rest words) (first words) (count-unique-chars\
    \ (first words)))]\n      [else (find_max_helper (rest words) max-word max-count)]))\n\
    \  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz4758wtc.rkt:15:11: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpz4758wtc.rkt:15:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ (first words)]\n             [max-count (length (unique-chars (first words)))])\n\
    \    (cond [(empty? words) max-word]\n          [(> (length (unique-chars (first\
    \ words))) max-count)\n           (loop (rest words) (first words) (length (unique-chars\
    \ (first words))))]\n          [else (loop (rest words) max-word max-count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb3yvvbps.rkt:15:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpb3yvvbps.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (if (> count max-count)\n            (begin\n           \
    \   (set! max-word word)\n              (set! max-count count)))))\n    max-word))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpim8mhwyh.rkt:15:8: if: missing an \"else\" expression\n  in: (if\
    \ (> count max-count) (begin (set! max-word word) (set! max-count count)))\n \
    \ location...:\n   /tmp/tmpim8mhwyh.rkt:15:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (apply\
    \ min (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppcz71262.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max-helper\
    \ (rest words) max-word)]\n      [else (find_max-helper (rest words) (first words))]))\n\
    \  (define (unique-chars word)\n    (define (unique-chars-helper word chars)\n\
    \      (cond\n        [(empty? word) chars]\n        [(member (first word) chars)\
    \ (unique-chars-helper (rest word) chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) chars))]))\n    (unique-chars-helper word '()))\n\
    \  (define (num-unique-chars word)\n    (length (unique-chars word)))\n  (define\
    \ (max-unique-chars words)\n    (cond\n      [(empty? words) 0]\n      [else (max\
    \ (num-unique-chars (first words)) (max-unique-chars (rest words)))]))\n  (find_max-helper\
    \ words (first words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:37:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:38:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:39:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:40:4\nactual:\
    \     \"this\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:41:4\nactual:\
    \     \"we\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_rqllxvw.rkt:42:4\nactual:\
    \     \"we\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (apply max (map (lambda (word)\n               \
    \     (list (length (remove-duplicates (string->list word)))\n               \
    \           word))\n                  words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:21:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:22:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:23:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 \"aaaaaaa\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(3 \"abc\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 \"play\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 \"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 \"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp085bxcei.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 \"play\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond [(empty? words) max-word]\n          [else\n           (define word\
    \ (first words))\n           (define count (count-unique-chars word))\n      \
    \     (cond [(> count max-count)\n                  (find_max_helper (rest words)\
    \ word count)]\n                 [(= count max-count)\n                  (cond\
    \ [(string<? word max-word)\n                         (find_max_helper (rest words)\
    \ word count)]\n                        [else\n                         (find_max_helper\
    \ (rest words) max-word count)])]\n                 [else\n                  (find_max_helper\
    \ (rest words) max-word max-count)])]))\n  (find_max_helper words \"\" 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcnwtifuz.rkt:15:26: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpcnwtifuz.rkt:15:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-word-len)\n\
    \    (cond [(empty? words) max-word]\n          [else\n           (define word\
    \ (first words))\n           (define word-len (length (remove-duplicates (string->list\
    \ word))))\n           (if (> word-len max-word-len)\n               (find_max_helper\
    \ (rest words) word word-len)\n               (find_max_helper (rest words) max-word\
    \ max-word-len))]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpinb8crfu.rkt:27:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpinb8crfu.rkt:30:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-iter (cdr word) unique-chars))\n            (else (unique-chars-iter\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-iter word '()))\n\
    \  (define (max-unique-chars words)\n    (cond ((null? words) '())\n         \
    \ ((null? (cdr words)) (car words))\n          (else (if (> (length (unique-chars\
    \ (car words)))\n                      (length (unique-chars (cadr words))))\n\
    \                   (max-unique-chars (cons (car words) (cddr words)))\n     \
    \              (max-unique-chars (cdr words))))))\n  (max-unique-chars words))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a0j1n0d.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a0j1n0d.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a0j1n0d.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9a0j1n0d.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (sort\
    \ word string<?))\n    (define (unique-chars-iter word acc)\n      (cond ((null?\
    \ word) acc)\n            ((char=? (car word) (car acc)) (unique-chars-iter (cdr\
    \ word) acc))\n            (else (unique-chars-iter (cdr word) (cons (car word)\
    \ acc)))))\n    (unique-chars-iter word (list (car word))))\n  (define (max-unique-chars\
    \ words)\n    (cond ((null? words) '())\n          ((null? (cdr words)) (car words))\n\
    \          (else (let ((first (car words))\n                       (second (cadr\
    \ words)))\n                  (if (> (length (unique-chars first))\n         \
    \                (length (unique-chars second)))\n                      (max-unique-chars\
    \ (cons first (cddr words)))\n                      (max-unique-chars (cons second\
    \ (cddr words))))))))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:35:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:36:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:37:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:38:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:39:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:40:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:41:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexoii9fg.rkt:43:4\n\
    \nsort: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word max-chars)\n      (cond ((null? words) max-word)\n            ((> (length\
    \ (unique-chars (car words))) max-chars)\n             (max-unique-chars-iter\
    \ (cdr words) (car words) (length (unique-chars (car words)))))\n            (else\
    \ (max-unique-chars-iter (cdr words) max-word max-chars))))\n    (max-unique-chars-iter\
    \ words \"\" 0))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6k4roag0.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-count)\n       (find_max_helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max_helper (rest words) max-word\
    \ max-count)]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpotn73o_s.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpotn73o_s.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-helper (cdr word) unique-chars))\n            (else (unique-chars-helper\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-word-chars)\n    (cond\
    \ ((null? words) max-word)\n          ((> (length (unique-chars (car words)))\
    \ max-word-chars)\n           (find-max-helper (cdr words) (car words) (length\
    \ (unique-chars (car words)))))\n          ((= (length (unique-chars (car words)))\
    \ max-word-chars)\n           (cond ((string<? (car words) max-word)\n       \
    \           (find-max-helper (cdr words) (car words) (length (unique-chars (car\
    \ words)))))\n                 (else (find-max-helper (cdr words) max-word max-word-chars))))\n\
    \          (else (find-max-helper (cdr words) max-word max-word-chars))))\n  (find-max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (if (null? words)\n\
    \        \"\"\n        (let ((max-word (car words))\n              (max-count\
    \ (count-unique (car words))))\n          (for ([word (cdr words)])\n        \
    \    (let ((count (count-unique word)))\n              (if (> count max-count)\n\
    \                  (begin\n                    (set! max-word word)\n        \
    \            (set! max-count count)))))\n          max-word)))\n  (max-unique-word\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphoe_mzy0.rkt:20:14: if: missing an \"else\" expression\n  in: (if\
    \ (> count max-count) (begin (set! max-word word) (set! max-count count)))\n \
    \ location...:\n   /tmp/tmphoe_mzy0.rkt:20:14\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-uniques word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-uniques words)\n    (apply max (map count-uniques\
    \ words)))\n  (define (filter-max words)\n    (filter (lambda (word) (= (count-uniques\
    \ word) (max-uniques words))) words))\n  (define (sort-lex words)\n    (sort words\
    \ string<?))\n  (car (sort-lex (filter-max words))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond [(empty? words) \"\"]\n        [(= (length\
    \ (unique-chars (first words)))\n            (length (unique-chars (last words))))\n\
    \         (if (string<? (first words) (last words))\n             (first words)\n\
    \             (last words))]\n        [(> (length (unique-chars (first words)))\n\
    \            (length (unique-chars (last words))))\n         (find_max (cons (first\
    \ words) (rest (rest words))))]\n        [else (find_max (cons (last words) (rest\
    \ (rest words))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprnysu5m3.rkt:12:21: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmprnysu5m3.rkt:12:21\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-uniques word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-uniques words)\n    (apply max (map count-uniques\
    \ words)))\n  (define (max-uniques-words words)\n    (filter (lambda (word) (=\
    \ (count-uniques word) (max-uniques words))) words))\n  (apply min (max-uniques-words\
    \ words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"string\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"gonna\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"nation\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6hjkjf1w.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-unique-chars\
    \ (length (unique-chars (first words)))]\n        [max-lex (first words)])\n \
    \   (for ([word words])\n      (let ([unique-chars (length (unique-chars word))])\n\
    \        (when (> unique-chars max-unique-chars)\n          (set! max-unique-chars\
    \ unique-chars)\n          (set! max-word word))\n        (when (and (= unique-chars\
    \ max-unique-chars)\n                   (string<? word max-lex))\n          (set!\
    \ max-lex word))))\n    max-lex))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy4j1puy7.rkt:12:35: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpy4j1puy7.rkt:12:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-len)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique (first\
    \ words))) max-len)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique (first words))))]\n      [(= (length (unique (first words))) max-len)\n\
    \       (cond\n         [(string<? (first words) max-word)\n          (find_max-helper\
    \ (rest words) (first words) (length (unique (first words))))]\n         [else\
    \ (find_max-helper (rest words) max-word max-len)])]\n      [else (find_max-helper\
    \ (rest words) max-word max-len)]))\n  (find_max-helper words \"\" 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo_bosz3x.rkt:14:19: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpo_bosz3x.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (apply max (map (lambda (word)\n               \
    \     (cons word (length (remove-duplicates (string->list word)))))\n        \
    \          words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:20:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"name\" . 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:21:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"name\" . 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:22:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"aaaaaaa\" . 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:23:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"abc\" . 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"play\" . 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"we\" . 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"we\" . 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"this\" . 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"b\" . 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypq3qkps.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(\"play\" . 4)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(string<? (first words) max-word)\n\
    \       (find_max_helper (rest words) max-word max-count)]\n      [(string<? max-word\
    \ (first words))\n       (find_max_helper (rest words) (first words) (count-unique\
    \ (first words)))]\n      [(= max-count (count-unique (first words)))\n      \
    \ (find_max_helper (rest words) (first words) max-count)]\n      [else\n     \
    \  (find_max_helper (rest words) (first words) (count-unique (first words)))]))\n\
    \  (find_max_helper words (first words) (count-unique (first words))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbutsdj3n.rkt:17:52: count-unique: unbound identifier\n  in: count-unique\n\
    \  location...:\n   /tmp/tmpbutsdj3n.rkt:17:52\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (find-max-helper words max-word max-count)\n\
    \    (cond [(empty? words) max-word]\n          [else\n           (define word\
    \ (first words))\n           (define count (count-unique-chars word))\n      \
    \     (if (> count max-count)\n               (find-max-helper (rest words) word\
    \ count)\n               (if (= count max-count)\n                   (if (< word\
    \ max-word)\n                       (find-max-helper (rest words) word count)\n\
    \                       (find-max-helper (rest words) max-word count))\n     \
    \              (find-max-helper (rest words) max-word max-count)))]))\n  (find-max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:33:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"enam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:34:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"bb\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:35:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"cba\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:36:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:37:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"rock\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:38:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"mad\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5c4uka_m.rkt:41:4\n\
    \n<: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (count-unique-chars (first words))])\n    (for ([word (rest words)])\n     \
    \ (let ([count (count-unique-chars word)])\n        (when (or (&gt; count max-count)\n\
    \                  (and (= count max-count)\n                       (string&lt;?\
    \ word max-word)))\n          (set! max-word word)\n          (set! max-count\
    \ count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiwam7efs.rkt:14:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 22\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word)\n      (cond\n        [(empty? words) max-word]\n        [(string=?\
    \ (unique-chars (first words)) (unique-chars max-word))\n         (max-unique-chars-iter\
    \ (rest words) max-word)]\n        [(string<? (unique-chars (first words)) (unique-chars\
    \ max-word))\n         (max-unique-chars-iter (rest words) max-word)]\n      \
    \  [else (max-unique-chars-iter (rest words) (first words))]))\n    (max-unique-chars-iter\
    \ (rest words) (first words)))\n  (max-unique-chars words))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:33:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:34:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:35:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:36:4\nactual:\
    \     \"this\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:37:4\nactual:\
    \     \"we\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdxmse6h.rkt:38:4\nactual:\
    \     \"we\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (define (count-unique-helper\
    \ word unique-chars)\n      (cond\n        [(empty? word) (length unique-chars)]\n\
    \        [(member (first word) unique-chars) (count-unique-helper (rest word)\
    \ unique-chars)]\n        [else (count-unique-helper (rest word) (cons (first\
    \ word) unique-chars))]))\n    (count-unique-helper word '()))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n    \
    \  [(> (count-unique (first words)) max-count) (find-max-helper (rest words) (first\
    \ words) (count-unique (first words)))]\n      [(= (count-unique (first words))\
    \ max-count) (if (string<? (first words) max-word) (find-max-helper (rest words)\
    \ (first words) (count-unique (first words))) (find-max-helper (rest words) max-word\
    \ max-count))]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeitb_3ox.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeitb_3ox.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeitb_3ox.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeitb_3ox.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeitb_3ox.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeitb_3ox.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeitb_3ox.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeitb_3ox.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpeitb_3ox.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeitb_3ox.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (apply\
    \ min (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn0tdziv0.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp942idk2r.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp942idk2r.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (if (null? words)\n\
    \        \"\"\n        (let ((word (car words))\n              (rest (cdr words)))\n\
    \          (if (null? rest)\n              word\n              (let ((max-word\
    \ (max-unique-word rest)))\n                (if (> (count-unique word) (count-unique\
    \ max-word))\n                    word\n                    max-word))))))\n \
    \ (max-unique-word words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbo_w08d0.rkt:32:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbo_w08d0.rkt:33:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbo_w08d0.rkt:34:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbo_w08d0.rkt:36:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (helper word acc)\n      (cond\n        [(empty? word) acc]\n\
    \        [(member (first word) acc) (helper (rest word) acc)]\n        [else (helper\
    \ (rest word) (cons (first word) acc))]))\n    (helper word '()))\n  (define (max-unique-chars\
    \ words)\n    (cond\n      [(empty? words) '()]\n      [(empty? (rest words))\
    \ (unique-chars (first words))]\n      [else (max (unique-chars (first words))\
    \ (max-unique-chars (rest words)))]))\n  (define (find-max words max-chars)\n\
    \    (cond\n      [(empty? words) '()]\n      [(equal? (unique-chars (first words))\
    \ max-chars) (first words)]\n      [else (find-max (rest words) max-chars)]))\n\
    \  (find-max words (max-unique-chars words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\f #\\o)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\m #\\a #\\n #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0n9s162p.rkt:38:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:39:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\c #\\b #\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\f #\\o)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\n #\\o #\\g)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0n9s162p.rkt:42:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\d #\\a #\\m)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:43:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0n9s162p.rkt:45:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\y #\\a #\\l #\\p)\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (unique-chars (first words)))]\n        [current-count 0])\n    (for\
    \ ([word words])\n      (set! current-count (length (unique-chars word)))\n  \
    \    (when (> current-count max-count)\n        (set! max-count current-count)\n\
    \        (set! max-word word)))\n    max-word))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgwftuya5.rkt:12:28: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpgwftuya5.rkt:12:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-words words)\n    (filter (lambda\
    \ (word)\n              (= (unique-chars word) (max-unique-chars words)))\n  \
    \          words))\n  (apply min (max-unique-words words)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwpjkjmz_.rkt:27:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:28:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwpjkjmz_.rkt:31:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:32:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwpjkjmz_.rkt:34:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwpjkjmz_.rkt:35:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-words words)\n    (filter (lambda (word)\n              (= (unique-chars\
    \ word) (max-unique-chars words)))\n            words))\n  (define (first-word\
    \ words)\n    (car (sort words string<?)))\n  (first-word (max-words words)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeelxsves.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond [(empty?\
    \ words) '()]\n          [(empty? (rest words)) (first words)]\n          [else\
    \ (let ([first-word (first words)]\n                       [second-word (second\
    \ words)])\n                  (if (> (count-unique first-word)\n             \
    \            (count-unique second-word))\n                      first-word\n \
    \                     (max-unique-word (rest words))))]))\n  (max-unique-word\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:29:4\n\
    actual:     \"name\"\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:30:4\nactual:\
    \     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:31:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:32:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:33:4\nactual:\
    \     \"game\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:34:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc_eepdbd.rkt:35:4\nactual:\
    \     \"are\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max_word max_count)\n\
    \    (cond\n      [(empty? words) max_word]\n      [(> (count_unique_chars (first\
    \ words)) max_count)\n       (find_max_helper (rest words) (first words) (count_unique_chars\
    \ (first words)))]\n      [else (find_max_helper (rest words) max_word max_count)]))\n\
    \  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprg31u134.rkt:14:11: count_unique_chars: unbound identifier\n  in:\
    \ count_unique_chars\n  location...:\n   /tmp/tmprg31u134.rkt:14:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(string<? (first words) max-word)\
    \ (find_max-helper (rest words) max-word max-count)]\n      [(string<? max-word\
    \ (first words)) (find_max-helper (rest words) (first words) (count-unique-chars\
    \ (first words)))]\n      [(= max-count (count-unique-chars (first words))) (find_max-helper\
    \ (rest words) max-word max-count)]\n      [(> max-count (count-unique-chars (first\
    \ words))) (find_max-helper (rest words) (first words) (count-unique-chars (first\
    \ words)))]))\n  (find_max-helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1e4qdo6e.rkt:15:86: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp1e4qdo6e.rkt:15:86\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (car words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (car words))))])\n    (for ([word (cdr\
    \ words)])\n      (let ([count (length (remove-duplicates (string->list word)))])\n\
    \        (if (> count max-count)\n            (begin\n              (set! max-word\
    \ word)\n              (set! max-count count)))))\n    max-word))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpilhs1brw.rkt:15:8: if: missing an \"else\" expression\n  in: (if\
    \ (> count max-count) (begin (set! max-word word) (set! max-count count)))\n \
    \ location...:\n   /tmp/tmpilhs1brw.rkt:15:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique (first\
    \ words))) max-count)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique (first words))))]\n      [else (find_max-helper (rest words) max-word\
    \ max-count)]))\n  (find_max-helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4j9v_qmj.rkt:14:19: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmp4j9v_qmj.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (if (null? words)\n      \"\"\n      (let ([max-word\
    \ (car words)]\n            [max-count (count-unique-chars (car words))])\n  \
    \      (for ([word (cdr words)])\n          (let ([count (count-unique-chars word)])\n\
    \            (if (or (> count max-count)\n                    (and (= count max-count)\n\
    \                         (string<? max-word word)))\n                (begin\n\
    \                  (set! max-word word)\n                  (set! max-count count)))))\n\
    \        max-word)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzw6p80h0.rkt:14:24: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpzw6p80h0.rkt:14:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (find-max-iter words max-word max-unique-chars)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (find-max-iter (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (cond\n         [(string<? (first words) max-word)\
    \ (find-max-iter (rest words) (first words) max-unique-chars)]\n         [else\
    \ (find-max-iter (rest words) max-word max-unique-chars)])]\n      [else (find-max-iter\
    \ (rest words) max-word max-unique-chars)]))\n  (find-max-iter words \"\" 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (define (count-unique-helper\
    \ word unique-chars)\n      (cond\n        [(empty? word) (length unique-chars)]\n\
    \        [(member (first word) unique-chars) (count-unique-helper (rest word)\
    \ unique-chars)]\n        [else (count-unique-helper (rest word) (cons (first\
    \ word) unique-chars))]))\n    (count-unique-helper word '()))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond\n      [(empty? words) max-word]\n    \
    \  [(> (count-unique (first words)) max-count) (find-max-helper (rest words) (first\
    \ words) (count-unique (first words)))]\n      [(= (count-unique (first words))\
    \ max-count) (if (string<? (first words) max-word) (find-max-helper (rest words)\
    \ (first words) (count-unique (first words))) (find-max-helper (rest words) max-word\
    \ max-count))]\n      [else (find-max-helper (rest words) max-word max-count)]))\n\
    \  (find-max-helper words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfluna7vw.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfluna7vw.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfluna7vw.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfluna7vw.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfluna7vw.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfluna7vw.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfluna7vw.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfluna7vw.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfluna7vw.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfluna7vw.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (if (> count max-count)\n            (begin\n           \
    \   (set! max-word word)\n              (set! max-count count)))))\n    max-word))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwxp6lkiz.rkt:15:8: if: missing an \"else\" expression\n  in: (if\
    \ (> count max-count) (begin (set! max-word word) (set! max-count count)))\n \
    \ location...:\n   /tmp/tmpwxp6lkiz.rkt:15:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaeylms55.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpaeylms55.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word acc)\n      (cond\n        [(empty?\
    \ word) acc]\n        [(member (first word) acc) (unique-chars-iter (rest word)\
    \ acc)]\n        [else (unique-chars-iter (rest word) (cons (first word) acc))]))\n\
    \    (unique-chars-iter word '()))\n  (define (max-unique-chars words)\n    (cond\n\
    \      [(empty? words) '()]\n      [(empty? (rest words)) (list (first words))]\n\
    \      [else\n       (let ([first-word (first words)]\n             [second-word\
    \ (second words)])\n         (if (> (length (unique-chars first-word))\n     \
    \           (length (unique-chars second-word)))\n             (cons first-word\
    \ (max-unique-chars (rest words)))\n             (cons second-word (max-unique-chars\
    \ (rest words)))))]))\n  (define (lexicographical-order words)\n    (cond\n  \
    \    [(empty? words) '()]\n      [(empty? (rest words)) (list (first words))]\n\
    \      [else\n       (let ([first-word (first words)]\n             [second-word\
    \ (second words)])\n         (if (string<? first-word second-word)\n         \
    \    (cons first-word (lexicographical-order (rest words)))\n             (cons\
    \ second-word (lexicographical-order (rest words)))))]))\n  (define (find-max-iter\
    \ words acc)\n    (cond\n      [(empty? words) acc]\n      [(empty? (rest words))\
    \ (list (first words))]\n      [else\n       (let ([first-word (first words)]\n\
    \             [second-word (second words)])\n         (if (> (length (unique-chars\
    \ first-word))\n                (length (unique-chars second-word)))\n       \
    \      (find-max-iter (rest words) (cons first-word acc))\n             (find-max-iter\
    \ (rest words) (cons second-word acc))))]))\n  (lexicographical-\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjs8w20zo.rkt:51:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 52\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (helper word acc)\n      (cond\n        [(empty? word) acc]\n\
    \        [(member (first word) acc) (helper (rest word) acc)]\n        [else (helper\
    \ (rest word) (cons (first word) acc))]))\n    (helper word '()))\n  (define (max-unique-chars\
    \ words)\n    (define (helper words acc)\n      (cond\n        [(empty? words)\
    \ acc]\n        [(> (length (unique-chars (first words))) (length acc))\n    \
    \     (helper (rest words) (unique-chars (first words)))]\n        [else (helper\
    \ (rest words) acc)]))\n    (helper words '()))\n  (define (max-unique-words words)\n\
    \    (define (helper words acc)\n      (cond\n        [(empty? words) acc]\n \
    \       [(equal? (unique-chars (first words)) (max-unique-chars words))\n    \
    \     (cons (first words) (helper (rest words) acc))]\n        [else (helper (rest\
    \ words) acc)]))\n    (helper words '()))\n  (define (min-word words)\n    (define\
    \ (helper words acc)\n      (cond\n        [(empty? words) acc]\n        [(string<?\
    \ (first words) acc) (helper (rest words) (first words))]\n        [else (helper\
    \ (rest words) acc)]))\n    (helper words (first words)))\n  (min-word (max-unique-words\
    \ words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp40rmxzfa.rkt:56:4\n\
    actual:     \"prrk\"\nexpected:   \"this\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (cond [(string<? (first words)\
    \ max-word)\n                  (loop (rest words) (first words) (length (unique\
    \ (first words))))]\n                 [else (loop (rest words) max-word max-count)])]\n\
    \          [else (loop (rest words) max-word max-count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3xa7eo2x.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmp3xa7eo2x.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_aux words max-word max-count)\n\
    \    (if (null? words)\n        max-word\n        (let ((word (car words))\n \
    \             (count (length (remove-duplicates (string->list word)))))\n    \
    \      (if (&gt; count max-count)\n              (find_max_aux (cdr words) word\
    \ count)\n              (find_max_aux (cdr words) max-word max-count)))))\n  (find_max_aux\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeshxg1r5.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 21\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max)\n      (cond\n        [(empty? words) max]\n        [(> (string-length\
    \ (unique-chars (first words)))\n            (string-length (unique-chars max)))\n\
    \         (max-unique-chars-helper (rest words) (first words))]\n        [else\
    \ (max-unique-chars-helper (rest words) max)]))\n    (max-unique-chars-helper\
    \ words (first words)))\n  (max-unique-chars words))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyekshjda.rkt:32:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyekshjda.rkt:35:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word max-unique-chars)\n      (cond ((null? words) max-word)\n         \
    \   ((> (length (unique-chars (car words))) max-unique-chars)\n             (max-unique-chars-iter\
    \ (cdr words) (car words) (length (unique-chars (car words)))))\n            (else\
    \ (max-unique-chars-iter (cdr words) max-word max-unique-chars))))\n    (max-unique-chars-iter\
    \ words \"\" 0))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdkqc6886.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(string=? (first words) max-word)\
    \ (find_max-helper (rest words) max-word max-count)]\n      [(> (string-length\
    \ (remove-duplicates (first words))) max-count) (find_max-helper (rest words)\
    \ (first words) (string-length (remove-duplicates (first words))))]\n      [else\
    \ (find_max-helper (rest words) max-word max-count)]))\n  (find_max-helper words\
    \ \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:24:4\n\
    \nremove-duplicates: contract violation\n  expected: list?\n  given: \"name\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpds7u_th8.rkt:25:4\n\nremove-duplicates: contract violation\n\
    \  expected: list?\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:26:4\n\nremove-duplicates:\
    \ contract violation\n  expected: list?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:27:4\n\
    \nremove-duplicates: contract violation\n  expected: list?\n  given: \"abc\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpds7u_th8.rkt:28:4\n\nremove-duplicates: contract violation\n\
    \  expected: list?\n  given: \"play\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:29:4\n\nremove-duplicates:\
    \ contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:30:4\n\
    \nremove-duplicates: contract violation\n  expected: list?\n  given: \"we\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpds7u_th8.rkt:31:4\n\nremove-duplicates: contract violation\n\
    \  expected: list?\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:32:4\n\nremove-duplicates:\
    \ contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpds7u_th8.rkt:33:4\n\
    \nremove-duplicates: contract violation\n  expected: list?\n  given: \"play\"\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0nkam5_.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu0nkam5_.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphq3o_rfb.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphq3o_rfb.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max-word\
    \ (first words)]\n           [max-count (count-unique-chars (first words))])\n\
    \       (for ([word (rest words)])\n         (let ([count (count-unique-chars\
    \ word)])\n           (when (> count max-count)\n             (set! max-word word)\n\
    \             (set! max-count count))))\n       max-word)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9aacnkql.rkt:16:23: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp9aacnkql.rkt:16:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"Empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max-word\
    \ (find_max (rest words))])\n       (if (&gt; (length (unique-chars (first words)))\n\
    \              (length (unique-chars max-word)))\n           (first words)\n \
    \          max-word))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8u0t18s_.rkt:16:12: &gt: unbound identifier\n  in: &gt\n  location...:\n\
    \   /tmp/tmp8u0t18s_.rkt:16:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (if (null?\
    \ word)\n          unique-chars\n          (if (member (car word) unique-chars)\n\
    \              (unique-chars-helper (cdr word) unique-chars)\n              (unique-chars-helper\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars words)\n    (if (null? words)\n        0\n\
    \        (max (length (unique-chars (car words)))\n             (max-unique-chars\
    \ (cdr words)))))\n  (define (max-unique-chars-words words)\n    (if (null? words)\n\
    \        '()\n        (if (= (length (unique-chars (car words))) (max-unique-chars\
    \ words))\n            (cons (car words) (max-unique-chars-words (cdr words)))\n\
    \            (max-unique-chars-words (cdr words)))))\n  (car (sort (max-unique-chars-words\
    \ words) string<?)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprde17fkh.rkt:45:4\n\
    actual:     \"prrk\"\nexpected:   \"this\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (if (null? words)\n      \"\"\n      (let ([max-word\
    \ (car words)]\n            [max-count (count-unique-chars (car words))])\n  \
    \      (for ([word (cdr words)])\n          (let ([count (count-unique-chars word)])\n\
    \            (if (> count max-count)\n                (begin\n               \
    \   (set! max-word word)\n                  (set! max-count count))\n        \
    \        (if (= count max-count)\n                    (if (string<? word max-word)\n\
    \                        (set! max-word word))))))\n        max-word)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbdrvblmq.rkt:14:24: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpbdrvblmq.rkt:14:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"Empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let* ([word1 (first\
    \ words)]\n            [word2 (find_max (rest words))]\n            [unique-chars1\
    \ (unique-chars word1)]\n            [unique-chars2 (unique-chars word2)])\n \
    \      (if (> (length unique-chars1) (length unique-chars2))\n           word1\n\
    \           word2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjl4i23n4.rkt:17:28: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpjl4i23n4.rkt:17:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max (find_max\
    \ (rest words))])\n       (if (&gt; (length (unique-chars (first words)))\n  \
    \            (length (unique-chars max)))\n           (first words)\n        \
    \   max))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbt_f6sq6.rkt:16:12: &gt: unbound identifier\n  in: &gt\n  location...:\n\
    \   /tmp/tmpbt_f6sq6.rkt:16:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-len\
    \ (length (unique-chars (first words)))]\n        [cur-len 0])\n    (for ([word\
    \ words])\n      (set! cur-len (length (unique-chars word)))\n      (if (> cur-len\
    \ max-len)\n          (begin\n            (set! max-len cur-len)\n           \
    \ (set! max-word word))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwempvz_r.rkt:12:26: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpwempvz_r.rkt:12:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars word) (max-unique-chars words)))\n            words))\n\
    \  (define (lexicographical-order words)\n    (sort words string<?))\n  (first\
    \ (lexicographical-order (max-unique-chars-words words))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk_wliwb.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-word-unique-chars\
    \ (length (remove-duplicates (string->list max-word)))]\n        [current-word\
    \ (first words)]\n        [current-word-unique-chars (length (remove-duplicates\
    \ (string->list current-word)))])\n    (for ([word (rest words)])\n      (set!\
    \ current-word word)\n      (set! current-word-unique-chars (length (remove-duplicates\
    \ (string->list current-word))))\n      (if (> current-word-unique-chars max-word-unique-chars)\n\
    \          (begin\n            (set! max-word current-word)\n            (set!\
    \ max-word-unique-chars current-word-unique-chars))))\n    max-word))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkv7_l37a.rkt:12:72: max-word: unbound identifier\n  in: max-word\n\
    \  location...:\n   /tmp/tmpkv7_l37a.rkt:12:72\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-iter (cdr word) unique-chars))\n            (else (unique-chars-iter\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-iter word '()))\n\
    \  (define (max-unique-chars words)\n    (cond ((null? words) '())\n         \
    \ ((null? (cdr words)) (car words))\n          (else (if (> (length (unique-chars\
    \ (car words)))\n                      (length (unique-chars (cadr words))))\n\
    \                   (max-unique-chars (cons (car words) (cddr words)))\n     \
    \              (max-unique-chars (cdr words))))))\n  (max-unique-chars words))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95zf3wga.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95zf3wga.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95zf3wga.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp95zf3wga.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (unique-chars (first words)))]\n        [current-word (first words)]\n\
    \        [current-count (length (unique-chars (first words)))])\n    (for ([word\
    \ (rest words)])\n      (set! current-word word)\n      (set! current-count (length\
    \ (unique-chars word)))\n      (if (&gt; current-count max-count)\n          (begin\n\
    \            (set! max-word current-word)\n            (set! max-count current-count))))\n\
    \    max-word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"\
    string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"\
    game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\"\
    )) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\"\
    )\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpknbapraj.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 24\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) \"\"]\n    [(empty? (rest\
    \ words)) (first words)]\n    [else\n     (let ([first-word (first words)]\n \
    \          [second-word (find_max (rest words))])\n       (if (> (count-unique-chars\
    \ first-word)\n              (count-unique-chars second-word))\n           first-word\n\
    \           second-word))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7u4gupwe.rkt:17:15: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp7u4gupwe.rkt:17:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (unique-chars (first words)))]\n        [current-word (first words)]\n\
    \        [current-count (length (unique-chars (first words)))])\n    (for ([word\
    \ (rest words)])\n      (set! current-word word)\n      (set! current-count (length\
    \ (unique-chars word)))\n      (if (> current-count max-count)\n          (begin\n\
    \            (set! max-word current-word)\n            (set! max-count current-count))))\n\
    \    max-word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"\
    string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"\
    game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\"\
    )) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\"\
    )\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7au3muub.rkt:12:28: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmp7au3muub.rkt:12:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) \"\"]\n    [(empty? (rest\
    \ words)) (first words)]\n    [else\n     (let* ([word1 (first words)]\n     \
    \       [word2 (find_max (rest words))]\n            [uniq1 (unique-chars word1)]\n\
    \            [uniq2 (unique-chars word2)])\n       (cond\n         [(> (length\
    \ uniq1) (length uniq2)) word1]\n         [(< (length uniq1) (length uniq2)) word2]\n\
    \         [else\n          (cond\n            [(string<? word1 word2) word1]\n\
    \            [else word2])]))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqv82zsyg.rkt:17:20: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpqv82zsyg.rkt:17:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word seen)\n      (cond\n        [(empty?\
    \ word) (length seen)]\n        [(member (first word) seen) (unique-chars-helper\
    \ (rest word) seen)]\n        [else (unique-chars-helper (rest word) (cons (first\
    \ word) seen))]))\n    (unique-chars-helper word '()))\n  (define (find-max-helper\
    \ words max-word max-unique)\n    (cond\n      [(empty? words) max-word]\n   \
    \   [(> (unique-chars (first words)) max-unique)\n       (find-max-helper (rest\
    \ words) (first words) (unique-chars (first words)))]\n      [(= (unique-chars\
    \ (first words)) max-unique)\n       (cond\n         [(string<? (first words)\
    \ max-word)\n          (find-max-helper (rest words) (first words) max-unique)]\n\
    \         [else (find-max-helper (rest words) max-word max-unique)])]\n      [else\
    \ (find-max-helper (rest words) max-word max-unique)]))\n  (find-max-helper words\
    \ \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond [(empty? words) max-word]\n          [else\n           (let ([word\
    \ (first words)])\n             (if (&gt; (length (set (string-&gt;list word)))\
    \ max-count)\n                 (find_max-helper (rest words) word (length (set\
    \ (string-&gt;list word))))\n                 (find_max-helper (rest words) max-word\
    \ max-count)))]))\n  (find_max-helper words \"\" 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk2grklvb.rkt:17:68: read-syntax: missing `)` to close preceding\
    \ `(`, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ 0]\n      [else (max (length (unique-chars (first words))) (max-unique-chars\
    \ (rest words)))]))\n  (define (find-max-helper words max-unique-chars)\n    (cond\n\
    \      [(empty? words) '()]\n      [(= (length (unique-chars (first words))) max-unique-chars)\
    \ (first words)]\n      [else (find-max-helper (rest words) max-unique-chars)]))\n\
    \  (find-max-helper words (max-unique-chars words)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wxcvn48.rkt:36:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8wxcvn48.rkt:39:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-word-len)\n\
    \    (if (null? words)\n        max-word\n        (let ((word (car words))\n \
    \             (word-len (length (remove-duplicates (string->list word)))))\n \
    \         (if (&gt; word-len max-word-len)\n              (find_max_helper (cdr\
    \ words) word word-len)\n              (find_max_helper (cdr words) max-word max-word-len)))))\n\
    \  (find_max_helper words \"\" 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgvfdiadd.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (car words)]\n        [max-unique-chars\
    \ (length (unique-chars (car words)))]\n        [max-lexicographical-order (car\
    \ words)])\n    (for ([word (cdr words)])\n      (let ([unique-chars (length (unique-chars\
    \ word))])\n        (cond\n          [(> unique-chars max-unique-chars)\n    \
    \       (set! max-word word)\n           (set! max-unique-chars unique-chars)\n\
    \           (set! max-lexicographical-order word)]\n          [(= unique-chars\
    \ max-unique-chars)\n           (cond\n             [(string<? word max-lexicographical-order)\n\
    \              (set! max-lexicographical-order word)])])))\n    max-lexicographical-order))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaz8hb083.rkt:12:35: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpaz8hb083.rkt:12:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (sort\
    \ word string<?))\n    (for/fold ([chars '()]) ([ch (in-list word)])\n      (if\
    \ (member ch chars)\n          chars\n          (cons ch chars))))\n  (define\
    \ (max-unique-chars words)\n    (for/fold ([max-word \"\"\n                max-chars\
    \ '()])\n               ([word (in-list words)])\n      (let ([chars (unique-chars\
    \ word)])\n        (if (> (length chars) (length max-chars))\n            (values\
    \ word chars)\n            (values max-word max-chars)))))\n  (max-unique-chars\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa0eo6hy2.rkt:18:14: for/fold: invalid accumulator binding clause(s)\n\
    \  at: ((max-word \"\" max-chars (quote ())))\n  in: (for/fold ((max-word \"\"\
    \ max-chars (quote ()))) ((word (in-list words))) (let ((chars (unique-chars word)))\
    \ (if (> (length chars) (length max-chars)) (values word chars) (values max-word\
    \ max-chars))))\n  location...:\n   /tmp/tmpa0eo6hy2.rkt:18:14\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/for.rkt:1674:6\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-iter (cdr word) unique-chars))\n            (else (unique-chars-iter\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-iter word '()))\n\
    \  (define (max-unique-chars words)\n    (cond ((null? words) '())\n         \
    \ ((null? (cdr words)) (car words))\n          (else (if (> (length (unique-chars\
    \ (car words)))\n                      (length (unique-chars (cadr words))))\n\
    \                   (max-unique-chars (cons (car words) (cddr words)))\n     \
    \              (max-unique-chars (cdr words))))))\n  (max-unique-chars words))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq0o_l7b.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq0o_l7b.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq0o_l7b.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkq0o_l7b.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max_word max_count)\n\
    \    (if (null? words)\n        max_word\n        (let ((word (car words))\n \
    \             (count (length (remove-duplicates (string->list word)))))\n    \
    \      (if (&gt; count max_count)\n              (find_max_helper (cdr words)\
    \ word count)\n              (find_max_helper (cdr words) max_word max_count)))))\n\
    \  (find_max_helper words \"\" 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2jgiqd9m.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (if (null? words)\n        max-word\n        (let ([word (car words)])\n\
    \          (let ([count (length (remove-duplicates (string->list word)))]\n  \
    \              [new-max-word (if (> count max-count) word max-word)])\n      \
    \      (find_max_helper (cdr words) new-max-word count)))))\n  (find_max_helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:25:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:26:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:27:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:28:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:29:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:30:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:31:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:32:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:33:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bzxcw9w.rkt:34:4\n\
    \n>: contract violation\n  expected: real?\n  given: #<procedure:count>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-uniques word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (find-max-helper words max-word max-uniques)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (count-uniques (first words))\
    \ max-uniques)\n       (find-max-helper (rest words) (first words) (count-uniques\
    \ (first words)))]\n      [(= (count-uniques (first words)) max-uniques)\n   \
    \    (if (string<? (first words) max-word)\n           (find-max-helper (rest\
    \ words) (first words) (count-uniques (first words)))\n           (find-max-helper\
    \ (rest words) max-word max-uniques))]\n      [else (find-max-helper (rest words)\
    \ max-word max-uniques)]))\n  (find-max-helper words \"\" 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (max-unique-word words)\n    (define (max-unique-word-helper\
    \ words max-word max-unique)\n      (if (null? words)\n          max-word\n  \
    \        (let ([word (car words)]\n                [unique (unique-chars word)])\n\
    \            (if (&gt; unique max-unique)\n                (max-unique-word-helper\
    \ (cdr words) word unique)\n                (max-unique-word-helper (cdr words)\
    \ max-word max-unique)))))\n    (max-unique-word-helper words \"\" 0))\n  (max-unique-word\
    \ words))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp16j13orj.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique-chars (first words))) max-count)\n           (loop\
    \ (rest words) (first words) (length (unique-chars (first words))))]\n       \
    \   [else (loop (rest words) max-word max-count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsxbj7__s.rkt:15:23: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpsxbj7__s.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (second (cadr words)))\n\
    \             (if (&gt; (count-unique first) (count-unique second))\n        \
    \         (max-unique-word (cons first (cddr words)))\n                 (max-unique-word\
    \ (cons second (cddr words))))))))\n  (max-unique-word words))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6p8cm8g4.rkt:10:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 24\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (first words)]\n      [else (if (> (length\
    \ (unique-chars (first words))) (length (unique-chars (second words))))\n    \
    \            (max-unique-chars (cons (first words) (rest (rest words))))\n   \
    \             (max-unique-chars (cons (second words) (rest (rest words)))))]))\n\
    \  (max-unique-chars words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oxi5eu6.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oxi5eu6.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oxi5eu6.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oxi5eu6.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (apply max (map (lambda (word)\n               \
    \     (cons (length (remove-duplicates (string->list word)))\n               \
    \           word))\n                  words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:21:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:22:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"name\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:23:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"aaaaaaa\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(3 . \"abc\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:25:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:26:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(2 . \"we\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"this\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 . \"b\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1gd_2t6a.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 . \"play\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (max-unique-chars-words words)\n    (filter\
    \ (lambda (word)\n              (= (unique-chars word) (max-unique-chars words)))\n\
    \            words))\n  (define (lexicographically-first words)\n    (apply min\
    \ words))\n  (lexicographically-first (max-unique-chars-words words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcuj75rhn.rkt:29:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:30:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcuj75rhn.rkt:33:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:34:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcuj75rhn.rkt:36:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpcuj75rhn.rkt:37:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (count-unique-chars (first words))])\n    (for ([word (rest words)])\n     \
    \ (let ([count (count-unique-chars word)])\n        (when (or (> count max-count)\n\
    \                  (and (= count max-count)\n                       (string<?\
    \ max-word word)))\n          (set! max-word word)\n          (set! max-count\
    \ count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxiusd98k.rkt:12:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpxiusd98k.rkt:12:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word)\n    (if\
    \ (null? words)\n        max-word\n        (let ((word (car words)))\n       \
    \   (if (&gt; (length (remove-duplicates (string-&gt;list word)))\n          \
    \       (length (remove-duplicates (string-&gt;list max-word))))\n           \
    \   (find_max_helper (cdr words) word)\n              (find_max_helper (cdr words)\
    \ max-word)))))\n  (find_max_helper words (car words)))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp71o67bc2.rkt:14:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) '())\n          ((null? (cdr words)) (car words))\n          (else\n\
    \           (let ((first (car words))\n                 (second (cadr words)))\n\
    \             (if (> (count-unique first) (count-unique second))\n           \
    \      (max-unique-word (cons first (cddr words)))\n                 (max-unique-word\
    \ (cons second (cddr words))))))))\n  (max-unique-word words))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgj0ls_g7.rkt:30:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgj0ls_g7.rkt:31:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgj0ls_g7.rkt:32:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgj0ls_g7.rkt:34:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word)\n      (cond ((null? words) max-word)\n            ((> (length (unique-chars\
    \ (car words)))\n                (length (unique-chars max-word)))\n         \
    \    (max-unique-chars-iter (cdr words) (car words)))\n            (else (max-unique-chars-iter\
    \ (cdr words) max-word))))\n    (max-unique-chars-iter words (car words)))\n \
    \ (max-unique-chars words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pr6ojz5.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max-word max-unique-chars)\n      (cond\n        [(empty? words) max-word]\n\
    \        [(> (length (unique-chars (first words))) max-unique-chars)\n       \
    \  (max-unique-chars-helper (rest words) (first words) (length (unique-chars (first\
    \ words))))]\n        [else (max-unique-chars-helper (rest words) max-word max-unique-chars)]))\n\
    \    (max-unique-chars-helper words \"\" 0))\n  (max-unique-chars words))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpytv7ynir.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique-chars word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ count-unique-chars words)))\n  (define (max-unique-words words)\n    (filter\
    \ (lambda (word) (= (count-unique-chars word) (max-unique-chars words))) words))\n\
    \  (apply min (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:24:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"string\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:25:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:26:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"aaaaaaa\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:27:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:28:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:29:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"gonna\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:30:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"nation\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:31:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:32:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq0vz2tsy.rkt:33:4\n\
    \nmin: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond ((null?\
    \ word) unique-chars)\n            ((member (car word) unique-chars)\n       \
    \      (unique-chars-helper (cdr word) unique-chars))\n            (else (unique-chars-helper\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-helper word\
    \ '()))\n  (define (find-max-helper words max-word)\n    (cond ((null? words)\
    \ max-word)\n          ((> (length (unique-chars (car words))) (length (unique-chars\
    \ max-word)))\n           (find-max-helper (cdr words) (car words)))\n       \
    \   ((= (length (unique-chars (car words))) (length (unique-chars max-word)))\n\
    \           (cond ((string<? (car words) max-word)\n                  (find-max-helper\
    \ (cdr words) (car words)))\n                 (else (find-max-helper (cdr words)\
    \ max-word))))\n          (else (find-max-helper (cdr words) max-word))))\n  (find-max-helper\
    \ words (car words)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"Empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max-word\
    \ (find_max (rest words))])\n       (if (&gt; (length (unique-chars (first words)))\n\
    \              (length (unique-chars max-word)))\n           (first words)\n \
    \          max-word))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"\
    of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"\
    enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"\
    bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"\
    )) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"\
    of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpypmt92yo.rkt:16:12: &gt: unbound identifier\n  in: &gt\n  location...:\n\
    \   /tmp/tmpypmt92yo.rkt:16:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-len)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-len)\n       (find_max_helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max_helper (rest words) max-word\
    \ max-len)]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq8mik8oy.rkt:14:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpq8mik8oy.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"empty list\"\
    )]\n    [(empty? (rest words)) (first words)]\n    [else\n     (let ([max (find_max\
    \ (rest words))])\n       (if (&gt; (length (unique-chars (first words)))\n  \
    \            (length (unique-chars max)))\n           (first words)\n        \
    \   max))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplt93xmoz.rkt:16:12: &gt: unbound identifier\n  in: &gt\n  location...:\n\
    \   /tmp/tmplt93xmoz.rkt:16:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (if (null?\
    \ word)\n          unique-chars\n          (if (member (car word) unique-chars)\n\
    \              (unique-chars-helper (cdr word) unique-chars)\n              (unique-chars-helper\
    \ (cdr word) (cons (car word) unique-chars)))))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars words)\n    (if (null? words)\n        0\n\
    \        (max (length (unique-chars (car words)))\n             (max-unique-chars\
    \ (cdr words)))))\n  (define (find-max-helper words max-unique-chars)\n    (if\
    \ (null? words)\n        '()\n        (if (= (length (unique-chars (car words)))\
    \ max-unique-chars)\n            (cons (car words) (find-max-helper (cdr words)\
    \ max-unique-chars))\n            (find-max-helper (cdr words) max-unique-chars))))\n\
    \  (car (sort (find-max-helper words (max-unique-chars words)) string<?)))\n```\n\
    \n### Problem 2\n\n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpokbagduw.rkt:34:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word max-count)\n\
    \    (cond\n      [(empty? words) max-word]\n      [(> (count-unique-chars (first\
    \ words)) max-count)\n       (find_max-helper (rest words) (first words) (count-unique-chars\
    \ (first words)))]\n      [(= (count-unique-chars (first words)) max-count)\n\
    \       (cond\n         [(string<? (first words) max-word)\n          (find_max-helper\
    \ (rest words) (first words) (count-unique-chars (first words)))]\n         [else\n\
    \          (find_max-helper (rest words) max-word max-count)])]\n      [else\n\
    \       (find_max-helper (rest words) max-word max-count)]))\n  (find_max-helper\
    \ words \"\" 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\"\
    \ \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\"\
    \ \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\"\
    \ \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\"))\
    \ \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\"\
    \ \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\"\
    \ \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"\
    are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list\
    \ \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list\
    \ \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\"\
    )) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3pq6fiwj.rkt:14:11: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmp3pq6fiwj.rkt:14:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ (car words)]\n             [max-count (length (string-unique-chars (car words)))])\n\
    \    (cond [(null? words) max-word]\n          [(> (length (string-unique-chars\
    \ (car words))) max-count)\n           (loop (cdr words) (car words) (length (string-unique-chars\
    \ (car words))))]\n          [(= (length (string-unique-chars (car words))) max-count)\n\
    \           (loop (cdr words) (if (string<? (car words) max-word) (car words)\
    \ max-word) max-count)]\n          [else (loop (cdr words) max-word max-count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt5h46d74.rkt:15:23: string-unique-chars: unbound identifier\n \
    \ in: string-unique-chars\n  location...:\n   /tmp/tmpt5h46d74.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-count\
    \ (length (remove-duplicates (string->list (first words))))])\n    (for ([word\
    \ (rest words)])\n      (let ([count (length (remove-duplicates (string->list\
    \ word)))])\n        (when (> count max-count)\n          (set! max-word word)\n\
    \          (set! max-count count))))\n    max-word))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolx8sg_q.rkt:26:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpolx8sg_q.rkt:29:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max-helper\
    \ (rest words) max-word)]\n      [else (find_max-helper (rest words) (first words))]))\n\
    \  (define (unique-chars word)\n    (define (unique-chars-helper word unique-chars)\n\
    \      (cond\n        [(empty? word) unique-chars]\n        [(member (first word)\
    \ unique-chars) (unique-chars-helper (rest word) unique-chars)]\n        [else\
    \ (unique-chars-helper (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper\
    \ word '()))\n  (define (max-unique-chars words)\n    (define (max-unique-chars-helper\
    \ words max-unique-chars)\n      (cond\n        [(empty? words) max-unique-chars]\n\
    \        [(> (length (unique-chars (first words))) max-unique-chars) (max-unique-chars-helper\
    \ (rest words) (length (unique-chars (first words))))]\n        [else (max-unique-chars-helper\
    \ (rest words) max-unique-chars)]))\n    (max-unique-chars-helper words 0))\n\
    \  (define (max-unique-chars-words words max-unique-chars)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(= (length (unique-chars (first words))) max-unique-chars)\
    \ (cons (first words) (max-unique-chars-words (rest words) max-unique-chars))]\n\
    \      [else (max-unique-chars-words (rest words) max-unique-chars)]))\n  (find_max-helper\
    \ (max-unique-chars-words words (max-unique-chars words)) (first words)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8w6dden.rkt:42:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_8w6dden.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8w6dden.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_8w6dden.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8w6dden.rkt:46:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_8w6dden.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8w6dden.rkt:48:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_8w6dden.rkt:49:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_8w6dden.rkt:50:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_8w6dden.rkt:51:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (cond\n    [(empty? words) (error \"No words\")]\n\
    \    [(empty? (rest words)) (first words)]\n    [else\n     (define first-word\
    \ (first words))\n     (define rest-words (rest words))\n     (define first-word-unique-chars\
    \ (unique-chars first-word))\n     (define rest-words-max (find_max rest-words))\n\
    \     (define rest-words-max-unique-chars (unique-chars rest-words-max))\n   \
    \  (if (> (length first-word-unique-chars) (length rest-words-max-unique-chars))\n\
    \         first-word\n         rest-words-max)]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2yrbyvmo.rkt:17:38: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmp2yrbyvmo.rkt:17:38\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars word) (max-unique-chars words)))\n            words))\n\
    \  (define (lexicographical-order words)\n    (sort words string<?))\n  (define\
    \ (first-word words)\n    (car words))\n  (first-word (lexicographical-order (max-unique-chars-words\
    \ words))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbzm2gugy.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (unique-chars-count word)\n    (length (unique-chars word)))\n  (define\
    \ (max-unique-chars-count words)\n    (apply max (map unique-chars-count words)))\n\
    \  (define (max-unique-chars-words words)\n    (filter (lambda (word)\n      \
    \        (= (unique-chars-count word)\n                 (max-unique-chars-count\
    \ words)))\n            words))\n  (define (lexicographical-order words)\n   \
    \ (sort words string<?))\n  (first (lexicographical-order (max-unique-chars-words\
    \ words))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"string\"))\
    \ \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"game\"))\
    \ \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"\
    aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n  \
    \  (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:41:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzev58eek.rkt:42:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (remove-duplicates\
    \ (string->list word)))\n  (define (max-unique-chars words)\n    (apply max (map\
    \ unique-chars words)))\n  (define (filter-max-unique words)\n    (filter (lambda\
    \ (word) (= (unique-chars word) (max-unique-chars words))) words))\n  (apply min\
    \ (filter-max-unique words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:24:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\n #\\a #\\m #\\e)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkv63qim.rkt:25:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\n #\\a #\\m #\\e)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:26:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(#\\a)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:27:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\a #\\b #\\c)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkv63qim.rkt:29:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\w #\\e)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:30:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\w #\\e)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(#\\t #\\h #\\i #\\s)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkv63qim.rkt:32:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(#\\b)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpkkv63qim.rkt:33:4\n\nmax: contract\
    \ violation\n  expected: real?\n  given: '(#\\p #\\l #\\a #\\y)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (first words)]\n        [max-unique-chars\
    \ (length (unique-chars (first words)))]\n        [current-word (first words)]\n\
    \        [current-unique-chars (length (unique-chars (first words)))])\n    (for\
    \ ([word (rest words)])\n      (set! current-word word)\n      (set! current-unique-chars\
    \ (length (unique-chars word)))\n      (cond\n        [(> current-unique-chars\
    \ max-unique-chars)\n         (set! max-word current-word)\n         (set! max-unique-chars\
    \ current-unique-chars)]\n        [(and (= current-unique-chars max-unique-chars)\n\
    \              (string<? max-word current-word))\n         (set! max-word current-word)]))\n\
    \    max-word))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate find_max))\n    (check-equal? (candidate (list \"name\" \"of\" \"\
    string\")) \"string\")\n    (check-equal? (candidate (list \"name\" \"enam\" \"\
    game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\"\
    )) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\"\
    )\n    (check-equal? (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\"\
    )) \"footbott\")\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\"\
    \ \"rock\")) \"gonna\")\n    (check-equal? (candidate (list \"we\" \"are\" \"\
    a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate (list \"this\"\
    \ \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate (list \"b\"\
    )) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"play\")) \"\
    play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc6jifgng.rkt:12:35: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpc6jifgng.rkt:12:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-iter words\
    \ max-word)\n      (cond ((null? words) max-word)\n            ((> (string-length\
    \ (unique-chars (car words)))\n                (string-length (unique-chars max-word)))\n\
    \             (max-unique-chars-iter (cdr words) (car words)))\n            (else\
    \ (max-unique-chars-iter (cdr words) max-word))))\n    (max-unique-chars-iter\
    \ words (car words)))\n  (max-unique-chars words))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_4by8xh.rkt:31:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe_4by8xh.rkt:34:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word words)\n    (cond ((null?\
    \ words) \"\")\n          ((null? (cdr words)) (car words))\n          (else (if\
    \ (> (count-unique (car words))\n                      (count-unique (cadr words)))\n\
    \                   (car words)\n                   (max-unique-word (cdr words))))))\n\
    \  (max-unique-word words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:27:4\n\
    actual:     \"name\"\nexpected:   \"string\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:28:4\nactual:\
    \     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:29:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:30:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:31:4\nactual:\
    \     \"game\"\nexpected:   \"footbott\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:32:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_xkwwdzm.rkt:33:4\nactual:\
    \     \"are\"\nexpected:   \"nation\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word)\n            \
    \  (= (unique-chars word) (max-unique-chars words)))\n            words))\n  (apply\
    \ min (max-unique-words words)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2104kzqt.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max-helper words max-word)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(string<? (first words) max-word) (find_max-helper\
    \ (rest words) max-word)]\n      [else (find_max-helper (rest words) (first words))]))\n\
    \  (define (unique-chars word)\n    (define (unique-chars-helper word chars)\n\
    \      (cond\n        [(empty? word) chars]\n        [(member (first word) chars)\
    \ (unique-chars-helper (rest word) chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) chars))]))\n    (unique-chars-helper word '()))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max-word)\n      (cond\n        [(empty? words) max-word]\n        [(string<?\
    \ (first words) max-word) (max-unique-chars-helper (rest words) max-word)]\n \
    \       [else (max-unique-chars-helper (rest words) (first words))]))\n    (max-unique-chars-helper\
    \ words (first words)))\n  (define (max-unique-chars-count words)\n    (length\
    \ (unique-chars (max-unique-chars words))))\n  (define (max-unique-chars-words\
    \ words)\n    (define (max-unique-chars-words-helper words max-words)\n      (cond\n\
    \        [(empty? words) max-words]\n        [(= (length (unique-chars (first\
    \ words))) (max-unique-chars-count words))\n         (max-unique-chars-words-helper\
    \ (rest words) (cons (first words) max-words))]\n        [else (max-unique-chars-words-helper\
    \ (rest words) max-words)]))\n    (max-unique-chars-words-helper words '()))\n\
    \  (find_max-helper (max-unique-chars-words words) (first words)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n \
    \   (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe6brmfwx.rkt:47:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe6brmfwx.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe6brmfwx.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe6brmfwx.rkt:50:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe6brmfwx.rkt:51:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe6brmfwx.rkt:52:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe6brmfwx.rkt:53:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe6brmfwx.rkt:54:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe6brmfwx.rkt:55:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe6brmfwx.rkt:56:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (find_max_helper words max-word max-count)\n\
    \    (cond [(empty? words) max-word]\n          [else\n           (define word\
    \ (first words))\n           (define count (length (remove-duplicates (string->list\
    \ word))))\n           (if (> count max-count)\n               (find_max_helper\
    \ (rest words) word count)\n               (find_max_helper (rest words) max-word\
    \ max-count))]))\n  (find_max_helper words \"\" 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcfzbbpxq.rkt:27:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcfzbbpxq.rkt:30:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (count-unique-chars (first words)) max-count)\n           (loop (rest\
    \ words) (first words) (count-unique-chars (first words)))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb8u3c7mj.rkt:15:15: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpb8u3c7mj.rkt:15:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-unique-chars)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (find-max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (cond\n         [(string<? (first words) max-word)\
    \ (find-max-helper (rest words) (first words) max-unique-chars)]\n         [else\
    \ (find-max-helper (rest words) max-word max-unique-chars)])]\n      [else (find-max-helper\
    \ (rest words) max-word max-unique-chars)]))\n  (find-max-helper words \"\" 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (max-word words)\n    (if (null? words)\n\
    \        \"\"\n        (let ([word (car words)])\n          (if (null? (cdr words))\n\
    \              word\n              (let ([next-word (max-word (cdr words))])\n\
    \                (if (> (length (unique-chars word))\n                       (length\
    \ (unique-chars next-word)))\n                    word\n                    next-word))))))\n\
    \  (max-word (sort words string<?)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqc1lddqr.rkt:18:32: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpqc1lddqr.rkt:18:32\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond [(empty? words) max-word]\n  \
    \        [(> (length (unique (first words))) max-count)\n           (loop (rest\
    \ words) (first words) (length (unique (first words))))]\n          [(= (length\
    \ (unique (first words))) max-count)\n           (if (string<? (first words) max-word)\n\
    \               (loop (rest words) (first words) (length (unique (first words))))\n\
    \               (loop (rest words) max-word max-count))]\n          [else (loop\
    \ (rest words) max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpauiiyjd5.rkt:15:23: unique: unbound identifier\n  in: unique\n\
    \  location...:\n   /tmp/tmpauiiyjd5.rkt:15:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (define (max-unique-chars-helper words\
    \ max-word)\n      (cond\n        [(empty? words) max-word]\n        [(> (length\
    \ (unique-chars (first words)))\n            (length (unique-chars max-word)))\n\
    \         (max-unique-chars-helper (rest words) (first words))]\n        [else\
    \ (max-unique-chars-helper (rest words) max-word)]))\n    (max-unique-chars-helper\
    \ words (first words)))\n  (max-unique-chars words))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:37:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:38:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:39:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nm7ttd6.rkt:40:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (helper word unique-chars)\n      (cond\n        [(empty?\
    \ word) unique-chars]\n        [(member (first word) unique-chars) (helper (rest\
    \ word) unique-chars)]\n        [else (helper (rest word) (cons (first word) unique-chars))]))\n\
    \    (helper word '()))\n  (define (helper words max-word)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (length (unique-chars (first words))) (length (unique-chars\
    \ max-word)))\n       (helper (rest words) (first words))]\n      [(= (length\
    \ (unique-chars (first words))) (length (unique-chars max-word)))\n       (if\
    \ (string<? (first words) max-word)\n           (helper (rest words) (first words))\n\
    \           (helper (rest words) max-word))]\n      [else (helper (rest words)\
    \ max-word)]))\n  (helper words (first words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-iter word unique-chars)\n      (cond\n   \
    \     [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-iter (rest word) unique-chars)]\n        [else (unique-chars-iter\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-iter word\
    \ '()))\n  (define (max-unique-chars words)\n    (cond\n      [(empty? words)\
    \ 0]\n      [else (max (length (unique-chars (first words))) (max-unique-chars\
    \ (rest words)))]))\n  (define (find-max-iter words max-unique-chars)\n    (cond\n\
    \      [(empty? words) '()]\n      [(= (length (unique-chars (first words))) max-unique-chars)\
    \ (first words)]\n      [else (find-max-iter (rest words) max-unique-chars)]))\n\
    \  (find-max-iter words (max-unique-chars words)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal? (candidate\
    \ (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal? (candidate\
    \ (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list\
    \ \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list\
    \ \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\"\
    \ \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplbn777ky.rkt:36:4\n\
    actual:     \"name\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplbn777ky.rkt:39:4\nactual:\
    \     \"play\"\nexpected:   \"footbott\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (set! word (remove-duplicates word))\n    (list->string word))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word) (= (unique-chars\
    \ word) (max-unique-chars words))) words))\n  (define (lexicographical-order words)\n\
    \    (sort words string<?))\n  (car (lexicographical-order (max-unique-words words))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:28:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:29:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"name\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"a\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"abc\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"we\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"this\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"b\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkzurv9mx.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let ([max-word (car words)]\n        [max-count\
    \ (count-unique-chars (car words))])\n    (for ([word (cdr words)])\n      (let\
    \ ([count (count-unique-chars word)])\n        (when (or (> count max-count)\n\
    \                  (and (= count max-count)\n                       (string<?\
    \ max-word word)))\n          (set! max-word word)\n          (set! max-count\
    \ count))))\n    max-word))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv_qyffy3.rkt:12:20: count-unique-chars: unbound identifier\n  in:\
    \ count-unique-chars\n  location...:\n   /tmp/tmpv_qyffy3.rkt:12:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (count-unique word)\n    (define (count-unique-helper\
    \ word unique-chars)\n      (cond\n        [(empty? word) (length unique-chars)]\n\
    \        [(member (first word) unique-chars) (count-unique-helper (rest word)\
    \ unique-chars)]\n        [else (count-unique-helper (rest word) (cons (first\
    \ word) unique-chars))]))\n    (count-unique-helper word '()))\n  (define (find-max-helper\
    \ words max-word max-unique-count)\n    (cond\n      [(empty? words) max-word]\n\
    \      [(> (count-unique (first words)) max-unique-count) (find-max-helper (rest\
    \ words) (first words) (count-unique (first words)))]\n      [(= (count-unique\
    \ (first words)) max-unique-count) (find-max-helper (rest words) (first words)\
    \ (count-unique (first words)))]\n      [else (find-max-helper (rest words) max-word\
    \ max-unique-count)]))\n  (find-max-helper words \"\" 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate find_max))\n    (check-equal?\
    \ (candidate (list \"name\" \"of\" \"string\")) \"string\")\n    (check-equal?\
    \ (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate\
    \ (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
    \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
    \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
    \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
    \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
    \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\"\
    \ \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_bx1hqa.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"name\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_bx1hqa.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"name\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_bx1hqa.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"aaaaaaa\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_bx1hqa.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abc\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_bx1hqa.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"play\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_bx1hqa.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"we\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_bx1hqa.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"we\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_bx1hqa.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"this\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi_bx1hqa.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"b\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi_bx1hqa.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"play\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (max-unique-chars-word words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(empty? (rest words)) (first words)]\n      [else (if (> (length\
    \ (unique-chars (first words))) (length (unique-chars (second words))))\n    \
    \            (max-unique-chars-word (cons (first words) (rest (rest words))))\n\
    \                (max-unique-chars-word (cons (second words) (rest (rest words)))))]))\n\
    \  (max-unique-chars-word words))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlzs8sq8.rkt:34:4\n\
    actual:     \"game\"\nexpected:   \"enam\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlzs8sq8.rkt:35:4\nactual:\
    \     \"cc\"\nexpected:   \"aaaaaaa\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlzs8sq8.rkt:36:4\nactual:\
    \     \"cba\"\nexpected:   \"abc\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdlzs8sq8.rkt:38:4\nactual:\
    \     \"rock\"\nexpected:   \"gonna\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (define (unique-chars word)\n    (set! word (string->list\
    \ word))\n    (define (unique-chars-helper word unique-chars)\n      (cond\n \
    \       [(empty? word) unique-chars]\n        [(member (first word) unique-chars)\
    \ (unique-chars-helper (rest word) unique-chars)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) unique-chars))]))\n    (unique-chars-helper word\
    \ '()))\n  (define (find-max-helper words max-word max-unique-chars)\n    (cond\n\
    \      [(empty? words) max-word]\n      [(> (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (find-max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [(= (length (unique-chars (first words)))\
    \ max-unique-chars)\n       (cond\n         [(string<? (first words) max-word)\
    \ (find-max-helper (rest words) (first words) max-unique-chars)]\n         [else\
    \ (find-max-helper (rest words) max-word max-unique-chars)])]\n      [else (find-max-helper\
    \ (rest words) max-word max-unique-chars)]))\n  (find-max-helper words \"\" 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
    \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n\
    \    (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n \
    \   (check-equal? (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n\
    \    (check-equal? (candidate (list \"abc\" \"cba\")) \"abc\")\n    (check-equal?\
    \ (candidate (list \"play\" \"this\" \"game\" \"of\" \"footbott\")) \"footbott\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\"\
    )\n    (check-equal? (candidate (list \"we\" \"are\" \"a\" \"mad\" \"nation\"\
    )) \"nation\")\n    (check-equal? (candidate (list \"this\" \"is\" \"a\" \"prrk\"\
    )) \"this\")\n    (check-equal? (candidate (list \"b\")) \"b\")\n    (check-equal?\
    \ (candidate (list \"play\" \"play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Write a function that accepts a list of strings.\n\
    ;; The list contains different words. Return the word with maximum number\n;;\
    \ of unique characters. If multiple strings have maximum number of unique\n;;\
    \ characters, return the one which comes first in lexicographical order.\n;; find_max([\"\
    name\", \"of\", \"string\"]) == \"string\"\n;; find_max([\"name\", \"enam\", \"\
    game\"]) == \"enam\"\n;; find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\
    \n(define (find_max words)\n  (let loop ([words words]\n             [max-word\
    \ \"\"]\n             [max-count 0])\n    (cond\n      [(null? words) max-word]\n\
    \      [(> (length (unique-chars (car words))) max-count)\n       (loop (cdr words)\
    \ (car words) (length (unique-chars (car words))))]\n      [(= (length (unique-chars\
    \ (car words))) max-count)\n       (if (string<? (car words) max-word)\n     \
    \      (loop (cdr words) (car words) (length (unique-chars (car words))))\n  \
    \         (loop (cdr words) max-word max-count))]\n      [else (loop (cdr words)\
    \ max-word max-count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate find_max))\n    (check-equal? (candidate (list \"name\"\
    \ \"of\" \"string\")) \"string\")\n    (check-equal? (candidate (list \"name\"\
    \ \"enam\" \"game\")) \"enam\")\n    (check-equal? (candidate (list \"aaaaaaa\"\
    \ \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate (list \"abc\" \"\
    cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\" \"this\" \"game\"\
    \ \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate (list \"we\"\
    \ \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate (list\
    \ \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal? (candidate\
    \ (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal? (candidate\
    \ (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"play\" \"\
    play\")) \"play\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt6yshshb.rkt:16:19: unique-chars: unbound identifier\n  in: unique-chars\n\
    \  location...:\n   /tmp/tmpt6yshshb.rkt:16:19\n"
  exit_code: 1
  status: OK
