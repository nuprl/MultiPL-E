name: HumanEval_82_prime_length
language: racket
prompt: "#lang racket\n\n;; Write a function that takes a string and returns True\
  \ if the string\n;; length is a prime number or False otherwise\n;; Examples\n;;\
  \ prime_length('Hello') == True\n;; prime_length('abcdcba') == True\n;; prime_length('kittens')\
  \ == True\n;; prime_length('orange') == False\n(define (prime_length string)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate prime_length))\n\
  \    (check-equal? (candidate \"Hello\") #t)\n    (check-equal? (candidate \"abcdcba\"\
  ) #t)\n    (check-equal? (candidate \"kittens\") #t)\n    (check-equal? (candidate\
  \ \"orange\") #f)\n    (check-equal? (candidate \"wow\") #t)\n    (check-equal?\
  \ (candidate \"world\") #t)\n    (check-equal? (candidate \"MadaM\") #t)\n    (check-equal?\
  \ (candidate \"Wow\") #t)\n    (check-equal? (candidate \"\") #f)\n    (check-equal?\
  \ (candidate \"HI\") #t)\n    (check-equal? (candidate \"go\") #t)\n    (check-equal?\
  \ (candidate \"gogo\") #f)\n    (check-equal? (candidate \"aaaaaaaaaaaaaaa\") #f)\n\
  \    (check-equal? (candidate \"Madam\") #t)\n    (check-equal? (candidate \"M\"\
  ) #f)\n    (check-equal? (candidate \"0\") #f)\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime (string-length string)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n     \
    \ (cond ((> (square test-divisor) n) n)\n            ((is-divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is_prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is_prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (helper i)\n      (cond\n        [(= i n) #t]\n  \
    \      [(= (modulo n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper\
    \ 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n  \
    \    (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (is-prime (string-length string)))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= n (find-divisor n 2)))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ n d)\n      (= (remainder n d) 0))\n    (define (next-divisor n d)\n      (if\
    \ (> (square d) n)\n          n\n          (if (is-divisible? n d)\n         \
    \     d\n              (next-divisor n (+ d 1)))))\n    (= n (next-divisor n 2)))\n\
    \  (is-prime? (string-length string)))\n", "  (define (is_prime n)\n    (define\
    \ (iter i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n\
    \        [else (iter (- i 1))]))\n    (iter (- n 1)))\n  (is_prime (string-length\
    \ string)))\n", "  (define (is_prime n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is_prime (string-length string)))\n", "  (define (prime? n)\n \
    \   (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime num)\n  \
    \  (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor num 2) num))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((> i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n       \
    \     (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (is-prime? (string-length string)))\n", "  (define (prime?\
    \ n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (is_prime n)\n    (define (is_divisible? a b)\n   \
    \   (= (remainder a b) 0))\n    (define (is_prime? n)\n      (cond ((= n 1) #f)\n\
    \            ((= n 2) #t)\n            ((is_divisible? n 2) #f)\n            (else\
    \ (is_prime? (- n 1)))))\n    (is_prime? n))\n  (is_prime (string-length string)))\n",
  "  (define (is_prime n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is_prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", " \
    \ (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (is-prime (string-length string)))\n", "  (define (is-prime number)\n\
    \    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor number 2) number))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n     \
    \ (cond ((> (square test-divisor) n) n)\n            ((is-divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (prime-helper\
    \ n div)\n      (cond\n        [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n\
    \        [else (prime-helper n (- div 1))]))\n    (prime-helper n (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((is-divisible? n\
    \ i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (is_prime n)\n\
    \    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is_prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divisors n)\n      (for/list ([i (in-range\
    \ 1 (add1 (quotient n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (empty?\
    \ (divisors n)))\n  (is-prime? (string-length string)))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? n d)\n      (= (remainder n d) 0))\n    (define\
    \ (divisors n)\n      (define (iter d)\n        (cond ((> d n) '())\n        \
    \      ((is-divisible? n d) (cons d (iter (+ d 1))))\n              (else (iter\
    \ (+ d 1)))))\n      (iter 2))\n    (null? (divisors n)))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (cond ((= n 1) #f)\n          ((=\
    \ n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((&gt; i (sqrt n)) #t)\n                   ((= (modulo\
    \ n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (is-prime (string-length\
    \ string)))\n</code>\n", "  (define (is-prime n)\n    (define (divides? a b)\n\
    \      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n   \
    \   (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (prime? n\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", "  (define (is_prime\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n\
    \      [else\n       (define (divisible? n i)\n         (cond\n           [(=\
    \ i 1) #f]\n           [(= (modulo n i) 0) #t]\n           [else (divisible? n\
    \ (- i 1))]))\n       (divisible? n (- n 1))]))\n  (is_prime (string-length string)))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (is-prime n)\n\
    \    (define (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder\
    \ n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n\
    \  (is-prime (string-length string)))\n", "  (define (prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (prime? (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (define (is-prime-iter n i)\n          \
    \   (cond ((= i n) #t)\n                   ((= (modulo n i) 0) #f)\n         \
    \          (else (is-prime-iter n (+ i 1)))))\n           (is-prime-iter n 3))))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is_prime n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (loop i)\n      (cond ((> i (/ n 2)) #t)\n            ((is_divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (is_prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (divides? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime? (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (- n 1)))\n  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter\
    \ i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n \
    \           (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (loop i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (loop (+ i\
    \ 1)))))\n    (loop 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (if (= i n)\n          #t\n          (if (=\
    \ (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n",
  "  (define (is_prime number)\n    (define (is_divisible? number divisor)\n     \
    \ (= (remainder number divisor) 0))\n    (define (next-divisor number)\n     \
    \ (if (= number 2)\n          2\n          (+ number 1)))\n    (define (divisors\
    \ number)\n      (if (= number 1)\n          '()\n          (if (is_divisible?\
    \ number (next-divisor number))\n              (cons (next-divisor number) (divisors\
    \ (/ number (next-divisor number))))\n              (divisors number))))\n   \
    \ (null? (divisors number)))\n  (is_prime (string-length string)))\n", "  (define\
    \ (is_prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even?\
    \ n) #f]\n      [else\n       (define (is_divisible? n divisor)\n         (cond\n\
    \           [(= divisor 1) #f]\n           [(= (modulo n divisor) 0) #t]\n   \
    \        [else (is_divisible? n (- divisor 1))]))\n       (is_divisible? n (-\
    \ n 1))]))\n  (is_prime? (string-length string)))\n", "  (define (is-prime n)\n\
    \    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n   \
    \ (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (if (= i n)\n          #t\n          (if (= (remainder n i)\
    \ 0)\n              #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is_prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (is_prime (string-length string)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (divisible? a b)\n      (=\
    \ (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (prime? (string-length string)))\n", " \
    \ (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", " \
    \ (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (quotient n 2)))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((= i\
    \ n) #t)\n            ((is-divisible? n i) #f)\n            (else (loop (+ i 1)))))\n\
    \    (loop 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime\
    \ n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ test-divisor n) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n \
    \   (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divides? a\
    \ b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (cond\n      [(= n 1)\
    \ #f]\n      [(= n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n   \
    \    (define (iter i)\n         (cond\n           [(= i n) #t]\n           [(=\
    \ (remainder n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n         \
    \  (let loop ((i 3))\n             (cond ((&gt; i (sqrt n)) #t)\n            \
    \       ((= (modulo n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n  \
    \    (cond ((< i n) (if (is-divisible? n i) #f (loop (+ i 1))))\n            (else\
    \ #t)))\n    (loop 2))\n  (is-prime? (string-length string)))\n", "  (define (prime?\
    \ n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (find-divisor n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n\
    \            ((divisible? n test-divisor) test-divisor)\n            (else (find-divisor\
    \ n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond ((> divisor\
    \ (/ n 2)) #t)\n            ((is-divisible? n divisor) #f)\n            (else\
    \ (iter (+ divisor 1)))))\n    (iter 2))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (smallest-divisor n)\n      (define (find-divisor n test-divisor)\n\
    \        (cond ((> (square test-divisor) n) n)\n              ((is-divisible?\
    \ n test-divisor) test-divisor)\n              (else (find-divisor n (+ test-divisor\
    \ 1)))))\n      (find-divisor n 2))\n    (= n (smallest-divisor n)))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is_prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is_prime (string-length string)))\n", "  (define (is-prime? n)\n   \
    \ (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n     \
    \ [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) #t]\n           [(= (remainder n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond ((= n 1) false)\n          ((= n 2) true)\n   \
    \       ((even? n) false)\n          (else\n           (let loop ((i 3))\n   \
    \          (cond ((= i n) true)\n                   ((= (remainder n i) 0) false)\n\
    \                   (else (loop (+ i 2))))))))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime number)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor number 2) number))\n\
    \  (is-prime (string-length string)))\n", "  (define (is-prime n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (quotient n 2)))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (is-prime n)\n   \
    \ (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n\
    \  (prime? (string-length string)))\n", "  (define (is-prime n)\n    (define (iter\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n     \
    \ (cond ((> (square test-divisor) n) n)\n            ((is-divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (loop i)\n      (cond ((= i\
    \ 1) #t)\n            ((is-divisible? n i) #f)\n            (else (loop (- i 1)))))\n\
    \    (loop (- n 1)))\n  (is-prime? (string-length string)))\n", "  (define (is_prime\
    \ n)\n    (define (is_divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (smallest-divisor n)\n      (define (find-divisor n test-divisor)\n        (cond\
    \ ((> (square test-divisor) n) n)\n              ((is_divisible? n test-divisor)\
    \ test-divisor)\n              (else (find-divisor n (+ test-divisor 1)))))\n\
    \      (find-divisor n 2))\n    (= n (smallest-divisor n)))\n  (is_prime (string-length\
    \ string)))\n", "  (define (prime? n)\n    (define (prime?-iter n i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (prime?-iter\
    \ n (- i 1))]))\n    (prime?-iter n (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i n) #t)\n      \
    \      ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n   \
    \ (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (is-prime? (string-length\
    \ string)))\n", "  (define (is-prime n)\n    (define (divides? a b)\n      (=\
    \ (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond\
    \ ((> (square test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (is-prime (string-length string)))\n", "  (define (is-prime? n)\n\
    \    (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is_prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is_prime (string-length string)))\n", "  (define\
    \ (is_prime n)\n    (define (iter i)\n      (if (= i n)\n          #t\n      \
    \    (if (= (remainder n i) 0)\n              #f\n              (iter (+ i 1)))))\n\
    \    (iter 2))\n  (is_prime (string-length string)))\n", "  (define (prime? n)\n\
    \    (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n",
  "  (define (prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n        \
    \    ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (quotient\
    \ n 2)))\n  (prime? (string-length string)))\n", "  (define (is-prime n)\n   \
    \ (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n  \
    \    (= (remainder a b) 0))\n    (define (smallest-divisor n)\n      (define (find-divisor\
    \ n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n           \
    \   ((is-divisible? n test-divisor) test-divisor)\n              (else (find-divisor\
    \ n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= n (smallest-divisor\
    \ n)))\n  (is-prime? (string-length string)))\n", "  (define (is-prime? n)\n \
    \   (define (divides? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divides?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((= (remainder\
    \ n 2) 0) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt;\
    \ i (sqrt n)) #t)\n                        ((= (remainder n i) 0) #f)\n      \
    \                  (else (loop (+ i 2))))))))\n  (prime? (string-length string)))\n\
    </code>\n", "  (define (prime? n)\n    (define (prime-helper n i)\n      (cond\n\
    \        [(= i 1) true]\n        [(= (modulo n i) 0) false]\n        [else (prime-helper\
    \ n (- i 1))]))\n    (prime-helper n (- n 1)))\n  (prime? (string-length string)))\n",
  "  (define (is_prime n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (is_prime (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisors n)\n\
    \      (for/list ([i (in-range 1 n)])\n        (if (zero? (modulo n i)) i)))\n\
    \    (equal? (divisors n) (list n)))\n  (prime? (string-length string)))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter\
    \ (quotient n 2)))\n  (is-prime? (string-length string)))\n", "  (define (is-prime\
    \ n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (is-prime (string-length string)))\n", " \
    \ (define (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b)\
    \ 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else (let loop ((i 3))\n                  (cond ((&gt; i\
    \ (sqrt n)) #t)\n                        ((= (modulo n i) 0) #f)\n           \
    \             (else (loop (+ i 2))))))))\n  (prime? (string-length string)))\n\
    </code>\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2)\
    \ #t)\n          ((even? n) #f)\n          (else (let loop ((i 3))\n         \
    \         (cond ((&gt; i (sqrt n)) #t)\n                        ((= (modulo n\
    \ i) 0) #f)\n                        (else (loop (+ i 2))))))))\n  (prime? (string-length\
    \ string)))\n</code>\n", "  (define (is-prime n)\n    (define (divides? a b)\n\
    \      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n   \
    \   (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is-prime? n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n  \
    \  (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime?\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is-prime (string-length string)))\n", "  (define\
    \ (is_prime n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n \
    \   (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is_prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (- n 1)))\n  (is-prime? (string-length string)))\n",
  "  (define (prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n     \
    \ [(= n 3) #t]\n      [(= n 5) #t]\n      [(= n 7) #t]\n      [(= n 11) #t]\n\
    \      [(= n 13) #t]\n      [(= n 17) #t]\n      [(= n 19) #t]\n      [(= n 23)\
    \ #t]\n      [(= n 29) #t]\n      [(= n 31) #t]\n      [(= n 37) #t]\n      [(=\
    \ n 41) #t]\n      [(= n 43) #t]\n      [(= n 47) #t]\n      [(= n 53) #t]\n \
    \     [(= n 59) #t]\n      [(= n 61) #t]\n      [(= n 67) #t]\n      [(= n 71)\
    \ #t]\n      [(= n 73) #t]\n      [(= n 79) #t]\n      [(= n 83) #t]\n      [(=\
    \ n 89) #t]\n      [(= n 97) #t]\n      [else #f]))\n  (prime? (string-length\
    \ string)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (if (= n 1)\n        #f\n        (if (= n 2)\n            #t\n\
    \            (let loop ([i 2])\n              (if (= i n)\n                  #t\n\
    \                  (if (= (remainder n i) 0)\n                      #f\n     \
    \                 (loop (+ i 1))))))))\n  (prime? (string-length string)))\n",
  "  (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n         \
    \  (define (is-divisible-by? n divisor)\n             (cond ((= divisor 1) #f)\n\
    \                   ((= (modulo n divisor) 0) #t)\n                   (else (is-divisible-by?\
    \ n (- divisor 1)))))\n           (is-divisible-by? n (- n 1)))))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (iter i)\n \
    \     (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (prime? (string-length string)))\n", " \
    \ (define (is-prime n)\n    (define (divides? a b)\n      (= (remainder b a) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? test-divisor n) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divides? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divides? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (is-prime? (string-length string)))\n", "  (define\
    \ (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n   \
    \ (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (prime?\
    \ (string-length string)))\n", "  (define (is_prime n)\n    (define (divides?\
    \ a b)\n      (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (is_prime (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n \
    \   (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (prime? n)\n    (define (divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (prime? (string-length string)))\n", "  (define\
    \ (is-prime n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n \
    \   (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (is-prime\
    \ (string-length string)))\n", "  (define (is-prime n)\n    (define (iter i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (- i 1)))))\n    (iter (/ n 2)))\n  (is-prime (string-length string)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (is-prime? (string-length string)))\n", "  (define (prime? n)\n    (define\
    \ (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n   \
    \     (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (prime? (string-length\
    \ string)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
