name: HumanEval_121_solution
language: racket
results:
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8wv3ychg.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp8wv3ychg.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkbh37ng.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplkbh37ng.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmplkbh37ng.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplkbh37ng.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkbh37ng.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfl6g8qxt.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprt9ka62t.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe_tzdjs6.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpe_tzdjs6.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzp8x0pcc.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwn3tim_n.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpwn3tim_n.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (\u03BB\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmperejwndd.rkt:9:43: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmperejwndd.rkt:9:43\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (sum (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjdxr2e5e.rkt:9:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpjdxr2e5e.rkt:9:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzgr08gfa.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp762p6olf.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbs9jke4e.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpbs9jke4e.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7czhj480.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp86qd6kmw.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp86qd6kmw.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp86qd6kmw.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp86qd6kmw.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp86qd6kmw.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp86qd6kmw.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (define (helper lst acc)\n    (if (null?\
    \ lst)\n        acc\n        (if (and (even? (car lst)) (odd? (car (cdr lst))))\n\
    \            (helper (cdr lst) (+ acc (car (cdr lst))))\n            (helper (cdr\
    \ lst) acc))))\n  (helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:22:4\n\
    actual:     7\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:23:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:24:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpo1m86yu4.rkt:25:4\nactual:     0\nexpected:   5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo1m86yu4.rkt:28:4\n\
    actual:     9\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwo92q7c.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckc3ytfx.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpip2g1mm_.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6pemlh54.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp6pemlh54.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoos4teb6.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoos4teb6.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpoos4teb6.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoos4teb6.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoos4teb6.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppx0mljcx.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmppx0mljcx.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps9r_ka09.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmps9r_ka09.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31t2ht6w.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range 0 (sub1 (length lst)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp_6gwx5g.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:15:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr0ol2dc9.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzmgcflgu.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpzmgcflgu.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvb2tpze4.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91af551x.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zr235t8.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2zr235t8.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp2zr235t8.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2zr235t8.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zr235t8.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2zr235t8.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwlgzia22.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpwlgzia22.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ (length lst))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_nbmwun.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb_nbmwun.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpb_nbmwun.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb_nbmwun.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb_nbmwun.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcvbukra.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkcrfwqgu.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkcrfwqgu.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpkcrfwqgu.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkcrfwqgu.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkcrfwqgu.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphn4bu2fr.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmphn4bu2fr.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list-ref lst x) #f)) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgi4t27fx.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgi4t27fx.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpgi4t27fx.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgi4t27fx.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgi4t27fx.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgi4t27fx.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphazw9k6c.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmphazw9k6c.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgs64s17y.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpgs64s17y.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond [(empty? lst) 0]\n        [(even?\
    \ (remainder (length lst) 2))\n         (+ (car lst) (solution (cdr lst)))]\n\
    \        [else (solution (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprie7rj6w.rkt:20:4\n\
    actual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprie7rj6w.rkt:21:4\nactual:     54\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprie7rj6w.rkt:23:4\nactual:     4\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprie7rj6w.rkt:24:4\nactual:     53\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprie7rj6w.rkt:25:4\n\
    actual:     5\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsktnzw3z.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsktnzw3z.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpsktnzw3z.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsktnzw3z.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsktnzw3z.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsktnzw3z.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6v20ydzf.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp6v20ydzf.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf8i6vunl.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxt8s9f4q.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpxt8s9f4q.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (for/sum ([i (in-list lst)])\n    (if\
    \ (and (odd? i) (even? (list-ref lst i)))\n        i\n        0)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:19:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(5 8 7 1)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:20:4\n\
    actual:     0\nexpected:   9\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:21:4\n\nlist-ref: index\
    \ too large for list\n  index: 13\n  in: '(30 13 24 321)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:22:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(5 9)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:24:4\n\
    \nlist-ref: index too large for list\n  index: 13\n  in: '(30 13 23 32)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgnnozqp5.rkt:25:4\n\
    \nlist-ref: index too large for list\n  index: 13\n  in: '(3 13 2 9)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8a39q9wv.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp8a39q9wv.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpac42nwi6.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpac42nwi6.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps46okli0.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps46okli0.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmps46okli0.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps46okli0.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps46okli0.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps46okli0.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (foldl + 0 (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiniydwz4.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9qo6i69w.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp9qo6i69w.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpttr4zlpj.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpttr4zlpj.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7q1k199x.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp7q1k199x.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyqvg31lu.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2q38cgc4.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp2q38cgc4.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqu0_aa0q.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_7m7tvoi.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_7m7tvoi.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp_7m7tvoi.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_7m7tvoi.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_7m7tvoi.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzd31bn6i.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpzd31bn6i.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpch7rjyn1.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmlc8k_ti.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvsicd3ex.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpvsicd3ex.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (solution (rest lst)) (first lst))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk61c1jed.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk61c1jed.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk61c1jed.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk61c1jed.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk61c1jed.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk61c1jed.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwj695uec.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy2vm7xhl.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmkbmdny.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6_bepq83.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp6_bepq83.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmfeoir5c.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpmfeoir5c.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpurmiizx8.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ (length lst)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgeuffft.rkt:17:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplgeuffft.rkt:18:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmplgeuffft.rkt:20:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplgeuffft.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplgeuffft.rkt:23:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0rssolz.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps0rssolz.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmps0rssolz.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps0rssolz.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps0rssolz.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps0rssolz.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplpwclqs9.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmplpwclqs9.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq303d8di.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq303d8di.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq303d8di.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq303d8di.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq303d8di.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (let loop ([lst lst] [acc 0] [i 0])\n\
    \    (cond [(empty? lst) acc]\n          [(and (odd? (first lst)) (even? i)) (loop\
    \ (rest lst) (+ acc (first lst)) (+ i 1))]\n          [else (loop (rest lst) acc\
    \ (+ i 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n   \
    \ (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9tllwz4j.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp9tllwz4j.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9yg5lnms.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp9yg5lnms.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (i) (if (even? i) (list-ref lst i) #f)) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgk7ebjhh.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpgk7ebjhh.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9s78shll.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6uajl9v1.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpudb7zbdw.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpudb7zbdw.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpudb7zbdw.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpudb7zbdw.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpudb7zbdw.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp07pdc7h7.rkt:16:4\n\
    \nrange: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  given: 0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp07pdc7h7.rkt:17:4\n\nrange: arity\
    \ mismatch;\n the expected number of arguments does not match the given number\n\
    \  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp07pdc7h7.rkt:18:4\n\nrange: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp07pdc7h7.rkt:19:4\n\
    \nrange: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  given: 0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp07pdc7h7.rkt:20:4\n\nrange: arity\
    \ mismatch;\n the expected number of arguments does not match the given number\n\
    \  given: 0\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp07pdc7h7.rkt:21:4\n\nrange: arity mismatch;\n the expected\
    \ number of arguments does not match the given number\n  given: 0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp07pdc7h7.rkt:22:4\n\
    \nrange: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp62bk7lr1.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp62bk7lr1.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range 0 (sub1 (length lst)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgml4qcf.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprj22aixx.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz6zde_9o.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpz6zde_9o.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpduy9_rv5.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpduy9_rv5.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpduy9_rv5.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpduy9_rv5.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpduy9_rv5.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpduy9_rv5.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprubve80t.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmprubve80t.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpshdfrdeq.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpshdfrdeq.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprt24usyx.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmprt24usyx.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ns2gvl8.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfzae_q2r.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpfzae_q2r.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list-ref lst x) #f)) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmxnbp3c3.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps6hekbfi.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmps6hekbfi.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list-ref lst x) #f)) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1qc32kl6.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp1qc32kl6.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc8pfsse.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgeq2qkw6.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpgeq2qkw6.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq8kqnh4h.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq8kqnh4h.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq8kqnh4h.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq8kqnh4h.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq8kqnh4h.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89qjnc_m.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8cnpvsh7.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8cnpvsh7.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp8cnpvsh7.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8cnpvsh7.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8cnpvsh7.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8cnpvsh7.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp14xro78q.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp14xro78q.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvr6r9lm1.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvr6r9lm1.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpvr6r9lm1.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvr6r9lm1.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvr6r9lm1.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvr6r9lm1.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7i7hrns1.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvhfkiy3o.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpvhfkiy3o.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgyjhqyku.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbwqzqt3m.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfvlzevtr.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpfvlzevtr.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3torfql1.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp3torfql1.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp95v4xtk.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiba0u1lb.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpafnk0dpu.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpafnk0dpu.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk59un8xs.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpk59un8xs.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqe9r0ll3.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpqe9r0ll3.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpszyvp0b6.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpszyvp0b6.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpszyvp0b6.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpszyvp0b6.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpszyvp0b6.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpszyvp0b6.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpckt1_tnn.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpckt1_tnn.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpckt1_tnn.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpckt1_tnn.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpckt1_tnn.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpckt1_tnn.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp11d90zki.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp11d90zki.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ (length lst)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp8m7l8b.rkt:17:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnp8m7l8b.rkt:18:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpnp8m7l8b.rkt:20:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnp8m7l8b.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnp8m7l8b.rkt:23:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ (length lst)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfd2mtgc.rkt:17:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbfd2mtgc.rkt:18:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpbfd2mtgc.rkt:20:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbfd2mtgc.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbfd2mtgc.rkt:23:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph006k9qr.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmph006k9qr.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmi4reqdz.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpmi4reqdz.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range 0 (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpt6fruj.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4rxge46p.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp4rxge46p.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0d6x4004.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp0d6x4004.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5s80rpa7.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp5s80rpa7.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5kqvoh1d.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_y55nl1.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx_y55nl1.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpx_y55nl1.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx_y55nl1.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx_y55nl1.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx_y55nl1.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq_3r1yjp.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpq_3r1yjp.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1f8bnbfg.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp1f8bnbfg.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoyydwl4u.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpoyydwl4u.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnwywn755.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpnwywn755.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(even?\
    \ (length lst))\n     (+ (car lst) (solution (cdr lst)))]\n    [else (solution\
    \ (cdr lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n   \
    \ (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgttq7gxz.rkt:21:4\n\
    actual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgttq7gxz.rkt:22:4\nactual:     54\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpgttq7gxz.rkt:24:4\nactual:     4\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgttq7gxz.rkt:25:4\nactual:     53\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgttq7gxz.rkt:26:4\n\
    actual:     5\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk66i2a8x.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpk66i2a8x.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpevvunfvz.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpevvunfvz.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0oij8l3n.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp0oij8l3n.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8l3b65b.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjqqbs982.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpclkp8vu6.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpclkp8vu6.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter even? (map (lambda (x)\
    \ (if (odd? x) x 0)) (range (length lst)))))\n  )\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal? (candidate\
    \ (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n   \
    \ (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate\
    \ (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal?\
    \ (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13\
    \ 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnomigcvu.rkt:17:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnomigcvu.rkt:18:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpnomigcvu.rkt:20:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnomigcvu.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnomigcvu.rkt:23:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (sum (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpipm3hdgn.rkt:9:3: sum: unbound identifier\n  in: sum\n  location...:\n\
    \   /tmp/tmpipm3hdgn.rkt:9:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpslz8zh89.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_c_74fm7.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ (length lst)))))\n)\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2yvsntkp.rkt:17:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2yvsntkp.rkt:18:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp2yvsntkp.rkt:20:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2yvsntkp.rkt:22:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2yvsntkp.rkt:23:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg43p6rh7.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpteipv4gc.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpteipv4gc.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2c494nx4.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp2c494nx4.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpss5ap8rc.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpss5ap8rc.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoeuyws85.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpoeuyws85.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptvfxulhw.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmptvfxulhw.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0674u43h.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter even? (range\
    \ 1 (add1 (length lst)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkej2dm1w.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkej2dm1w.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpkej2dm1w.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkej2dm1w.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkej2dm1w.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc4jlp3t1.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpc4jlp3t1.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfiofnno.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdthf0p2f.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpdthf0p2f.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaemc0ud_.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list-ref lst x) #f)) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphbx8y5so.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmphbx8y5so.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (\u03BB\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphelgjh5m.rkt:9:43: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmphelgjh5m.rkt:9:43\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl8wa1h5g.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpl8wa1h5g.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzab0_31t.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxehi6_p.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpygtpeaaj.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5j0pws5l.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp5j0pws5l.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0x323wc.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_4s_lxyy.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp_4s_lxyy.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpliwu3bl8.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpliwu3bl8.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter even? (filter odd? (map\
    \ (lambda (x) (if (even? x) (list-ref lst x) 0)) (range (length lst)))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpef04x6ur.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpef04x6ur.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpef04x6ur.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpef04x6ur.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpef04x6ur.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywaxw_jb.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpywaxw_jb.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpywaxw_jb.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpywaxw_jb.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywaxw_jb.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpywaxw_jb.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpej196y6e.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpej196y6e.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lqlelvi.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4pffqyco.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp4pffqyco.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfob0ks4l.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpfob0ks4l.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgkov9dw5.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpgkov9dw5.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaatdf28l.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpaatdf28l.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (solution (cdr (cdr lst))) ]\n    [else (+ (car lst) (solution (cdr\
    \ (cdr lst))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:19:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:20:4\n\ncdr: contract\
    \ violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:21:4\nactual:\
    \     54\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:22:4\nactual:     0\n\
    expected:   5\n--------------------\n--------------------\nERROR\nname:      \
    \ check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:23:4\n\ncdr: contract violation\n\
    \  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:24:4\nactual:\
    \     30\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu3dw5glo.rkt:25:4\nactual:     2\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpix636769.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpix636769.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter even? (map (lambda (x)\
    \ (if (odd? x) x 0)) (filter even? (range 1 (add1 (length lst))))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk2eq1k6b.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk2eq1k6b.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk2eq1k6b.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk2eq1k6b.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk2eq1k6b.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbqcdhd6q.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_tf_7l4x.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (first lst) (solution (rest lst)))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphotl_08b.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphotl_08b.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmphotl_08b.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphotl_08b.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphotl_08b.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphotl_08b.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ob1etsx.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3iff3ua7.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp3iff3ua7.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk4xst8zm.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpk4xst8zm.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk6yn0olh.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpk6yn0olh.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (first lst)) (+ (solution (rest lst)) (first lst))]\n    [else (solution (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal?\
    \ (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24\
    \ 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate\
    \ (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n   \
    \ (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfub9ily.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdfub9ily.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpdfub9ily.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdfub9ily.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdfub9ily.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdfub9ily.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) (list))) (range (length lst))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62_5o4h0.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpry1ppm4j.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4x31kjh.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp43wqz3jy.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp43wqz3jy.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx5q00wf7.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpx5q00wf7.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoh81vb7g.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpoh81vb7g.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbs20dj1_.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)) '())) (range (length lst))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:20:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:21:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(30)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m809hin.rkt:22:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp868r996c.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp868r996c.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x y) y) (range (length lst)) lst))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate solution))\n    (check-equal? (candidate (list 5 8 7\
    \ 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal?\
    \ (candidate (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9))\
    \ 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate\
    \ (list 30 13 23 32)) 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc92p_i0.rkt:16:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzc92p_i0.rkt:17:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpzc92p_i0.rkt:18:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzc92p_i0.rkt:19:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzc92p_i0.rkt:21:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzc92p_i0.rkt:22:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd?\
    \ (car lst)) (+ (car lst) (solution (cdr lst)))]\n    [else (solution (cdr lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n\
    \    (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwa_26qli.rkt:19:4\n\
    actual:     13\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwa_26qli.rkt:20:4\nactual:     15\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpwa_26qli.rkt:21:4\nactual:     334\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwa_26qli.rkt:22:4\nactual:     14\nexpected:   5\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwa_26qli.rkt:24:4\n\
    actual:     36\nexpected:   23\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwa_26qli.rkt:25:4\nactual:     25\n\
    expected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1jtenxkc.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmp1jtenxkc.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (cond [(empty? lst) 0]\n        [(even?\
    \ (length lst)) (+ (list-ref lst 0) (solution (rest lst)))]\n        [else (solution\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate solution))\n    (check-equal? (candidate (list 5 8 7 1)) 12)\n\
    \    (check-equal? (candidate (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate\
    \ (list 30 13 24 321)) 0)\n    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal?\
    \ (candidate (list 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32))\
    \ 23)\n    (check-equal? (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl8fdsjx.rkt:19:4\n\
    actual:     6\nexpected:   9\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprl8fdsjx.rkt:20:4\nactual:     54\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmprl8fdsjx.rkt:22:4\nactual:     4\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprl8fdsjx.rkt:23:4\nactual:     53\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprl8fdsjx.rkt:24:4\n\
    actual:     5\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpflwggxts.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpflwggxts.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter even? (map (lambda (x)\
    \ (if (odd? x) x 0)) (filter even? (range (length lst)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate solution))\n    (check-equal?\
    \ (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate (list 3 3 3 3 3))\
    \ 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n    (check-equal?\
    \ (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list 2 4 8)) 0)\n \
    \   (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal? (candidate\
    \ (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpongmg4m7.rkt:16:4\n\
    actual:     0\nexpected:   12\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpongmg4m7.rkt:17:4\nactual:     0\n\
    expected:   9\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpongmg4m7.rkt:19:4\nactual:     0\nexpected:\
    \   5\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpongmg4m7.rkt:21:4\nactual:     0\nexpected:   23\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpongmg4m7.rkt:22:4\n\
    actual:     0\nexpected:   3\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpky7482rj.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpky7482rj.rkt:9:48\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers, return the sum\
    \ of all of the odd elements that are in even positions.\n;; Examples\n;; solution([5,\
    \ 8, 7, 1]) ==> 12\n;; solution([3, 3, 3, 3, 3]) ==> 9\n;; solution([30, 13, 24,\
    \ 321]) ==>0\n(define (solution lst)\n  (apply + (filter odd? (filter-map (lambda\
    \ (x) (if (even? x) (list (list-ref lst x)))) (range (length lst))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate solution))\n \
    \   (check-equal? (candidate (list 5 8 7 1)) 12)\n    (check-equal? (candidate\
    \ (list 3 3 3 3 3)) 9)\n    (check-equal? (candidate (list 30 13 24 321)) 0)\n\
    \    (check-equal? (candidate (list 5 9)) 5)\n    (check-equal? (candidate (list\
    \ 2 4 8)) 0)\n    (check-equal? (candidate (list 30 13 23 32)) 23)\n    (check-equal?\
    \ (candidate (list 3 13 2 9)) 3)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsxw_hmhh.rkt:9:48: if: missing an \"else\" expression\n  in: (if\
    \ (even? x) (list (list-ref lst x)))\n  location...:\n   /tmp/tmpsxw_hmhh.rkt:9:48\n"
  exit_code: 1
  status: OK
