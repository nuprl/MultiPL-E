name: HumanEval_118_get_closest_vowel
language: racket
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; get_closest_vowel(\"yogurt\") ==> \"u\"\n;; get_closest_vowel(\"FULL\") ==> \"\
  U\"\n;; get_closest_vowel(\"quick\") ==> \"\"\n;; get_closest_vowel(\"ab\") ==>\
  \ \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (let ([word (string-&gt;list word)])\n    (let loop ([word word]\
    \ [vowels '()])\n      (cond [(null? word) (list-&gt;string vowels)]\n       \
    \     [(member (car word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n             (loop\
    \ (cdr word) (cons (car word) vowels))]\n            [else (loop (cdr word) vowels)]))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [(is-vowel? (first word)) (find-closest-consonant\
    \ (rest word))]))\n  (define (find-closest-vowel-between-consonants word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word)) (find-closest-vowel-between-consonants\
    \ (find-closest-vowel word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty?\
    \ (rest word)) \"\"]\n    [(and (consonant? (first word)) (vowel? (second word)))\
    \ (second word)]\n    [(and (consonant? (first word)) (vowel? (second word)) (consonant?\
    \ (third word))) (second word)]\n    [else (get_closest_vowel (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-vowel-consonant? c1 c2 c3)\n    (and (is-consonant? c1)\
    \ (is-vowel? c2) (is-consonant? c3)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (reverse word)] [i 0])\n      (if (or (null? word)\
    \ (= i 2))\n          \"\"\n          (if (is-consonant-vowel-consonant? (list-ref\
    \ word 0) (list-ref word 1) (list-ref word 2))\n              (list-ref word 1)\n\
    \              (loop (cdr word) (+ i 1))))))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (let ([vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\"\
    \ \"O\" \"U\")]\n        [consonants '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"\
    j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"\
    y\" \"z\" \"B\" \"C\" \"D\" \"F\" \"G\" \"H\" \"J\" \"K\" \"L\" \"M\" \"N\" \"\
    P\" \"Q\" \"R\" \"S\" \"T\" \"V\" \"W\" \"X\" \"Y\" \"Z\")])\n    (cond\n    \
    \  [(string-empty? word) \"\"]\n      [(string-contains? word (string-ref word\
    \ 0)) (string-ref word 0)]\n      [(string-contains? word (string-ref word 1))\
    \ (string-ref word 1)]\n      [(string-contains? word (string-ref word 2)) (string-ref\
    \ word 2)]\n      [(string-contains? word (string-ref word 3)) (string-ref word\
    \ 3)]\n      [(string-contains? word (string-ref word 4)) (string-ref word 4)]\n\
    \      [(string-contains? word (string-ref word 5)) (string-ref word 5)]\n   \
    \   [(string-contains? word (string-ref word 6)) (string-ref word 6)]\n      [(string-contains?\
    \ word (string-ref word 7)) (string-ref word 7)]\n      [(string-contains? word\
    \ (string-ref word 8)) (string-ref word 8)]\n      [(string-contains? word (string-ref\
    \ word 9)) (string-ref word 9)]\n      [(string-contains? word (string-ref word\
    \ 10)) (string-ref word 10)]\n      [(string-contains? word (string-ref word 11))\
    \ (string-ref word 11)]\n      [(string-contains? word (string-ref word 12)) (string-ref\
    \ word 12)]\n      [(string-contains? word (string-ref word 13)) (string-ref word\
    \ 13)]\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u\
    \ #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-vowel? (first word))\n         \
    \   (is-consonant? (second word))\n            (is-consonant? (third word)))\n\
    \       (first word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-vowel? (last word)) empty]\n    [else (find-vowel-between-consonants word)]))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (get-closest-vowel-helper word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-vowel? (first word)) (is-vowel? (second\
    \ word)))\n            (get-closest-vowel-helper (rest word))\n            (if\
    \ (is-vowel? (first word))\n                (first word)\n                (get-closest-vowel-helper\
    \ (rest word))))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [vowel #\\])\n      (cond [(null?\
    \ word) \"\"]\n            [(member (car word) vowels) (loop (cdr word) (car word))]\n\
    \            [(member (car word) consonants) (if (null? vowel) (loop (cdr word)\
    \ vowel) vowel)]\n            [else (loop (cdr word) vowel)]))))\n</code>\n",
  "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n   \
    \     (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(or (char-vowel? (last word)) (char-vowel? (first\
    \ word))) \"\"]\n    [(and (char-vowel? (second-last word)) (char-consonant? (last\
    \ word))) (second-last word)]\n    [else (get_closest_vowel (but-last word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (get-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowels '()])\n      (cond [(empty? word) (list-&gt;string\
    \ (reverse vowels))]\n            [(is-vowel? (first word)) (loop (rest word)\
    \ (cons (first word) vowels))]\n            [else (loop (rest word) vowels)])))\n\
    \  (get-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (define\
    \ (find-closest-vowel-iter word i)\n      (if (or (= i 0) (= i (- (string-length\
    \ word) 1)))\n          \"\"\n          (let ((c (string-ref word i)))\n     \
    \       (if (and (is-vowel? c)\n                     (is-consonant? (string-ref\
    \ word (- i 1)))\n                     (is-consonant? (string-ref word (+ i 1))))\n\
    \                (string c)\n                (find-closest-vowel-iter word (+\
    \ i 1))))))\n    (find-closest-vowel-iter word 0))\n  (find-closest-vowel word))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\\
    H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n\
    \    (let loop ([i (sub1 (string-length word))]\n               [prev-char #\\\
    \ ]\n               [prev-prev-char #\\ ])\n      (cond\n        [(= i -1) \"\"\
    ]\n        [(member (string-ref word i) vowels)\n         (if (and (member prev-char\
    \ consonants) (member prev-prev-char consonants))\n             (string (string-ref\
    \ word i))\n             (loop (sub1 i) (string-ref word i) prev-char))]\n   \
    \     [else (loop (sub1 i) (string-ref word i) prev-char)]))))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond [(empty? word) \"\"]\n          [(empty? (rest word)) \"\"\
    ]\n          [(member (first word) vowels) \"\"]\n          [(member (second word)\
    \ vowels) (list->string (second word))]\n          [else (get_closest_vowel (rest\
    \ word))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond [(empty? word) #f]\n          [(is-vowel?\
    \ (first word)) (first word)]\n          [else (find-vowel (rest word))]))\n \
    \ (define (find-consonant word)\n    (cond [(empty? word) #f]\n          [(is-consonant?\
    \ (first word)) (first word)]\n          [else (find-consonant (rest word))]))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond [(empty? word) #f]\n\
    \          [(and (is-vowel? (first word))\n                (is-consonant? (second\
    \ word))\n                (is-consonant? (third word)))\n           (first word)]\n\
    \          [else (find-vowel-between-consonants (rest word))]))\n  (cond [(find-vowel-between-consonants\
    \ word)\n         (find-vowel-between-consonants word)]\n        [(and (find-vowel\
    \ word) (find-consonant word))\n         (find-vowel word)]\n        [else #f]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (empty? word)\n        \"\"\n        (if\
    \ (and (is-consonant? (first word))\n                 (is-vowel? (second word)))\n\
    \            (string (second word))\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty?\
    \ (rest word)) \"\"]\n    [(and (consonant? (first word)) (vowel? (second word)))\
    \ (second word)]\n    [(and (consonant? (first word)) (consonant? (second word)))\
    \ (get_closest_vowel (rest word))]\n    [else (get_closest_vowel (rest word))]))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(consonant?\
    \ (first word)) (get_closest_vowel (rest word))]\n    [(vowel? (first word)) (get_closest_vowel\
    \ (rest word))]\n    [(consonant? (second word)) (first word)]\n    [(vowel? (second\
    \ word)) (get_closest_vowel (rest word))]))\n", "  (define (is-vowel? ch)\n  \
    \  (or (equal? ch #\\a)\n        (equal? ch #\\e)\n        (equal? ch #\\i)\n\
    \        (equal? ch #\\o)\n        (equal? ch #\\u)))\n  (define (is-consonant?\
    \ ch)\n    (not (is-vowel? ch)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (if (is-vowel? (string-ref word 0))\n        (string-ref word 0)\n      \
    \  (if (is-consonant? (string-ref word 0))\n            (get-closest-vowel-from-right\
    \ (substring word 1))\n            (string-ref word 0))))\n  (define (get-closest-vowel-from-left\
    \ word)\n    (if (is-vowel? (string-ref word (- (string-length word) 1)))\n  \
    \      (string-ref word (- (string-length word) 1))\n        (if (is-consonant?\
    \ (string-ref word (- (string-length word) 1)))\n            (get-closest-vowel-from-left\
    \ (substring word 0 (- (string-length word) 1)))\n            (string-ref word\
    \ (- (string-length word) 1)))))\n  (if (or (is-vowel? (string-ref word 0))\n\
    \          (is-vowel? (string-ref word (- (string-length word) 1))))\n      \"\
    \"\n      (if (or (is-consonant? (string-ref word 0))\n              (is-consonant?\
    \ (string-ref word (- (string-length word) 1))))\n          (string (get-closest-vowel-from-right\
    \ word))\n          (string (get-closest-vowel-from-left word)))))\n", "  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n       \
    \ [word-length (string-length word)]\n        [index (- word-length 1)])\n   \
    \ (if (or (member (string-ref word 0) vowels)\n            (member (string-ref\
    \ word (- word-length 1)) vowels))\n        \"\"\n        (let loop ([index (-\
    \ word-length 1)])\n          (if (and (member (string-ref word index) vowels)\n\
    \                   (not (member (string-ref word (- index 1)) vowels))\n    \
    \               (not (member (string-ref word (+ index 1)) vowels)))\n       \
    \       (string (string-ref word index))\n              (if (= index 0)\n    \
    \              \"\"\n                  (loop (- index 1))))))))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(and (member (first word) vowels) (member (second word) vowels))\n\
    \       (get_closest_vowel (rest word))]\n      [(member (first word) vowels)\n\
    \       (string (first word))]\n      [else (get_closest_vowel (rest word))])))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [word (string->list word)])\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(or (member (first word) vowels)\n           (member (last word) vowels))\
    \ \"\"]\n      [(and (member (first word) vowels)\n            (member (last word)\
    \ vowels)) (list->string word)]\n      [(and (member (first word) vowels)\n  \
    \          (not (member (last word) vowels))) (list->string (rest word))]\n  \
    \    [(and (not (member (first word) vowels))\n            (member (last word)\
    \ vowels)) (list->string (butlast word))]\n      [(and (not (member (first word)\
    \ vowels))\n            (not (member (last word) vowels))) (list->string (rest\
    \ (butlast word)))])))\n", "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")]\n\
    \        [word (string-&gt;list word)])\n    (if (or (empty? word) (empty? (cdr\
    \ word)))\n        \"\"\n        (if (member (car word) vowels)\n            (if\
    \ (member (cadr word) vowels)\n                (get_closest_vowel (cdr word))\n\
    \                (string (car word)))\n            (get_closest_vowel (cdr word))))))\n\
    </code>\nI'm not sure if this is the best way to solve this problem, but I think\
    \ it's a good start.\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A\
    \ #\\E #\\I #\\O #\\U)]\n        [word-len (string-length word)]\n        [i (sub1\
    \ word-len)])\n    (cond\n      [(< i 1) \"\"]\n      [(member (string-ref word\
    \ i) vowels) (string (string-ref word i))]\n      [else (get_closest_vowel (substring\
    \ word 0 i))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i\
    \ #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-vowel? (car word)) (car word))\n          (else\
    \ (get-closest-vowel-helper (cdr word)))))\n  (define (get-closest-vowel-helper2\
    \ word)\n    (cond ((null? word) \"\")\n          ((is-consonant? (car word))\
    \ (get-closest-vowel-helper (cdr word)))\n          (else (get-closest-vowel-helper2\
    \ (cdr word)))))\n  (get-closest-vowel-helper2 (reverse word)))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [vowels (list #\\a #\\e #\\i\
    \ #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n               [consonants (list #\\b\
    \ #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\\
    P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)]\n               [result #f])\n\
    \      (cond [(empty? word) (if result (list-&gt;string result) \"\")]\n     \
    \       [(member (first word) vowels) (loop (rest word) vowels consonants (cons\
    \ (first word) result))]\n            [(member (first word) consonants) (loop\
    \ (rest word) vowels consonants result)]\n            [else (loop (rest word)\
    \ vowels consonants result)]))))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-vowel? (first word)) (first word)]\n          [else\
    \ (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-consonant? (first word)) (first word)]\n      \
    \    [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word)]\n          [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) (third word)]\n\
    \                      [(is-consonant? (third word))\n                       (find-vowel-between-consonants\
    \ (rest (rest word)))]\n                      [else empty])]\n               [else\
    \ empty])]\n        [else empty]))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\n\
    \       (if (is-consonant? (second word))\n           (first word)\n         \
    \  (find-vowel-between-consonants (rest word)))]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (define (find-vowel-between-consonants-from-right word)\n\
    \    (find-vowel-between-consonants (reverse word)))\n  (find-vowel-between-consonants-from-right\
    \ word))\n", "  (let* ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n         [word-list\
    \ (string->list word)]\n         [word-length (length word-list)]\n         [word-reversed\
    \ (reverse word-list)]\n         [consonants (filter (lambda (x) (not (member\
    \ x vowels))) word-reversed)])\n    (if (or (empty? consonants) (= (length consonants)\
    \ 1))\n        \"\"\n        (let* ([consonants-length (length consonants)]\n\
    \               [consonants-reversed (reverse consonants)]\n               [consonants-index\
    \ (index-of (first consonants-reversed) word-reversed)]\n               [vowels-index\
    \ (index-of (first (filter (lambda (x) (member x word-reversed)) vowels)) word-reversed)]\n\
    \               [vowels-index-from-consonants (sub1 (- vowels-index consonants-index))])\n\
    \          (if (or (= vowels-index-from-consonants 0) (= vowels-index-from-consonants\
    \ 1))\n              (string (first (filter (lambda (x) (member x word-reversed))\
    \ vowels)))\n              (string (list-ref word-reversed (+ vowels-index-from-consonants\
    \ 1))))))))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\\
    D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z)])\n    (if (or (empty? word) (empty? (cdr word))) \"\"\n        (if\
    \ (member (car word) vowels) (get_closest_vowel (cdr word))\n            (if (member\
    \ (car (cdr word)) vowels) (string (car (cdr word)))\n                (get_closest_vowel\
    \ (cdr word)))))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first word))\n\
    \            (is-consonant? (second word))\n            (is-consonant? (third\
    \ word)))\n       (first word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word))\
    \ empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty? (rest\
    \ word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is-vowel? (third word)) empty]\n          [(is-consonant? (third\
    \ word))\n           (cond\n             [(empty? (rest (rest (rest word)))) empty]\n\
    \             [(is-vowel? (fourth word)) empty]\n             [(is-consonant?\
    \ (fourth word))\n              (find-vowel-between-consonants (rest (rest (rest\
    \ (rest word)))))]\n             [else empty])]\n          [else empty])]\n  \
    \     [else empty", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E\
    \ #\\I #\\O #\\U)]\n        [word-len (string-length word)]\n        [i (sub1\
    \ word-len)])\n    (cond [(< i 1) \"\"]\n          [(member (string-ref word i)\
    \ vowels) (string (string-ref word i))]\n          [else (get_closest_vowel (substring\
    \ word 0 i))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i\
    \ #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) word]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) word]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]\n      [else empty]))\n  (define\
    \ (find-closest-consonant word)\n    (cond\n      [(empty? word) empty]\n    \
    \  [(is-consonant? (first word)) (first word)]\n      [(is-vowel? (first word))\
    \ (find-closest-consonant (rest word))]\n      [else empty]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel-from-right\
    \ (rest word))]\n      [else empty]))\n  (define (find-closest-consonant-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [(is-vowel? (first word)) (find-closest-consonant",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(and (is-consonant? (first word)) (is-vowel? (second word))) (second word)]\n\
    \      [else (find-closest-vowel (rest word))]))\n  (cond\n    [(empty? word)\
    \ empty]\n    [(is-vowel? (first word)) empty]\n    [(is-vowel? (last word)) empty]\n\
    \    [else (find-closest-vowel word)]))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? word)\n\
    \    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond ((is-consonant-vowel-consonant? word)\n           (string-ref\
    \ word 1))\n          ((&gt; (string-length word) 2)\n           (get-closest-vowel-from-right\
    \ (substring word 1)))\n          (else \"\")))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word))\
    \ \"\"]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (consonant? (first\
    \ word)) (vowel? (second word)) (consonant? (third word))) (string (second word))]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (define (is-vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (or (empty? word) (is-vowel? (first word)))\n        \"\"\n        (if\
    \ (is-vowel? (second word))\n            (string (second word))\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is-vowel? (first word)) (is-consonant? (second word)))\
    \ (first word)]\n      [else (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word))) (first word)]\n    [(and (is-consonant? (first word)) (is-vowel?\
    \ (second word))) (second word)]\n    [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n", "  (let loop ([word (string-&gt;list word)]\n          \
    \   [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n\
    \             [result '()])\n    (cond [(empty? word) (list-&gt;string result)]\n\
    \          [(member (car word) vowels)\n           (loop (cdr word) vowels (cons\
    \ (car word) result))]\n          [else (loop (cdr word) vowels result)])))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (find-closest-vowel-between-consonants (rest word))]\n\
    \       [else (find-closest-vowel (rest word))])]\n    [else empty]))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty? (rest\
    \ (rest word))) \"\"]\n    [(and (consonant? (first word)) (vowel? (second word))\
    \ (consonant? (third word))) (second word)]\n    [else (get_closest_vowel (rest\
    \ word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word))\
    \ \"\"]\n    [(empty? (rest (rest word))) \"\"]\n    [(member (first word) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\")) (get_closest_vowel (rest word))]\n    [(member (first\
    \ (rest word)) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (get_closest_vowel (rest word))]\n\
    \    [(member (first (rest (rest word))) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first\
    \ (rest (rest word)))]\n    [else (get_closest_vowel (rest word))]))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          (member (first (rest\
    \ word)) '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n     (get_closest_vowel (rest word))]\n\
    \    [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (let ([vowels (list #\\a\
    \ #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\\
    P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (cond [(empty? word) \"\
    \"]\n          [(member (first word) vowels) (first word)]\n          [(member\
    \ (first word) consonants) (get_closest_vowel (rest word))]\n          [else \"\
    \"])))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [word (string->list word)])\n    (let loop ([word word]\n  \
    \             [prev #\\])\n      (cond [(empty? word) \"\"]\n            [(member\
    \ (first word) vowels) (list->string (reverse word))]\n            [(and (not\
    \ (member prev vowels))\n                  (member (first word) vowels))\n   \
    \          (list->string (reverse word))]\n            [else (loop (rest word)\
    \ (first word))]))))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word))) (first word)]\n      [else (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(or (char-vowel? (last word)) (char-vowel? (first word))) \"\"]\n\
    \    [(and (char-vowel? (second word)) (char-consonant? (first word))) (string\
    \ (second word)))\n    [(and (char-vowel? (second-to-last word)) (char-consonant?\
    \ (last word))) (string (second-to-last word)))\n    [else (get_closest_vowel\
    \ (substring word 1 (- (string-length word) 1))) ]))\n", "  (let ([word (string-&gt;list\
    \ word)])\n    (let loop ([word word] [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")] [result '()])\n      (cond [(empty? word) (list-&gt;string\
    \ result)]\n            [(member (car word) vowels) (loop (cdr word) vowels (cons\
    \ (car word) result))]\n            [else (loop (cdr word) vowels result)]))))\n\
    </code>\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"\
    ]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (consonant? (first word))\
    \ (vowel? (second word)) (consonant? (third word))) (string (second word))]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty? (rest (rest word))) \"\"\
    ]\n    [(and (char-vowel? (first word)) (char-vowel? (second word))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel? (third word)))\
    \ (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (fourth word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (fifth word))) (get_closest_vowel (rest word))]\n    [(and\
    \ (char-vowel? (first word)) (char-vowel? (sixth word))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (first word)) (char-vowel? (seventh word)))\
    \ (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (eighth word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (ninth word))) (get_closest_vowel (rest word))]\n    [(and\
    \ (char-vowel? (first word)) (char-vowel? (tenth word))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (first word)) (char-vowel? (eleventh word)))\
    \ (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (twelfth word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word)) (is-consonant? (third word))) (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word))) (first word)]\n    [(and (is-consonant?\
    \ (first word)) (is-vowel? (second word))) (second word)]\n    [(and (is-consonant?\
    \ (first word)) (is-consonant? (second word))) (find-vowel-between-consonants\
    \ (rest word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word))\n       (cond\n         [(empty?\
    \ (rest word)) empty]\n         [(is-vowel? (second word)) (second word)]\n  \
    \       [else (find-closest-vowel (rest word))])]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [else\
    \ (find-closest-vowel (rest word))])]\n    [else (find-closest-vowel (rest word))]))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty?\
    \ (rest (rest word))) \"\"]\n    [(and (consonant? (first word)) (vowel? (second\
    \ word)) (consonant? (third word))) (second word)]\n    [else (get_closest_vowel\
    \ (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word))\
    \ \"\"]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (second word))) (get_closest_vowel (rest word))]\n    [(and\
    \ (char-vowel? (first word)) (char-vowel? (second (rest word)))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel? (second (rest\
    \ (rest word))))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (second (rest (rest (rest word)))))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel? (second (rest\
    \ (rest (rest (rest word))))))) (get_closest_vowel (rest word))]\n    [(and (char-vowel?\
    \ (first word)) (char-vowel? (second (rest (rest (rest (rest (rest word))))))))\
    \ (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (second (rest (rest (rest (rest (rest (rest word))))))))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (first word)) (char-vowel? (second (rest\
    \ (rest (rest (rest (rest (rest (rest word)))))))))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (first word)) (char-vowel? (second (rest (rest\
    \ (rest (rest (rest (rest (rest (rest word))))))))))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (first word)) (char-vowel? (second", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-vowel? (car word)) (car word))\n          (else\
    \ (find-vowel (cdr word)))))\n  (define (find-consonant word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-consonant? (car word)) (car word))\n          (else\
    \ (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-consonant? (car word))\n \
    \               (is-vowel? (cadr word))\n                (is-consonant? (caddr\
    \ word)))\n           (cadr word))\n          (else (find-vowel-between-consonants\
    \ (cdr word)))))\n  (find-vowel-between-consonants word))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (let loop ([word (reverse word)]\n               [prev #\\])\n\
    \               [curr #\\])\n      (cond [(null? word) \"\"]\n            [(member\
    \ (car word) vowels) (list->string (reverse word))]\n            [(and (member\
    \ prev vowels) (member curr vowels)) (loop (cdr word) curr (car word))]\n    \
    \        [else (loop (cdr word) curr (car word))]))))\n", "  (let ([vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(member (first word) vowels) \"\"]\n      [(member (second word)\
    \ vowels) (list->string (second word))]\n      [else (get_closest_vowel (rest\
    \ word))])))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word))\
    \ \"\"]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (consonant? (first\
    \ word)) (vowel? (second word)) (consonant? (third word))) (second word)]\n  \
    \  [else (get_closest_vowel (rest word))]))\n", "  (let ([vowels (string-&gt;list\
    \ \"aeiouAEIOU\")]\n        [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )])\n    (let loop ([word (string-&gt;list word)]\n               [result \"\"\
    ])\n      (cond [(empty? word) result]\n            [(member (first word) vowels)\
    \ (loop (rest word) (string (first word)))]\n            [(member (first word)\
    \ consonants) (loop (rest word) result)]\n            [else (loop (rest word)\
    \ result)]))))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\\
    A #\\E #\\I #\\O #\\U)]\n        [word-length (string-length word)]\n        [i\
    \ (sub1 word-length)])\n    (let loop ([i i])\n      (if (and (not (member (string-ref\
    \ word i) vowels))\n               (not (member (string-ref word (sub1 i)) vowels))\n\
    \               (not (member (string-ref word (add1 i)) vowels)))\n          (loop\
    \ (sub1 i))\n          (string (string-ref word i))))))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(and (is-vowel? (first word))\n\
    \                (is-consonant? (second word)))\n           (first word)]\n  \
    \        [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (and (not (is-vowel? c))\n         (char-alphabetic?\
    \ c)))\n  (define (is-consonant-vowel-consonant? c1 c2 c3)\n    (and (is-consonant?\
    \ c1)\n         (is-vowel? c2)\n         (is-consonant? c3)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant-vowel-consonant?\
    \ (first word) (second word) (third word))\n       (string (second word))]\n \
    \     [else (get-closest-vowel-from-right (rest word))]))\n  (get-closest-vowel-from-right\
    \ (string-reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\
    \ [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n \
    \         [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n \
    \   (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-consonant? (first word))\
    \ (first word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) \"\"]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) \"\"]\n    [(is-vowel? (first word))\
    \ (find-vowel-between-consonants (rest word))]\n    [(is-consonant? (first word))\
    \ (find-vowel-between-consonants (rest word))]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-vowel word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (get-vowel\
    \ (rest word))]))\n  (define (get-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (get-consonant\
    \ (rest word))]))\n  (define (get-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is-consonant? (first word)) (is-vowel? (second word)))\
    \ (second word)]\n      [else (get-closest-vowel (rest word))]))\n  (get-closest-vowel\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"\
    ]\n    [(and (char-vowel? (first word)) (char-vowel? (second word))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (first word)) (char-consonant? (second\
    \ word))) (first word)]\n    [(and (char-consonant? (first word)) (char-vowel?\
    \ (second word))) (second word)]\n    [(and (char-consonant? (first word)) (char-consonant?\
    \ (second word))) (get_closest_vowel (rest word))]))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-vowel? (first word))\n         \
    \   (is-consonant? (second word))\n            (is-consonant? (third word)))\n\
    \       (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (reverse\
    \ word)] [prev-vowel #f] [prev-consonant #f])\n      (cond [(empty? word) (if\
    \ prev-vowel prev-vowel \"\")]\n            [(is-vowel? (first word)) (loop (rest\
    \ word) (first word) prev-consonant)]\n            [(is-consonant? (first word))\
    \ (loop (rest word) prev-vowel (first word))]\n            [else (loop (rest word)\
    \ prev-vowel prev-consonant)])))\n  (find-closest-vowel word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ empty]\n      [(is-consonant? (first word))\n       (cond\n         [(empty?\
    \ (rest word)) empty]\n         [(is-vowel? (second word)) (first word)]\n   \
    \      [else (find-closest-vowel (rest word))])]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\\
    F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\\
    Y #\\Z)])\n    (let loop ([word (string->list word)]\n               [vowel #f]\n\
    \               [consonant #f])\n      (cond [(empty? word) (if vowel vowel \"\
    \")]\n            [(member (first word) vowels) (loop (rest word) (first word)\
    \ consonant)]\n            [(member (first word) consonants) (loop (rest word)\
    \ vowel (first word))]\n            [else (loop (rest word) vowel consonant)]))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (let loop ([word (string-&gt;list word)]\n  \
    \             [prev-consonant #f]\n               [prev-vowel #f])\n      (cond\n\
    \        [(empty? word) (if prev-vowel prev-vowel #f)]\n        [(is-vowel? (first\
    \ word))\n         (loop (rest word) prev-consonant (first word))]\n        [(is-consonant?\
    \ (first word))\n         (loop (rest word) (first word) prev-vowel)])))\n  (if\
    \ (find-closest-vowel word)\n      (list-&gt;string (find-closest-vowel word))\n\
    \      \"\"))\n</code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"\
    e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-vowel? (car word)) (car word))\n          (else\
    \ (find-vowel (cdr word)))))\n  (define (find-consonant word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-consonant? (car word)) (car word))\n          (else\
    \ (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-consonant? (car word)) (is-vowel?\
    \ (cadr word)) (is-consonant? (caddr word))) (cadr word))\n          (else (find-vowel-between-consonants\
    \ (cdr word)))))\n  (find-vowel-between-consonants word))\n", "  (let loop ([word\
    \ (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result \"\"])\n    (cond\n  \
    \    [(empty? word) result]\n      [(member (car word) vowels)\n       (loop (cdr\
    \ word) vowels (string-append result (car word)))]\n      [else (loop (cdr word)\
    \ vowels result)])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop\
    \ ([i (sub1 (string-length word))])\n      (cond\n        [(< i 0) \"\"]\n   \
    \     [(and (is-vowel? (string-ref word i))\n              (is-consonant? (string-ref\
    \ word (sub1 i))))\n         (string-ref word i)]\n        [else (loop (sub1 i))])))\n\
    \  (get-closest-vowel-from-right word))\n", "  (define (is-vowel? c)\n    (or\
    \ (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\i)\n        (equal?\
    \ c #\\o)\n        (equal? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-&gt;list\
    \ word)]\n               [vowel #\\a]\n               [distance 0])\n      (cond\
    \ [(null? word)\n             (if (equal? vowel #\\a)\n                 \"\"\n\
    \                 (list-&gt;string (list vowel)))]\n            [(is-vowel? (car\
    \ word))\n             (loop (cdr word)\n                   (car word)\n     \
    \              (add1 distance))]\n            [(is-consonant? (car word))\n  \
    \           (if (and (is-consonant? (cadr word))\n                      (not (null?\
    \ (cddr word))))\n                 (loop (cddr word)\n                       vowel\n\
    \                       (add1 distance))\n                 (list-&gt;string (list\
    \ vowel)))])))\n  (find-closest-vowel word))\n</code>\n", "  (let loop ([word\
    \ (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [closest-vowel #f])\n    (cond\
    \ [(empty? word) (if closest-vowel (list-&gt;string closest-vowel) \"\")]\n  \
    \        [(member (car word) vowels) (loop (cdr word) vowels (car word))]\n  \
    \        [else (loop (cdr word) vowels closest-vowel)])))\n</code>\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond [(empty? word) \"\"]\n          [(is-vowel? (first\
    \ word)) (first word)]\n          [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond [(empty? word) \"\"]\n          [(is-consonant?\
    \ (first word)) (first word)]\n          [else (find-consonant (rest word))]))\n\
    \  (define (find-vowel-between-consonants word)\n    (cond [(empty? word) \"\"\
    ]\n          [(and (is-vowel? (first word))\n                (is-consonant? (second\
    \ word))\n                (is-consonant? (third word)))\n           (first word)]\n\
    \          [else (find-vowel-between-consonants (rest word))]))\n  (find-vowel-between-consonants\
    \ word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [len (string-length word)]\n        [i (- len 1)])\n    (cond\n\
    \      [(< i 1) \"\"]\n      [(member (string-ref word i) vowels)\n       (string-ref\
    \ word i)]\n      [else\n       (get_closest_vowel (substring word 0 i))])))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty?\
    \ (rest (rest word))) \"\"]\n    [(and (consonant? (first word)) (vowel? (second\
    \ word)) (consonant? (third word))) (second word)]\n    [else (get_closest_vowel\
    \ (rest word))]))\n", "  (let* ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n   \
    \      [word-chars (string->list word)]\n         [word-len (length word-chars)]\n\
    \         [word-rev (reverse word-chars)]\n         [word-rev-len (length word-rev)])\n\
    \    (cond\n      [(or (= word-len 0) (= word-len 1)) \"\"]\n      [(member (list-ref\
    \ word-chars 0) vowels) \"\"]\n      [(member (list-ref word-chars (- word-len\
    \ 1)) vowels) \"\"]\n      [else\n       (let loop ([i 0])\n         (cond\n \
    \          [(= i word-rev-len) \"\"]\n           [(member (list-ref word-rev i)\
    \ vowels)\n            (if (and (member (list-ref word-rev (- i 1)) vowels)\n\
    \                     (member (list-ref word-rev (- i 2)) vowels))\n         \
    \       (loop (+ i 1))\n                (list->string (list (list-ref word-rev\
    \ i))))]\n           [else (loop (+ i 1))]))])))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n\
    \          [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond [(empty? word) empty]\n          [(is-consonant? (first word)) (first\
    \ word)]\n          [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word)]\n          [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) empty]\n   \
    \                   [(is-consonant? (third word))\n                       (find-vowel-between-consonants\
    \ (rest (rest word)))]\n                      [else empty])]\n               [else\
    \ empty])]\n        [else empty]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word-list (string->list word)])\n\
    \    (cond\n      [(empty? word-list) \"\"]\n      [(empty? (cdr word-list)) \"\
    \"]\n      [(member (car word-list) vowels) (get_closest_vowel (cdr word-list))]\n\
    \      [(member (cadr word-list) vowels) (cadr word-list)]\n      [else (get_closest_vowel\
    \ (cdr word-list))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first word))\n\
    \            (is-consonant? (second word))\n            (is-consonant? (third\
    \ word)))\n       (first word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word))\
    \ empty]\n    [(is-vowel? (last word)) empty]\n    [else (find-vowel-between-consonants\
    \ word)]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I\
    \ #\\O #\\U)]\n        [word-list (string->list word)])\n    (cond\n      [(empty?\
    \ word-list) \"\"]\n      [(member (first word-list) vowels) (first word-list)]\n\
    \      [else (get_closest_vowel (rest word-list))])))\n", "  (let ([vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(and (member (first word) vowels) (member (second word) vowels))\
    \ (get_closest_vowel (rest word))]\n      [(member (first word) vowels) (list->string\
    \ (list (first word)))]\n      [else (get_closest_vowel (rest word))])))\n", " \
    \ (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n  \
    \      [word (string->list word)])\n    (cond\n      [(empty? word) \"\"]\n  \
    \    [(member (first word) vowels)\n       (get_closest_vowel (rest word))]\n\
    \      [(member (second word) vowels)\n       (list->string (list (second word)))]\n\
    \      [else (get_closest_vowel (rest word))])))\n", "  (let ([vowels (list #\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\\
    P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop ([word (string->list\
    \ word)]\n               [vowel-index -1]\n               [consonant-index -1])\n\
    \      (cond [(empty? word) (if (and (&gt; vowel-index 0) (&gt; consonant-index\
    \ 0))\n                              (list-ref word vowel-index)\n           \
    \                   \"\")]\n            [(member (first word) vowels) (loop (rest\
    \ word) (+ vowel-index 1) consonant-index)]\n            [(member (first word)\
    \ consonants) (loop (rest word) vowel-index (+ consonant-index 1))]\n        \
    \    [else (loop (rest word) vowel-index consonant-index)]))))\n</code>\n", " \
    \ (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty?\
    \ (rest (rest word))) \"\"]\n    [(and (char-vowel? (first word)) (char-vowel?\
    \ (second word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (third word))) (get_closest_vowel (rest word))]\n    [(and\
    \ (char-vowel? (second word)) (char-vowel? (third word))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (second word)) (char-vowel? (fourth word)))\
    \ (get_closest_vowel (rest word))]\n    [(and (char-vowel? (third word)) (char-vowel?\
    \ (fourth word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel? (second\
    \ word)) (char-vowel? (third word)) (char-vowel? (fourth word))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (second word)) (char-vowel? (third word))\
    \ (char-vowel? (fifth word))) (get_closest_vowel (rest word))]\n    [(and (char-vowel?\
    \ (third word)) (char-vowel? (fourth word)) (char-vowel? (fifth word))) (get_closest_vowel\
    \ (rest word))]\n    [(and (char-vowel? (second word)) (char-vowel? (third word))\
    \ (char-vowel? (fourth word)) (char-vowel? (fifth word))) (get_closest_vowel (rest\
    \ word))]\n    [(and (char-vowel? (third word)) (char-vowel? (fourth word)) (char-vowel?\
    \ (fifth word)) (char-vowel? (sixth word))) (get", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is-vowel? (first word))\n            (is-consonant?\
    \ (second word))\n            (is-consonant? (third word)))\n       (first word)]\n\
    \      [else (find-closest-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant?\
    \ (first word))\n     (cond\n       [(empty? (rest word)) empty]\n       [(is-vowel?\
    \ (second word)) empty]\n       [(is-consonant? (second word))\n        (cond\n\
    \          [(empty? (rest (rest word))) empty]\n          [(is-vowel? (third word))\
    \ empty]\n          [(is-consonant? (third word))\n           (find-closest-vowel-between-consonants\
    \ (rest (rest (rest word))))])]\n       [else (find-closest-vowel (rest word))])]\n\
    \    [else empty]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel-from-right word)\n    (let loop ([word\
    \ (string-reverse word)] [prev-char #\\])\n      (cond [(empty? word) \"\"]\n\
    \            [(is-vowel? (first word)) (string-reverse word)]\n            [(is-consonant?\
    \ (first word)) (loop (rest word) (first word))]\n            [(is-vowel? prev-char)\
    \ (string-reverse word)]\n            [else \"\"])))\n  (find-vowel-from-right\
    \ word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\\
    F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\\
    Y #\\Z)])\n    (let loop ([i (sub1 (string-length word))]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond [(= i -1) (if prev-vowel (string\
    \ prev-vowel) \"\")]\n            [(member (string-ref word i) vowels) (loop (-\
    \ i 1) prev-consonant (string-ref word i))]\n            [(member (string-ref\
    \ word i) consonants) (loop (- i 1) (string-ref word i) prev-vowel)]\n       \
    \     [else (loop (- i 1) prev-consonant prev-vowel)]))))\n</code>\n", "  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n       \
    \ [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\\
    p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\\
    J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n \
    \   (cond\n      [(empty? word) \"\"]\n      [(member (first word) vowels) (first\
    \ word)]\n      [(member (first word) consonants) (get_closest_vowel (rest word))]\n\
    \      [else \"\"])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-vowel-from-right word)\n    (let loop\
    \ ([word (string-reverse word)] [prev #\\ ] [curr #\\ ])\n      (cond [(empty?\
    \ word) #f]\n            [(is-vowel? (first word)) (list (first word) prev curr)]\n\
    \            [(is-consonant? (first word)) (loop (rest word) curr (first word))]\n\
    \            [else (loop (rest word) curr (first word))])))\n  (define (find-vowel-from-left\
    \ word)\n    (let loop ([word word] [prev #\\ ] [curr #\\ ])\n      (cond [(empty?\
    \ word) #f]\n            [(is-vowel? (first word)) (list (first word) prev curr)]\n\
    \            [(is-consonant? (first word)) (loop (rest word) curr (first word))]\n\
    \            [else (loop (rest word) curr (first word))])))\n  (define (find-vowel\
    \ word)\n    (or (find-vowel-from-right word) (find-vowel-from-left word)))\n\
    \  (define (find-closest-vowel word)\n    (let loop ([word word] [prev #\\ ] [curr\
    \ #\\ ])\n      (cond [(empty? word) #f]\n            [(is-vowel? (first word))\
    \ (list (first word) prev curr)]\n            [(is-consonant? (first word)) (loop\
    \ (rest word) curr (first word))]\n            [else (loop (rest word) curr (first\
    \ word))])))\n  (define (find-closest-vowel-from-right word)\n    (let loop ([word\
    \ (string-reverse word)] [prev #\\ ] [curr #\\ ])\n      (", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [else (find-closest-vowel (rest word))]))\n  (define\
    \ (find-closest-consonant word)\n    (cond [(empty? word) empty]\n          [(is-consonant?\
    \ (first word)) (first word)]\n          [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond [(empty? word)\
    \ empty]\n          [(and (is-consonant? (first word))\n                (is-vowel?\
    \ (second word))\n                (is-consonant? (third word)))\n           (second\
    \ word)]\n          [else (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (cond [(empty? word) empty]\n        [(is-vowel? (first word)) empty]\n   \
    \     [(is-consonant? (first word))\n         (find-closest-vowel-between-consonants\
    \ word)]\n        [else empty]))\n", "  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond ((empty? word)\
    \ \"\")\n          ((is-vowel? (first word)) (first word))\n          (else (find-vowel\
    \ (rest word)))))\n  (define (find-consonant word)\n    (cond ((empty? word) \"\
    \")\n          ((is-consonant? (first word)) (first word))\n          (else (find-consonant\
    \ (rest word)))))\n  (define (find-vowel-between-consonants word)\n    (cond ((empty?\
    \ word) \"\")\n          ((is-vowel? (first word)) (first word))\n          ((is-consonant?\
    \ (first word))\n           (cond ((is-consonant? (second word)) (find-vowel (rest\
    \ word)))\n                 (else (find-vowel-between-consonants (rest word)))))\n\
    \          (else (find-vowel-between-consonants (rest word)))))\n  (find-vowel-between-consonants\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(or (char-vowel? (last word))\
    \ (char-vowel? (first word))) \"\"]\n    [(char-vowel? (first (rest word))) (first\
    \ (rest word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (cond\n \
    \   [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(member (first\
    \ word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (get_closest_vowel (rest word))]\n \
    \   [(member (first (rest word)) '(\"a\" \"e\" \"i\" \"o\" \"u\")) (first (rest\
    \ word))]\n    [else (get_closest_vowel (rest word))]))\n", "  (let* ([vowels\
    \ \"aeiou\"]\n         [word (string-&gt;list word)]\n         [word (reverse\
    \ word)]\n         [word (filter (lambda (x) (member x vowels)) word)])\n    (if\
    \ (empty? word)\n        \"\"\n        (list-&gt;string word))))\n</code>\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (is-last-consonant? word)\n    (is-consonant? (string-ref word (- (string-length\
    \ word) 1))))\n  (define (is-first-consonant? word)\n    (is-consonant? (string-ref\
    \ word 0)))\n  (define (get-last-vowel word)\n    (if (is-vowel? (string-ref word\
    \ (- (string-length word) 1)))\n        (string-ref word (- (string-length word)\
    \ 1))\n        (get-last-vowel (substring word 0 (- (string-length word) 1)))))\n\
    \  (define (get-first-vowel word)\n    (if (is-vowel? (string-ref word 0))\n \
    \       (string-ref word 0)\n        (get-first-vowel (substring word 1))))\n\
    \  (define (get-closest-vowel-from-right word)\n    (if (is-last-consonant? word)\n\
    \        (get-last-vowel word)\n        (get-closest-vowel-from-right (substring\
    \ word 0 (- (string-length word) 1)))))\n  (define (get-closest-vowel-from-left\
    \ word)\n    (if (is-first-consonant? word)\n        (get-first-vowel word)\n\
    \        (get-closest-vowel-from-left (substring word 1))))\n  (if (is-vowel?\
    \ (string-ref word 0))\n      (get-closest-vowel-from-right word)\n      (get-closest-vowel-from-left\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n       \
    \   [(is-vowel? (first word)) (first word)]\n          [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(and (is-consonant? (first word))\n               \
    \ (is-vowel? (second word))\n                (is-consonant? (third word))) (second\
    \ word)]\n          [else (find-vowel-between-consonants (rest word))]))\n  (cond\
    \ [(empty? word) empty]\n        [(is-vowel? (first word)) empty]\n        [(is-consonant?\
    \ (first word))\n         (cond [(empty? (rest word)) empty]\n               [(is-vowel?\
    \ (second word)) empty]\n               [(is-consonant? (second word))\n     \
    \           (cond [(empty? (rest (rest word))) empty]\n                      [(is-vowel?\
    \ (third word)) empty]\n                      [(is-consonant? (third word))\n\
    \                       (cond [(empty? (rest (rest (rest word)))) empty]\n   \
    \                          [(is-vowel? (fourth word)) empty]\n               \
    \              [(is-consonant? (fourth word))\n                              (find-vowel-between-consonants\
    \ (rest (rest (rest word))))])])])])]))\n", "  (define (get-closest-vowel-iter\
    \ word i)\n    (cond\n      [(= i (string-length word)) \"\"]\n      [(and (char-vowel?\
    \ (string-ref word i))\n            (char-consonant? (string-ref word (- i 1)))\n\
    \            (char-consonant? (string-ref word (+ i 1))))\n       (string-ref\
    \ word i)]\n      [else (get-closest-vowel-iter word (+ i 1))]))\n  (get-closest-vowel-iter\
    \ word 0))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel word))\n",
  "  (let loop ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result '()])\n\
    \    (cond [(empty? word) (list-&gt;string result)]\n          [(member (car word)\
    \ vowels) (loop (cdr word) vowels (cons (car word) result))]\n          [else\
    \ (loop (cdr word) vowels result)])))\n</code>\n", "  (let ([vowels (list #\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [len (string-length\
    \ word)]\n        [i (- len 1)])\n    (if (or (member (string-ref word 0) vowels)\n\
    \            (member (string-ref word (- len 1)) vowels))\n        \"\"\n    \
    \    (let loop ([i (- len 1)])\n          (if (and (member (string-ref word i)\
    \ vowels)\n                   (not (member (string-ref word (- i 1)) vowels))\n\
    \                   (not (member (string-ref word (+ i 1)) vowels)))\n       \
    \       (string-ref word i)\n              (if (= i 0)\n                  \"\"\
    \n                  (loop (- i 1)))))))))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n\
    \          [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-consonant? (first word))\
    \ (first word)]\n          [else (find-closest-consonant (rest word))]))\n  (define\
    \ (find-closest-vowel-between-consonants word)\n    (cond [(empty? word) empty]\n\
    \          [(and (is-consonant? (first word))\n                (is-vowel? (second\
    \ word))\n                (is-consonant? (third word)))\n           (second word)]\n\
    \          [else (find-closest-vowel-between-consonants (rest word))]))\n  (cond\
    \ [(empty? word) empty]\n        [(is-vowel? (first word)) empty]\n        [(is-consonant?\
    \ (first word))\n         (cond [(empty? (rest word)) empty]\n               [(is-vowel?\
    \ (second word)) empty]\n               [(is-consonant? (second word))\n     \
    \           (cond [(empty? (rest (rest word))) empty]\n                      [(is-vowel?\
    \ (third word)) empty]\n                      [(is-consonant? (third word))\n\
    \                       (find-closest-vowel-between-consonants (rest (rest (rest\
    \ word))))])])])\n        [else empty]))\n", "  (let ([vowels (list #\\a #\\e\
    \ #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\\
    c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\\
    w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\\
    Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop ([word (string->list\
    \ word)]\n               [vowel-index -1]\n               [consonant-index -1])\n\
    \      (cond [(empty? word) \"\"]\n            [(member (first word) vowels) (loop\
    \ (rest word) (+ vowel-index 1) consonant-index)]\n            [(member (first\
    \ word) consonants) (loop (rest word) vowel-index (+ consonant-index 1))]\n  \
    \          [else (if (and (> vowel-index 0) (> consonant-index 0))\n         \
    \            (list-ref word vowel-index)\n                     \"\")]))))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond ((null? word) \"\")\n          ((is-vowel? (car word)) (car\
    \ word))\n          ((is-consonant? (car word)) (get-closest-vowel-from-right\
    \ (cdr word)))))\n  (define (get-closest-vowel-from-left word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-vowel? (car (reverse word))) (car (reverse word)))\n\
    \          ((is-consonant? (car (reverse word))) (get-closest-vowel-from-left\
    \ (reverse (cdr (reverse word)))))))\n  (cond ((null? word) \"\")\n        ((is-vowel?\
    \ (car word)) (get-closest-vowel-from-right (cdr word)))\n        ((is-consonant?\
    \ (car word)) (get-closest-vowel-from-left (cdr word)))))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([word (string-&gt;list word)]\n               [vowels-found '()])\n      (cond\
    \ [(empty? word) (list-&gt;string (reverse vowels-found))]\n            [(member\
    \ (first word) vowels) (loop (rest word) (cons (first word) vowels-found))]\n\
    \            [(member (first word) consonants) (loop (rest word) vowels-found)]\n\
    \            [else (loop (rest word) vowels-found)]))))\n</code>\n", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [prev-consonant #f]\n  \
    \             [prev-vowel #f])\n      (cond [(null? word) #f]\n            [(is-vowel?\
    \ (car word))\n             (loop (cdr word) prev-consonant (car word))]\n   \
    \         [(is-consonant? (car word))\n             (if prev-vowel\n         \
    \        prev-vowel\n                 (loop (cdr word) (car word) prev-vowel))])))\n\
    \  (let ([closest-vowel (find-closest-vowel word)])\n    (if closest-vowel\n \
    \       (list-&gt;string (list closest-vowel))\n        \"\")))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (if (empty? word)\n        \"\"\n \
    \       (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-from-right\
    \ (rest word)))))\n  (get-closest-vowel-from-right (reverse word)))\n", "  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n       \
    \ [word (string->list word)])\n    (cond [(or (empty? word) (empty? (cdr word)))\
    \ \"\"]\n          [(member (car word) vowels) \"\"]\n          [(member (cadr\
    \ word) vowels) (list->string (cadr word))]\n          [else (get_closest_vowel\
    \ (cdr word))])))\n", "  (let ((vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)))\n    (let loop ((word (string-&gt;list word))\n          \
    \     (vowels vowels)\n               (closest-vowel #\\a)\n               (closest-distance\
    \ 1000))\n      (if (null? word)\n          (if (&lt; closest-distance 1000)\n\
    \              (list-&gt;string (list closest-vowel))\n              \"\")\n \
    \         (let ((char (car word)))\n            (if (member char vowels)\n   \
    \             (let ((distance (length word)))\n                  (if (&lt; distance\
    \ closest-distance)\n                      (loop (cdr word) vowels char distance)\n\
    \                      (loop (cdr word) vowels closest-vowel closest-distance)))\n\
    \                (loop (cdr word) vowels closest-vowel closest-distance)))))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n       \
    \   [(is-vowel? (first word)) (first word)]\n          [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(is-vowel? (first word)) empty]\n          [(is-consonant?\
    \ (first word))\n           (cond [(is-consonant? (second word)) (find-vowel word)]\n\
    \                 [else (find-vowel-between-consonants (rest word))])]\n     \
    \     [else (find-vowel-between-consonants (rest word))]))\n  (find-vowel-between-consonants\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n        \"\
    \"\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word)))\n            (string (second word))\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel word))\n", "  (let loop ([word (string-&gt;list\
    \ word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")]\n             [vowel-index 0])\n    (cond [(empty? word) \"\"\
    ]\n          [(member (first word) vowels) (list-ref vowels vowel-index)]\n  \
    \        [else (loop (rest word) vowels (+ vowel-index 1))])))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (define (get-closest-vowel-from-right-iter\
    \ word i)\n      (if (or (= i 0) (= i (- (string-length word) 1)))\n         \
    \ \"\"\n          (let ((c (string-ref word i)))\n            (if (and (is-vowel?\
    \ c)\n                     (is-consonant? (string-ref word (- i 1)))\n       \
    \              (is-consonant? (string-ref word (+ i 1))))\n                (string\
    \ c)\n                (get-closest-vowel-from-right-iter word (- i 1))))))\n \
    \   (get-closest-vowel-from-right-iter word (- (string-length word) 1)))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\\
    l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\\
    F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\\
    Y #\\Z)])\n    (let loop ([i (sub1 (string-length word))]\n               [vowel\
    \ #\\])\n      (if (and (member (string-ref word i) consonants)\n            \
    \   (member (string-ref word (sub1 i)) consonants)\n               (member (string-ref\
    \ word (sub1 i)) vowels))\n          (string-ref word (sub1 i))\n          (if\
    \ (and (member (string-ref word i) consonants)\n                   (member (string-ref\
    \ word (sub1 i)) consonants))\n              (loop (sub1 i) vowel)\n         \
    \     (if (member (string-ref word i) vowels)\n                  (loop (sub1 i)\
    \ (string-ref word i))\n                  (if (= i 0)\n                      (if\
    \ (and (member (string-ref word i) consonants)\n                             \
    \  (member (string-ref word (sub1 i)) consonants))\n                         \
    \ \"\"\n                          (string-ref word i))\n                     \
    \ (loop (sub1 i) vowel)))))))))\n", "  (if (string-empty? word)\n      \"\"\n\
    \      (let ([c (string-ref word (sub1 (string-length word)))])\n        (if (or\
    \ (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\\
    u))\n            (get_closest_vowel (substring word 0 (sub1 (string-length word))))\n\
    \            (if (or (char=? c #\\A) (char=? c #\\E) (char=? c #\\I) (char=? c\
    \ #\\O) (char=? c #\\U))\n                (get_closest_vowel (substring word 0\
    \ (sub1 (string-length word))))\n                (string c))))))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word-len\
    \ (string-length word)]\n        [i (sub1 word-len)])\n    (cond\n      [(< i\
    \ 1) \"\"]\n      [(member (string-ref word i) vowels)\n       (string-ref word\
    \ i)]\n      [else\n       (get_closest_vowel (substring word 0 i))])))\n", " \
    \ (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n  \
    \      [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\\
    H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n\
    \    (let loop ([word word] [i (sub1 (string-length word))])\n      (cond [(or\
    \ (empty? word) (= i 0)) \"\"]\n            [(and (member (string-ref word i)\
    \ vowels) (member (string-ref word (sub1 i)) consonants)) (string-ref word i)]\n\
    \            [else (loop word (sub1 i))]))))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (is-consonant? (second word)) (is-consonant? (third word))) (first word)]\n\
    \      [else (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty?\
    \ word) empty]\n    [(and (is-vowel? (first word)) (is-consonant? (second word)))\
    \ (first word)]\n    [(and (is-consonant? (first word)) (is-vowel? (second word)))\
    \ (second word)]\n    [(and (is-consonant? (first word)) (is-consonant? (second\
    \ word))) (find-vowel-between-consonants (rest word))]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [word-length (string-length word)]\n        [word-list\
    \ (string->list word)])\n    (for/or ([i (in-range (- word-length 2))])\n    \
    \  (and (member (list-ref word-list i) vowels)\n           (not (member (list-ref\
    \ word-list (- i 1)) vowels))\n           (not (member (list-ref word-list (+\
    \ i 1)) vowels))\n           (list-ref word-list i)))))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n\
    \          [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond\n        [(empty? word) #f]\n\
    \        [(is-vowel? (first word))\n         (loop (rest word) prev-consonant\
    \ (first word))]\n        [(is-consonant? (first word))\n         (if prev-vowel\n\
    \             prev-vowel\n             (loop (rest word) (first word) prev-vowel))])))\n\
    \  (let ([vowel (find-vowel-from-right word)])\n    (if vowel\n        (list-&gt;string\
    \ (list vowel))\n        \"\")))\n</code>\n", "  (let loop ([word (string-&gt;list\
    \ word)] [vowels '()])\n    (cond [(empty? word) (list-&gt;string vowels)]\n \
    \         [(member (car word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n           (loop\
    \ (cdr word) (cons (car word) vowels))]\n          [else (loop (cdr word) vowels)])))\n",
  "  (let loop ([word (string-&gt;list word)]\n             [vowels '(\"a\" \"e\"\
    \ \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result '()])\n\
    \    (cond [(empty? word) (list-&gt;string result)]\n          [(member (car word)\
    \ vowels)\n           (loop (cdr word) vowels (cons (car word) result))]\n   \
    \       [else (loop (cdr word) vowels '())])))\n</code>\n", "  (cond\n    [(empty?\
    \ word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant? (first word))\
    \ (vowel? (second word))) (second word)]\n    [(and (consonant? (first word))\
    \ (consonant? (second word))) (get_closest_vowel (rest word))]\n    [else (get_closest_vowel\
    \ (rest word))]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [word-list (string->list word)])\n    (cond\n    \
    \  [(empty? word-list) \"\"]\n      [(empty? (cdr word-list)) \"\"]\n      [(and\
    \ (member (car word-list) vowels)\n            (member (cadr word-list) vowels))\n\
    \       (get_closest_vowel (list->string (cdr word-list)))]\n      [(member (car\
    \ word-list) vowels)\n       (list->string (list (car word-list)))]\n      [else\
    \ (get_closest_vowel (list->string (cdr word-list)))])))\n", "  (let loop ([word\
    \ (string-&gt;list word)]\n             [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\"\
    \ \"A\" \"E\" \"I\" \"O\" \"U\")]\n             [result '()])\n    (cond\n   \
    \   [(empty? word) (list-&gt;string result)]\n      [(member (car word) vowels)\
    \ (loop (cdr word) vowels (cons (car word) result))]\n      [else (loop (cdr word)\
    \ vowels result)])))\n</code>\n", "  (let ([word (string-&gt;list word)])\n  \
    \  (for/first ([i (in-range (sub1 (length word)) -1 -1)]\n                [vowel\
    \ (in-list '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))])\n\
    \      (and (not (member? (list-ref word i) '(\"a\" \"e\" \"i\" \"o\" \"u\" \"\
    A\" \"E\" \"I\" \"O\" \"U\")))\n           (member? (list-ref word (add1 i)) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n           vowel))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word))) (first word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first word))\n\
    \          (is-consonant? (second word))) (first word)]\n    [(and (is-consonant?\
    \ (first word))\n          (is-vowel? (second word))) (second word)]\n    [(and\
    \ (is-consonant? (first word))\n          (is-consonant? (second word)))\n   \
    \  (cond\n       [(empty? (find-vowel-between-consonants (rest word))) empty]\n\
    \       [else (find-vowel-between-consonants (rest word))])]\n    [else (get_closest_vowel\
    \ (rest word))]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\\
    C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\\
    W #\\X #\\Y #\\Z)])\n    (let loop ([word (string->list word)]\n             \
    \  [i 0])\n      (cond\n        [(empty? word) \"\"]\n        [(member (first\
    \ word) vowels) (list->string (take word i))]\n        [(member (first word) consonants)\
    \ (loop (rest word) (+ i 1))]\n        [else (loop (rest word) (+ i 1))]))))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (is-vowel? (first word))\n            (is-consonant? (second\
    \ word))\n            (is-consonant? (third word)))\n       (first word)]\n  \
    \    [else (find-vowel-between-consonants (rest word))]))\n  (define (find-vowel-between-consonants-from-right\
    \ word)\n    (find-vowel-between-consonants (reverse word)))\n  (find-vowel-between-consonants-from-right\
    \ word))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"\
    ]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (consonant? (first word))\
    \ (vowel? (second word)) (consonant? (third word))) (second word)]\n    [else\
    \ (get_closest_vowel (rest word))]))\n", "  (cond\n    [(empty? word) \"\"]\n\
    \    [(regexp-match? #rx\"[aeiou]\" (string-ref word (- (string-length word) 1)))\n\
    \     (string-ref word (- (string-length word) 1))]\n    [else (get_closest_vowel\
    \ (substring word 0 (- (string-length word) 1)))]))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond ((empty? word) \"\")\n          ((is-vowel? (first word)) (first word))\n\
    \          (else (find-vowel (rest word)))))\n  (define (find-consonant word)\n\
    \    (cond ((empty? word) \"\")\n          ((is-consonant? (first word)) (first\
    \ word))\n          (else (find-consonant (rest word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond ((empty? word) \"\")\n          ((is-vowel? (first word)) (find-consonant\
    \ (rest word)))\n          ((is-consonant? (first word)) (find-vowel (rest word)))\n\
    \          (else (find-vowel-between-consonants (rest word)))))\n  (find-vowel-between-consonants\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n        \"\
    \"\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word)))\n            (second word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [next-consonant #f]\n               [closest-vowel #f])\n\
    \      (cond\n        [(null? word) closest-vowel]\n        [(is-vowel? (car word))\n\
    \         (loop (cdr word)\n               prev-consonant\n               next-consonant\n\
    \               (if (and prev-consonant next-consonant)\n                   (car\
    \ word)\n                   closest-vowel))]\n        [(is-consonant? (car word))\n\
    \         (loop (cdr word)\n               (car word)\n               next-consonant\n\
    \               closest-vowel)])))\n  (if (is-vowel? (string-ref word 0))\n  \
    \    \"\"\n      (list-&gt;string (find-closest-vowel word))))\n</code>\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (let loop ([word word] [i\
    \ (sub1 (string-length word))])\n      (cond [(< i 0) \"\"]\n            [(and\
    \ (is-consonant? (string-ref word i))\n                  (is-vowel? (string-ref\
    \ word (sub1 i))))\n             (string-ref word (sub1 i))]\n            [else\
    \ (loop word (sub1 i))])))\n  (get-closest-vowel-from-right word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-consonant (rest word))]))\n  (define\
    \ (find-vowel-between-consonants word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(and (is-vowel? (first word))\n            (is-consonant? (second word))\n\
    \            (is-consonant? (third word)))\n       (first word)]\n      [else\
    \ (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty? word)\
    \ empty]\n    [(is-vowel? (first word)) empty]\n    [(is-vowel? (last word)) empty]\n\
    \    [else (find-vowel-between-consonants word)]))\n", "  (let ([vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(member (first word) vowels) \"\"]\n      [(member (second word)\
    \ vowels) (list->string (second word))]\n      [else (get_closest_vowel (rest\
    \ word))])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse\
    \ word)] [prev-char #\\])\n      (if (string-empty? word)\n          \"\"\n  \
    \        (let ([char (string-ref word 0)])\n            (if (is-vowel? char)\n\
    \                (if (is-consonant? prev-char)\n                    (string char)\n\
    \                    (loop (substring word 1) char))\n                (loop (substring\
    \ word 1) char))))))\n  (get-closest-vowel-from-right word))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(and (member (first word) vowels) (member (second word) vowels))\
    \ \"\"]\n      [(member (first word) vowels) (list->string (first word))]\n  \
    \    [(member (second word) vowels) (list->string (second word))]\n      [else\
    \ (get_closest_vowel (rest word))])))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (empty? word)\n        \"\"\n        (if (and (is-consonant? (first word))\n\
    \                 (is-vowel? (second word))\n                 (is-consonant? (third\
    \ word)))\n            (second word)\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? c1 c2\
    \ c3)\n    (and (is-consonant? c1) (is-vowel? c2) (is-consonant? c3)))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (for/first ([c1 (in-list (string-&gt;list\
    \ word))]\n                [c2 (in-list (string-&gt;list word))]\n           \
    \     [c3 (in-list (string-&gt;list word))])\n      (and (is-consonant-vowel-consonant?\
    \ c1 c2 c3) c2)))\n  (get-closest-vowel-from-right word))\n</code>\n", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first\
    \ word))\n          (is-consonant? (second word)))\n     (first word)]\n    [(and\
    \ (is-consonant? (first word))\n          (is-vowel? (second word))\n        \
    \  (is-consonant? (third word)))\n     (second word)]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [word (string->list word)])\n    (cond [(empty? word)\
    \ \"\"]\n          [(member (first word) vowels) (string (first word))]\n    \
    \      [(member (second word) vowels) (string (second word))]\n          [else\
    \ (get_closest_vowel (rest (rest word)))])))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-vowel? (last word)) empty]\n    [else (find-vowel-between-consonants\
    \ word)]))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is-vowel? (third word)) empty]\n          [(is-consonant? (third\
    \ word))\n           (find-closest-vowel-between-consonants (rest (rest (rest\
    \ word))))])]\n       [else (find-closest-vowel (rest word))])]\n    [else (find-closest-vowel\
    \ (rest word))]", "  (let ([word (string-&gt;list word)])\n    (let loop ([word\
    \ word] [prev-char #\\a])\n      (cond [(empty? word) \"\"]\n            [(vowel?\
    \ (first word))\n             (if (and (consonant? prev-char) (consonant? (second\
    \ word)))\n                 (list-&gt;string (first word))\n                 (loop\
    \ (rest word) (first word)))]\n            [else (loop (rest word) (first word))]))))\n",
  "  (let loop ([word (string-&gt;list word)]\n             [vowels (string-&gt;list\
    \ \"aeiouAEIOU\")]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )]\n             [closest-vowel #f])\n    (cond [(empty? word) (if closest-vowel\
    \ (list-&gt;string closest-vowel) \"\")]\n          [(member (first word) vowels)\n\
    \           (if (and (member (second word) consonants)\n                    (member\
    \ (third word) consonants))\n               (loop (rest word) vowels consonants\
    \ (first word))\n               (loop (rest word) vowels consonants closest-vowel))]\n\
    \          [else (loop (rest word) vowels consonants closest-vowel)])))\n</code>\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (empty? word)\n        \"\"\n        (if\
    \ (and (is-consonant? (first word))\n                 (is-vowel? (second word)))\n\
    \            (second word)\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\\
    g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\\
    T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop ([word word] [i (sub1 (string-length\
    \ word))])\n      (cond\n        [(or (empty? word) (empty? (rest word))) \"\"\
    \ ]\n        [(member (string-ref word i) vowels) (string-ref word i)]\n     \
    \   [(member (string-ref word i) consonants) (loop (substring word 0 i) (sub1\
    \ i))]\n        [else (loop (substring word 0 i) (sub1 i))]))))\n", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants\
    \ (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r\
    \ #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\\
    L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n    (let loop\
    \ ([word (string->list word)]\n               [i (length word)])\n      (cond\
    \ [(empty? word) \"\"]\n            [(member (car word) vowels) (list->string\
    \ (take word i))]\n            [(member (car word) consonants) (loop (cdr word)\
    \ (- i 1))]\n            [else (loop (cdr word) (- i 1))]))))\n", "  (cond\n \
    \   [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant?\
    \ (first word)) (consonant? (second word))) (get_closest_vowel (rest word))]\n\
    \    [(vowel? (first word)) (first word)]\n    [else (get_closest_vowel (rest\
    \ word))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o\
    \ #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (get-vowel word)\n    (string-ref word 1))\n\
    \  (define (get-closest-vowel word)\n    (if (is-consonant-vowel-consonant? word)\n\
    \        (get-vowel word)\n        (get-closest-vowel (substring word 1))))\n\
    \  (if (&lt; (string-length word) 3)\n      \"\"\n      (get-closest-vowel word)))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond [(empty?\
    \ word) empty]\n          [(and (is-consonant? (first word))\n               \
    \ (is-vowel? (second word))\n                (is-consonant? (third word)))\n \
    \          (second word)]\n          [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) (third word)]\n\
    \                      [(is-consonant? (third word))\n                       (find-vowel-between-consonants\
    \ (rest (rest word)))]\n                      [else empty])]\n               [else\
    \ empty])]\n        [else empty]))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (empty? word)\n     \
    \       (empty? (rest word)))\n        \"\"\n        (if (and (is-consonant? (first\
    \ word))\n                 (is-vowel? (second word)))\n            (string (second\
    \ word))\n            (find-closest-vowel (rest word)))))\n  (find-closest-vowel\
    \ (string-reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond [(empty? word)\
    \ empty]\n          [(is-vowel? (first word)) (first word)]\n          [else (find-vowel\
    \ (rest word))]))\n  (define (find-consonant word)\n    (cond [(empty? word) empty]\n\
    \          [(is-consonant? (first word)) (first word)]\n          [else (find-consonant\
    \ (rest word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (cond [(empty? (rest (rest\
    \ word))) empty]\n                      [(is-vowel? (third word)) (third word)]\n\
    \                      [(is-consonant? (third word))\n                       (cond\
    \ [(empty? (rest (rest (rest word)))) empty]\n                             [(is-vowel?\
    \ (fourth word)) (fourth word)]\n                             [(is-consonant?\
    \ (fourth word))\n                              (cond [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                                    [(is-vowel? (fifth\
    \ word)) (fifth word)]\n                                    [(is-consonant? (fifth\
    \ word))\n                                     (cond [(empty? (rest (rest (rest\
    \ (rest (rest word)))))) empty]\n                                           [(is-vowel?\
    \ (sixth word)) (sixth word)]\n                                           [(is-consonant?\
    \ (sixth word))\n                                            (cond [(empty? (rest\
    \ (rest (rest (rest (rest (rest word))))))) empty]\n                         \
    \                         [(is-vowel?", "  (cond\n    [(empty? word) \"\"]\n \
    \   [(empty? (rest word)) \"\"]\n    [(empty? (rest (rest word))) \"\"]\n    [(and\
    \ (vowel? (first word)) (consonant? (second word)) (consonant? (third word)))\
    \ (first word)]\n    [else (get_closest_vowel (rest word))]))\n", "  (cond\n \
    \   [(empty? word) \"\"]\n    [(consonant? (last word)) (get_closest_vowel (butlast\
    \ word))]\n    [(vowel? (last word)) (last word)]\n    [else (get_closest_vowel\
    \ (butlast word))]))\n", "  (let loop ([word (string-&gt;list word)]\n       \
    \      [vowels '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")]\n\
    \             [result \"\"])\n    (cond [(empty? word) result]\n          [(member\
    \ (car word) vowels) (loop (cdr word) vowels (string-append result (car word)))]\n\
    \          [else (loop (cdr word) vowels result)])))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is-vowel? (first word))\n            (is-consonant?\
    \ (second word))\n            (is-consonant? (third word)))\n       (first word)]\n\
    \      [else (find-closest-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n    [(is-consonant?\
    \ (first word))\n     (find-closest-vowel-between-consonants word)]\n    [else\
    \ (find-closest-vowel-between-consonants (rest word))]))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-vowel? (last word)) empty]\n    [else (find-vowel-between-consonants\
    \ word)]))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\
    \"]\n    [(empty? (rest (rest word))) \"\"]\n    [(and (consonant? (first word))\
    \ (vowel? (second word)) (consonant? (third word))) (second word)]\n    [else\
    \ (get_closest_vowel (rest word))]))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond ((empty? word) \"\")\n          ((and (is-vowel? (first word))\n  \
    \              (is-consonant? (second word))\n                (is-consonant? (third\
    \ word)))\n           (first word))\n          (else (find-vowel (rest word)))))\n\
    \  (find-vowel word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\\
    A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\\
    B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\\
    V #\\W #\\X #\\Y #\\Z)])\n    (cond\n      [(empty? word) \"\"]\n      [(member\
    \ (last word) vowels) \"\"]\n      [(member (last word) consonants) (get_closest_vowel\
    \ (butlast word))]\n      [else (string (last word))])))\n", "  (let ([word (string-&gt;list\
    \ word)])\n    (for/first ([i (in-range (sub1 (length word)) -1 -1)]\n       \
    \         [vowel (in-list '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"\
    O\" \"U\"))])\n      (and (not (member (list-ref word i) '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n           (member (list-ref word\
    \ (add1 i)) vowel)\n           (list-ref word i)))))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [prev-vowel #f])\n      (cond\n        [(empty? word) (if\
    \ prev-vowel (list-&gt;string (reverse prev-vowel)) \"\")]\n        [(is-vowel?\
    \ (first word))\n         (loop (rest word) prev-consonant (cons (first word)\
    \ prev-vowel))]\n        [(is-consonant? (first word))\n         (if prev-vowel\n\
    \             (list-&gt;string (reverse prev-vowel))\n             (loop (rest\
    \ word) (cons (first word) prev-consonant) prev-vowel))])))\n  (get-closest-vowel-from-right\
    \ word))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [word (string->list word)])\n    (cond\n      [(empty?\
    \ word) \"\"]\n      [(empty? (rest word)) \"\"]\n      [(member (first word)\
    \ vowels) \"\"]\n      [(member (second word) vowels) (list->string (second word))]\n\
    \      [else (get_closest_vowel (rest word))])))\n", "  (define (is-vowel? c)\n\
    \    (or (equal? c \"a\") (equal? c \"e\") (equal? c \"i\") (equal? c \"o\") (equal?\
    \ c \"u\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (or (empty? word) (is-vowel? (first word)))\n\
    \        \"\"\n        (if (is-vowel? (second word))\n            (second word)\n\
    \            (find-closest-vowel (rest word)))))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond ((null? word) \"\")\n         \
    \ ((is-vowel? (car word)) (car word))\n          (else (find-vowel (cdr word)))))\n\
    \  (define (find-consonant word)\n    (cond ((null? word) \"\")\n          ((is-consonant?\
    \ (car word)) (car word))\n          (else (find-consonant (cdr word)))))\n  (define\
    \ (find-vowel-between-consonants word)\n    (cond ((null? word) \"\")\n      \
    \    ((and (is-consonant? (car word))\n                (is-vowel? (cadr word))\n\
    \                (is-consonant? (caddr word)))\n           (cadr word))\n    \
    \      (else (find-vowel-between-consonants (cdr word)))))\n  (cond ((null? word)\
    \ \"\")\n        ((is-vowel? (car word)) \"\")\n        ((is-consonant? (car word))\
    \ (find-vowel-between-consonants word))\n        (else (find-vowel word))))\n",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(empty?\
    \ (rest (rest word))) \"\"]\n    [(empty? (rest (rest (rest word)))) \"\"]\n \
    \   [else\n     (let ([c1 (first word)]\n           [c2 (first (rest word))]\n\
    \           [c3 (first (rest (rest word)))])\n       (cond\n         [(and (consonant?\
    \ c1) (consonant? c2) (vowel? c3)) (string c3)]\n         [(and (consonant? c2)\
    \ (consonant? c3) (vowel? c1)) (string c1)]\n         [(and (consonant? c1) (consonant?\
    \ c3) (vowel? c2)) (string c2)]\n         [else (get_closest_vowel (rest word))]))]))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\\
    H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n\
    \    (let loop ([i (sub1 (string-length word))]\n               [prev-char #\\\
    \ ]\n               [prev-prev-char #\\ ])\n      (cond [(= i -1) \"\"]\n    \
    \        [(member (string-ref word i) vowels)\n             (if (and (member prev-char\
    \ consonants) (member prev-prev-char consonants))\n                 (string (string-ref\
    \ word i))\n                 (loop (sub1 i) (string-ref word i) prev-char))]\n\
    \            [else (loop (sub1 i) (string-ref word i) prev-char)]))))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(or (char-vowel? (last word)) (char-vowel? (first\
    \ word))) \"\"]\n    [(and (char-vowel? (last (rest word))) (char-consonant? (last\
    \ word))) (last (rest word))]\n    [else (get_closest_vowel (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant? (string-ref\
    \ word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (get-closest-vowel-from-right word)\n    (let\
    \ loop ([word word] [i (sub1 (string-length word))])\n      (cond\n        [(is-consonant-vowel-consonant?\
    \ word) (string-ref word 1)]\n        [(zero? i) \"\"]\n        [else (loop (substring\
    \ word 1) (sub1 i))])))\n  (get-closest-vowel-from-right word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (let loop ([word (string-reverse word)] [prev-char #\\])\n      (cond\
    \ [(empty? word) \"\"]\n            [(is-vowel? (first word)) (string-reverse\
    \ word)]\n            [(and (is-consonant? prev-char) (is-consonant? (first word)))\n\
    \             (find-vowel-from-right (string-reverse (rest word)) (first word))]\n\
    \            [else (loop (rest word) (first word))])))\n  (find-vowel-from-right\
    \ word))\n", "  (let ([word (string-&gt;list word)])\n    (define (consonant?\
    \ c)\n      (member c '(#\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n    (define (vowel? c)\n\
    \      (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (find-vowel word)\n\
    \      (cond [(empty? word) empty]\n            [(consonant? (first word)) (find-vowel\
    \ (rest word))]\n            [(vowel? (first word)) (first word)]\n          \
    \  [else empty]))\n    (define (find-consonant word)\n      (cond [(empty? word)\
    \ empty]\n            [(consonant? (first word)) (first word)]\n            [(vowel?\
    \ (first word)) (find-consonant (rest word))]\n            [else empty]))\n  \
    \  (define (find-closest-vowel word)\n      (cond [(empty? word) empty]\n    \
    \        [(and (consonant? (first word)) (vowel? (second word))) (second word)]\n\
    \            [(and (vowel? (first word)) (consonant? (second word))) (first word)]\n\
    \            [else (find-closest-vowel (rest word))]))\n    (cond [(empty? word)\
    \ empty]\n          [(and (vowel? (first word)) (consonant? (second word))) (first\
    \ word)]\n          [(and (consonant? (first word)) (vowel? (second word))) (second\
    \ word)]\n          [else (find-closest-vowel (rest word))])))\n", "  (let* ([vowels\
    \ \"aeiou\"]\n         [word (string-&gt;list word)]\n         [word (reverse\
    \ word)]\n         [word (filter (lambda (x) (member x vowels)) word)])\n    (if\
    \ (empty? word)\n        \"\"\n        (list-&gt;string word))))\n</code>\n",
  "  (if (string-empty? word)\n      \"\"\n      (let* ([word (string-&gt;list word)]\n\
    \             [vowels (list #\\a #\\e #\\i #\\o #\\u)]\n             [consonants\
    \ (list-difference word vowels)])\n        (if (or (null? consonants)\n      \
    \          (null? (cdr consonants)))\n            \"\"\n            (let* ([consonants\
    \ (reverse consonants)]\n                   [vowels (reverse vowels)]\n      \
    \             [vowel (car (filter (lambda (vowel)\n                          \
    \               (member vowel vowels))\n                                     \
    \  (cdr consonants)))]\n                   [vowel-index (string-index word vowel)])\n\
    \              (if (null? vowel-index)\n                  \"\"\n             \
    \     (string vowel)))))))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first word))\
    \ (is-vowel? (second word))) (first word)]\n      [else (find-closest-vowel (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word))\
    \ empty]\n    [(is-consonant? (first word)) (find-closest-vowel word)]\n    [else\
    \ (find-vowel word)]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\\
    A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\\
    B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\\
    V #\\W #\\X #\\Y #\\Z)])\n    (let loop ([word word] [i (sub1 (string-length word))])\n\
    \      (if (or (zero? i) (member (string-ref word i) vowels))\n          (if (or\
    \ (zero? i) (member (string-ref word i) consonants))\n              (if (member\
    \ (string-ref word (sub1 i)) consonants)\n                  (string (string-ref\
    \ word i))\n                  (loop word (sub1 i)))\n              (loop word\
    \ (sub1 i)))\n          (loop word (sub1 i))))))\n", "  (let ([vowels (list #\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list\
    \ word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty? (rest word))\
    \ \"\"]\n      [(member (first word) vowels) \"\"]\n      [(member (second word)\
    \ vowels) (list->string (second word))]\n      [else (get_closest_vowel (rest\
    \ word))])))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (and (is-consonant? (first word))\n               \
    \  (is-vowel? (second word))\n                 (is-consonant? (third word)))\n\
    \            (second word)\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel word))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)]\n        [word-list (string->list word)])\n    (cond\n\
    \      [(empty? word-list) \"\"]\n      [(member (car word-list) vowels) \"\"\
    ]\n      [(member (cadr word-list) vowels) (list->string (list (cadr word-list)))]\n\
    \      [(member (caddr word-list) vowels) (list->string (list (caddr word-list)))]\n\
    \      [(member (cadddr word-list) vowels) (list->string (list (cadddr word-list)))]\n\
    \      [(member (caddddr word-list) vowels) (list->string (list (caddddr word-list)))]\n\
    \      [(member (cadddddr word-list) vowels) (list->string (list (cadddddr word-list)))]\n\
    \      [else \"\"])))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e\
    \ #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n    (if\
    \ (empty? word)\n        \"\"\n        (if (and (is-consonant? (first word))\n\
    \                 (is-vowel? (second word)))\n            (second word)\n    \
    \        (get-closest-vowel-from-right (rest word)))))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\\
    j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\\
    C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\\
    W #\\X #\\Y #\\Z)])\n    (let loop ([word word] [i (sub1 (string-length word))])\n\
    \      (cond [(or (member (string-ref word i) vowels) (member (string-ref word\
    \ i) consonants))\n             (if (and (member (string-ref word i) vowels) (member\
    \ (string-ref word (sub1 i)) consonants))\n                 (string-ref word i)\n\
    \                 (loop word (sub1 i)))]\n            [else \"\" ]))))\n", " \
    \ (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (if (empty? word)\n        \"\"\n        (if\
    \ (and (is-consonant? (first word))\n                 (is-vowel? (second word)))\n\
    \            (string (second word))\n            (find-closest-vowel (rest word)))))\n\
    \  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n\
    \    (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n \
    \           (first word)\n            (get-closest-vowel-from-right (rest word)))))\n\
    \  (define (get-closest-vowel-from-left word)\n    (if (empty? word)\n       \
    \ \"\"\n        (if (is-vowel? (last word))\n            (last word)\n       \
    \     (get-closest-vowel-from-left (butlast word)))))\n  (define (get-closest-vowel-from-right-to-left\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (is-consonant?\
    \ (first word))\n                 (is-consonant? (second word))\n            \
    \     (is-vowel? (third word)))\n            (third word)\n            (get-closest-vowel-from-right-to-left\
    \ (rest word)))))\n  (define (get-closest-vowel-from-left-to-right word)\n   \
    \ (if (empty? word)\n        \"\"\n        (if (and (is-consonant? (last word))\n\
    \                 (is-consonant? (butlast word))\n                 (is-vowel?\
    \ (butlast (butlast word))))\n            (butlast (butlast word))\n         \
    \   (get-closest-vowel-from-left-to-right (butlast word)))))\n  (cond [(empty?\
    \ word) \"\"]\n        [(is-vowel? (first word)) (first word)]\n        [(is-vowel?\
    \ (last word)) (last word)]\n        [(not (empty? (get-clos", "  (let ([vowels\
    \ (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word-list\
    \ (string->list word)])\n    (if (or (empty? word-list) (empty? (cdr word-list)))\n\
    \        \"\"\n        (let ([last-consonant (last-consonant word-list)]\n   \
    \           [first-vowel (first-vowel word-list)])\n          (if (or (empty?\
    \ last-consonant) (empty? first-vowel))\n              \"\"\n              (let\
    \ ([last-consonant-index (index-of last-consonant word-list)]\n              \
    \      [first-vowel-index (index-of first-vowel word-list)])\n               \
    \ (if (or (empty? last-consonant-index) (empty? first-vowel-index))\n        \
    \            \"\"\n                    (let ([distance (abs (- last-consonant-index\
    \ first-vowel-index))])\n                      (if (or (empty? distance) (= distance\
    \ 0))\n                          \"\"\n                          (let ([closest-vowel\
    \ (find-closest-vowel distance word-list last-consonant-index first-vowel-index)])\n\
    \                            (if (empty? closest-vowel)\n                    \
    \            \"\"\n                                (list->string closest-vowel))))))))))))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [word (string->list word)])\n    (cond\n      [(empty? word) \"\"]\n   \
    \   [(empty? (rest word)) \"\"]\n      [(member (first word) vowels) \"\"]\n \
    \     [(member (first (rest word)) vowels) (first (rest word))]\n      [else (get_closest_vowel\
    \ (rest word))])))\n", "  (let ([vowels (string-&gt;list \"aeiouAEIOU\")]\n  \
    \      [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\
    )])\n    (let loop ([word (string-&gt;list word)]\n               [vowel-positions\
    \ '()])\n      (cond [(empty? word) (list-ref word (car vowel-positions))]\n \
    \           [(member (car word) vowels) (loop (cdr word) (cons (sub1 (length word))\
    \ vowel-positions))]\n            [(member (car word) consonants) (loop (cdr word)\
    \ vowel-positions)]\n            [else (loop (cdr word) vowel-positions)]))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel-from-right\
    \ (rest word))]))\n  (define (find-consonant-from-right word)\n    (cond\n   \
    \   [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant-from-right (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\n\
    \       (if (and (is-consonant? (second word))\n                (is-consonant?\
    \ (third word)))\n           (first word)\n           (find-vowel-between-consonants\
    \ (rest word)))]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) (find-vowel-between-consonants\
    \ (rest word))]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) (second word)]\n    \
    \   [else (find-vowel-between-consonants (rest word))])]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is-vowel? (third word)) empty]\n          [(is-consonant? (third\
    \ word))\n           (find-closest-vowel-between-consonants (rest (rest (rest\
    \ word))))])]\n       [else (find-closest-vowel (rest word))])]\n    [else (find-closest-vowel\
    \ (rest word))]", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\\
    k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\\
    D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\\
    X #\\Y #\\Z)])\n    (let loop ([i (sub1 (string-length word))]\n             \
    \  [vowel-index -1])\n      (cond [(= i -1) (if (= vowel-index -1) \"\" (string-ref\
    \ word vowel-index))]\n            [(member (string-ref word i) vowels) (loop\
    \ (- i 1) i)]\n            [(member (string-ref word i) consonants) (loop (- i\
    \ 1) vowel-index)]\n            [else (loop (- i 1) vowel-index)]))))\n", "  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n       \
    \ [word (string->list word)])\n    (cond\n      [(empty? word) \"\"]\n      [(empty?\
    \ (rest word)) \"\"]\n      [(member (first word) vowels) (get_closest_vowel (rest\
    \ word))]\n      [(member (second word) vowels) (string (second word))]\n    \
    \  [else (get_closest_vowel (rest word))])))\n", "  (let ([vowels (list #\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n        [word (string->list word)])\n\
    \    (let loop ([i (sub1 (length word))])\n      (if (&lt;= i 0)\n          \"\
    \"\n          (if (member (list-ref word i) vowels)\n              (if (and (not\
    \ (member (list-ref word (sub1 i)) vowels))\n                       (not (member\
    \ (list-ref word (add1 i)) vowels)))\n                  (list-&gt;string (list\
    \ (list-ref word i)))\n                  (loop (sub1 i)))\n              (loop\
    \ (sub1 i)))))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
