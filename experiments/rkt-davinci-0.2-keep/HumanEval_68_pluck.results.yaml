name: HumanEval_68_pluck
language: racket
results:
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmr9u9tsp.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4uuwe5e0.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmparul_qsj.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [smallest-even (apply min evens)])\n        (if (empty? evens)\n    \
    \        '()\n            (list smallest-even (index arr smallest-even))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpprcioy10.rkt:35:33: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpprcioy10.rkt:35:33\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([result (pluck (rest arr))])\n                (if (empty?\
    \ result)\n                    '()\n                    (list (first result) (+\
    \ 1 (second result)))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg1g004q2.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg1g004q2.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1_ksdfkc.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp1_ksdfkc.rkt:35:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpexjei0e1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let* ([rest (pluck (rest arr))]\n                     [rest-first\
    \ (first rest)])\n                (cond [(empty? rest) '()]\n                \
    \      [(even? rest-first) (list rest-first (+ 1 (second rest)))]\n          \
    \            [else (list (first arr) 0)]))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0sst_knn.rkt:42:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0sst_knn.rkt:46:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0sst_knn.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      '()\n      (let ([evens (filter even? arr)])\n      \
    \  (if (null? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq9c7k478.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (let ([index (find-index (lambda (x) (= x min-even)) arr)])\n\
    \              (list min-even index))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphxeioxgu.rkt:35:26: find-index: unbound identifier\n  in: find-index\n\
    \  location...:\n   /tmp/tmphxeioxgu.rkt:35:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpowypdpjb.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphrbwsqkz.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpodln7ny6.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiptay4rl.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-list (rest arr))])\n\
    \         (if (and (even? i) (< i min-even))\n             (values i (+ 1 i))\n\
    \             (values min-even min-even-index)))]\n     (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp03mcn_hh.rkt:36:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let loop ([arr arr] [min-even #f] [min-even-index #f])\n    (cond [(empty?\
    \ arr) (if min-even (list min-even min-even-index) '())]\n          [(even? (first\
    \ arr))\n           (if (and min-even (< (first arr) min-even))\n            \
    \   (loop (rest arr) (first arr) 0)\n               (loop (rest arr) min-even\
    \ (+ min-even-index 1)))]\n          [else (loop (rest arr) min-even (+ min-even-index\
    \ 1))])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:42:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:43:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:45:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:46:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:47:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:48:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq09r72ud.rkt:49:4\n\
    \n+: contract violation\n  expected: number?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppp7vlp5a.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (cons (first arr) 0)]\n\
    \    [else (cons (first arr) (add1 (pluck (rest arr))))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:39:4\n\
    actual:     '(4 . 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:40:4\n\nadd1:\
    \ contract violation\n  expected: number?\n  given: '(2 . 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:42:4\n\
    \nadd1: contract violation\n  expected: number?\n  given: '(0 . 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:43:4\n\
    \nadd1: contract violation\n  expected: number?\n  given: '(2 . 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:44:4\n\
    \nadd1: contract violation\n  expected: number?\n  given: '(4 . 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:45:4\n\
    \nadd1: contract violation\n  expected: number?\n  given: '(6 . 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdqjlnxrq.rkt:46:4\n\
    \nadd1: contract violation\n  expected: number?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvgxvlb6n.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw_z852vf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eokl2mo.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcseh857.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfz9t8l9.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min (apply min evens)])\n\
    \              (list min (index-of min arr)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsas4t1ux.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7w8kpjxa.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7w8kpjxa.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnfc1k85y.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (cond [(empty?\
    \ res) (list (first arr) 0)]\n                      [(< (first res) (first arr))\
    \ res]\n                      [else (list (first arr) 0)]))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:42:4\nactual:\
    \     '(1 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:44:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:45:4\nactual:\
    \     '(1 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:46:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:47:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_t9v0_d.rkt:48:4\nactual:\
    \     '(1 0)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([smallest (apply min\
    \ evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxsxv_tka.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpxsxv_tka.rkt:35:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-naturals)])\n \
    \        (if (and (even? (list-ref arr i))\n                  (< (list-ref arr\
    \ i) min-even))\n             (values (list-ref arr i) i)\n             (values\
    \ min-even min-even-index)))]\n       (list min-even min-even-index))]\n    [else\
    \ (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn_lai2a_.rkt:37:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n\
    \    (if (empty? evens)\n        '()\n        (list min-even (index arr min-even)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp13el1wzb.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp13el1wzb.rkt:33:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (even? n)\n    (= (remainder n 2) 0))\n  (define (find-evens arr)\n\
    \    (filter even? arr))\n  (define (find-min-even arr)\n    (apply min (find-evens\
    \ arr)))\n  (define (find-index arr n)\n    (define (find-index-iter arr n i)\n\
    \      (cond\n        [(empty? arr) -1]\n        [(= (first arr) n) i]\n     \
    \   [else (find-index-iter (rest arr) n (+ i 1))]))\n    (find-index-iter arr\
    \ n 0))\n  (define (find-min-even-index arr)\n    (find-index arr (find-min-even\
    \ arr)))\n  (define (find-min-even-index-value arr)\n    (list (find-min-even\
    \ arr) (find-min-even-index arr)))\n  (cond\n    [(empty? arr) '()]\n    [(empty?\
    \ (find-evens arr)) '()]\n    [else (find-min-even-index-value arr)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n\
    \    (if (empty? evens)\n        '()\n        (list min-even (index-of min-even\
    \ arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:42:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa7qsrnh0.rkt:47:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let* ([evens (filter even? arr)]\n         [min-even (apply min evens)])\n\
    \    (if (null? evens)\n        '()\n        (list min-even (index arr min-even)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph1e0__1f.rkt:33:24: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmph1e0__1f.rkt:33:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplh_2iv5_.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ arr min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3h8wfm_1.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index min-even\
    \ arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx9nkqiwz.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpx9nkqiwz.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of arr min-even)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l7friss.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8vwil_x.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphcb_ofd1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (let ([min-even-index (index-of\
    \ min-even arr)])\n            (list min-even min-even-index))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:41:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwogpg4nf.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else\
    \ (list (apply min (filter even? arr)) (index-of (apply min (filter even? arr))\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:39:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:40:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:42:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkwasbsuz.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpf4_mlmyv.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr smallest-even-value smallest-even-index)\n    (cond\
    \ [(empty? arr) (if (zero? smallest-even-value) '() (list smallest-even-value\
    \ smallest-even-index))]\n          [(zero? (modulo (first arr) 2))\n        \
    \   (let ([new-smallest-even-value (if (zero? smallest-even-value) (first arr)\
    \ (min (first arr) smallest-even-value))])\n             (pluck-helper (rest arr)\
    \ new-smallest-even-value smallest-even-index))]\n          [else (pluck-helper\
    \ (rest arr) smallest-even-value (+ smallest-even-index 1))]))\n  (pluck-helper\
    \ arr 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnh197y95.rkt:43:4\n\
    actual:     '(2 2)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnh197y95.rkt:45:4\nactual:\
    \     '(2 2)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnh197y95.rkt:46:4\nactual:\
    \     '()\nexpected:   '(0 3)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnh197y95.rkt:48:4\nactual:     '(6\
    \ 3)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpel5nazj2.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmuaoe6bh.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\nI'm not sure how to return the\
    \ index of the smallest even value.\n\n\nA:\n\nYou can use <code>foldl</code>\
    \ to keep track of the smallest even value and its index, and return the result\
    \ at the end:\n<code>(define (pluck arr)\n  (foldl (lambda (x acc)\n         \
    \  (if (and (even? x)\n                    (or (null? acc)\n                 \
    \       (&lt; x (first acc))))\n               (list x (add1 (second acc)))\n\
    \               acc))\n         '()\n         arr))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpofmb2cfa.rkt:40:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9_0hrrxd.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzal7dz4k.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpzal7dz4k.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_oreu8k.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqnu6jqxp.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp43k1s7i3.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(and (even? (first arr)) (< (first arr)\
    \ min-value))\n       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr)) (= (first arr) min-value))\n       (pluck-helper (rest arr) (+\
    \ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]))\n  (if (empty? arr)\n      (list)\n      (pluck-helper arr 0 100000)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6w9e5cg_.rkt:49:4\n\
    actual:     '(0 4)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6w9e5cg_.rkt:50:4\nactual:\
    \     '(0 2)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6w9e5cg_.rkt:51:4\nactual:\
    \     '(4 3)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6w9e5cg_.rkt:52:4\nactual:\
    \     '(6 2)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6w9e5cg_.rkt:53:4\nactual:\
    \     '(100000 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [smallest (apply min evens)])\n        (if (null? evens)\n           \
    \ '()\n            (list smallest (index-of smallest arr))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7va829yz.rkt:49:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd7ck_spc.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpae8_sjhl.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpae8_sjhl.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (match arr\n    [(list) (list)]\n    [(list x . xs)\n     (let ([evens (filter\
    \ even? arr)])\n       (if (empty? evens)\n           (list)\n           (let\
    \ ([min-even (apply min evens)])\n             (list min-even (index arr min-even))\n\
    \             )\n           )\n       )\n     ]\n    )\n  )\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp28dcq24w.rkt:31:5: match: syntax error in pattern\n  in: (list\
    \ x . xs)\n  location...:\n   /tmp/tmp28dcq24w.rkt:31:5\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:53:11:\
    \ mk\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/match/gen-match.rkt:23:0:\
    \ go\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1w3128v3.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([smallest (apply min\
    \ evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppht_b9lv.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmppht_b9lv.rkt:35:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index arr\
    \ min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy0yvd0xy.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpy0yvd0xy.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (list (first plucked)\
    \ (+ 1 (second plucked)))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53yl2gs6.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp53yl2gs6.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min min-index)\n    (cond\n      [(empty? arr) (if\
    \ (zero? min) '() (list min min-index))]\n      [(even? (first arr)) (if (zero?\
    \ min) (pluck-helper (rest arr) (first arr) 0)\n                             \
    \ (if (< (first arr) min) (pluck-helper (rest arr) (first arr) 0)\n          \
    \                        (pluck-helper (rest arr) min (+ min-index 1))))]\n  \
    \    [else (pluck-helper (rest arr) min (+ min-index 1))]))\n  (pluck-helper arr\
    \ 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpebqyxvou.rkt:46:4\n\
    actual:     '(2 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpebqyxvou.rkt:47:4\nactual:\
    \     '()\nexpected:   '(0 3)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpebqyxvou.rkt:48:4\nactual:     '(4\
    \ 3)\nexpected:   '(4 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpebqyxvou.rkt:49:4\nactual:     '(6\
    \ 2)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7381xbw2.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n\
    \    [else (let ([res (pluck (cdr arr))])\n            (if (empty? res)\n    \
    \            '()\n                (list (car res) (+ 1 (cadr res)))))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2ihfc3u.rkt:42:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf2ihfc3u.rkt:46:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputc6b7v_.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmporysc_i2.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj16f4__6.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1t7vgubz.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpa3zp5x8j.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcn2zfqw.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps88swyvb.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-even-value min-even-index)\n    (cond\n      [(empty?\
    \ arr) (if (zero? min-even-value) '() (list min-even-value min-even-index))]\n\
    \      [(zero? (modulo (first arr) 2)) (if (< (first arr) min-even-value)\n  \
    \                                        (pluck-helper (rest arr) (first arr)\
    \ 0)\n                                          (pluck-helper (rest arr) min-even-value\
    \ (+ min-even-index 1)))]\n      [else (pluck-helper (rest arr) min-even-value\
    \ (+ min-even-index 1))]))\n  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:45:4\n\
    actual:     '(10000 0)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:46:4\nactual:\
    \     '()\nexpected:   '(0 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:47:4\nactual:     '()\n\
    expected:   '(0 3)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:48:4\nactual:     '(4 3)\n\
    expected:   '(4 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:49:4\nactual:     '(6 2)\n\
    expected:   '(6 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmpzdo5dth1.rkt:50:4\nactual:     '(10000\
    \ 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0rq3dr2a.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzmqpxc2z.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv4ruf3no.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4ys7twsn.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpouditjle.rkt:33:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpouditjle.rkt:33:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5y58scgt.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (list (apply min evens)\n              (index-of (apply min evens) arr)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4c7pz9wn.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let* ([rest (pluck (rest arr))]\n                     [rest-first\
    \ (first rest)])\n                (cond [(empty? rest) '()]\n                \
    \      [(even? rest-first) (list rest-first (+ 1 (second rest)))]\n          \
    \            [else (list (first arr) 0)]))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38cz0clz.rkt:42:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38cz0clz.rkt:46:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp38cz0clz.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjg5p9v84.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_va1e9s_.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoyyxggv.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17p2hk0n.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwcygr6jq.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmportkvbef.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmportkvbef.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_tf6uo4k.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgnamra7z.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgv0b54p.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrbef57z.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w8_ueot.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([rest (pluck (rest arr))])\n                (cond [(empty?\
    \ rest) '()]\n                      [(even? (first rest)) (list (first rest) (+\
    \ 1 (second rest)))]\n                      [else (list (first rest) (+ 1 (second\
    \ rest)))]))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d2inykv.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d2inykv.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp760k80l1.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (min evens)])\n        (if (empty? evens)\n            '()\n\
    \            (list min-even (index-of min-even arr))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:42:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:43:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:45:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(0 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:46:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:47:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:48:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(6)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpehnliq3m.rkt:49:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(empty? (filter even? arr)) '()]\n    [else\
    \ (list (apply min (filter even? arr))\n                (index-of (apply min (filter\
    \ even? arr)) arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprsranlp_.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let* ([rest (pluck (rest arr))]\n                     [rest-val\
    \ (first rest)])\n                (cond [(empty? rest) '()]\n                \
    \      [(even? rest-val) (list rest-val (+ 1 (second rest)))]\n              \
    \        [else (list (first arr) 0)]))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplauiv6r6.rkt:42:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplauiv6r6.rkt:46:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplauiv6r6.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8yyt2_fo.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr))\n         (let ([min\
    \ (first arr)])\n           (for ([i (in-range (length arr))])\n             (when\
    \ (and (even? (list-ref arr i))\n                        (< (list-ref arr i) min))\n\
    \               (set! min (list-ref arr i))))\n           (list min (for/first\
    \ ([i (in-range (length arr))])\n                       (when (= (list-ref arr\
    \ i) min)\n                         i))))]\n        [else (pluck (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:46:4\n\
    actual:     '(2 #<void>)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:47:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:49:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:50:4\nactual:\
    \     '(0 #<void>)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:51:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqkgbntmy.rkt:52:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi55n8g3.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppmcnb96_.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2x28vjmf.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond\n      [(empty? arr)\
    \ (list min-value min-index)]\n      [(and (even? (first arr)) (< (first arr)\
    \ min-value))\n       (pluck-helper (rest arr) 0 (first arr))]\n      [(and (even?\
    \ (first arr)) (= (first arr) min-value))\n       (pluck-helper (rest arr) (+\
    \ 1 min-index) min-value)]\n      [else (pluck-helper (rest arr) (+ 1 min-index)\
    \ min-value)]))\n  (pluck-helper arr 10000 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:44:4\n\
    actual:     '(0 10003)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:45:4\nactual:\
    \     '(0 10003)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:46:4\nactual:\
    \     '(0 10000)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:47:4\nactual:\
    \     '(0 10006)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:48:4\nactual:\
    \     '(0 10006)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:49:4\nactual:\
    \     '(0 10005)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:50:4\nactual:\
    \     '(0 10004)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwitk57h.rkt:51:4\nactual:\
    \     '(0 10004)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-naturals 1)])\n\
    \         (if (and (even? (list-ref arr i)) (< (list-ref arr i) min-even))\n \
    \            (values (list-ref arr i) i)\n             (values min-even min-even-index)))]\n\
    \       (list min-even min-even-index))]\n    [else (pluck (rest arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfo041t60.rkt:36:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index arr min))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmqjglymc.rkt:33:21: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpmqjglymc.rkt:33:21\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (if\
    \ (zero? min-value) '() (list min-value min-index))]\n          [(and (even? (first\
    \ arr)) (< (first arr) min-value))\n           (pluck-helper (rest arr) 0 (first\
    \ arr))]\n          [(and (even? (first arr)) (= (first arr) min-value))\n   \
    \        (pluck-helper (rest arr) (+ 1 min-index) min-value)]\n          [else\
    \ (pluck-helper (rest arr) (+ 1 min-index) min-value)]))\n  (pluck-helper arr\
    \ 0 100000))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:45:4\n\
    actual:     '(100000 0)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:46:4\nactual:\
    \     '()\nexpected:   '(0 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:47:4\nactual:     '()\n\
    expected:   '(0 3)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:48:4\nactual:     '(4 3)\n\
    expected:   '(4 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:49:4\nactual:     '(6 2)\n\
    expected:   '(6 1)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2u1ouskx.rkt:50:4\nactual:     '(100000\
    \ 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgpvd237.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgpvd237.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (match arr\n    [(list) (list)]\n    [(list n) (list n 0)]\n    [(list n ns\
    \ ...)\n     (let ([evens (filter even? arr)])\n       (if (empty? evens)\n  \
    \         (list)\n           (let ([min-even (apply min evens)])\n           \
    \  (list min-even (index arr min-even))\n             )\n           )\n      \
    \ )\n     ]\n    )\n  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpndztncv_.rkt:37:29: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpndztncv_.rkt:37:29\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/stxparam.rkt:61:2\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0xixh05t.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7mgolukv.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewxyqr2m.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkk3enen7.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpkk3enen7.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3b6cnvy2.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbgjh7pwx.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpbgjh7pwx.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbe5bbhj.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8fn2ttpv.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk3540vr6.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n\
    \    [else (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfd5jz7as.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq6jnekg4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index arr\
    \ min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn25xbjxn.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpn25xbjxn.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpro8ztn2a.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(even? (first arr))\n           (if (and (not\
    \ (zero? min-value))\n                    (< (first arr) min-value))\n       \
    \        (pluck-helper (rest arr) 0 (first arr))\n               (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value))]\n          [else (pluck-helper (rest\
    \ arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:44:4\n\
    actual:     '(0 3)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:45:4\nactual:\
    \     '(0 3)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:46:4\nactual:\
    \     '(0 0)\nexpected:   '()\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:47:4\nactual:     '(0\
    \ 6)\nexpected:   '(0 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:48:4\nactual:     '(0\
    \ 6)\nexpected:   '(0 3)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:49:4\nactual:     '(0\
    \ 5)\nexpected:   '(4 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:50:4\nactual:     '(0\
    \ 4)\nexpected:   '(6 1)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxc2z95kg.rkt:51:4\nactual:     '(0\
    \ 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe51f2w2j.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr))\n     (let ([min (car\
    \ arr)])\n       (for/fold ([min (car arr)]\n                  [idx 0])\n    \
    \             ([i (in-list (cdr arr))]\n                  [j (in-naturals)])\n\
    \                 (cond\n                   [(even? i)\n                    (if\
    \ (< i min)\n                        (values i (+ 1 j))\n                    \
    \    (values min idx))]\n                   [else (values min idx)])))]\n    [else\
    \ (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:50:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:51:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:53:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:54:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:55:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8wrhvdug.rkt:56:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3k2fs0wf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-list (rest arr))])\n\
    \         (if (and (even? i) (< i min-even))\n             (values i (add1 min-even-index))\n\
    \             (values min-even min-even-index)))]\n     (list min-even min-even-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt6ent953.rkt:36:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) empty]\n    [(even? (first arr)) (list (first arr)\
    \ 0)]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdobkudoa.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8mespyvt.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpidtbjddf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (let ([res (pluck (rest arr))])\n            (if (empty? res)\n   \
    \             '()\n                (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsb1xppa5.rkt:42:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsb1xppa5.rkt:46:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhxr08kc.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index arr\
    \ min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaeur6i7m.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpaeur6i7m.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2st439r8.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2f3cuxtb.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiy5mvf26.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (even? n)\n    (= (remainder n 2) 0))\n  (define (find-evens arr)\n\
    \    (filter even? arr))\n  (define (find-smallest arr)\n    (apply min arr))\n\
    \  (define (find-index arr n)\n    (for/first ([i (in-naturals)]\n           \
    \     [x (in-list arr)])\n      (and (= x n) i)))\n  (define (find-smallest-even\
    \ arr)\n    (find-smallest (find-evens arr)))\n  (define (find-index-of-smallest-even\
    \ arr)\n    (find-index arr (find-smallest-even arr)))\n  (define (find-smallest-even-index\
    \ arr)\n    (list (find-smallest-even arr)\n          (find-index-of-smallest-even\
    \ arr)))\n  (if (empty? arr)\n      '()\n      (find-smallest-even-index arr)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:55:4\n\
    actual:     '(2 #f)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:56:4\nactual:\
    \     '(2 #f)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:58:4\nactual:\
    \     '(0 #f)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:59:4\nactual:\
    \     '(0 #f)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:60:4\nactual:\
    \     '(4 #f)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:61:4\nactual:\
    \     '(6 #f)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpotb14xv1.rkt:62:4\n\nmin:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (list (first plucked)\
    \ (+ 1 (second plucked)))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkhtu8e6k.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkhtu8e6k.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpextyzs8c.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index min-even\
    \ arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvi6l2obi.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpvi6l2obi.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([plucked (pluck (rest arr))])\n                (if (empty?\
    \ plucked)\n                    '()\n                    (list (first plucked)\
    \ (+ 1 (second plucked)))))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglk9geyt.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglk9geyt.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42wfrlb4.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4anhpri6.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (let ([res (pluck (rest arr))])\n            (if (empty? res)\n   \
    \             (list (first arr) 0)\n                (if (even? (first res))\n\
    \                    (if (< (first res) (first arr))\n                       \
    \ res\n                        (list (first arr) 0))\n                    (list\
    \ (first arr) 0))))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:46:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:47:4\nactual:\
    \     '(1 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:49:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:50:4\nactual:\
    \     '(1 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:51:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:52:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0kz2x49z.rkt:53:4\nactual:\
    \     '(7 0)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (let ([min-even-index (index-of min-even arr)])\n  \
    \              (list min-even min-even-index)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5ekpdi8y.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-even\
    \ (first arr)])\n       (for/fold ([min-even-index 0]) ([i (in-naturals)])\n \
    \        (if (and (even? (list-ref arr i)) (< (list-ref arr i) min-even))\n  \
    \           (values (list-ref arr i) i)\n             (values min-even min-even-index)))]\n\
    \       (list min-even min-even-index))]\n    [else (pluck (rest arr))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdcs33xgw.rkt:36:47: read-syntax: missing `)` to close `(` on line\
    \ 32, found instead `]`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest\
    \ (first arr)])\n       (for/fold ([smallest (first arr)]\n                  [index\
    \ 0])\n                 ([i (in-list (rest arr))]\n                  [j (in-range\
    \ 1 (add1 (length arr)))])\n         (cond\n           [(even? i)\n          \
    \  (cond\n              [(< i smallest)\n               (values i j)]\n      \
    \        [else\n               (values smallest index)])]\n           [else\n\
    \            (values smallest index)])))]\n    [else\n     (pluck (rest arr))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:54:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:55:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:57:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:58:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:59:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp8d4w1g6b.rkt:60:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpl16smtf6.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgrgwdx4w.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsxd3jzz2.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min (first\
    \ arr)])\n       (for/fold ([min (first arr)]) ([i (in-list (rest arr))])\n  \
    \       (cond\n           [(even? i)\n            (if (< i min)\n            \
    \    (values i i)\n                (values min min))]\n           [else (values\
    \ min min)])))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:47:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:48:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:50:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:51:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:52:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmpieh22c_m.rkt:53:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn_w10p4e.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest\
    \ (first arr)])\n       (for/fold ([smallest (first arr)]\n                  [index\
    \ 0])\n                 ([i (in-list (rest arr))]\n                  [j (in-naturals)])\n\
    \         (cond\n           [(even? i)\n            (cond\n              [(< i\
    \ smallest)\n               (values i (+ j 1))]\n              [else\n       \
    \        (values smallest index)])]\n           [else\n            (values smallest\
    \ index)])))]\n    [else\n     (pluck (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:54:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:55:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:57:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:58:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:59:4\n\
    \nresult arity mismatch;\n expected number of values not received\n  expected:\
    \ 1\n  received: 2\n--------------------\n--------------------\nERROR\nname: \
    \      check-equal?\nlocation:   /tmp/tmp3e4lhvih.rkt:60:4\n\nresult arity mismatch;\n\
    \ expected number of values not received\n  expected: 1\n  received: 2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4sama6_y.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp75dawx49.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-index\
    \ (first (min-indexes (first arr) arr))])\n       (list (first arr) min-index))]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp71pufufo.rkt:32:30: min-indexes: unbound identifier\n  in: min-indexes\n\
    \  location...:\n   /tmp/tmp71pufufo.rkt:32:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (car arr)) (list (car arr) 0)]\n\
    \    [else (pluck (cdr arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf9va4om8.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3wyo7bot.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcgbndy49.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprpsvggkq.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0b_qh4pf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (null? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n      \
    \       [min-even (apply min evens)])\n        (if (null? evens)\n           \
    \ '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpidb3mwu_.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpidb3mwu_.rkt:35:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tk6sc1o.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (let ([min-even-index (index-of min-even arr)])\n  \
    \              (list min-even min-even-index)))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:43:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhfeyezm.rkt:49:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptq9nfb0k.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (even? n) (= (remainder n 2) 0))\n  (define (smallest-even arr)\n  \
    \  (cond\n      [(empty? arr) #f]\n      [(even? (first arr)) (first arr)]\n \
    \     [else (smallest-even (rest arr))]))\n  (define (index-of-even arr)\n   \
    \ (cond\n      [(empty? arr) #f]\n      [(even? (first arr)) 0]\n      [else (add1\
    \ (index-of-even (rest arr)))]))\n  (define (index-of-smallest-even arr)\n   \
    \ (cond\n      [(empty? arr) #f]\n      [(even? (first arr)) 0]\n      [else (add1\
    \ (index-of-smallest-even (rest arr)))]))\n  (define (index-of-smallest-even-value\
    \ arr)\n    (cond\n      [(empty? arr) #f]\n      [(= (first arr) (smallest-even\
    \ arr)) 0]\n      [else (add1 (index-of-smallest-even-value (rest arr)))]))\n\
    \  (define (index-of-smallest-even-value-with-index arr)\n    (cond\n      [(empty?\
    \ arr) #f]\n      [(= (first arr) (smallest-even arr)) (index-of-even arr)]\n\
    \      [else (add1 (index-of-smallest-even-value-with-index (rest arr)))]))\n\
    \  (cond\n    [(empty? arr) '()]\n    [(not (even? (smallest-even arr))) '()]\n\
    \    [else (list (smallest-even arr) (index-of-smallest-even-value-with-index\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1b4rum8n.rkt:65:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1b4rum8n.rkt:69:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1b4rum8n.rkt:72:4\n\nremainder:\
    \ contract violation\n  expected: integer?\n  given: #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2ng99k3.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([smallest-even-index\
    \ (find-smallest-even-index arr)])\n       (list (list-ref arr smallest-even-index)\
    \ smallest-even-index))]\n    [else (pluck (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp624joll2.rkt:32:33: find-smallest-even-index: unbound identifier\n\
    \  in: find-smallest-even-index\n  location...:\n   /tmp/tmp624joll2.rkt:32:33\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1w2hhhnv.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else\n     (let* ([rest (pluck (rest arr))]\n            [rest-val (first\
    \ rest)])\n       (cond\n         [(empty? rest) (list (first arr) 0)]\n     \
    \    [(even? (first arr)) (list (min (first arr) rest-val) 0)]\n         [else\
    \ (list rest-val (add1 (second rest)))]))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp281y0v7.rkt:45:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp281y0v7.rkt:49:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp281y0v7.rkt:52:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4jg22t0_.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (let ([res (pluck (rest arr))])\n                (if (empty? res)\n\
    \                    '()\n                    (list (first res) (+ 1 (second res)))))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpybc_96l4.rkt:41:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpybc_96l4.rkt:45:4\nactual:\
    \     '(2 1)\nexpected:   '(0 3)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index arr\
    \ min-even))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb4ce0v91.rkt:33:26: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpb4ce0v91.rkt:33:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([smallest (apply min\
    \ evens)])\n              (list smallest (index arr smallest)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpue9xk59b.rkt:35:30: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpue9xk59b.rkt:35:30\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min (apply min evens)])\n\
    \              (list min (index arr min)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfkey8ree.rkt:35:25: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpfkey8ree.rkt:35:25\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min (apply min evens)])\n\
    \              (list min (index-of min arr)))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb6smbb8.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc1fu34t7.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp82xoaom4.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdce_usdj.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcqfm9dj5.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpft9mn3yf.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr))\n     (let ([min-index\
    \ 0]\n           [min-value (first arr)])\n       (for ([i (in-range (add1 (length\
    \ arr)))]\n             #:when (even? (list-ref arr i)))\n         (when (< (list-ref\
    \ arr i) min-value)\n           (set! min-index i)\n           (set! min-value\
    \ (list-ref arr i))))\n       (list min-value min-index))]\n    [else (pluck (rest\
    \ arr))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list ))\
    \ (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n   \
    \ (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:47:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(4 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:48:4\n\
    \nlist-ref: index too large for list\n  index: 2\n  in: '(2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:50:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(0 3 0 4 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:51:4\n\
    \nlist-ref: index too large for list\n  index: 5\n  in: '(2 3 0 5 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:52:4\n\
    \nlist-ref: index too large for list\n  index: 4\n  in: '(4 8 4 8)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqamw5tpo.rkt:53:4\n\
    \nlist-ref: index too large for list\n  index: 3\n  in: '(6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (if\
    \ (even? min-value) (list min-value min-index) '())]\n          [(even? (first\
    \ arr)) (if (< min-value (first arr))\n                                   (pluck-helper\
    \ (rest arr) (+ min-index 1) (first arr))\n                                  \
    \ (pluck-helper (rest arr) min-index min-value))]\n          [else (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 100000))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:42:4\n\
    actual:     '(100000 1)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:43:4\nactual:\
    \     '(100000 2)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:44:4\nactual:\
    \     '(100000 0)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:45:4\nactual:\
    \     '(100000 2)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:46:4\nactual:\
    \     '(100000 4)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:47:4\nactual:\
    \     '(100000 1)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:48:4\nactual:\
    \     '(100000 3)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5d6d761.rkt:49:4\nactual:\
    \     '(100000 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpimdu4nfo.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpimdu4nfo.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\nI'm not sure how to get the index\
    \ of the smallest even value.\n\n\nA:\n\nYou can use <code>foldl</code> to iterate\
    \ over the list and keep track of the current smallest even value and its index.\n\
    <code>(define (pluck arr)\n  (foldl (lambda (i x acc)\n           (if (and (even?\
    \ x)\n                    (or (null? acc)\n                        (&lt; x (first\
    \ acc))))\n               (list x i)\n               acc))\n         '()\n   \
    \      arr))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0_ikvssv.rkt:40:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmptqwxcqld.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5vfkv22p.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmp5vfkv22p.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoeol4nxq.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal? (candidate\
    \ (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list\
    \ 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0\
    \ 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n\
    \    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate\
    \ (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzf0r_weg.rkt:32:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpzf0r_weg.rkt:32:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0daws8ui.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmp0daws8ui.rkt:35:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of arr min))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdwpziwki.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (define (pluck-helper arr min-index min-value)\n    (cond [(empty? arr) (list\
    \ min-value min-index)]\n          [(even? (first arr))\n           (if (= min-value\
    \ (first arr))\n               (pluck-helper (rest arr) (+ min-index 1) min-value)\n\
    \               (if (< min-value (first arr))\n                   (pluck-helper\
    \ (rest arr) (+ min-index 1) min-value)\n                   (pluck-helper (rest\
    \ arr) (+ min-index 1) (first arr))))]\n          [else (pluck-helper (rest arr)\
    \ (+ min-index 1) min-value)]))\n  (pluck-helper arr 0 100000))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:45:4\n\
    actual:     '(2 3)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:46:4\nactual:\
    \     '(2 3)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:47:4\nactual:\
    \     '(100000 0)\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:48:4\nactual:\
    \     '(0 6)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:49:4\nactual:\
    \     '(0 6)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:50:4\nactual:\
    \     '(4 5)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:51:4\nactual:\
    \     '(6 4)\nexpected:   '(6 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo_gwme9n.rkt:52:4\nactual:\
    \     '(100000 4)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (for/list ([n arr] #:when (even?\
    \ n)) n)])\n        (if (empty? evens)\n            '()\n            (let ([min-even\
    \ (apply min evens)])\n              (list min-even (index-of min-even arr)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp31caxbpf.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_wlspoz.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min (apply min evens)])\n          (list min (index-of min arr))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n\
    \    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal?\
    \ (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list\
    \ 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list\
    \ 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8il5fuv.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (let ([evens (filter even? arr)])\n    (if (empty? evens)\n        '()\n   \
    \     (let ([min-even (apply min evens)])\n          (list min-even (index-of\
    \ min-even arr))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3)) (list 2 1))\n\
    \    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2)) (list 0\
    \ 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n    (check-equal?\
    \ (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal? (candidate (list\
    \ 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7 9 7 1)) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:40:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:41:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:44:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp91jk3ift.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let* ([evens (filter even? arr)]\n     \
    \        [min-even (apply min evens)])\n        (if (empty? evens)\n         \
    \   '()\n            (list min-even (index arr min-even))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmh38vmht.rkt:35:28: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpmh38vmht.rkt:35:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (if (empty? arr)\n      '()\n      (let ([evens (filter even? arr)])\n     \
    \   (if (empty? evens)\n            '()\n            (let ([min-even (apply min\
    \ evens)])\n              (list min-even (index-of min-even arr)))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate pluck))\n    (check-equal?\
    \ (candidate (list 4 2 3)) (list 2 1))\n    (check-equal? (candidate (list 1 2\
    \ 3)) (list 2 1))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 5 0 3 0 4 2)) (list 0 1))\n    (check-equal? (candidate (list\
    \ 1 2 3 0 5 3)) (list 0 3))\n    (check-equal? (candidate (list 5 4 8 4 8)) (list\
    \ 4 1))\n    (check-equal? (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal?\
    \ (candidate (list 7 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:42:4\n\
    \nindex-of: contract violation\n  expected: list?\n  given: 2\n  argument position:\
    \ 1st\n  other arguments...:\n   '(4 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:43:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 2\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:45:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 0 3 0 4 2)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:46:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 0\n  argument position: 1st\n\
    \  other arguments...:\n   '(1 2 3 0 5 3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:47:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 4\n  argument position: 1st\n\
    \  other arguments...:\n   '(5 4 8 4 8)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxv3a_g5.rkt:48:4\n\nindex-of:\
    \ contract violation\n  expected: list?\n  given: 6\n  argument position: 1st\n\
    \  other arguments...:\n   '(7 6 7 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond\n    [(empty? arr) '()]\n    [(even? (first arr)) (list (first arr) 0)]\n\
    \    [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:39:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:40:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:42:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:43:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:44:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqnex81pm.rkt:45:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; \"Given an array representing a branch of a tree that\
    \ has non-negative integer nodes\n;; your task is to pluck one of the nodes and\
    \ return it.\n;; The plucked node should be the node with the smallest even value.\n\
    ;; If multiple nodes with the same smallest even value are found return the node\
    \ that has smallest index.\n;; The plucked node should be returned in a list,\
    \ [ smalest_value, its index ],\n;; If there are no even values or the given array\
    \ is empty, return [].\n;; Example 1:\n;; Input: [4,2,3]\n;; Output: [2, 1]\n\
    ;; Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
    ;; Example 2:\n;; Input: [1,2,3]\n;; Output: [2, 1]\n;; Explanation: 2 has the\
    \ smallest even value, and 2 has the smallest index. \n;; Example 3:\n;; Input:\
    \ []\n;; Output: []\n;; Example 4:\n;; Input: [5, 0, 3, 0, 4, 2]\n;; Output: [0,\
    \ 1]\n;; Explanation: 0 is the smallest value, but  there are two zeros,\n;; so\
    \ we will choose the first zero, which has the smallest index.\n;; Constraints:\n\
    ;; * 1 <= nodes.length <= 10000\n;; * 0 <= node.value\n(define (pluck arr)\n \
    \ (cond [(empty? arr) '()]\n        [(even? (first arr)) (list (first arr) 0)]\n\
    \        [else (pluck (rest arr))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate pluck))\n    (check-equal? (candidate (list 4 2 3))\
    \ (list 2 1))\n    (check-equal? (candidate (list 1 2 3)) (list 2 1))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 5 0 3 0 4 2))\
    \ (list 0 1))\n    (check-equal? (candidate (list 1 2 3 0 5 3)) (list 0 3))\n\
    \    (check-equal? (candidate (list 5 4 8 4 8)) (list 4 1))\n    (check-equal?\
    \ (candidate (list 7 6 7 1)) (list 6 1))\n    (check-equal? (candidate (list 7\
    \ 9 7 1)) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:38:4\n\
    actual:     '(4 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:39:4\nactual:\
    \     '(2 0)\nexpected:   '(2 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:41:4\nactual:\
    \     '(0 0)\nexpected:   '(0 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:42:4\nactual:\
    \     '(2 0)\nexpected:   '(0 3)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:43:4\nactual:\
    \     '(4 0)\nexpected:   '(4 1)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvkh3y2yx.rkt:44:4\nactual:\
    \     '(6 0)\nexpected:   '(6 1)\n--------------------\n"
  exit_code: 0
  status: Exception
