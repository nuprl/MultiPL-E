language: racket
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphzdl49t5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27av8p76.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy7z7ly3v.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc034ekfv.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_sg_4gco.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwitvnacs.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfterd7f7.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp03re2cld.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwnu3dozn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1zi9vpl_.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1qym9idr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphv2zxq54.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpff0sjoyx.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpui_kbnit.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm323frt2.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaua0_ol6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqzrfbo4.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjhzcb815.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyu6dbyj7.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcz2dx61b.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvbixo1l.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf3dmz6r8.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz16mniuf.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxdt0eg2h.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpffzg9oo5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsusoplfz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsfptfdo.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz8xtd_nl.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu6ykjivd.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx7bu_e95.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpemxrxkr3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpba917ybc.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1oy02n84.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsryxofh4.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplvvazqw5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbufbe7mu.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5v29blg8.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp35cg_vqu.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppjxwmcfy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnj4p87bu.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11gbv72v.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiabbqyjd.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpazqdudtj.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdmlrqu5v.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpogarx3j3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0ey77noe.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpso5qa_94.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpconkuhav.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvczoepol.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3090xgdz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt_1vkhy9.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmr2_o_cn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjimav06d.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2awhdvjy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiux1it36.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb0k_jqbt.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqo0g0xce.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7_76hwr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9_759ha9.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpory96929.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8z_7u40s.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr_nwafdf.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv7kovcwy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpehdh_rty.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6u13afaz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilpx7vy3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpesu1s1l5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppj5w6k4t.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8e3z8zkz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp17sl0pt0.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5c_c5zff.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr2awxj2b.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4gvkn59u.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_2snlvv.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplew3s3xo.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix?\
    \ prefix x)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxj578pr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp40np3fx5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzbihh95p.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3llhprug.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp898_0sr8.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd83dq9iu.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpik0zvk7z.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp36omv1ah.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxc7tkt1e.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzm0xkwr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprmkeoju2.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgqxxbvp_.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6pdz8phi.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7r1qjkw5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpldc5uq34.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwaty5t1y.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2mcqny8k.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc9rj37bc.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2zlcelr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzy0d3txt.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_f2hemep.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkh2x9wao.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsc5grrk3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnsiwmij3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps8lm4939.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaqobtluq.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbgk6im0u.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpia2aoo2l.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp83ocspao.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqx2l05fi.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsiogtnnn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt21vd2qq.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp94ybbsvn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi9f2w0bw.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxziw218.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgd02b3uf.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsr2ydxgz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph8o0mysr.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99tsuzqy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6hlspccy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppcqerjz_.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqnxdrvci.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9umnorlz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgit23qq9.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyvp1r_v5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprnc175jh.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6iopbwgd.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqiqk07i1.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_w2ynw22.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa48bne_h.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp82xes1tt.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1t3syesw.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdzg_o80a.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpww8i9dt7.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcbxchl8a.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcgzjqfei.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc5sm536k.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz79r5eqv.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeup844xw.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsq_aafkj.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3_islh_z.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqqfotgrs.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqf_clbs_.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqbf3ih5l.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp04tjo7m1.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcbha0wlq.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0gsj_4gq.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg2dp97o6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqhljo7al.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm6o_i7ex.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx7vho42v.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpez57akqt.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpli4tv9l7.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa_bwsqz4.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2tti47wp.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpma2irvd2.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptqg0e1fc.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprlt1elw0.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp5aytwkf.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7l66vzpb.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa6df9y_c.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (x) (string-prefix?\
    \ prefix x)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqr1m2cey.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqm3pjk5d.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpltknmaci.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplxfc7mwa.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbei9x2xc.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkkjgdpsx.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk13z831p.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd6f9i2mn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkjh7c7zh.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyyidup1c.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdno0ejyy.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (string) (string-prefix?\
    \ prefix string)) strings))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list\
    \ ) \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"\
    xxy\" \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"\
    ))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoj7vmixp.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (str) (string-prefix?\
    \ prefix str)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7p0iyxop.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb07zx84p.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpot6nsci1.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwer6kh4w.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp9_pm7gg.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7h_iolso.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmper8s5e5c.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp99pnirv6.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr7cbnq1l.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp87759ep2.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprqigo8vz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptrscy5ka.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0woawko4.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmembr6ne.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp013tc4th.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoavljfgp.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmxv6foi9.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6e_q_u_.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3nzencn5.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4xtqdsy0.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n```\n\n## [`filter_by_suffix`](https://github.com/jkitchin/scimax-org/blob/master/scimax-org-babel-python.org#filter_by_suffix)\n\
    \n```python\n#lang python\n\n# Filter an input list of strings only for ones that\
    \ end with a given suffix.\n# >>> filter_by_suffix([], 'a')\n# []\n# >>> filter_by_suffix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['array']\ndef filter_by_suffix(strings, suffix):\n\
    \    return [s for s in strings if s.endswith(suffix)]\n```\n\n## [`filter_by_suffix`](https://github.com/jkitchin/scimax-org/blob/master/scimax-org-babel-racket.org#filter_by_suffix)\n\
    \n```racket\n#lang racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp39wghb9w.rkt:12:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp09dsbenn.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp5u50kc8.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp451oypst.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpelydu80e.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpae6_9c76.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl2kc73nd.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkxfsi_nd.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg30t6cri.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptuoy0i34.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe07b5_s3.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Filter an input list of strings only for ones that\
    \ start with a given prefix.\n;; >>> filter_by_prefix([], 'a')\n;; []\n;; >>>\
    \ filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n;; ['abc', 'array']\n\
    (define (filter_by_prefix strings prefix)\n  (filter (lambda (s) (string-prefix?\
    \ prefix s)) strings))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate filter_by_prefix))\n    (check-equal? (candidate (list )\
    \ \"john\") (list ))\n    (check-equal? (candidate (list \"xxx\" \"asd\" \"xxy\"\
    \ \"john doe\" \"xxxAAA\" \"xxx\") \"xxx\") (list \"xxx\" \"xxxAAA\" \"xxx\"))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd53o3uwz.rkt:17:4

    actual:     ''("xxx" "xxx")

    expected:   ''("xxx" "xxxAAA" "xxx")

    --------------------

    '
  stdout: ''
