language: racket
name: HumanEval_145_order_by_points
results:
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4_m_5mnd.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4_m_5mnd.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgyskst1m.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgyskst1m.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps7wlavjr.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps7wlavjr.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (cond\n                   [(< x-sum y-sum) #t]\n               \
    \    [(> x-sum y-sum) #f]\n                   [(< x y) #t]\n                 \
    \  [(> x y) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2golkhts.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2golkhts.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps73rqtg5.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps73rqtg5.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkm7hcg1p.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkm7hcg1p.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphksg5ta3.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphksg5ta3.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp6xb_3w3.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp6xb_3w3.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index-of nums x) (index-of nums\
    \ y)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp7been1e.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp7been1e.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (if (= a-sum b-sum)\n                     (< (index nums a) (index\
    \ nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgno5jhn2.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgno5jhn2.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp6hmkook.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp6hmkook.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (n1 n2)\n               (<\
    \ (sum-digits n1) (sum-digits n2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7_dcr3u2.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7_dcr3u2.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps87smfcz.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmps87smfcz.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of nums a) (index-of nums\
    \ b)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpckh54wmb.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpckh54wmb.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprcgfb1b_.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprcgfb1b_.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy9_4cyoh.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy9_4cyoh.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (cond\n                   [(< x-sum y-sum) #t]\n               \
    \    [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv6dce15e.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv6dce15e.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5nmiba2r.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5nmiba2r.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index-of x nums) (index-of\
    \ y nums))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9qewx471.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9qewx471.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of a nums) (index-of b nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuw5y_4z9.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpuw5y_4z9.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (num)\n               (cons\
    \ num (sum-digits num)))\n             nums)\n        (lambda (a b)\n        \
    \  (or (< (cdr a) (cdr b))\n              (and (= (cdr a) (cdr b))\n         \
    \          (< (car a) (car b)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl_lbrnfh.rkt:12:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpl_lbrnfh.rkt:12:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (if\
    \ (= (sum-digits x) (sum-digits y))\n                   (< (index-of x nums) (index-of\
    \ y nums))\n                   (< (sum-digits x) (sum-digits y))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgjh8raog.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgjh8raog.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (cond\n                   [(< x-sum y-sum) #t]\n               \
    \    [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpys2_w7ky.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpys2_w7ky.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (if\
    \ (= (sum-digits a) (sum-digits b))\n                   (< (index-of nums a) (index-of\
    \ nums b))\n                   (< (sum-digits a) (sum-digits b))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi4h4bmei.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpi4h4bmei.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppa_vq6e1.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppa_vq6e1.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (or (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits x)\
    \ (sum-digits y))\n                   (< (index-of nums x) (index-of nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl5wmmhe9.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpl5wmmhe9.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (or (< (sum-digits\
    \ x) (sum-digits y))\n                           (and (= (sum-digits x) (sum-digits\
    \ y))\n                                (< (index-of x nums) (index-of y nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo7rxysjn.rkt:11:30: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo7rxysjn.rkt:11:30\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index-of x nums) (index-of y nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5p7nn1vm.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5p7nn1vm.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpluzhb2n8.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpluzhb2n8.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< (index nums a) (index nums\
    \ b))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4crp0tae.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4crp0tae.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index-of nums x) (index-of\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzywrd3wh.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzywrd3wh.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (or (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits x)\
    \ (sum-digits y))\n                   (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqlgpijhu.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqlgpijhu.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b) (&lt; (sum-digits a)\
    \ (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpckgf25ly.rkt:11:22: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 13\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqyd9pkqv.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqyd9pkqv.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp15epe6m_.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp15epe6m_.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1jvi5_n6.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1jvi5_n6.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgs04chn2.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgs04chn2.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (num)\n               (cons\
    \ num (sum-digits num)))\n             nums)\n        (lambda (a b)\n        \
    \  (or (< (cdr a) (cdr b))\n              (and (= (cdr a) (cdr b))\n         \
    \          (< (car a) (car b)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt8kgabsr.rkt:12:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpt8kgabsr.rkt:12:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (or (< x-sum y-sum)\n                     (and (= x-sum y-sum)\n\
    \                          (< (index nums x) (index nums y))))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnxo4i9il.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnxo4i9il.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw03tu6s6.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpw03tu6s6.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index nums x) (index\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo4vhns9u.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo4vhns9u.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppexacodf.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppexacodf.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplr34xu55.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplr34xu55.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_mt2zly4.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_mt2zly4.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp03w4yjhm.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp03w4yjhm.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw10u615h.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpw10u615h.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond\n                   [(> x-sum y-sum) #t]\n               \
    \    [(< x-sum y-sum) #f]\n                   [else (< (index-of nums x) (index-of\
    \ nums y))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9cobxgc2.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9cobxgc2.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkc_29sci.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkc_29sci.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (if (= a-sum b-sum)\n                     (< (index nums a) (index\
    \ nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr1ike763.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr1ike763.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4z111pcq.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4z111pcq.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptl6p8ef9.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmptl6p8ef9.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphumbxvlv.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphumbxvlv.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzblp214t.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzblp214t.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (cond\n\
    \                 [(< (sum-digits a) (sum-digits b)) #t]\n                 [(>\
    \ (sum-digits a) (sum-digits b)) #f]\n                 [else (< (index-of nums\
    \ a) (index-of nums b))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbwcltvj5.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpbwcltvj5.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo9jrrzof.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo9jrrzof.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (cons x (sum-digits x)))\
    \ nums)\n        (lambda (x y)\n          (cond\n            [(< (cdr x) (cdr\
    \ y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n            [(< (car x) (car\
    \ y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfdcdq5yg.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfdcdq5yg.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfrvi1ssw.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfrvi1ssw.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2_fpirok.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2_fpirok.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index nums x) (index\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_y6mjt_1.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_y6mjt_1.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (or (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits x)\
    \ (sum-digits y))\n                   (< (index-of x nums) (index-of y nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsi8bpvbl.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpsi8bpvbl.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpp032818j.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpp032818j.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond\n                   [(> x-sum y-sum) #t]\n               \
    \    [(< x-sum y-sum) #f]\n                   [else (< (index-of x nums) (index-of\
    \ y nums))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe9d2r0hp.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpe9d2r0hp.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n              (let\
    \ ([x-sum (sum-digits x)]\n                    [y-sum (sum-digits y)])\n     \
    \           (cond\n                  [(< x-sum y-sum) #t]\n                  [(>\
    \ x-sum y-sum) #f]\n                  [(< x y) #t]\n                  [(> x y)\
    \ #f]\n                  [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp48mutgr5.rkt:12:28: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp48mutgr5.rkt:12:28\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5fgjmbrw.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5fgjmbrw.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond [(< a-sum b-sum) #t]\n                       [(> a-sum b-sum)\
    \ #f]\n                       [(< a b) #t]\n                       [(> a b) #f]\n\
    \                       [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe76haq52.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpe76haq52.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b) (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzemk7h6o.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpzemk7h6o.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgudkfp9b.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgudkfp9b.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n                 \
    \  [(> a b) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjk9clann.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjk9clann.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (cond\n\
    \                 [(< (sum-digits a) (sum-digits b)) #t]\n                 [(>\
    \ (sum-digits a) (sum-digits b)) #f]\n                 [else (< (index-of nums\
    \ a) (index-of nums b))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphawzztlx.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmphawzztlx.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpslwymzrl.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpslwymzrl.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x)\n               (list\
    \ x (sum-digits x)))\n             nums)\n        (lambda (x y)\n          (cond\n\
    \            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n\
    \            [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n\
    \            [else #f]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7izbujx9.rkt:12:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7izbujx9.rkt:12:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmmp3whb9.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmmp3whb9.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1pzfg4hj.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1pzfg4hj.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (n1 n2)\n               (<\
    \ (sum-digits n1) (sum-digits n2)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp66mv42q7.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp66mv42q7.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd5fcuboh.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpd5fcuboh.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< (index-of nums a) (index-of\
    \ nums b))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11\
    \ -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463\
    \ 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145\
    \ 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxjgg4oeb.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxjgg4oeb.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc4uj8fu_.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpc4uj8fu_.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprd6gck41.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprd6gck41.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< (index nums a) (index nums\
    \ b))])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy5rpd81a.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy5rpd81a.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (n) (cons n (sum-digits n)))\
    \ nums)\n        (lambda (a b)\n          (cond\n            [(< (cdr a) (cdr\
    \ b)) #t]\n            [(> (cdr a) (cdr b)) #f]\n            [(< (car a) (car\
    \ b)) #t]\n            [(> (car a) (car b)) #f]\n            [else #f]))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7ezys6x7.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7ezys6x7.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplw4zlwq8.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplw4zlwq8.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (if (= a-sum b-sum)\n                     (< (index-of nums a) (index-of\
    \ nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy571_gy8.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpy571_gy8.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpysonsl9k.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpysonsl9k.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprq67o5lq.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprq67o5lq.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index-of x nums) (index-of y nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0kac32ix.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0kac32ix.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(> a-sum b-sum) #t]\n               \
    \    [(< a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4bjv_90x.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4bjv_90x.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of a nums) (index-of b nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprfduh6l_.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprfduh6l_.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpppwpqd6f.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpppwpqd6f.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfybxymu_.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpfybxymu_.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8viuspac.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp8viuspac.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0ep3az9o.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp0ep3az9o.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n                 \
    \  [(> a b) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4al1asqw.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4al1asqw.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (cond\n                   [(> x-sum y-sum) #t]\n               \
    \    [(< x-sum y-sum) #f]\n                   [else (< x y)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyujkrnio.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyujkrnio.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (cond\n\
    \                 [(< (sum-digits a) (sum-digits b)) #t]\n                 [(>\
    \ (sum-digits a) (sum-digits b)) #f]\n                 [else (< (index-of nums\
    \ a) (index-of nums b))]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpalja7hyp.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpalja7hyp.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprui7uu6x.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprui7uu6x.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (cons x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3hul0pf3.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3hul0pf3.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of nums a) (index-of nums\
    \ b)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv_7a51yb.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv_7a51yb.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppfl7gzvb.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppfl7gzvb.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw657qe1k.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpw657qe1k.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9ej4nrjt.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9ej4nrjt.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (list x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr1ltojl7.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr1ltojl7.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits b)])\n   \
    \         (if (= a-sum b-sum)\n                (< (index nums a) (index nums b))\n\
    \                (< a-sum b-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaj6zimn9.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpaj6zimn9.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond ((> x-sum y-sum) #t)\n                       ((< x-sum y-sum)\
    \ #f)\n                       (else (< (index nums x) (index nums y))))))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz5oddax7.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpz5oddax7.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of nums a) (index-of nums\
    \ b)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpixbm_7hj.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpixbm_7hj.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of a nums) (index-of b nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmixf9vhu.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmixf9vhu.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (or (< (sum-digits a) (sum-digits b))\n              (and (= (sum-digits a)\
    \ (sum-digits b))\n                   (< (index-of nums a) (index-of nums b)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprxdica2q.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprxdica2q.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkm_x9zq6.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkm_x9zq6.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx78dat1p.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpx78dat1p.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (cond\n\
    \                 [(= (sum-digits a) (sum-digits b))\n                  (< (index-of\
    \ nums a) (index-of nums b))]\n                 [else\n                  (< (sum-digits\
    \ a) (sum-digits b))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7p04cfoq.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp7p04cfoq.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (list x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (< (cadr x) (cadr y)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpo2_u1p0m.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpo2_u1p0m.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp260anh0g.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp260anh0g.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_l86vee0.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_l86vee0.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg486m1rk.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpg486m1rk.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5o1fe2g8.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp5o1fe2g8.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (or (< (sum-digits x) (sum-digits y))\n              (and (= (sum-digits x)\
    \ (sum-digits y))\n                   (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplmi07xir.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplmi07xir.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond [(< a-sum b-sum) #t]\n                       [(> a-sum b-sum)\
    \ #f]\n                       [(< a b) #t]\n                       [(> a b) #f]\n\
    \                       [else #f])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwhwo8o11.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwhwo8o11.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (if\
    \ (= (sum-digits a) (sum-digits b))\n                   (< a b)\n            \
    \       (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp80f2ynxb.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp80f2ynxb.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeg8l314m.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpeg8l314m.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (cond\n\
    \                 [(< (sum-digits x) (sum-digits y)) #t]\n                 [(>\
    \ (sum-digits x) (sum-digits y)) #f]\n                 [else (< (index nums x)\
    \ (index nums y))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1 11\
    \ -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234\
    \ 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423\
    \ 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list ))\n\
    \    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98\
    \ -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11))\
    \ (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76\
    \ -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd4bp90my.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpd4bp90my.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98ap4jcd.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp98ap4jcd.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n                 \
    \  [(> a b) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoj94at4s.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpoj94at4s.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (if (= x-sum y-sum)\n                     (< (index nums x) (index\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_kxfsqxi.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp_kxfsqxi.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits b)])\n   \
    \         (cond\n              [(> a-sum b-sum) #t]\n              [(< a-sum b-sum)\
    \ #f]\n              [else (< a b)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp73wbvh4f.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp73wbvh4f.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4bcf4te0.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4bcf4te0.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond ((> x-sum y-sum) #t)\n                       ((< x-sum y-sum)\
    \ #f)\n                       ((= x-sum y-sum) (< x y)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiqkr2brx.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpiqkr2brx.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2nh77n6s.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2nh77n6s.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (if (= x-sum y-sum)\n                     (< (index-of nums x) (index-of\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6fra9rau.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6fra9rau.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprymgyffr.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprymgyffr.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits b)])\n   \
    \         (cond\n              [(< a-sum b-sum) #t]\n              [(> a-sum b-sum)\
    \ #f]\n              [(< a b) #t]\n              [(> a b) #f]\n              [else\
    \ #f])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmeki49ev.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmeki49ev.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdfq5uk77.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdfq5uk77.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (if\
    \ (= (sum-digits x) (sum-digits y))\n                   (< (index nums x) (index\
    \ nums y))\n                   (< (sum-digits x) (sum-digits y))))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpf8axtljz.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpf8axtljz.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (or\
    \ (< (sum-digits a) (sum-digits b))\n                   (and (= (sum-digits a)\
    \ (sum-digits b))\n                        (< (index-of nums a) (index-of nums\
    \ b)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4r6a661f.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4r6a661f.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n                 \
    \  [(> a b) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8qzgqlt1.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp8qzgqlt1.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n              (or\
    \ (< (sum-digits x) (sum-digits y))\n                  (and (= (sum-digits x)\
    \ (sum-digits y))\n                       (< (index-of nums x) (index-of nums\
    \ y)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpix6tkznq.rkt:12:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpix6tkznq.rkt:12:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx6o_rdv1.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpx6o_rdv1.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp85acev__.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp85acev__.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits b)])\n   \
    \         (cond\n              [(> a-sum b-sum) #t]\n              [(< a-sum b-sum)\
    \ #f]\n              [else (< a b)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg8w_prg9.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpg8w_prg9.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (if (= (sum-digits a) (sum-digits b))\n              (< a b)\n            \
    \  (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnlda43at.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnlda43at.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdhi5yefc.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdhi5yefc.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index nums x) (index nums y)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz2_akksq.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpz2_akksq.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpah9p0hc7.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpah9p0hc7.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (or (and (positive?\
    \ x) (negative? y))\n                           (and (positive? x) (positive?\
    \ y) (< (sum-digits x) (sum-digits y)))\n                           (and (negative?\
    \ x) (negative? y) (> (sum-digits x) (sum-digits y)))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkihv155y.rkt:12:64: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkihv155y.rkt:12:64\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (cond\n\
    \                 [(= (sum-digits x) (sum-digits y))\n                  (< (index\
    \ nums x) (index nums y))]\n                 [else\n                  (< (sum-digits\
    \ x) (sum-digits y))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2aoskxht.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2aoskxht.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (n) (cons n (sum-digits n)))\
    \ nums)\n        (lambda (a b)\n          (cond\n            [(< (cdr a) (cdr\
    \ b)) #t]\n            [(> (cdr a) (cdr b)) #f]\n            [(< (car a) (car\
    \ b)) #t]\n            [(> (car a) (car b)) #f]\n            [else #f]))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplnmlcdaj.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmplnmlcdaj.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpno87_3jr.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpno87_3jr.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm6dl5o3_.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm6dl5o3_.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (cons x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (< (cdr x) (cdr y)))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu9mfg3rz.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpu9mfg3rz.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj3zvirpg.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpj3zvirpg.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n   \
    \         (cond\n              [(> x-sum y-sum) #t]\n              [(< x-sum y-sum)\
    \ #f]\n              [else (< x y)])))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxoo6lev4.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpxoo6lev4.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4wx70hf4.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp4wx70hf4.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiuqigyyw.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpiuqigyyw.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [(< a b) #t]\n                 \
    \  [(> a b) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9t51othv.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9t51othv.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmeo13lmp.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpmeo13lmp.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaum7dlub.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpaum7dlub.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (cond\n\
    \                 [(= (sum-digits a) (sum-digits b))\n                  (< (index\
    \ nums a) (index nums b))]\n                 [else\n                  (< (sum-digits\
    \ a) (sum-digits b))]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list 1\
    \ 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv4wcqsre.rkt:13:22: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv4wcqsre.rkt:13:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyyqpyd4d.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyyqpyd4d.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (or (< (sum-digits a) (sum-digits b))\n              (and (= (sum-digits a)\
    \ (sum-digits b))\n                   (< (index-of a nums) (index-of b nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2ik__csj.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2ik__csj.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpam9qtjf6.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpam9qtjf6.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv1p4hdi9.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpv1p4hdi9.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort (map (lambda (x) (cons x (sum-digits x)))\
    \ nums)\n        (lambda (x y) (or (< (cdr x) (cdr y))\n                     \
    \     (and (= (cdr x) (cdr y))\n                               (< (car x) (car\
    \ y)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpem5gx4yv.rkt:11:34: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpem5gx4yv.rkt:11:34\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjf7x0z4r.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpjf7x0z4r.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond\n                   [(< x-sum y-sum) #t]\n               \
    \    [(> x-sum y-sum) #f]\n                   [(< x y) #t]\n                 \
    \  [(> x y) #f]\n                   [else #f])))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnaqup90v.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnaqup90v.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond [(< a-sum b-sum) #t]\n                       [(> a-sum b-sum)\
    \ #f]\n                       [(= a-sum b-sum) (< a b)])))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6tds5i8s.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp6tds5i8s.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp51uc5z4s.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp51uc5z4s.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppmg7mji2.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmppmg7mji2.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n   \
    \         (if (= x-sum y-sum)\n                (< (index nums x) (index nums y))\n\
    \                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpha1tx6je.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpha1tx6je.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2a_y_3a1.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp2a_y_3a1.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (or\
    \ (< (sum-digits x) (sum-digits y))\n                   (and (= (sum-digits x)\
    \ (sum-digits y))\n                        (< (index-of nums x) (index-of nums\
    \ y)))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptpjfwa0v.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmptpjfwa0v.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (if (= a-sum b-sum)\n                     (< (index nums a) (index\
    \ nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdnijz1xo.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdnijz1xo.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n   \
    \         (if (= x-sum y-sum)\n                (< (index nums x) (index nums y))\n\
    \                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwss5h9na.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwss5h9na.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b) (< (sum-digits a) (sum-digits\
    \ b)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm_06ovqn.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpm_06ovqn.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n   \
    \         (if (= x-sum y-sum)\n                (< (index nums x) (index nums y))\n\
    \                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdq38vt6e.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdq38vt6e.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (if\
    \ (= (sum-digits a) (sum-digits b))\n                   (< a b)\n            \
    \       (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9iz9mfnn.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9iz9mfnn.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (let ([a-sum (sum-digits a)]\n                [b-sum (sum-digits b)])\n   \
    \         (cond\n              [(< a-sum b-sum) #t]\n              [(> a-sum b-sum)\
    \ #f]\n              [(< a b) #t]\n              [(> a b) #f]\n              [else\
    \ #f])))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpusir57kx.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpusir57kx.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvqsbpbny.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvqsbpbny.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvhsriyew.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvhsriyew.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (let ([x-sum (sum-digits x)]\n                [y-sum (sum-digits y)])\n   \
    \         (if (= x-sum y-sum)\n                (< (index nums x) (index nums y))\n\
    \                (< x-sum y-sum))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvga38all.rkt:13:24: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpvga38all.rkt:13:24\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (cond\n            [(= (sum-digits a) (sum-digits b))\n             (< (index-of\
    \ nums a) (index-of nums b))]\n            [(< (sum-digits a) (sum-digits b))\
    \ #t]\n            [else #f]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnhu4d3hf.rkt:14:17: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnhu4d3hf.rkt:14:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp39qdagnn.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp39qdagnn.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnpdmwh9m.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnpdmwh9m.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprpo8pauz.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmprpo8pauz.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyqmtqnna.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyqmtqnna.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (cond\n                   [(< a-sum b-sum) #t]\n               \
    \    [(> a-sum b-sum) #f]\n                   [else (< a b)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn767gags.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpn767gags.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y) (< (sum-digits x) (sum-digits\
    \ y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ order_by_points))\n    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list\
    \ -1 -11 1 -12 11))\n    (check-equal? (candidate (list 1234 423 463 145 2 423\
    \ 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56\
    \ 463 3457))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11\
    \ 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6 6 -76 -21 23 4)) (list\
    \ -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqp6t89p5.rkt:11:26: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpqp6t89p5.rkt:11:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgkgml5kg.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpgkgml5kg.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwyjq119a.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpwyjq119a.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (x y)\n        \
    \  (< (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpir8vmwk7.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpir8vmwk7.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt5argqon.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpt5argqon.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr0r0u5xl.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpr0r0u5xl.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp23ec3wvn.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp23ec3wvn.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkztx4osa.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpkztx4osa.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (let\
    \ ([a-sum (sum-digits a)]\n                     [b-sum (sum-digits b)])\n    \
    \             (if (= a-sum b-sum)\n                     (< (index nums a) (index\
    \ nums b))\n                     (< a-sum b-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpuztqq5tz.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpuztqq5tz.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (if (= x-sum y-sum)\n                     (< (index nums x) (index\
    \ nums y))\n                     (< x-sum y-sum))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3kw63zqw.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3kw63zqw.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (x y)\n               (<\
    \ (sum-digits x) (sum-digits y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdcw4mkls.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpdcw4mkls.rkt:12:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (a b)\n               (if\
    \ (= (sum-digits a) (sum-digits b))\n                   (< a b)\n            \
    \       (< (sum-digits a) (sum-digits b))))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate order_by_points))\n    (check-equal?\
    \ (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal?\
    \ (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0\
    \ 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2\
    \ -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1\
    \ 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate\
    \ (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1lpjzare.rkt:12:23: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp1lpjzare.rkt:12:23\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (or (< (sum-digits a) (sum-digits b))\n              (and (= (sum-digits a)\
    \ (sum-digits b))\n                   (< (index-of a nums) (index-of b nums)))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjyb5gbw.rkt:13:18: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpnjyb5gbw.rkt:13:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ((x-sum (sum-digits x))\n                     (y-sum (sum-digits y)))\n    \
    \             (cond ((> x-sum y-sum) #t)\n                       ((< x-sum y-sum)\
    \ #f)\n                       (else (< (index-of nums x) (index-of nums y))))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyn3fughu.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmpyn3fughu.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums\n        (lambda (a b)\n        \
    \  (< (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9_iqgmww.rkt:13:14: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp9_iqgmww.rkt:13:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (lambda (x y)\n               (let\
    \ ([x-sum (sum-digits x)]\n                     [y-sum (sum-digits y)])\n    \
    \             (cond\n                   [(< x-sum y-sum) #t]\n               \
    \    [(> x-sum y-sum) #f]\n                   [else (< x y)])))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate order_by_points))\n\
    \    (check-equal? (candidate (list 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n\
    \    (check-equal? (candidate (list 1234 423 463 145 2 423 423 53 6 37 3457 3\
    \ 56 0 46)) (list 0 2 3 6 53 423 423 423 1234 145 37 46 56 463 3457))\n    (check-equal?\
    \ (candidate (list )) (list ))\n    (check-equal? (candidate (list 1 -11 -32 43\
    \ 54 -98 2 -3)) (list -3 -32 -98 -11 1 2 43 54))\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 6 7 8 9 10 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal?\
    \ (candidate (list 0 6 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptkw7laxi.rkt:12:29: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmptkw7laxi.rkt:12:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function which sorts the given list of integers\n\
    ;; in ascending order according to the sum of their digits.\n;; Note: if there\
    \ are several items with similar sum of their digits,\n;; order them based on\
    \ their index in original list.\n;; For example:\n;; >>> order_by_points([1, 11,\
    \ -1, -11, -12]) == [-1, -11, 1, -12, 11]\n;; >>> order_by_points([]) == []\n\
    (define (order_by_points nums)\n  (sort nums (\u03BB (a b)\n               (<\
    \ (sum-digits a) (sum-digits b)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate order_by_points))\n    (check-equal? (candidate (list\
    \ 1 11 -1 -11 -12)) (list -1 -11 1 -12 11))\n    (check-equal? (candidate (list\
    \ 1234 423 463 145 2 423 423 53 6 37 3457 3 56 0 46)) (list 0 2 3 6 53 423 423\
    \ 423 1234 145 37 46 56 463 3457))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -11 -32 43 54 -98 2 -3)) (list -3 -32\
    \ -98 -11 1 2 43 54))\n    (check-equal? (candidate (list 1 2 3 4 5 6 7 8 9 10\
    \ 11)) (list 1 10 2 11 3 4 5 6 7 8 9))\n    (check-equal? (candidate (list 0 6\
    \ 6 -76 -21 23 4)) (list -76 -21 0 4 23 6 6))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3wilt1al.rkt:12:19: sum-digits: unbound identifier\n  in: sum-digits\n\
    \  location...:\n   /tmp/tmp3wilt1al.rkt:12:19\n"
  stdout: ''
