name: HumanEval_57_monotonic
language: racket
results:
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjaq29fkc.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjaq29fkc.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpjaq29fkc.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjaq29fkc.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpen_8_x3t.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpen_8_x3t.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpen_8_x3t.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpen_8_x3t.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf_kv14zx.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf_kv14zx.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf_kv14zx.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf_kv14zx.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wn3inhb.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0wn3inhb.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0wn3inhb.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0wn3inhb.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and\
    \ (< (first l) (second l)) (monotonic (rest l)))\n             (and (> (first\
    \ l) (second l)) (monotonic (rest l)))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9ywb12vc.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9ywb12vc.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9ywb12vc.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9ywb12vc.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_q79fe6.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq_q79fe6.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpq_q79fe6.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq_q79fe6.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpznzqocd7.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpznzqocd7.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpznzqocd7.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpznzqocd7.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqcn7uu2x.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqcn7uu2x.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqcn7uu2x.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqcn7uu2x.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoje28iba.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoje28iba.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpoje28iba.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoje28iba.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3k74_dx_.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3k74_dx_.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3k74_dx_.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3k74_dx_.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and\
    \ (< (first l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second\
    \ l)) (monotonic (rest l)))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy49dd69i.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy49dd69i.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy49dd69i.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy49dd69i.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvoq8xifg.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvoq8xifg.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvoq8xifg.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvoq8xifg.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwqho_elk.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwqho_elk.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyk28szla.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpyk28szla.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphd7vdvv6.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphd7vdvv6.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmphd7vdvv6.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmphd7vdvv6.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4ke46_22.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4ke46_22.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4ke46_22.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4ke46_22.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpetvy270w.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpetvy270w.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpetvy270w.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpetvy270w.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwkxgplvf.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwkxgplvf.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1zi7wt4v.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1zi7wt4v.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1zi7wt4v.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1zi7wt4v.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_qqrg66n.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_qqrg66n.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_qqrg66n.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_qqrg66n.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(and (< (car\
    \ l) (cadr l)) (monotonic (cdr l))) #t]\n    [(and (> (car l) (cadr l)) (monotonic\
    \ (cdr l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfb_daegy.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfb_daegy.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfb_daegy.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfb_daegy.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwgamuldb.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwgamuldb.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptp7_mekp.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptp7_mekp.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptp7_mekp.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptp7_mekp.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqajqdqat.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqajqdqat.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqajqdqat.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqajqdqat.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmv7u_qag.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmv7u_qag.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmv7u_qag.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmv7u_qag.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp84xyyy53.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp84xyyy53.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp84xyyy53.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp84xyyy53.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing l)]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ l)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf6ny_ra_.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpf6ny_ra_.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and\
    \ (positive? (first l)) (positive? (sub1 (first l))))\n         (and (negative?\
    \ (first l)) (negative? (sub1 (first l)))))\n     (monotonic (rest l))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpncsqd787.rkt:24:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpncsqd787.rkt:25:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpncsqd787.rkt:27:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpncsqd787.rkt:28:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpncsqd787.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvl_aukwc.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvl_aukwc.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvl_aukwc.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvl_aukwc.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first\
    \ l) (second l)) (monotonic-dec (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic-inc (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc29udfc0.rkt:13:35: monotonic-dec: unbound identifier\n  in: monotonic-dec\n\
    \  location...:\n   /tmp/tmpc29udfc0.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h3bhugg.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_h3bhugg.rkt:27:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfy8p3any.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpfy8p3any.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (<= (first l) (second\
    \ l)))]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n     \
    \     (>= (first l) (second l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrhg_3ho.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrhg_3ho.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdrhg_3ho.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdrhg_3ho.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdrhg_3ho.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdrhg_3ho.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxcvhyzf6.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxcvhyzf6.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxcvhyzf6.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(< (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0qknq27k.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0qknq27k.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0qknq27k.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwikd5e3y.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwikd5e3y.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplsxh771q.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplsxh771q.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmplsxh771q.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphlw9a79n.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmphlw9a79n.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpacjwcgd9.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpacjwcgd9.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing l)]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ l)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpceemt0_z.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpceemt0_z.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjakgxumr.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjakgxumr.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l)\n    (cond\n      [(empty? l) #t]\n     \
    \ [(empty? (rest l)) #t]\n      [(< (first l) (second l)) (monotonic-helper (rest\
    \ l))]\n      [(> (first l) (second l)) (monotonic-helper (rest l))]\n      [else\
    \ #f]))\n  (monotonic-helper l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8r1mf4he.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8r1mf4he.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8r1mf4he.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8r1mf4he.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpphisjmyx.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpphisjmyx.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpphisjmyx.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpphisjmyx.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslw_ln8d.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpslw_ln8d.rkt:27:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (< (second l) (third l))))]\n        [(>\
    \ (first l) (second l))\n         (and (monotonic (rest l))\n              (or\
    \ (empty? (rest (rest l)))\n                  (> (second l) (third l))))]\n  \
    \      [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphdpl_jg2.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmphdpl_jg2.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjgddenbs.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjgddenbs.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf3qnohgi.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpf3qnohgi.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_n7tm4nb.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_n7tm4nb.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_n7tm4nb.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_n7tm4nb.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l increasing)\n    (cond\n      [(empty? l)\
    \ true]\n      [(empty? (rest l)) true]\n      [(and increasing (or (> (first\
    \ l) (second l)) (= (first l) (second l))))\n       (monotonic-helper (rest l)\
    \ increasing)]\n      [(and (not increasing) (or (< (first l) (second l)) (= (first\
    \ l) (second l))))\n       (monotonic-helper (rest l) increasing)]\n      [else\
    \ false]))\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n   \
    \ [(> (first l) (second l)) (monotonic-helper (rest l) #f)]\n    [(< (first l)\
    \ (second l)) (monotonic-helper (rest l) #t)]\n    [else true]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl0x57mk3.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl0x57mk3.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpl0x57mk3.rkt:35:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl0x57mk3.rkt:36:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl0x57mk3.rkt:38:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuuwg8xk8.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuuwg8xk8.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuuwg8xk8.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuuwg8xk8.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ssz5wgo.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2ssz5wgo.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2ssz5wgo.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2ssz5wgo.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2be8ohs7.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2be8ohs7.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp2be8ohs7.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2be8ohs7.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpezvu84c6.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpezvu84c6.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeapmjshr.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeapmjshr.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpeapmjshr.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeapmjshr.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (< (second l) (third l))))]\n        [(>\
    \ (first l) (second l))\n         (and (monotonic (rest l))\n              (or\
    \ (empty? (rest (rest l)))\n                  (> (second l) (third l))))]\n  \
    \      [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc4uy9uiq.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc4uy9uiq.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (apply > (rest l)))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (apply\
    \ < (rest l)))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbb5d4peg.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbb5d4peg.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3e8kpgbe.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3e8kpgbe.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3e8kpgbe.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3e8kpgbe.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (and (monotonic (rest l)) (<= (first l) (second l)))]\n    [(<\
    \ (first l) (second l)) (and (monotonic (rest l)) (>= (first l) (second l)))]\n\
    \    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgyg73zj.rkt:23:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxgyg73zj.rkt:24:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxgyg73zj.rkt:26:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxgyg73zj.rkt:27:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgyg73zj.rkt:29:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxgyg73zj.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpctm9jlv3.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpctm9jlv3.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpctm9jlv3.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpctm9jlv3.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn0a2gfzk.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpn0a2gfzk.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing l)]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ l)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2w7_svz_.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp2w7_svz_.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuc8__zwu.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuc8__zwu.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpuc8__zwu.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuc8__zwu.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (and (first l) (second\
    \ l)))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n     \
    \     (and (first l) (second l)))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:27:4\n\
    actual:     2\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:28:4\nactual:     2\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:29:4\nactual:     20\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp181m8mj3.rkt:30:4\nactual:     1\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:32:4\nactual:     2\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp181m8mj3.rkt:33:4\nactual:     2\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp181m8mj3.rkt:34:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-dec (rest l))]\n    [(< (first l) (second l)) (monotonic-inc\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwhwyg1yo.rkt:14:31: monotonic-dec: unbound identifier\n  in: monotonic-dec\n\
    \  location...:\n   /tmp/tmpwhwyg1yo.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpagms9oko.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpagms9oko.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp71t1rmf3.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp71t1rmf3.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgoxcv013.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgoxcv013.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgoxcv013.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgoxcv013.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjm9nebur.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjm9nebur.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0qkuqv5n.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp0qkuqv5n.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgyd3xgth.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgyd3xgth.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgyd3xgth.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgyd3xgth.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7wsbhr7h.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp7wsbhr7h.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5dnqlfap.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5dnqlfap.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp5dnqlfap.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5dnqlfap.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpewglnd1r.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpewglnd1r.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofiw2hsi.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpofiw2hsi.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpofiw2hsi.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpofiw2hsi.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2mhioi0r.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2mhioi0r.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiaknix3j.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpiaknix3j.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l)) (not (member (first l) (rest\
    \ l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l)) (not (member\
    \ (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkzh75b4w.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkzh75b4w.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpkzh75b4w.rkt:32:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else false]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07tj8dgn.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp07tj8dgn.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp07tj8dgn.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp07tj8dgn.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprn9pl483.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmprn9pl483.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6cekaq1v.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6cekaq1v.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6cekaq1v.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6cekaq1v.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpml0zspd8.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpml0zspd8.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpml0zspd8.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpml0zspd8.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprdrxuxg_.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprdrxuxg_.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprdrxuxg_.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprdrxuxg_.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpirw91syg.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpirw91syg.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt_jg1p0b.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt_jg1p0b.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpt_jg1p0b.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt_jg1p0b.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt0z3r79m.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt0z3r79m.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpryplcb2n.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpryplcb2n.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwbj3woua.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwbj3woua.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else false]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppcuuciq9.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmppcuuciq9.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxq8zysib.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxq8zysib.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxq8zysib.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnjyfe7pa.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpnjyfe7pa.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and\
    \ (positive? (first l))\n              (positive? (sub1 (first l))))\n       \
    \  (and (negative? (first l))\n              (negative? (sub1 (first l)))))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9bmmbvhk.rkt:26:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9bmmbvhk.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9bmmbvhk.rkt:29:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9bmmbvhk.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9bmmbvhk.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (= (first\
    \ l) (first (rest l)))\n         (< (first l) (first (rest l)))\n         (> (first\
    \ l) (first (rest l))))\n     (monotonic (rest l))]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr1uytgdv.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr1uytgdv.rkt:30:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxkzr6tol.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxkzr6tol.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwokcqad7.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwokcqad7.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else true]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi_6adomq.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpi_6adomq.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppvisghpt.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmppvisghpt.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-dec (rest l))]\n    [(< (first l) (second l)) (monotonic-inc\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfa5nxs_6.rkt:14:31: monotonic-dec: unbound identifier\n  in: monotonic-dec\n\
    \  location...:\n   /tmp/tmpfa5nxs_6.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpytr87thp.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpytr87thp.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpytr87thp.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpytr87thp.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf7gogf1u.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf7gogf1u.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpf7gogf1u.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf7gogf1u.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (< (second l) (third l))))]\n        [(>\
    \ (first l) (second l))\n         (and (monotonic (rest l))\n              (or\
    \ (empty? (rest (rest l)))\n                  (> (second l) (third l))))]\n  \
    \      [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpikxv5lz8.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpikxv5lz8.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmn24rheg.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmn24rheg.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmn24rheg.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmn24rheg.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71mqyope.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp71mqyope.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp71mqyope.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp71mqyope.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4k7k5m7i.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4k7k5m7i.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4k7k5m7i.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp17zie9_e.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp17zie9_e.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp17zie9_e.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp17zie9_e.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (monotonic (rest l))]\n    [(> (first l) (second l))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvj5p0fw4.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvj5p0fw4.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpvj5p0fw4.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvj5p0fw4.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprffdvtg9.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprffdvtg9.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmprffdvtg9.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprffdvtg9.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0ved54s3.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0ved54s3.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0ved54s3.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0ved54s3.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (every (lambda (x)\
    \ (< (first l) x)) (rest l)))]\n    [(> (first l) (second l))\n     (and (monotonic\
    \ (rest l))\n          (every (lambda (x) (> (first l) x)) (rest l)))]\n    [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa1tvl6ly.rkt:16:11: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpa1tvl6ly.rkt:16:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7jf9_d84.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7jf9_d84.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp7jf9_d84.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7jf9_d84.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkk1rhj0v.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpkk1rhj0v.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3un0lqfa.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3un0lqfa.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3un0lqfa.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3un0lqfa.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(null? l) #t]\n        [(null? (cdr l)) #t]\n        [(> (car l)\
    \ (cadr l)) (monotonic (cdr l))]\n        [(< (car l) (cadr l)) (monotonic (cdr\
    \ l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdfvb12n.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsdfvb12n.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsdfvb12n.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsdfvb12n.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe9x24_gi.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpe9x24_gi.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and\
    \ (< (first l) (second l)) (monotonic (rest l)))\n         (and (> (first l) (second\
    \ l)) (monotonic (rest l)))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxeiluj7s.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxeiluj7s.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxeiluj7s.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxeiluj7s.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpllsdcs0c.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpllsdcs0c.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpllsdcs0c.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpllsdcs0c.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l)\n     #t]\n    [(empty? (rest l))\n     #t]\n \
    \   [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (for/and\
    \ ([x (in-list (rest l))])\n            (< (first l) x)))]\n    [(> (first l)\
    \ (second l))\n     (and (monotonic (rest l))\n          (for/and ([x (in-list\
    \ (rest l))])\n            (> (first l) x)))]\n    [else\n     #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3vsb2kg.rkt:34:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw3vsb2kg.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpw3vsb2kg.rkt:39:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqlxxp43t.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqlxxp43t.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6zxztxk2.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6zxztxk2.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6zxztxk2.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6zxztxk2.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy7yur15l.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy7yur15l.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpy7yur15l.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy7yur15l.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0u4wcwb7.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0u4wcwb7.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0u4wcwb7.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0u4wcwb7.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz4swg8i0.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpz4swg8i0.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (apply < (rest l)))]\n\
    \    [(> (first l) (second l))\n     (and (monotonic (rest l))\n          (apply\
    \ > (rest l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj7klawis.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj7klawis.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing l)]\n    [(< (first l) (second l)) (monotonic-increasing\
    \ l)]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpei32zwuv.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpei32zwuv.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (define (monotonic-helper l)\n    (cond\n      [(empty? l) #t]\n     \
    \ [(empty? (rest l)) #t]\n      [(> (first l) (second l)) (monotonic-helper (rest\
    \ l))]\n      [(< (first l) (second l)) (monotonic-helper (rest l))]\n      [else\
    \ #f]))\n  (monotonic-helper l))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsl06y7ou.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsl06y7ou.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsl06y7ou.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsl06y7ou.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfgcslxph.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfgcslxph.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpfgcslxph.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfgcslxph.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (and (not (empty?\
    \ (rest (rest l))))\n               (or (< (second l) (third l))\n           \
    \        (= (second l) (third l)))))]\n    [(> (first l) (second l))\n     (and\
    \ (monotonic (rest l))\n          (and (not (empty? (rest (rest l))))\n      \
    \         (or (> (second l) (third l))\n                   (= (second l) (third\
    \ l)))))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10))\
    \ #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppg5e_ss6.rkt:31:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppg5e_ss6.rkt:32:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmppg5e_ss6.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppg5e_ss6.rkt:35:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppg5e_ss6.rkt:37:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppg5e_ss6.rkt:38:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (apply < (rest\
    \ l)))]\n        [(> (first l) (second l))\n         (and (monotonic (rest l))\n\
    \              (apply > (rest l)))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwnjq8c_j.rkt:30:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwnjq8c_j.rkt:33:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqw8dfwa4.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqw8dfwa4.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpqw8dfwa4.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqw8dfwa4.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8ahlzaic.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8ahlzaic.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8ahlzaic.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8ahlzaic.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1qw4a7i0.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1qw4a7i0.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp1qw4a7i0.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1qw4a7i0.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe7x_dbw0.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe7x_dbw0.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpe7x_dbw0.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe7x_dbw0.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (monotonic (rest l))]\n    [(> (first l) (second l))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi1rf7oul.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi1rf7oul.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpi1rf7oul.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi1rf7oul.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (not (member\
    \ (first l) (rest l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (not (member (first l) (rest l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiz4vcacd.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpiz4vcacd.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpiz4vcacd.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (not (member\
    \ (first l) (rest l))))]\n        [(> (first l) (second l))\n         (and (monotonic\
    \ (rest l))\n              (not (member (first l) (rest l))))]\n        [else\
    \ #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal?\
    \ (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10))\
    \ #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv1q30vza.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv1q30vza.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpv1q30vza.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (or (monotonic-increasing l)\n      (monotonic-decreasing l)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6wi70w8y.rkt:11:7: monotonic-increasing: unbound identifier\n \
    \ in: monotonic-increasing\n  location...:\n   /tmp/tmp6wi70w8y.rkt:11:7\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzfu6gof1.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzfu6gof1.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpzfu6gof1.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzfu6gof1.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0wu11grx.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0wu11grx.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp0wu11grx.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0wu11grx.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdw3yz7xn.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpdw3yz7xn.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l))\n         (and (monotonic (rest l))\n              (or (empty?\
    \ (rest (rest l)))\n                  (< (second l) (third l))))]\n        [(>\
    \ (first l) (second l))\n         (and (monotonic (rest l))\n              (or\
    \ (empty? (rest (rest l)))\n                  (> (second l) (third l))))]\n  \
    \      [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n\
    \    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8vks_fhl.rkt:32:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8vks_fhl.rkt:35:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxvupndwk.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxvupndwk.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxvupndwk.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxvupndwk.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (and (empty? (rest\
    \ (rest l))) #t))]\n    [(> (first l) (second l))\n     (and (monotonic (rest\
    \ l))\n          (and (empty? (rest (rest l))) #t))]\n    [else #f]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwv3dzvv5.rkt:27:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwv3dzvv5.rkt:28:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwv3dzvv5.rkt:30:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwv3dzvv5.rkt:31:4\nactual:     #f\nexpected:   #t\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwv3dzvv5.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwv3dzvv5.rkt:34:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpabhdm5pq.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpabhdm5pq.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpabhdm5pq.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpabhdm5pq.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmx9jxr3i.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmx9jxr3i.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpmx9jxr3i.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmx9jxr3i.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpirlmy78n.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpirlmy78n.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpirlmy78n.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpirlmy78n.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwmhy2yr8.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwmhy2yr8.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwmhy2yr8.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwmhy2yr8.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbauka0or.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbauka0or.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpbauka0or.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbauka0or.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9hdy4586.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9hdy4586.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp9hdy4586.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9hdy4586.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(null? (cdr l)) #t]\n        [(< (car\
    \ l) (cadr l))\n         (and (monotonic (cdr l))\n              (not (member\
    \ (car l) (cdr l))))]\n        [(> (car l) (cadr l))\n         (and (monotonic\
    \ (cdr l))\n              (not (member (car l) (cdr l))))]\n        [else #f]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxjzlryn5.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxjzlryn5.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpxjzlryn5.rkt:33:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6d3hhd6v.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6d3hhd6v.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp6d3hhd6v.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6d3hhd6v.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt1h1spov.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpt1h1spov.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpt1h1spov.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt1h1spov.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l)\
    \ (second l)) (monotonic-increasing (rest l))]\n        [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu8wztwoi.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpu8wztwoi.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpj6plsf76.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpj6plsf76.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpj6plsf76.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj6plsf76.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (or\
    \ (< (first l) (second l)) (> (first l) (second l)))\n          (monotonic (rest\
    \ l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcuykby8b.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcuykby8b.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpcuykby8b.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcuykby8b.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuge8sxfm.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpuge8sxfm.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l) (second\
    \ l)) (monotonic-increasing (rest l))]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpofavmbl6.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpofavmbl6.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6k5v5jk6.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp6k5v5jk6.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1du_eys_.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1du_eys_.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsyty2b70.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsyty2b70.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpsyty2b70.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsyty2b70.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp815ejy87.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp815ejy87.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp815ejy87.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp815ejy87.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgk73z8ma.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgk73z8ma.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgk73z8ma.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgk73z8ma.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpukcjlsze.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpukcjlsze.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpukcjlsze.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpukcjlsze.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic (rest l))]\n        [(< (first l) (second l))\
    \ (monotonic (rest l))]\n        [else false]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8c5m5j_u.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8c5m5j_u.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8c5m5j_u.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8c5m5j_u.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp99ssjwgf.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp99ssjwgf.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn040y9md.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn040y9md.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpn040y9md.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn040y9md.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(or (and\
    \ (< (first l) (second l)) (monotonic (rest l)))\n             (and (> (first\
    \ l) (second l)) (monotonic (rest l)))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_gg8_3w.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv_gg8_3w.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpv_gg8_3w.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpv_gg8_3w.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (every < (rest l)))]\n\
    \    [(< (first l) (second l))\n     (and (monotonic (rest l))\n          (every\
    \ > (rest l)))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy0d007l6.rkt:16:11: every: unbound identifier\n  in: every\n  location...:\n\
    \   /tmp/tmpy0d007l6.rkt:16:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-dec (rest l))]\n    [(< (first l) (second l)) (monotonic-inc\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7qolywug.rkt:14:31: monotonic-dec: unbound identifier\n  in: monotonic-dec\n\
    \  location...:\n   /tmp/tmp7qolywug.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpo87d21id.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpo87d21id.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpo87d21id.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpo87d21id.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h02xx7a.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_h02xx7a.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_h02xx7a.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwogiu2_s.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwogiu2_s.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpwogiu2_s.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwogiu2_s.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp46pmgpiv.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp46pmgpiv.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_cf1d1zp.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_cf1d1zp.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp_cf1d1zp.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_cf1d1zp.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(or (and\
    \ (< (first l) (second l))\n              (monotonic (rest l)))\n         (and\
    \ (> (first l) (second l))\n              (monotonic (rest l))))\n     #t]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptdc6x3ap.rkt:28:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptdc6x3ap.rkt:30:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptdc6x3ap.rkt:31:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptdc6x3ap.rkt:33:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpidb6stq9.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpidb6stq9.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(< (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(> (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu6nas000.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpu6nas000.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpu6nas000.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpu6nas000.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv_bflnd7.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv_bflnd7.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4wglxzkf.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4wglxzkf.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4wglxzkf.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4wglxzkf.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n        [(and (>= (first l)\
    \ (second l)) (monotonic (rest l))) #t]\n        [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk093aksw.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk093aksw.rkt:27:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) true]\n        [(empty? (rest l)) true]\n        [(>\
    \ (first l) (second l)) (monotonic-decreasing (rest l))]\n        [(< (first l)\
    \ (second l)) (monotonic-increasing (rest l))]\n        [else false]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n\
    \    (check-equal? (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 4 20)) #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n \
    \   (check-equal? (candidate (list 4 1 0 -10)) #t)\n    (check-equal? (candidate\
    \ (list 4 1 1 0)) #t)\n    (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n\
    \    (check-equal? (candidate (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate\
    \ (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp92j5fku9.rkt:13:35: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmp92j5fku9.rkt:13:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8l9wfgw8.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8l9wfgw8.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8l9wfgw8.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8l9wfgw8.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk7d5qtd5.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk7d5qtd5.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpk7d5qtd5.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk7d5qtd5.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpb4ffnqmm.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpb4ffnqmm.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpb4ffnqmm.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpb4ffnqmm.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl28ps001.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl28ps001.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpl28ps001.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpl28ps001.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8hllfz7b.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8hllfz7b.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp8hllfz7b.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8hllfz7b.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpck82oqki.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpck82oqki.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptpais69b.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptpais69b.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptpais69b.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptpais69b.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyoye130q.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyoye130q.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpyoye130q.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyoye130q.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (monotonic (rest l))]\n    [(> (first l) (second l))\n\
    \     (monotonic (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d50qz0m.rkt:27:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3d50qz0m.rkt:29:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp3d50qz0m.rkt:30:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3d50qz0m.rkt:32:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (or (empty? (rest\
    \ (rest l)))\n              (< (second l) (third l))))]\n    [(> (first l) (second\
    \ l))\n     (and (monotonic (rest l))\n          (or (empty? (rest (rest l)))\n\
    \              (> (second l) (third l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg_qowac0.rkt:33:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpg_qowac0.rkt:36:4\nactual:     #f\n\
    expected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpps_yjjt8.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpps_yjjt8.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpz2_a9zky.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpz2_a9zky.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpz2_a9zky.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz2_a9zky.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(null? l) #t]\n    [(null? (cdr l)) #t]\n    [(> (car l) (cadr\
    \ l)) (monotonic (cdr l))]\n    [(< (car l) (cadr l)) (monotonic (cdr l))]\n \
    \   [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate monotonic))\n    (check-equal? (candidate (list 1 2 4 10)) #t)\n \
    \   (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal? (candidate\
    \ (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10)) #t)\n\
    \    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd9wdg2gg.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpd9wdg2gg.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpd9wdg2gg.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpd9wdg2gg.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond [(empty? l) #t]\n        [(empty? (rest l)) #t]\n        [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n        [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n        [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptz_xf5ry.rkt:24:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptz_xf5ry.rkt:26:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmptz_xf5ry.rkt:27:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptz_xf5ry.rkt:29:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdv4xjt3s.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdv4xjt3s.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdv4xjt3s.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdv4xjt3s.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwinsanuo.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpwinsanuo.rkt:14:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l))\n     (and (monotonic (rest l))\n          (not (member (first\
    \ l) (rest l))))]\n    [(> (first l) (second l))\n     (and (monotonic (rest l))\n\
    \          (not (member (first l) (rest l))))]\n    [else #f]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4b1tqwbn.rkt:29:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4b1tqwbn.rkt:31:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmp4b1tqwbn.rkt:34:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(and (<=\
    \ (first l) (second l)) (monotonic (rest l))) #t]\n    [(and (>= (first l) (second\
    \ l)) (monotonic (rest l))) #t]\n    [else #f]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate\
    \ (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n  \
    \  (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp09sns0t7.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp09sns0t7.rkt:28:4\nactual:     #t\n\
    expected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(> (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(< (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgg15a_lt.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgg15a_lt.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgg15a_lt.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgg15a_lt.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) #t]\n    [(empty? (rest l)) #t]\n    [(< (first\
    \ l) (second l)) (monotonic (rest l))]\n    [(> (first l) (second l)) (monotonic\
    \ (rest l))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate monotonic))\n    (check-equal? (candidate (list 1 2\
    \ 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20)) #t)\n    (check-equal?\
    \ (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate (list 4 1 0 -10))\
    \ #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n    (check-equal? (candidate\
    \ (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate (list 1 2 3 4 5 60))\
    \ #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn18ew2jf.rkt:25:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn18ew2jf.rkt:27:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpn18ew2jf.rkt:28:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn18ew2jf.rkt:30:4\nactual:     #f\nexpected:   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Return True is list elements are monotonically increasing\
    \ or decreasing.\n;; >>> monotonic([1, 2, 4, 20])\n;; True\n;; >>> monotonic([1,\
    \ 20, 4, 10])\n;; False\n;; >>> monotonic([4, 1, 0, -10])\n;; True\n(define (monotonic\
    \ l)\n  (cond\n    [(empty? l) true]\n    [(empty? (rest l)) true]\n    [(> (first\
    \ l) (second l)) (monotonic-decreasing (rest l))]\n    [(< (first l) (second l))\
    \ (monotonic-increasing (rest l))]\n    [else false]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate monotonic))\n    (check-equal?\
    \ (candidate (list 1 2 4 10)) #t)\n    (check-equal? (candidate (list 1 2 4 20))\
    \ #t)\n    (check-equal? (candidate (list 1 20 4 10)) #f)\n    (check-equal? (candidate\
    \ (list 4 1 0 -10)) #t)\n    (check-equal? (candidate (list 4 1 1 0)) #t)\n  \
    \  (check-equal? (candidate (list 1 2 3 2 5 60)) #f)\n    (check-equal? (candidate\
    \ (list 1 2 3 4 5 60)) #t)\n    (check-equal? (candidate (list 9 9 9 9)) #t)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb0q5mirv.rkt:14:31: monotonic-decreasing: unbound identifier\n\
    \  in: monotonic-decreasing\n  location...:\n   /tmp/tmpb0q5mirv.rkt:14:31\n"
  exit_code: 1
  status: OK
