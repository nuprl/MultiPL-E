name: HumanEval_116_sort_array
language: racket
prompt: "#lang racket\n\n;; In this Kata, you have to sort an array of non-negative\
  \ integers according to\n;; number of ones in their binary representation in ascending\
  \ order.\n;; For similar number of ones, sort based on decimal value.\n;; It must\
  \ be implemented like this:\n;; >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4,\
  \ 5]\n;; >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n;; >>> sort_array([1,\
  \ 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n(define (sort_array arr)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate sort_array))\n\
  \    (check-equal? (candidate (list 1 5 2 3 4)) (list 1 2 4 3 5))\n    (check-equal?\
  \ (candidate (list -2 -3 -4 -5 -6)) (list -4 -2 -6 -5 -3))\n    (check-equal? (candidate\
  \ (list 1 0 2 3 4)) (list 0 1 2 4 3))\n    (check-equal? (candidate (list )) (list\
  \ ))\n    (check-equal? (candidate (list 2 5 77 4 5 3 5 7 2 3 4)) (list 2 2 4 4\
  \ 3 3 5 5 5 7 77))\n    (check-equal? (candidate (list 3 6 44 12 32 5)) (list 32\
  \ 3 5 6 12 44))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16\
  \ 32))\n    (check-equal? (candidate (list 2 4 8 16 32)) (list 2 4 8 16 32))\n))\n\
  \n(test-humaneval)"
completions: ["  (sort (map (\u03BB (x) (cons x (number->string x 2))) arr)\n    \
    \    (\u03BB (x y)\n          (cond\n            [(= (length (cdr x)) (length\
    \ (cdr y)))\n             (< (car x) (car y))]\n            [else\n          \
    \   (< (length (cdr x)) (length (cdr y)))]))))\n", "  (sort (map (lambda (x) (list\
    \ x (number->string x 2))) arr)\n        (lambda (a b)\n          (cond\n    \
    \        [(< (length (cadr a)) (length (cadr b))) #t]\n            [(> (length\
    \ (cadr a)) (length (cadr b))) #f]\n            [(< (car a) (car b)) #t]\n   \
    \         [(> (car a) (car b)) #f]\n            [else #f]))))\n", "  (sort (map\
    \ (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x y)\n    \
    \      (cond\n            [(= (cdr x) (cdr y)) (< (car x) (car y))]\n        \
    \    [else (< (cdr x) (cdr y))]))))\n", "  (sort (map (lambda (x) (list x (integer->binary\
    \ x))) arr)\n        (lambda (x y)\n          (cond\n            [(< (length (cadr\
    \ x)) (length (cadr y))) #t]\n            [(> (length (cadr x)) (length (cadr\
    \ y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cdr x)) (length (cdr y))) #t]\n            [(> (length (cdr x)) (length (cdr\
    \ y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (cons x (number->string\
    \ x 2))) arr)\n        <\n        (\u03BB (x y) (or (and (zero? (modulo (car x)\
    \ 2))\n                          (not (zero? (modulo (car y) 2))))\n         \
    \            (and (zero? (modulo (car x) 2))\n                          (zero?\
    \ (modulo (car y) 2))\n                          (< (car x) (car y)))\n      \
    \               (and (not (zero? (modulo (car x) 2)))\n                      \
    \    (not (zero? (modulo (car y) 2)))\n                          (< (string-length\
    \ (cdr x))\n                             (string-length (cdr y))))\n         \
    \            (and (not (zero? (modulo (car x) 2)))\n                         \
    \ (not (zero? (modulo (car y) 2)))\n                          (= (string-length\
    \ (cdr x))\n                             (string-length (cdr y)))\n          \
    \                (< (car x) (car y))))))\n", "  (sort (map (lambda (x) (list x\
    \ (count-ones x))) arr)\n        (lambda (a b)\n          (cond\n            [(=\
    \ (cadr a) (cadr b)) (< (car a) (car b))]\n            [else (< (cadr a) (cadr\
    \ b))]))))\n", "  (sort (map (lambda (x) (cons x (bit-count x))) arr)\n      \
    \  (lambda (x y)\n          (if (= (cdr x) (cdr y))\n              (< (car x)\
    \ (car y))\n              (< (cdr x) (cdr y))))))\n", "  (sort (map (lambda (x)\
    \ (list x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(< (length (cadr x)) (length (cadr y))) #t]\n            [(> (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(< (string->number (cadr x) 2)\
    \ (string->number (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort (map\
    \ (\u03BB (x) (list (count-ones x) x)) arr)\n        (\u03BB (x y)\n         \
    \ (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car y))\
    \ #f]\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr\
    \ y)) #f]\n            [else #f]))))\n", "  (sort arr (lambda (a b)\n        \
    \      (cond\n                [(= (count-ones a) (count-ones b))\n           \
    \      (< a b)]\n                [else\n                 (< (count-ones a) (count-ones\
    \ b))]))))\n", "  (sort arr (lambda (a b)\n              (if (equal? (count-ones\
    \ a) (count-ones b))\n                  (< a b)\n                  (< (count-ones\
    \ a) (count-ones b))))))\n", "  (sort (map (\u03BB (x) (list x (count-ones x)))\
    \ arr)\n        (\u03BB (a b) (or (and (eq? (cadr a) (cadr b))\n             \
    \             (< (car a) (car b)))\n                     (< (cadr a) (cadr b))))))\n",
  "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n\
    \          (if (= (car x) (car y))\n              (< (cdr x) (cdr y))\n      \
    \        (< (car x) (car y))))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(= (length\
    \ (cdr x)) (length (cdr y)))\n             (< (car x) (car y))]\n            [else\n\
    \             (< (length (cdr x)) (length (cdr y)))]))))\n", "  (sort (map (lambda\
    \ (x)\n               (cons x (integer->binary x)))\n             arr)\n     \
    \   (lambda (x y)\n          (cond [(< (cdr x) (cdr y)) #t]\n                [(>\
    \ (cdr x) (cdr y)) #f]\n                [(< (car x) (car y)) #t]\n           \
    \     [(> (car x) (car y)) #f]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(= (length\
    \ (cadr x)) (length (cadr y)))\n             (< (car x) (car y))]\n          \
    \  [else\n             (< (length (cadr x)) (length (cadr y)))]))))\n", "  (sort\
    \ (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (length (cdr x)) (length (cdr y))) #t]\n   \
    \         [(> (length (cdr x)) (length (cdr y))) #f]\n            [(< (string->number\
    \ (cdr x) 2) (string->number (cdr y) 2)) #t]\n            [(> (string->number\
    \ (cdr x) 2) (string->number (cdr y) 2)) #f]\n            [else #f]))))\n", " \
    \ (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        <\n        #:key\
    \ (lambda (x) x)))\n", "  (sort (map (\u03BB (x) (list x (count-ones x))) arr)\n\
    \        (\u03BB (x y)\n          (cond\n            [(= (cadr x) (cadr y))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (cadr x)\
    \ (cadr y))]))))\n", "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n\
    \        (lambda (x y)\n          (if (= (length (cdr x)) (length (cdr y)))\n\
    \              (< (car x) (car y))\n              (< (length (cdr x)) (length\
    \ (cdr y)))))))\n", "  (sort (map (lambda (x) (list x (integer->binary x))) arr)\n\
    \        (lambda (a b)\n          (cond\n            [(< (length (cadr a)) (length\
    \ (cadr b))) #t]\n            [(> (length (cadr a)) (length (cadr b))) #f]\n \
    \           [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n \
    \           [else #f]))))\n", "  (sort arr (lambda (a b)\n              (cond\n\
    \                [(= (count-ones a) (count-ones b))\n                 (< a b)]\n\
    \                [else\n                 (< (count-ones a) (count-ones b))]))))\n",
  "  (sort arr (lambda (a b)\n              (let ([a-ones (count-ones a)]\n      \
    \              [b-ones (count-ones b)])\n                (if (= a-ones b-ones)\n\
    \                    (< a b)\n                    (< a-ones b-ones))))))\n", " \
    \ (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda\
    \ (x y)\n          (cond\n            [(= (length (cdr x)) (length (cdr y)))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (length\
    \ (cdr x)) (length (cdr y)))]))))\n", "  (sort (map (\u03BB (x) (list x (number->string\
    \ x 2))) arr)\n        (\u03BB (x y)\n          (cond\n            [(> (length\
    \ (cadr x)) (length (cadr y))) #t]\n            [(< (length (cadr x)) (length\
    \ (cadr y))) #f]\n            [(> (string->number (cadr x) 2) (string->number\
    \ (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list\
    \ x (number->string x 2))) arr)\n        (lambda (x y)\n          (let ([x-ones\
    \ (count-ones (car x))]\n                [y-ones (count-ones (car y))])\n    \
    \        (cond [(> x-ones y-ones) #t]\n                  [(< x-ones y-ones) #f]\n\
    \                  [else (< (car x) (car y))])))))\n", "  (sort (map (\u03BB (x)\
    \ (list x (count-ones x))) arr)\n        (\u03BB (x y) (cond [(< (cadr x) (cadr\
    \ y)) #t]\n                       [(> (cadr x) (cadr y)) #f]\n               \
    \        [(< (car x) (car y)) #t]\n                       [(> (car x) (car y))\
    \ #f]))))\n", "  (sort (map (lambda (x) (list (count-ones x) x)) arr)\n      \
    \  (lambda (a b)\n          (cond\n            [(< (car a) (car b)) #t]\n    \
    \        [(> (car a) (car b)) #f]\n            [(< (cadr a) (cadr b)) #t]\n  \
    \          [(> (cadr a) (cadr b)) #f]\n            [else #f]))))\n", "  (sort\
    \ (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (a b)\n    \
    \      (cond\n            [(< (car a) (car b)) #t]\n            [(> (car a) (car\
    \ b)) #f]\n            [(< (cdr a) (cdr b)) #t]\n            [(> (cdr a) (cdr\
    \ b)) #f]))))\n", "  (sort arr (lambda (a b)\n              (let ([a-ones (count-ones\
    \ a)]\n                    [b-ones (count-ones b)])\n                (cond [(>\
    \ a-ones b-ones) #t]\n                      [(< a-ones b-ones) #f]\n         \
    \             [(> a b) #t]\n                      [(< a b) #f]\n             \
    \         [else #f])))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond [(= (length (cdr x)) (length\
    \ (cdr y)))\n                 (< (car x) (car y))]\n                [else\n  \
    \               (< (length (cdr x)) (length (cdr y)))]))))\n", "  (sort (map (\u03BB\
    \ (x) (list x (integer->binary x))) arr)\n        (\u03BB (x y)\n          (cond\n\
    \            [(> (length (cadr x)) (length (cadr y))) #t]\n            [(< (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(> (car x) (car y)) #t]\n   \
    \         [(< (car x) (car y)) #f]\n            [else #f]))))\n", "  (sort arr\
    \ (\u03BB (x y)\n              (cond\n                [(< (count-ones x) (count-ones\
    \ y)) #t]\n                [(> (count-ones x) (count-ones y)) #f]\n          \
    \      [(< x y) #t]\n                [(> x y) #f]\n                [else #f]))))\n",
  "  (sort arr (lambda (a b)\n              (let ([a-ones (count-ones a)]\n      \
    \              [b-ones (count-ones b)])\n                (cond\n             \
    \     [(< a-ones b-ones) #t]\n                  [(> a-ones b-ones) #f]\n     \
    \             [(< a b) #t]\n                  [(> a b) #f]\n                 \
    \ [else #f])))))\n", "  (sort (map (lambda (x) (cons x (number->string x 2)))\
    \ arr)\n        (lambda (x y)\n          (cond\n            [(= (length (cdr x))\
    \ (length (cdr y)))\n             (< (car x) (car y))]\n            [else\n  \
    \           (< (length (cdr x)) (length (cdr y)))]))))\n", "  (sort arr (lambda\
    \ (a b)\n              (let ([a-ones (count-ones a)]\n                    [b-ones\
    \ (count-ones b)])\n                (if (= a-ones b-ones)\n                  \
    \  (< a b)\n                    (< a-ones b-ones))))))\n", "  (sort (map (lambda\
    \ (x) (list x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(> (length (cadr x)) (length (cadr y))) #t]\n            [(< (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(> (car x) (car y)) #t]\n   \
    \         [(< (car x) (car y)) #f]\n            [else #f]))))\n", "  (sort (map\
    \ (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x y)\n   \
    \       (cond\n            [(= (length (cadr x)) (length (cadr y)))\n        \
    \     (< (car x) (car y))]\n            [else\n             (< (length (cadr x))\
    \ (length (cadr y)))]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond [(< (length (cadr x)) (length\
    \ (cadr y))) #t]\n                [(> (length (cadr x)) (length (cadr y))) #f]\n\
    \                [(< (car x) (car y)) #t]\n                [else #f]))))\n", " \
    \ (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (if (= (length (cdr x)) (length (cdr y)))\n              (< (car\
    \ x) (car y))\n              (< (length (cdr x)) (length (cdr y)))))))\n", " \
    \ (sort (map (lambda (x)\n               (cons x (number->string x 2)))\n    \
    \         arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cdr x)) (length (cdr y))) #t]\n            [(> (length (cdr x)) (length (cdr\
    \ y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (list x (number->string\
    \ x 2))) arr)\n        (\u03BB (x y)\n          (cond\n            [(= (length\
    \ (cadr x)) (length (cadr y)))\n             (< (car x) (car y))]\n          \
    \  [else\n             (< (length (cadr x)) (length (cadr y)))]))))\n", "  (sort\
    \ (map (lambda (x) (list (count-ones x) x)) arr)\n        (lambda (x y)\n    \
    \      (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr\
    \ y)) #f]\n            [else #f]))))\n", "  (sort arr (\u03BB (x y)\n        \
    \      (let ([x-ones (count-ones x)]\n                    [y-ones (count-ones\
    \ y)])\n                (cond [(< x-ones y-ones) #t]\n                      [(>\
    \ x-ones y-ones) #f]\n                      [(< x y) #t]\n                   \
    \   [(> x y) #f]\n                      [else #f])))))\n", "  (sort (lambda (x\
    \ y)\n          (let ([x-ones (count-ones x)]\n                [y-ones (count-ones\
    \ y)])\n            (cond\n              [(> x-ones y-ones) #t]\n            \
    \  [(< x-ones y-ones) #f]\n              [else (< x y)])))\n        arr))\n",
  "  (sort arr (\u03BB (a b)\n              (let ([a-ones (count-ones a)]\n      \
    \              [b-ones (count-ones b)])\n                (cond [(< a-ones b-ones)\
    \ #t]\n                      [(> a-ones b-ones) #f]\n                      [(<\
    \ a b) #t]\n                      [(> a b) #f]\n                      [else #f])))))\n",
  "  (sort (map (lambda (x) (list x (count-ones x))) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr\
    \ x) (cadr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car\
    \ x) (car y)) #f]\n            [else #f]))))\n", "  (sort arr (lambda (a b)\n\
    \              (let ([a-ones (count-ones a)]\n                    [b-ones (count-ones\
    \ b)])\n                (cond [(< a-ones b-ones) #t]\n                      [(>\
    \ a-ones b-ones) #f]\n                      [(< a b) #t]\n                   \
    \   [(> a b) #f]\n                      [else #f])))))\n", "  (sort (map (lambda\
    \ (x) (cons x (count-ones x))) arr)\n        (lambda (a b)\n          (cond\n\
    \            [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n\
    \            [(< (cdr a) (cdr b)) #t]\n            [(> (cdr a) (cdr b)) #f]\n\
    \            [else #f]))))\n", "  (sort arr < :key (lambda (x) (cons (count-ones\
    \ x) x))))\n", "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n\
    \        (lambda (x y)\n          (if (equal? (cadr x) (cadr y))\n           \
    \   (< (car x) (car y))\n              (< (string-length (cadr x)) (string-length\
    \ (cadr y)))))))\n", "  (sort arr (\u03BB (a b)\n              (or (< (count-ones\
    \ a) (count-ones b))\n                  (and (= (count-ones a) (count-ones b))\n\
    \                       (< a b))))))\n", "  (sort arr (lambda (x y)\n        \
    \      (let ([x-ones (count-ones x)]\n                    [y-ones (count-ones\
    \ y)])\n                (cond\n                  [(> x-ones y-ones) #t]\n    \
    \              [(< x-ones y-ones) #f]\n                  [else (< x y)])))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(> (length (cadr x)) (length (cadr y))) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (if (= (length (cdr x)) (length (cdr y)))\n              (< (car\
    \ x) (car y))\n              (< (length (cdr x)) (length (cdr y)))))))\n", " \
    \ (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x)\
    \ (cdr y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list\
    \ x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n    \
    \        [(< (length (cadr x)) (length (cadr y))) #t]\n            [(> (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(< (string->number (cadr x) 2)\
    \ (string->number (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort (map\
    \ (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n         \
    \ (cond [(< (car x) (car y)) #t]\n                [(> (car x) (car y)) #f]\n \
    \               [(< (cdr x) (cdr y)) #t]\n                [(> (cdr x) (cdr y))\
    \ #f]))))\n", "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n\
    \        (\u03BB (x y) (or (< (length (cadr x)) (length (cadr y)))\n         \
    \            (and (= (length (cadr x)) (length (cadr y)))\n                  \
    \        (< (car x) (car y)))))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cdr x)) (length (cdr y))) #t]\n            [(> (length (cdr x)) (length (cdr\
    \ y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(= (length\
    \ (cadr x)) (length (cadr y)))\n             (< (car x) (car y))]\n          \
    \  [else\n             (< (length (cadr x)) (length (cadr y)))]))))\n", "  (sort\
    \ (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x y)\n\
    \          (if (= (length (cdr x)) (length (cdr y)))\n              (< (car x)\
    \ (car y))\n              (< (length (cdr x)) (length (cdr y)))))))\n", "  (sort\
    \ (map (lambda (x) (list x (bit-count x))) arr)\n        (lambda (x y)\n     \
    \     (if (= (cadr x) (cadr y))\n              (< (car x) (car y))\n         \
    \     (< (cadr x) (cadr y))))))\n", "  (sort (map (lambda (x) (cons (count-ones\
    \ x) x)) arr)\n        (lambda (x y)\n          (cond\n            [(< (car x)\
    \ (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [(< (cdr x)\
    \ (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n            [else #f]))))\n",
  "  (sort arr (\u03BB (x y)\n              (cond\n                [(= (count-ones\
    \ x) (count-ones y))\n                 (< x y)]\n                [else\n     \
    \            (< (count-ones x) (count-ones y))]))))\n", "  (sort (map (\u03BB\
    \ (x) (list (count-ones x) x)) arr)\n        (\u03BB (x y) (or (and (zero? (car\
    \ x)) (positive? (car y)))\n                     (and (positive? (car x)) (zero?\
    \ (car y)))\n                     (and (positive? (car x)) (positive? (car y))\
    \ (< (car x) (car y)))\n                     (and (zero? (car x)) (zero? (car\
    \ y)) (< (cadr x) (cadr y)))))))\n", "  (sort (map (\u03BB (x) (list x (number->string\
    \ x 2))) arr)\n        (\u03BB (x y)\n          (cond [(< (length (cadr x)) (length\
    \ (cadr y))) #t]\n                [(> (length (cadr x)) (length (cadr y))) #f]\n\
    \                [(< (car x) (car y)) #t]\n                [else #f]))))\n", " \
    \ (sort (map (lambda (x) (list x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(> (length (cadr x)) (length (cadr y))) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(= (length (cadr x)) (length (cadr y)))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (length\
    \ (cadr x)) (length (cadr y)))]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (if (= (length (cadr x)) (length\
    \ (cadr y)))\n              (< (car x) (car y))\n              (< (length (cadr\
    \ x)) (length (cadr y)))))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cdr x)) (length (cdr y))) #t]\n            [(> (length (cdr x)) (length (cdr\
    \ y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort arr (\u03BB (a b)\n        \
    \      (or (< (count-ones a) (count-ones b))\n                  (and (= (count-ones\
    \ a) (count-ones b))\n                       (< a b))))))\n", "  (sort (map (lambda\
    \ (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(> (car x) (car y)) #t]\n            [(< (car x) (car y)) #f]\n\
    \            [(> (cdr x) (cdr y)) #t]\n            [(< (cdr x) (cdr y)) #f]\n\
    \            [else #f]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (a b)\n          (cond\n            [(< (length\
    \ (cadr a)) (length (cadr b))) #t]\n            [(> (length (cadr a)) (length\
    \ (cadr b))) #f]\n            [(< (car a) (car b)) #t]\n            [(> (car a)\
    \ (car b)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons\
    \ x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond [(< (length\
    \ (cdr x)) (length (cdr y))) #t]\n                [(> (length (cdr x)) (length\
    \ (cdr y))) #f]\n                [else (< (car x) (car y))]))))\n", "  (sort (map\
    \ (\u03BB (x) (list x (integer->binary x))) arr)\n        (\u03BB (x y) (cond\
    \ [(< (length (cadr x)) (length (cadr y))) #t]\n                        [(> (length\
    \ (cadr x)) (length (cadr y))) #f]\n                        [(< (car x) (car y))\
    \ #t]\n                        [else #f]))))\n", "  (sort (map (\u03BB (x) (list\
    \ x (number->string x 2))) arr)\n        (\u03BB (x y)\n          (cond [(< (length\
    \ (cadr x)) (length (cadr y))) #t]\n                [(> (length (cadr x)) (length\
    \ (cadr y))) #f]\n                [(< (car x) (car y)) #t]\n                [else\
    \ #f]))))\n", "  (sort (map (lambda (x)\n               (list x (count-ones x)))\n\
    \             arr)\n        (lambda (x y)\n          (if (= (cadr x) (cadr y))\n\
    \              (< (car x) (car y))\n              (< (cadr x) (cadr y))))))\n",
  "  (sort (map (lambda (x) (list x (count-ones x))) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(> (cadr x) (cadr y)) #t]\n            [(< (cadr\
    \ x) (cadr y)) #f]\n            [(> (car x) (car y)) #t]\n            [(< (car\
    \ x) (car y)) #f]\n            [else #f]))))\n", "  (sort arr (lambda (a b)\n\
    \              (let ([a-ones (count-ones a)]\n                    [b-ones (count-ones\
    \ b)])\n                (or (< a-ones b-ones)\n                    (and (= a-ones\
    \ b-ones)\n                         (< a b)))))))\n", "  (sort (map (lambda (x)\n\
    \               (list (bit-count x) x))\n             arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (car x) (car y)) #t]\n            [(> (car\
    \ x) (car y)) #f]\n            [(< (cadr x) (cadr y)) #t]\n            [(> (cadr\
    \ x) (cadr y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons\
    \ x (integer->binary x))) arr)\n        (lambda (x y)\n          (cond\n     \
    \       [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n     \
    \       [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n     \
    \       [else #f]))))\n", "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n\
    \        (lambda (x y)\n          (cond\n            [(< (car x) (car y)) #t]\n\
    \            [(> (car x) (car y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n\
    \            [(> (cdr x) (cdr y)) #f]\n            [else #f]))))\n", "  (sort\
    \ (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (a b)\n\
    \          (cond\n            [(= (length (cdr a)) (length (cdr b)))\n       \
    \      (< (car a) (car b))]\n            [else\n             (< (length (cdr a))\
    \ (length (cdr b)))]))))\n", "  (sort (map (lambda (x) (list x (count-ones x)))\
    \ arr)\n        <\n        (lambda (x y)\n          (cond\n            [(= (cadr\
    \ x) (cadr y))\n             (< (car x) (car y))]\n            [else\n       \
    \      (< (cadr x) (cadr y))]))))\n", "  (sort arr (lambda (x y)\n           \
    \   (let ([x-ones (count-ones x)]\n                    [y-ones (count-ones y)])\n\
    \                (cond [(< x-ones y-ones) #t]\n                      [(> x-ones\
    \ y-ones) #f]\n                      [(< x y) #t]\n                      [(> x\
    \ y) #f]\n                      [else #f])))))\n", "  (sort (map (lambda (x) (cons\
    \ x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n    \
    \        [(= (length (cdr x)) (length (cdr y)))\n             (< (car x) (car\
    \ y))]\n            [else\n             (< (length (cdr x)) (length (cdr y)))]))))\n",
  "  (sort arr (lambda (a b)\n              (if (= (count-ones a) (count-ones b))\n\
    \                  (< a b)\n                  (< (count-ones a) (count-ones b))))))\n",
  "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y)\n          (cond [(< (length (cadr x)) (length (cadr y))) #t]\n         \
    \       [(> (length (cadr x)) (length (cadr y))) #f]\n                [(< (car\
    \ x) (car y)) #t]\n                [else #f]))))\n", "  (sort (map (lambda (x)\
    \ (cons (count-ones x) x)) arr)\n        (lambda (x y)\n          (cond [(< (car\
    \ x) (car y)) #t]\n                [(> (car x) (car y)) #f]\n                [(<\
    \ (cdr x) (cdr y)) #t]\n                [(> (cdr x) (cdr y)) #f]))))\n", "  (sort\
    \ (map (lambda (x) (list x (count-ones x))) arr)\n        (lambda (x y)\n    \
    \      (if (= (cadr x) (cadr y))\n              (< (car x) (car y))\n        \
    \      (< (cadr x) (cadr y))))))\n", "  (sort (map (lambda (x) (cons x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(< (string-length\
    \ (cdr x)) (string-length (cdr y))) #t]\n            [(> (string-length (cdr x))\
    \ (string-length (cdr y))) #f]\n            [(< (car x) (car y)) #t]\n       \
    \     [(> (car x) (car y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda\
    \ (x) (list x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(> (length (cadr x)) (length (cadr y))) #t]\n            [(< (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(> (string->number (cadr x) 2)\
    \ (string->number (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort arr\
    \ (\u03BB (a b)\n              (cond\n                [(< (count-ones a) (count-ones\
    \ b)) #t]\n                [(> (count-ones a) (count-ones b)) #f]\n          \
    \      [(< a b) #t]\n                [(> a b) #f]\n                [else #f]))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(= (length (cadr x)) (length (cadr y)))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (length\
    \ (cadr x)) (length (cadr y)))]))))\n", "  (sort (map (\u03BB (x) (list x (integer->binary\
    \ x))) arr)\n        (\u03BB (x y)\n          (cond [(< (length (cadr x)) (length\
    \ (cadr y))) #t]\n                [(> (length (cadr x)) (length (cadr y))) #f]\n\
    \                [(< (car x) (car y)) #t]\n                [else #f]))))\n", " \
    \ (sort arr (lambda (a b)\n              (if (= (count-ones a) (count-ones b))\n\
    \                  (< a b)\n                  (< (count-ones a) (count-ones b))))))\n",
  "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(> (car x) (car y)) #t]\n            [(< (car\
    \ x) (car y)) #f]\n            [(> (length (cdr x)) (length (cdr y))) #f]\n  \
    \          [(< (length (cdr x)) (length (cdr y))) #t]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (count-ones x))) arr)\n        (lambda (a b)\n\
    \          (if (= (cdr a) (cdr b))\n              (< (car a) (car b))\n      \
    \        (< (cdr a) (cdr b))))))\n", "  (sort (map (lambda (x) (list x (bit-count\
    \ x))) arr)\n        (lambda (x y)\n          (cond\n            [(< (cadr x)\
    \ (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (string-length (cdr x)) (string-length\
    \ (cdr y))) #t]\n            [(> (string-length (cdr x)) (string-length (cdr y)))\
    \ #f]\n            [(< (string-length (cdr x)) (string-length (cdr y))) #t]\n\
    \            [(> (string-length (cdr x)) (string-length (cdr y))) #f]\n      \
    \      [else (< (car x) (car y))]))))\n", "  (sort (map (\u03BB (x) (list x (integer->binary\
    \ x))) arr)\n        (\u03BB (x y) (or (< (cadr x) (cadr y))\n               \
    \      (and (= (cadr x) (cadr y))\n                          (< (car x) (car y)))))))\n",
  "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (a\
    \ b)\n          (if (= (length (cdr a)) (length (cdr b)))\n              (< (car\
    \ a) (car b))\n              (< (length (cdr a)) (length (cdr b)))))))\n", " \
    \ (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda\
    \ (a b)\n          (cond\n            [(= (length (cadr a)) (length (cadr b)))\n\
    \             (< (car a) (car b))]\n            [else\n             (< (length\
    \ (cadr a)) (length (cadr b)))]))))\n", "  (sort (map (lambda (x) (cons (count-ones\
    \ x) x)) arr)\n        (lambda (x y)\n          (cond\n            [(< (car x)\
    \ (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [(< (cdr x)\
    \ (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (list x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(> (length (cadr x)) (length (cadr y))) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (a\
    \ b)\n          (cond\n            [(< (length (cdr a)) (length (cdr b))) #t]\n\
    \            [(> (length (cdr a)) (length (cdr b))) #f]\n            [(< (car\
    \ a) (car b)) #t]\n            [(> (car a) (car b)) #f]\n            [else #f]))))\n",
  "  (sort arr (lambda (x y)\n              (let ([x-ones (count-ones x)]\n      \
    \              [y-ones (count-ones y)])\n                (cond\n             \
    \     [(< x-ones y-ones) #t]\n                  [(> x-ones y-ones) #f]\n     \
    \             [(< x y) #t]\n                  [(> x y) #f]\n                 \
    \ [else #f])))))\n", "  (sort arr < :key (lambda (x) (cons (count-ones x) x))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(> (length (cadr x)) (length (cadr y))) #f]\n            [(< (string->number\
    \ (cadr x) 2) (string->number (cadr y) 2)) #t]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cdr x)) (length (cdr y))) #t]\n\
    \            [(> (length (cdr x)) (length (cdr y))) #f]\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y)\n          (cond\n            [(> (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(< (length (cadr x)) (length (cadr y))) #f]\n            [(> (string->number\
    \ (cadr x) 2) (string->number (cadr y) 2)) #t]\n            [else #f]))))\n",
  "  (sort arr (\u03BB (a b)\n              (cond\n                [(< (count-ones\
    \ a) (count-ones b)) #t]\n                [(> (count-ones a) (count-ones b)) #f]\n\
    \                [(< a b) #t]\n                [(> a b) #f]\n                [else\
    \ #f]))))\n", "  (sort (map (lambda (x) (list (integer->binary x) x)) arr)\n \
    \       (lambda (a b)\n          (cond\n            [(< (length (car a)) (length\
    \ (car b))) #t]\n            [(> (length (car a)) (length (car b))) #f]\n    \
    \        [(< (car (cdr a)) (car (cdr b))) #t]\n            [else #f]))))\n", " \
    \ (sort (map (\u03BB (x) (cons x (number->string x 2))) arr)\n        (\u03BB\
    \ (x y)\n          (cond\n            [(> (length (cdr x)) (length (cdr y))) #t]\n\
    \            [(< (length (cdr x)) (length (cdr y))) #f]\n            [(> (car\
    \ x) (car y)) #t]\n            [(< (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr\
    \ x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car\
    \ x) (car y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list\
    \ x (bit-count x))) arr)\n        (lambda (x y)\n          (cond\n           \
    \ [(< (cadr x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n       \
    \     [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n       \
    \     [else #f]))))\n", "  (sort arr (lambda (a b)\n              (cond\n    \
    \            [(= (count-ones a) (count-ones b))\n                 (< a b)]\n \
    \               [else\n                 (< (count-ones a) (count-ones b))]))))\n",
  "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x)\
    \ (cdr y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons\
    \ x (integer->binary x))) arr)\n        (lambda (x y)\n          (cond\n     \
    \       [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n     \
    \       [(< (count-ones (cdr x)) (count-ones (cdr y))) #t]\n            [(> (count-ones\
    \ (cdr x)) (count-ones (cdr y))) #f]\n            [else #f]))))\n", "  (sort (map\
    \ (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x y)\n   \
    \       (cond\n            [(= (length (cdr x)) (length (cdr y)))\n          \
    \   (< (car x) (car y))]\n            [else\n             (< (length (cdr x))\
    \ (length (cdr y)))]))))\n", "  (sort (map (lambda (x) (cons x (integer->binary\
    \ x))) arr)\n        (lambda (x y)\n          (let ((x-ones (count-ones (cdr x)))\n\
    \                (y-ones (count-ones (cdr y))))\n            (cond ((> x-ones\
    \ y-ones) #t)\n                  ((< x-ones y-ones) #f)\n                  (else\
    \ (< (car x) (car y))))))))\n", "  (sort arr < :key (lambda (x) (cons (count-ones\
    \ x) x))))\n", "  (sort arr (lambda (a b)\n              (let ([a-ones (count-ones\
    \ a)]\n                    [b-ones (count-ones b)])\n                (if (= a-ones\
    \ b-ones)\n                    (< a b)\n                    (< a-ones b-ones))))))\n",
  "  (sort (map (\u03BB (x) (cons x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y) (or (< (length (cdr x)) (length (cdr y)))\n                     (and (= (length\
    \ (cdr x)) (length (cdr y)))\n                          (< (car x) (car y)))))))\n",
  "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y)\n          (cond [(< (length (cadr x)) (length (cadr y))) #t]\n         \
    \       [(> (length (cadr x)) (length (cadr y))) #f]\n                [(< (car\
    \ x) (car y)) #t]\n                [else #f]))))\n", "  (sort (map (\u03BB (x)\
    \ (list x (number->string x 2))) arr)\n        (\u03BB (x y) (or (and (eq? (cadr\
    \ x) (cadr y))\n                          (< (car x) (car y)))\n             \
    \        (and (not (eq? (cadr x) (cadr y)))\n                          (< (string-length\
    \ (cadr x))\n                             (string-length (cadr y))))))))\n", " \
    \ (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda\
    \ (x y)\n          (cond\n            [(= (length (cadr x)) (length (cadr y)))\
    \ (< (car x) (car y))]\n            [else (< (length (cadr x)) (length (cadr y)))]))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (length (cadr x)) (length (cadr y))) #t]\n\
    \            [(> (length (cadr x)) (length (cadr y))) #f]\n            [(< (string->number\
    \ (cadr x) 2) (string->number (cadr y) 2)) #t]\n            [else #f]))))\n",
  "  (sort (map (\u03BB (x) (list x (count-ones x))) arr)\n        (\u03BB (x y) (cond\
    \ [(< (cadr x) (cadr y)) #t]\n                       [(> (cadr x) (cadr y)) #f]\n\
    \                       [(< (car x) (car y)) #t]\n                       [(> (car\
    \ x) (car y)) #f]))))\n", "  (sort arr (lambda (a b)\n              (let ([a-ones\
    \ (count-ones a)]\n                    [b-ones (count-ones b)])\n            \
    \    (if (= a-ones b-ones)\n                    (< a b)\n                    (<\
    \ a-ones b-ones))))))\n", "  (sort (map (lambda (x) (cons x (bit-count x))) arr)\n\
    \        (lambda (x y)\n          (cond\n            [(> (cdr x) (cdr y)) #t]\n\
    \            [(< (cdr x) (cdr y)) #f]\n            [else (< (car x) (car y))]))))\n",
  "  (sort (map (lambda (x) (list x (integer->binary x))) arr)\n        (lambda (a\
    \ b)\n          (if (= (length (cadr a)) (length (cadr b)))\n              (<\
    \ (car a) (car b))\n              (< (length (cadr a)) (length (cadr b)))))))\n",
  "  (sort (map (lambda (x) (cons x (count-ones x))) arr)\n        (lambda (a b)\n\
    \          (if (= (cdr a) (cdr b))\n              (< (car a) (car b))\n      \
    \        (< (cdr a) (cdr b))))))\n", "  (sort (map (\u03BB (x) (list x (count-ones\
    \ x))) arr)\n        (\u03BB (x y)\n          (cond\n            [(= (cadr x)\
    \ (cadr y)) (< (car x) (car y))]\n            [else (< (cadr x) (cadr y))]))))\n",
  "  (sort (map (\u03BB (x) (cons x (bit-count x))) arr)\n        (\u03BB (a b)\n\
    \          (cond\n            [(> (cdr a) (cdr b)) #t]\n            [(< (cdr a)\
    \ (cdr b)) #f]\n            [(> (car a) (car b)) #f]\n            [(< (car a)\
    \ (car b)) #t]))))\n", "  (sort (map (lambda (x) (list x (count-ones x))) arr)\n\
    \        (lambda (a b)\n          (cond\n            [(< (cadr a) (cadr b)) #t]\n\
    \            [(= (cadr a) (cadr b)) (< (car a) (car b))]\n            [else #f]))))\n",
  "  (sort arr (\u03BB (a b)\n              (or (< (count-ones a) (count-ones b))\n\
    \                  (and (= (count-ones a) (count-ones b))\n                  \
    \     (< a b))))))\n", "  (sort (map (\u03BB (x) (list (count-ones x) x)) arr)\n\
    \        (\u03BB (x y) (or (< (car x) (car y))\n                    (and (= (car\
    \ x) (car y)) (< (cadr x) (cadr y)))))))\n", "  (sort arr (\u03BB (a b)\n    \
    \          (let ([a-ones (count-ones a)]\n                    [b-ones (count-ones\
    \ b)])\n                (cond\n                  [(> a-ones b-ones) #t]\n    \
    \              [(< a-ones b-ones) #f]\n                  [(> a b) #t]\n      \
    \            [(< a b) #f]\n                  [else #f])))))\n", "  (sort (map\
    \ (lambda (x) (cons x (number->string x 2))) arr)\n        <\n        (lambda\
    \ (x y)\n          (cond\n            [(= (length (cdr x)) (length (cdr y)))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (length\
    \ (cdr x)) (length (cdr y)))]))))\n", "  (sort arr (lambda (a b)\n           \
    \   (cond\n                [(< a b) #t]\n                [(> a b) #f]\n      \
    \          [else #f]))))\n", "  (sort arr (lambda (a b)\n              (let ([a-ones\
    \ (count-ones a)]\n                    [b-ones (count-ones b)])\n            \
    \    (cond [(< a-ones b-ones) #t]\n                      [(> a-ones b-ones) #f]\n\
    \                      [(< a b) #t]\n                      [(> a b) #f]\n    \
    \                  [else #f])))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (a b)\n          (cond\n            [(< (length\
    \ (cadr a)) (length (cadr b))) #t]\n            [(> (length (cadr a)) (length\
    \ (cadr b))) #f]\n            [(< (car a) (car b)) #t]\n            [(> (car a)\
    \ (car b)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (cons\
    \ x (integer->binary x))) arr)\n        (\u03BB (x y) (or (< (cdr x) (cdr y))\n\
    \                     (and (= (cdr x) (cdr y))\n                          (< (car\
    \ x) (car y)))))))\n", "  (sort (map (lambda (x) (list x (number->string x 2)))\
    \ arr)\n        (lambda (x y)\n          (cond\n            [(< (length (cadr\
    \ x)) (length (cadr y))) #t]\n            [(> (length (cadr x)) (length (cadr\
    \ y))) #f]\n            [(< (string->number (cadr x) 2) (string->number (cadr\
    \ y) 2)) #t]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list x\
    \ (integer->binary x))) arr)\n        (lambda (x y)\n          (cond\n       \
    \     [(< (length (cadr x)) (length (cadr y))) #t]\n            [(> (length (cadr\
    \ x)) (length (cadr y))) #f]\n            [(< (car x) (car y)) #t]\n         \
    \   [(> (car x) (car y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda\
    \ (x) (cons x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(= (length (cdr x)) (length (cdr y)))\n             (< (car x) (car\
    \ y))]\n            [else\n             (< (length (cdr x)) (length (cdr y)))]))))\n",
  "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y) (cond [(< (length (cadr x)) (length (cadr y))) #t]\n                    \
    \   [(> (length (cadr x)) (length (cadr y))) #f]\n                       [(< (car\
    \ x) (car y)) #t]\n                       [else #f]))))\n", "  (sort (map (lambda\
    \ (x) (list x (bit-count x))) arr)\n        (lambda (x y)\n          (cond\n \
    \           [(= (cadr x) (cadr y)) (< (car x) (car y))]\n            [else (<\
    \ (cadr x) (cadr y))]))))\n", "  (sort (map (lambda (x) (list x (bit-count x)))\
    \ arr)\n        (lambda (x y)\n          (if (= (cadr x) (cadr y))\n         \
    \     (< (car x) (car y))\n              (< (cadr x) (cadr y))))))\n", "  (sort\
    \ (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n    \
    \      (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons x (integer->binary\
    \ x))) arr)\n        (lambda (x y)\n          (cond\n            [(< (cdr x) (cdr\
    \ y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n            [(< (car x) (car\
    \ y)) #t]\n            [(> (car x) (car y)) #f]\n            [else #f]))))\n",
  "  (sort arr (lambda (a b)\n              (let ([a-ones (count-ones a)]\n      \
    \              [b-ones (count-ones b)])\n                (if (= a-ones b-ones)\n\
    \                    (< a b)\n                    (< a-ones b-ones))))))\n", " \
    \ (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr\
    \ x) (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car\
    \ x) (car y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list\
    \ x (number->string x 2))) arr)\n        (lambda (x y)\n          (cond\n    \
    \        [(< (length (cadr x)) (length (cadr y))) #t]\n            [(> (length\
    \ (cadr x)) (length (cadr y))) #f]\n            [(< (string->number (cadr x) 2)\
    \ (string->number (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort arr\
    \ (\u03BB (a b)\n              (or (and (zero? (bitwise-and a b))\n          \
    \             (zero? (bitwise-and a (bitwise-not b))))\n                  (and\
    \ (zero? (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and (zero?\
    \ (bitwise-and a b))\n                       (zero? (bitwise-and a (bitwise-not\
    \ b))))\n                  (and (zero? (bitwise-and a b))\n                  \
    \     (zero? (bitwise-and a (bitwise-not b))))\n                  (and", "  (define\
    \ (count-ones n)\n    (if (zero? n)\n        0\n        (+ (modulo n 2) (count-ones\
    \ (quotient n 2)))))\n  (sort (lambda (x y)\n          (cond\n            [(=\
    \ (count-ones x) (count-ones y))\n             (< x y)]\n            [else\n \
    \            (< (count-ones x) (count-ones y))]))\n        arr))\n", "  (sort\
    \ (map (lambda (x) (cons x (count-ones x))) arr)\n        (lambda (x y)\n    \
    \      (if (= (cdr x) (cdr y))\n              (< (car x) (car y))\n          \
    \    (< (cdr x) (cdr y))))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cadr x)) (length (cadr y))) #t]\n            [(> (length (cadr x)) (length\
    \ (cadr y))) #f]\n            [(< (string->number (cadr x) 2) (string->number\
    \ (cadr y) 2)) #t]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (list\
    \ (ones x) x)) arr)\n        (\u03BB (x y)\n          (cond\n            [(< (car\
    \ x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n            [(< (cadr\
    \ x) (cadr y)) #t]\n            [(> (cadr x) (cadr y)) #f]\n            [else\
    \ #f]))))\n", "  (sort (map (lambda (x) (cons x (integer->binary x))) arr)\n \
    \       (lambda (x y)\n          (cond\n            [(= (cdr x) (cdr y)) (< (car\
    \ x) (car y))]\n            [else (< (cdr x) (cdr y))]))))\n", "  (sort (map (lambda\
    \ (x) (list x (number->string x 2))) arr)\n        (lambda (x y)\n          (if\
    \ (= (length (cadr x)) (length (cadr y)))\n              (< (car x) (car y))\n\
    \              (< (length (cadr x)) (length (cadr y)))))))\n", "  (sort (map (lambda\
    \ (x) (list x (integer->binary x))) arr)\n        (lambda (x y)\n          (if\
    \ (= (length (cadr x)) (length (cadr y)))\n              (< (car x) (car y))\n\
    \              (< (length (cadr x)) (length (cadr y)))))))\n", "  (sort (map (lambda\
    \ (x) (cons x (integer->binary x))) arr)\n        (lambda (x y)\n          (cond\n\
    \            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr y)) #f]\n\
    \            [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n\
    \            [else #f]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (x y)\n          (cond [(< (length (cadr x)) (length\
    \ (cadr y))) #t]\n                [(> (length (cadr x)) (length (cadr y))) #f]\n\
    \                [(< (car x) (car y)) #t]\n                [else #f]))))\n", " \
    \ (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB\
    \ (x y)\n          (cond [(< (length (cadr x)) (length (cadr y))) #t]\n      \
    \          [(> (length (cadr x)) (length (cadr y))) #f]\n                [(< (string->number\
    \ (cadr x) 2) (string->number (cadr y) 2)) #t]\n                [else #f]))))\n",
  "  (sort arr (lambda (a b)\n              (let* ([a-ones (count-ones a)]\n     \
    \                [b-ones (count-ones b)])\n                (cond [(< a-ones b-ones)\
    \ #t]\n                      [(> a-ones b-ones) #f]\n                      [(<\
    \ a b) #t]\n                      [(> a b) #f]\n                      [else #f])))))\n",
  "  (sort (map (lambda (x) (list x (integer->binary x))) arr)\n        (lambda (a\
    \ b)\n          (cond\n            [(= (length (cadr a)) (length (cadr b)))\n\
    \             (< (car a) (car b))]\n            [else (< (length (cadr a)) (length\
    \ (cadr b)))]))))\n", "  (sort arr < #:key (lambda (x) (cons (count-ones x) x))))\n",
  "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(= (length (cadr x)) (length (cadr y)))\n\
    \             (< (car x) (car y))]\n            [else\n             (< (length\
    \ (cadr x)) (length (cadr y)))]))))\n", "  (sort arr (lambda (a b)\n         \
    \     (if (= (count-ones a) (count-ones b))\n                  (< a b)\n     \
    \             (< (count-ones a) (count-ones b))))))\n", "  (sort (map (\u03BB\
    \ (x) (cons x (count-ones x))) arr)\n        (\u03BB (x y) (or (< (cdr x) (cdr\
    \ y))\n                     (and (= (cdr x) (cdr y))\n                       \
    \   (< (car x) (car y)))))))\n", "  (sort (map (\u03BB (x) (list x (count-ones\
    \ x))) arr)\n        (\u03BB (x y) (or (< (cadr x) (cadr y))\n               \
    \      (and (= (cadr x) (cadr y))\n                          (< (car x) (car y)))))))\n",
  "  (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (x\
    \ y)\n          (cond\n            [(= (length (cdr x)) (length (cdr y)))\n  \
    \           (< (car x) (car y))]\n            [else\n             (< (length (cdr\
    \ x)) (length (cdr y)))]))))\n", "  (sort (map (lambda (x) (cons (count-ones x)\
    \ x)) arr)\n        (lambda (x y)\n          (cond\n            [(> (car x) (car\
    \ y)) #t]\n            [(< (car x) (car y)) #f]\n            [(> (cdr x) (cdr\
    \ y)) #t]\n            [(< (cdr x) (cdr y)) #f]\n            [else #f]))))\n",
  "  (sort (map (\u03BB (x) (list x (number->string x 2))) arr)\n        (\u03BB (x\
    \ y) (or (< (length (cadr x)) (length (cadr y)))\n                     (and (=\
    \ (length (cadr x)) (length (cadr y)))\n                          (< (car x) (car\
    \ y)))))))\n", "  (sort arr (lambda (a b)\n              (if (= (number->string\
    \ a 2) (number->string b 2))\n                  (< a b)\n                  (<\
    \ (string-length (number->string a 2))\n                     (string-length (number->string\
    \ b 2)))))))\n", "  (sort (map (lambda (x) (list x (integer->binary x))) arr)\n\
    \        (lambda (a b)\n          (if (equal? (cadr a) (cadr b))\n           \
    \   (< (car a) (car b))\n              (< (length (cadr a)) (length (cadr b)))))))\n",
  "  (sort (map (lambda (x)\n               (list x (number->string x 2)))\n     \
    \        arr)\n        (lambda (x y)\n          (cond\n            [(< (length\
    \ (cadr x)) (length (cadr y))) #t]\n            [(> (length (cadr x)) (length\
    \ (cadr y))) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [else #f]))))\n", "  (sort arr < :key (lambda (x)\
    \ (cons (count-ones x) x))))\n", "  (sort arr (\u03BB (a b)\n              (let\
    \ ([a-ones (count-ones a)]\n                    [b-ones (count-ones b)])\n   \
    \             (cond [(< a-ones b-ones) #t]\n                      [(> a-ones b-ones)\
    \ #f]\n                      [(< a b) #t]\n                      [(> a b) #f]\n\
    \                      [else #f])))))\n", "  (sort arr (lambda (a b)\n       \
    \       (let ([a-ones (count-ones a)]\n                    [b-ones (count-ones\
    \ b)])\n                (cond\n                  [(> a-ones b-ones) #t]\n    \
    \              [(< a-ones b-ones) #f]\n                  [else (< a b)])))))\n",
  "  (sort (map (lambda (x) (cons x (number->string x 2))) arr)\n        (lambda (a\
    \ b)\n          (cond\n            [(= (length (cdr a)) (length (cdr b)))\n  \
    \           (< (car a) (car b))]\n            [else\n             (< (length (cdr\
    \ a)) (length (cdr b)))]))))\n", "  (sort (lambda (x y)\n          (let ([x-ones\
    \ (count-ones x)]\n                [y-ones (count-ones y)])\n            (if (=\
    \ x-ones y-ones)\n                (< x y)\n                (< x-ones y-ones))))\n\
    \        arr))\n", "  (sort (map (lambda (x) (list x (number->string x 2))) arr)\n\
    \        (lambda (x y)\n          (cond\n            [(< (length (cadr x)) (length\
    \ (cadr y))) #t]\n            [(> (length (cadr x)) (length (cadr y))) #f]\n \
    \           [(< (car x) (car y)) #t]\n            [(> (car x) (car y)) #f]\n \
    \           [else #f]))))\n", "  (sort (map (lambda (x) (list x (count-ones x)))\
    \ arr)\n        (lambda (x y)\n          (if (= (cadr x) (cadr y))\n         \
    \     (< (car x) (car y))\n              (< (cadr x) (cadr y))))))\n", "  (sort\
    \ (map (lambda (x) (cons x (count-ones x))) arr)\n        (lambda (x y)\n    \
    \      (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x) (cdr\
    \ y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x) (car\
    \ y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (list x (number->string\
    \ x 2))) arr)\n        (lambda (a b)\n          (cond\n            [(< (length\
    \ (cadr a)) (length (cadr b))) #t]\n            [(> (length (cadr a)) (length\
    \ (cadr b))) #f]\n            [(< (car a) (car b)) #t]\n            [(> (car a)\
    \ (car b)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (list\
    \ x (count-ones x))) arr)\n        (\u03BB (a b)\n          (cond\n          \
    \  [(< (cadr a) (cadr b)) #t]\n            [(> (cadr a) (cadr b)) #f]\n      \
    \      [(< (car a) (car b)) #t]\n            [(> (car a) (car b)) #f]))))\n",
  "  (sort (map (lambda (x) (cons x (bit-count x))) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x)\
    \ (cdr y)) #f]\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [else #f]))))\n", "  (sort (map (lambda (x) (cons\
    \ x (bit-count x))) arr)\n        (lambda (x y)\n          (if (= (cdr x) (cdr\
    \ y))\n              (< (car x) (car y))\n              (< (cdr x) (cdr y))))))\n",
  "  (sort arr (lambda (a b)\n              (if (= (count-ones a) (count-ones b))\n\
    \                  (< a b)\n                  (< (count-ones a) (count-ones b))))))\n",
  "  (sort (map (lambda (x) (cons (count-ones x) x)) arr)\n        (lambda (x y)\n\
    \          (cond\n            [(< (car x) (car y)) #t]\n            [(> (car x)\
    \ (car y)) #f]\n            [(< (cdr x) (cdr y)) #t]\n            [(> (cdr x)\
    \ (cdr y)) #f]\n            [else #f]))))\n", "  (sort (map (\u03BB (x) (cons\
    \ (count-ones x) x)) arr)\n        (\u03BB (x y) (or (< (car x) (car y))\n   \
    \                  (and (= (car x) (car y))\n                          (< (cdr\
    \ x) (cdr y)))))))\n", "  (sort arr (\u03BB (x y)\n              (let ([x-ones\
    \ (count-ones x)]\n                    [y-ones (count-ones y)])\n            \
    \    (if (= x-ones y-ones)\n                    (< x y)\n                    (<\
    \ x-ones y-ones))))))\n", "  (sort arr (lambda (a b)\n              (or (and (zero?\
    \ (modulo a 2)) (not (zero? (modulo b 2))))\n                  (and (zero? (modulo\
    \ a 2)) (zero? (modulo b 2)) (< a b))\n                  (and (not (zero? (modulo\
    \ a 2))) (not (zero? (modulo b 2))) (< a b))\n                  (and (not (zero?\
    \ (modulo a 2))) (zero? (modulo b 2)))))))\n", "  (sort (map (\u03BB (x) (cons\
    \ (count-ones x) x)) arr)\n        (\u03BB (x y) (or (< (car x) (car y))\n   \
    \                  (and (= (car x) (car y))\n                          (< (cdr\
    \ x) (cdr y)))))))\n", "  (sort (map (lambda (x) (list x (number->string x 2)))\
    \ arr)\n        (lambda (x y)\n          (cond\n            [(and (zero? (car\
    \ x)) (zero? (car y)))\n             (string<? (cadr x) (cadr y))]\n         \
    \   [(zero? (car x)) #t]\n            [(zero? (car y)) #f]\n            [else\n\
    \             (< (string-length (cadr x)) (string-length (cadr y)))]))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
