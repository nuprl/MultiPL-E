name: HumanEval_79_decimal_to_binary
language: racket
prompt: "#lang racket\n\n;; You will be given a number in decimal form and your task\
  \ is to convert it to\n;; binary format. The function should return a string, with\
  \ each character representing a binary\n;; number. Each character in the string\
  \ will be '0' or '1'.\n;; There will be an extra couple of characters 'db' at the\
  \ beginning and at the end of the string.\n;; The extra characters are there to\
  \ help with the format.\n;; Examples:\n;; decimal_to_binary(15)   # returns \"db1111db\"\
  \n;; decimal_to_binary(32)   # returns \"db100000db\"\n(define (decimal_to_binary\
  \ decimal)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate decimal_to_binary))\n\
  \    (check-equal? (candidate 0) \"db0db\")\n    (check-equal? (candidate 32) \"\
  db100000db\")\n    (check-equal? (candidate 103) \"db1100111db\")\n    (check-equal?\
  \ (candidate 15) \"db1111db\")\n))\n\n(test-humaneval)"
completions: ["  (define (decimal-&gt;binary-helper decimal)\n    (cond\n      [(=\
    \ decimal 0) '()]\n      [else (cons (remainder decimal 2) (decimal-&gt;binary-helper\
    \ (quotient decimal 2)))]))\n  (string-append \"db\" (apply string-append (map\
    \ number-&gt;string (reverse (decimal-&gt;binary-helper decimal)))) \"db\"))\n\
    </code>\n", "  (string-append \"db\"\n                 (number->string\n     \
    \             (integer->exact-integer\n                   (string->number\n  \
    \                  (number->string\n                     (exact->inexact\n   \
    \                   (string->number\n                       (string-append \"\
    0b\"\n                                      (number->string\n                \
    \                       (exact->inexact\n                                    \
    \    (string->number\n                                         (number->string\
    \ decimal)))))))))))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal_to_binary_iter decimal binary)\n\
    \    (if (= decimal 0)\n        binary\n        (decimal_to_binary_iter (quotient\
    \ decimal 2)\n                                (string-append binary (number->string\
    \ (remainder decimal 2))))))\n  (string-append \"db\" (decimal_to_binary_iter\
    \ decimal \"\") \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal_to_binary-helper\
    \ decimal binary)\n    (cond ((= decimal 0) (string-append \"db\" binary \"db\"\
    ))\n          ((= (modulo decimal 2) 0) (decimal_to_binary-helper (/ decimal 2)\
    \ (string-append \"0\" binary)))\n          (else (decimal_to_binary-helper (/\
    \ decimal 2) (string-append \"1\" binary)))))\n  (decimal_to_binary-helper decimal\
    \ \"\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string (integer->binary decimal))\n\
    \                 \"db\"))\n", "  (define (decimal_to_binary-iter decimal binary)\n\
    \    (if (= decimal 0)\n        binary\n        (decimal_to_binary-iter (/ decimal\
    \ 2) (string-append (number->string (remainder decimal 2)) binary))))\n  (string-append\
    \ \"db\" (decimal_to_binary-iter decimal \"\") \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->binary decimal))\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\"\n  \
    \               (number->string (integer->binary decimal))\n                 \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string (integer->binary decimal))\n\
    \                 \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string (integer->exact-integer\
    \ (inexact->exact (expt 2 decimal))))\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal_to_binary-iter decimal binary)\n\
    \    (cond\n      [(= decimal 0) (string-append \"db\" binary \"db\")]\n     \
    \ [else (decimal_to_binary-iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) binary))]))\n  (decimal_to_binary-iter decimal \"\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\"\n         \
    \        (number->string (integer->binary decimal))\n                 \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->exact-integer (expt 2 decimal)))\
    \ \"db\"))\n", "  (define (decimal_to_binary-helper decimal)\n    (cond\n    \
    \  [(= decimal 0) '()]\n      [else (cons (remainder decimal 2) (decimal_to_binary-helper\
    \ (quotient decimal 2)))]))\n  (string-append \"db\" (list->string (reverse (decimal_to_binary-helper\
    \ decimal))) \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (define (decimal_to_binary-iter decimal acc)\n    (if (= decimal\
    \ 0)\n        (string-append \"db\" (reverse acc) \"db\")\n        (decimal_to_binary-iter\
    \ (quotient decimal 2) (string-append (number->string (remainder decimal 2)) acc))))\n\
    \  (decimal_to_binary-iter decimal \"\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (define (decimal_to_binary_iter decimal result)\n    (if (=\
    \ decimal 0)\n        (string-append \"db\" (reverse result) \"db\")\n       \
    \ (decimal_to_binary_iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) result))))\n  (decimal_to_binary_iter decimal \"\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal_to_binary-iter\
    \ decimal acc)\n    (if (zero? decimal)\n        (string-append \"db\" (reverse\
    \ acc) \"db\")\n        (decimal_to_binary-iter (quotient decimal 2) (string-append\
    \ (number->string (remainder decimal 2)) acc))))\n  (decimal_to_binary-iter decimal\
    \ \"\"))\n", "  (string-append \"db\" (integer->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal_to_binary-helper\
    \ decimal)\n    (if (= decimal 0)\n        \"\"\n        (string-append (decimal_to_binary-helper\
    \ (quotient decimal 2))\n                       (number->string (remainder decimal\
    \ 2)))))\n  (string-append \"db\" (decimal_to_binary-helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal_to_binary_helper decimal)\n    (if\
    \ (= decimal 0)\n        \"\"\n        (string-append (decimal_to_binary_helper\
    \ (quotient decimal 2))\n                       (number->string (remainder decimal\
    \ 2)))))\n  (string-append \"db\" (decimal_to_binary_helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (define (decimal_to_binary-helper\
    \ decimal)\n    (if (= decimal 0)\n        '()\n        (cons (remainder decimal\
    \ 2)\n              (decimal_to_binary-helper (quotient decimal 2)))))\n  (string-append\
    \ \"db\"\n                 (list->string (reverse (decimal_to_binary-helper decimal)))\n\
    \                 \"db\"))\n", "  (string-append \"db\"\n                 (number->string\n\
    \                  (integer->exact-integer\n                   (round (expt 2\
    \ decimal))))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (define (decimal_to_binary-iter decimal acc)\n    (cond [(= decimal 0) (string-append\
    \ \"db\" (reverse acc) \"db\")]\n          [else (decimal_to_binary-iter (/ decimal\
    \ 2) (string-append (number->string (remainder decimal 2)) acc))]))\n  (decimal_to_binary-iter\
    \ decimal \"\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->binary decimal))\n                 \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->exact-integer (log2 decimal)))\n\
    \                 \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->binary decimal))\n                 \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (cond\n      [(= decimal 0) \"\"]\n      [else (string-append\
    \ (decimal-to-binary-helper (quotient decimal 2)) (number->string (remainder decimal\
    \ 2)))]))\n  (string-append \"db\" (decimal-to-binary-helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->binary decimal))\n      \
    \           \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (define (decimal_to_binary-iter decimal binary)\n\
    \    (cond\n      [(= decimal 0) (string-append \"db\" binary \"db\")]\n     \
    \ [else (decimal_to_binary-iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) binary))]))\n  (decimal_to_binary-iter decimal \"\"))\n", "  (define\
    \ (decimal_to_binary_iter decimal binary)\n    (cond\n      [(= decimal 0) (string-append\
    \ \"db\" binary \"db\")]\n      [else (decimal_to_binary_iter (/ decimal 2) (string-append\
    \ (number->string (remainder decimal 2)) binary))]))\n  (decimal_to_binary_iter\
    \ decimal \"\"))\n", "  (define (decimal_to_binary-iter decimal binary-string)\n\
    \    (cond\n      [(= decimal 0) (string-append \"db\" binary-string \"db\")]\n\
    \      [else (decimal_to_binary-iter (/ decimal 2) (string-append binary-string\
    \ (number->string (remainder decimal 2))))]))\n  (decimal_to_binary-iter decimal\
    \ \"\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string (integer->binary\
    \ decimal))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (integer->string decimal 2) \"db\"))\n",
  "  (define (decimal_to_binary-iter decimal binary)\n    (cond\n      [(= decimal\
    \ 0) (string-append \"db\" binary \"db\")]\n      [else (decimal_to_binary-iter\
    \ (/ decimal 2) (string-append (number->string (% decimal 2)) binary))]))\n  (decimal_to_binary-iter\
    \ decimal \"\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"\
    ))\n", "  (string-append \"db\" (number->string (integer->binary decimal)) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string (integer->binary decimal))\n\
    \                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (define (decimal_to_binary-iter decimal)\n    (if (= decimal\
    \ 0)\n        '()\n        (cons (remainder decimal 2)\n              (decimal_to_binary-iter\
    \ (quotient decimal 2)))))\n  (string-append \"db\"\n                 (string-join\
    \ (reverse (decimal_to_binary-iter decimal)) \"\")\n                 \"db\"))\n",
  "  (string-append \"db\"\n                 (number->string (integer->binary decimal))\n\
    \                 \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->binary decimal))\n                 \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string (integer->binary\
    \ decimal))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->exact-integer (expt 2 decimal))) \"db\"))\n", "  (string-append \"\
    db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal_to_binary-iter\
    \ decimal result)\n    (cond\n      [(= decimal 0) (string-append \"db\" (reverse\
    \ result) \"db\")]\n      [else (decimal_to_binary-iter (/ decimal 2) (string-append\
    \ (number->string (remainder decimal 2)) result))]))\n  (decimal_to_binary-iter\
    \ decimal \"\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"\
    ))\n", "  (string-append \"db\" (number->string (integer->exact-integer (expt\
    \ 2 decimal))) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->exact-integer (expt 2 decimal)))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->exact-integer (inexact->exact\
    \ (log2 decimal)))) \"db\"))\n", "  (define (decimal_to_binary-iter decimal result)\n\
    \    (if (= decimal 0)\n        (string-append \"db\" result \"db\")\n       \
    \ (decimal_to_binary-iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) result))))\n  (decimal_to_binary-iter decimal \"\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->binary decimal))\n      \
    \           \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\"\n         \
    \        (number->string (integer->exact-integer (log2 decimal)))\n          \
    \       \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (define (decimal_to_binary_helper decimal)\n    (if\
    \ (= decimal 0)\n        \"\"\n        (string-append (decimal_to_binary_helper\
    \ (quotient decimal 2))\n                       (number->string (remainder decimal\
    \ 2)))))\n  (string-append \"db\" (decimal_to_binary_helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->binary decimal))\n      \
    \           \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\"\n                 (number->string (integer->exact-integer\
    \ (expt 2 decimal)))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->exact-integer (expt 2 decimal))) \"db\"))\n", "  (define (decimal-&gt;binary-helper\
    \ n)\n    (cond ((= n 0) '())\n          ((= (remainder n 2) 0) (cons 0 (decimal-&gt;binary-helper\
    \ (/ n 2))))\n          (else (cons 1 (decimal-&gt;binary-helper (/ n 2))))))\n\
    \  (string-append \"db\" (number-&gt;string (reverse (decimal-&gt;binary-helper\
    \ decimal))) \"db\"))\n</code>\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", " \
    \ (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->exact-integer (expt 2 decimal))) \"db\"))\n", "  (string-append \"\
    db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2)\
    \ \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\"\n                 (number->string (integer->binary\
    \ decimal))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (define (decimal_to_binary-iter decimal binary)\n\
    \    (cond\n      [(= decimal 0) (string-append \"db\" binary \"db\")]\n     \
    \ [else (decimal_to_binary-iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) binary))]))\n  (decimal_to_binary-iter decimal \"\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (define (decimal_to_binary-iter decimal binary)\n    (if (=\
    \ decimal 0)\n        binary\n        (decimal_to_binary-iter (/ decimal 2) (string-append\
    \ (number->string (% decimal 2)) binary))))\n  (string-append \"db\" (decimal_to_binary-iter\
    \ decimal \"\") \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary\
    \ decimal)) \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"\
    db\"))\n", "  (define (decimal_to_binary_iter decimal binary)\n    (if (= decimal\
    \ 0)\n        binary\n        (decimal_to_binary_iter (/ decimal 2) (string-append\
    \ (number->string (remainder decimal 2)) binary))))\n  (string-append \"db\" (decimal_to_binary_iter\
    \ decimal \"\") \"db\"))\n", "  (string-append \"db\" (number->string decimal\
    \ 2) \"db\"))\n", "  (string-append \"db\" (number->string (integer->binary decimal))\
    \ \"db\"))\n", "  (string-append \"db\" (number->string decimal 2) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string (integer->binary decimal)) \"db\"))\n", "  (string-append\
    \ \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\" (number->string\
    \ decimal 2) \"db\"))\n", "  (string-append \"db\"\n                 (number->string\
    \ (integer->exact-integer (expt 2 decimal)))\n                 \"db\"))\n", " \
    \ (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->binary decimal))\n      \
    \           \"db\"))\n", "  (define (decimal_to_binary_iter decimal acc)\n   \
    \ (if (= decimal 0)\n        (string-append \"db\" (reverse acc) \"db\")\n   \
    \     (decimal_to_binary_iter (quotient decimal 2) (string-append (number->string\
    \ (remainder decimal 2)) acc))))\n  (decimal_to_binary_iter decimal \"\"))\n",
  "  (string-append \"db\" (number->string decimal 2) \"db\"))\n", "  (define (decimal-to-binary-helper\
    \ decimal)\n    (if (= decimal 0)\n        \"\"\n        (string-append (decimal-to-binary-helper\
    \ (quotient decimal 2))\n                       (number->string (remainder decimal\
    \ 2)))))\n  (string-append \"db\" (decimal-to-binary-helper decimal) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->binary decimal)) \"db\"))\n",
  "  (string-append \"db\" (number->string (integer->exact-integer (expt 2 decimal)))\
    \ \"db\"))\n", "  (define (decimal_to_binary_iter decimal result)\n    (cond\n\
    \      [(= decimal 0) (string-append \"db\" (reverse result) \"db\")]\n      [else\
    \ (decimal_to_binary_iter (/ decimal 2) (string-append (number->string (remainder\
    \ decimal 2)) result))]))\n  (decimal_to_binary_iter decimal \"\"))\n", "  (string-append\
    \ \"db\"\n                 (number->string (integer->exact-integer (inexact->exact\
    \ (log2 decimal))))\n                 \"db\"))\n", "  (string-append \"db\" (number->string\
    \ (integer->binary decimal)) \"db\"))\n", "  (string-append \"db\"\n         \
    \        (number->string (integer->binary decimal))\n                 \"db\"))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
