name: HumanEval_138_is_equal_to_sum_even
language: racket
prompt: "#lang racket\n\n;; Evaluate whether the given number n can be written as\
  \ the sum of exactly 4 positive even numbers\n;; Example\n;; is_equal_to_sum_even(4)\
  \ == False\n;; is_equal_to_sum_even(6) == False\n;; is_equal_to_sum_even(8) == True\n\
  (define (is_equal_to_sum_even n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_equal_to_sum_even))\n\
  \    (check-equal? (candidate 4) #f)\n    (check-equal? (candidate 6) #f)\n    (check-equal?\
  \ (candidate 8) #t)\n    (check-equal? (candidate 10) #t)\n    (check-equal? (candidate\
  \ 11) #f)\n    (check-equal? (candidate 12) #t)\n    (check-equal? (candidate 13)\
  \ #f)\n    (check-equal? (candidate 16) #t)\n))\n\n(test-humaneval)"
completions: ["  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #f)\n\
    \          ((= i (+ n (* 2 2))) #t)\n          ((= i (+ n (* 4 2))) #t)\n    \
    \      ((= i (+ n (* 6 2))) #t)\n          ((= i (+ n (* 8 2))) #t)\n        \
    \  (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          (else (or (is_equal_to_sum_even-iter (- n (*\
    \ i 2)) (+ i 1))\n                    (is_equal_to_sum_even-iter n (+ i 1))))))\n\
    \  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #f)\n          ((= n (+ i (* 2 i) (* 2 (+ i 1)) (*\
    \ 2 (+ i 2)))) #t)\n          (else (is_equal_to_sum_even_iter n (+ i 1)))))\n\
    \  (is_equal_to_sum_even_iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(< n sum) #f]\n\
    \      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i))\
    \ #t]\n      [(= n (+ i i i)) #t]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #f]\n      [(and (even? i) (even? (- n i)))\
    \ #t]\n      [else (is_equal_to_sum_even-iter n (+ i 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          (else (or (is_equal_to_sum_even_iter (- n (*\
    \ i 2)) (+ i 1))\n                    (is_equal_to_sum_even_iter n (+ i 1))))))\n\
    \  (is_equal_to_sum_even_iter n 1))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n   \
    \   [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i)) #t]\n      [(= n (+ i i i))\
    \ #t]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even-iter n\
    \ (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n\
    \          ((= n (+ sum 2)) #t)\n          ((= n (+ sum 4)) #t)\n          ((=\
    \ n (+ sum 6)) #t)\n          ((= n (+ sum 8)) #t)\n          ((= n (+ sum 10))\
    \ #t)\n          ((= n (+ sum 12)) #t)\n          ((= n (+ sum 14)) #t)\n    \
    \      ((= n (+ sum 16)) #t)\n          ((= n (+ sum 18)) #t)\n          ((= n\
    \ (+ sum 20)) #t)\n          ((= n (+ sum 22)) #t)\n          ((= n (+ sum 24))\
    \ #t)\n          ((= n (+ sum 26)) #t)\n          ((= n (+ sum 28)) #t)\n    \
    \      ((= n (+ sum 30)) #t)\n          ((= n (+ sum 32)) #t)\n          ((= n\
    \ (+ sum 34)) #t)\n          ((= n (+ sum 36)) #t)\n          ((= n (+ sum 38))\
    \ #t)\n          ((= n (+ sum 40)) #t)\n          ((= n (+ sum 42)) #t)\n    \
    \      ((= n (+ sum 44)) #t)\n          ((= n (+ sum 46)) #t)\n          ((= n\
    \ (+ sum 48)) #t)\n          ((= n (+ sum 50)) #t)\n          ((= n (+ sum 52))\
    \ #t)\n          ((= n (+ sum 54)) #t)\n          ((= n (+ sum 56)) #t)\n    \
    \      ((= n (+ sum 58)) #t)\n          ((= n (+ sum 60)) #t)\n          ((= n\
    \ (+ sum 62)) #t)\n          ((= n (+ sum 64)) #t)\n          ((= n (+ sum 66))\
    \ #t)\n          ((= n (+ sum 68)) #t)\n          ((= n (+ sum 70)) #t)\n    \
    \      ((= n (+ sum 72)) #t)\n          ((= n (+ sum 74)) #t)\n          ((= n\
    \ (+ sum 76)) #t)\n          ((= n (+ sum 78)) #t)\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even_iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond [(= i n) #t]\n          [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n          [(= i (- n 2)) #f]\n          [else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                    (is_equal_to_sum_even-iter n (- n i)))]))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (if (= n 0)\n      #t\n      (if (even?\
    \ n)\n          (is_equal_to_sum_even (- n 2))\n          #f)))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          ((= n (+ (* 2 i) (* 2 (+ i 1)))) #t)\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 1)))))\n  (is_equal_to_sum_even_iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n (- 2)) #f)\n          (else (or (is_equal_to_sum_even-iter\
    \ n (+ i 2))\n                    (is_equal_to_sum_even-iter n (- i 2))))))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i))\
    \ #t]\n      [(= n (+ i i i)) #t]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #f)\n          ((= i (+ n (* 2 2))) #t)\n         \
    \ ((= i (+ n (* 4 2))) #t)\n          ((= i (+ n (* 6 2))) #t)\n          ((=\
    \ i (+ n (* 8 2))) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #f]\n      [(= n (+ i (* 2 i) (* 2 (+ i 1))\
    \ (* 2 (+ i 2)) (* 2 (+ i 3)))) #t]\n      [else (is_equal_to_sum_even_iter n\
    \ (+ i 1))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n\
    \ (+ i 2))]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+\
    \ i 2))]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i\
    \ 2))]\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n \
    \     [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n  \
    \    [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n   \
    \   [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n    \
    \  [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n     \
    \ [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= i n)\
    \ #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even_iter (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_iter n (+ sum 2))]\n    \
    \  [else #f]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ 2 i))]\n      [(= n i) #f]\n      [else (or (is_equal_to_sum_even_iter\
    \ (- n i) (+ 2 i))\n                (is_equal_to_sum_even_iter n (+ 2 i)))]))\n\
    \  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n 0) #f]\n      [else (is_equal_to_sum_even-iter (- n 2) (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (helper\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (helper n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n i) #t]\n      [(= n (+ i i)) #t]\n      [(= n (+ i i i)) #t]\n      [(= n\
    \ (+ i i i i)) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= (modulo\
    \ n i) 0) (is_equal_to_sum_even-iter (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          (else (or (is_equal_to_sum_even-iter\
    \ (- n (* i 2)) (+ i 1))\n                    (is_equal_to_sum_even-iter n (+\
    \ i 1))))))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) true]\n      [(= i 0) false]\n      [(= n i)\
    \ false]\n      [(= n (+ i (* 2 i))) (is_equal_to_sum_even-iter n (- i 2))]\n\
    \      [else (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n    \
    \  [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n     \
    \ [(= (modulo n i) 0) (is_equal_to_sum_even_iter (- n i) 2)]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even-iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n a b c d)\n    (cond\n      [(= n (+ a b c d)) #t]\n      [(> n (+ a b c d))\
    \ (is_equal_to_sum_even_iter n (+ a 2) (+ b 2) (+ c 2) (+ d 2))]\n      [else\
    \ #f]))\n  (is_equal_to_sum_even_iter n 2 2 2 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #f]\n      [(= n (+ i (* 2 i) (* 2 (+ i 1))\
    \ (* 2 (+ i 2)) (* 2 (+ i 3)))) #t]\n      [else (is_equal_to_sum_even-iter n\
    \ (+ i 1))]))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(> n (* 4 i)) #f]\n      [(= n (* 4 i)) #t]\n      [else\
    \ (or (is_equal_to_sum_even-iter n (+ i 2))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 4)))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= (modulo n i) 0) (is_equal_to_sum_even_iter (- n i) (+\
    \ i 2))]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n          ((= n i)\
    \ #f)\n          ((= n (+ i i)) #t)\n          (else (or (is_equal_to_sum_even_iter\
    \ n (+ i 2))\n                    (is_equal_to_sum_even_iter n (- n i))))))\n\
    \  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i count)\n    (cond\n      [(= count 4) (= n 0)]\n      [(= n 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2) (+ count 1))]\n      [(= n i) (is_equal_to_sum_even_iter (- n i) (+\
    \ i 2) (+ count 1))]\n      [else (is_equal_to_sum_even_iter n (+ i 2) count)]))\n\
    \  (is_equal_to_sum_even_iter n 2 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n i) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))\n                (is_equal_to_sum_even-iter n (+ i 2)))]))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (cond ((= n 0) #t)\n        ((= n 2)\
    \ #f)\n        ((= n 4) #t)\n        ((= n 6) #f)\n        ((= n 8) #t)\n    \
    \    ((= n 10) #f)\n        ((= n 12) #t)\n        ((= n 14) #f)\n        ((=\
    \ n 16) #t)\n        ((= n 18) #f)\n        ((= n 20) #t)\n        ((= n 22) #f)\n\
    \        ((= n 24) #t)\n        ((= n 26) #f)\n        ((= n 28) #t)\n       \
    \ ((= n 30) #f)\n        ((= n 32) #t)\n        ((= n 34) #f)\n        ((= n 36)\
    \ #t)\n        ((= n 38) #f)\n        ((= n 40) #t)\n        ((= n 42) #f)\n \
    \       ((= n 44) #t)\n        ((= n 46) #f)\n        ((= n 48) #t)\n        ((=\
    \ n 50) #f)\n        ((= n 52) #t)\n        ((= n 54) #f)\n        ((= n 56) #t)\n\
    \        ((= n 58) #f)\n        ((= n 60) #t)\n        ((= n 62) #f)\n       \
    \ ((= n 64) #t)\n        ((= n 66) #f)\n        ((= n 68) #t)\n        ((= n 70)\
    \ #f)\n        ((= n 72) #t)\n        ((= n 74) #f)\n        ((= n 76) #t)\n \
    \       ((= n 78) #f)\n        ((= n 80) #t)\n        ((= n 82) #f)\n        ((=\
    \ n 84) #t)\n        ((= n 86) #f)\n        ((= n 88) #t)\n        ((= n 90) #f)\n\
    \        ((= n 92) #t)\n        ((= n 94) #f)\n        ((= n 96) #t)\n       \
    \ ((= n 98) #f)\n        ((= n 100) #t)", "  (cond\n    [(= n 0) #t]\n    [(even?\
    \ n) (is_equal_to_sum_even (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (helper n i)\n\
    \    (cond ((= n 0) #t)\n          ((= i n) #f)\n          (else (or (helper (-\
    \ n (* i 2)) (+ i 1))\n                    (helper n (+ i 1))))))\n  (helper n\
    \ 2))\n", "  (define (is_equal_to_sum_even_iter n sum i)\n    (cond\n      [(=\
    \ i 4) (= n sum)]\n      [(= (remainder n 2) 0) (is_equal_to_sum_even_iter (-\
    \ n 2) (+ sum 2) (+ i 1))]\n      [else (is_equal_to_sum_even_iter (- n 1) (+\
    \ sum 1) (+ i 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= (modulo n i) 0) (is_equal_to_sum_even-iter (- n i) (+\
    \ i 2))]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #f]\n      [(= n (+ i (* 2 i) (* 2 (+ i 1))\
    \ (* 2 (+ i 2)) (* 2 (+ i 3)))) #t]\n      [else (is_equal_to_sum_even_iter n\
    \ (+ i 1))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum)\n    (cond ((= n sum) #t)\n          ((&gt; n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2)))\n          (else #f)))\n  (is_equal_to_sum_even_helper n 0))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n    \
    \  [(= i n) #f]\n      [(= n (+ i i)) #t]\n      [(= n (+ i i i)) #t]\n      [(=\
    \ n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n \
    \ (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter n\
    \ i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= (remainder n i) 0) (is_equal_to_sum_even_iter (- n i)\
    \ (+ i 2))]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n i) #t]\n      [(= n (+ i (* 2 (+ i (* 2 (+ i (* 2 (+ i (* 2 i))))))))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (-\
    \ n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter n i)\n   \
    \ (cond\n      [(= i n) #t]\n      [(and (even? i) (is_equal_to_sum_even_iter\
    \ (- n i) (+ i 2))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i 0) #f)\n          ((= n 0) #t)\n          ((= n i) #t)\n\
    \          ((&lt; n i) #f)\n          (else (or (is_equal_to_sum_even-iter (-\
    \ n i) (+ i 2))\n                    (is_equal_to_sum_even-iter n (+ i 2))))))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n (* 2 i))\
    \ #t]\n      [(= n (+ (* 2 i) (* 2 (- i 1)))) #t]\n      [(= n (+ (* 2 i) (* 2\
    \ (- i 1)) (* 2 (- i 2)))) #t]\n      [(= n (+ (* 2 i) (* 2 (- i 1)) (* 2 (- i\
    \ 2)) (* 2 (- i 3)))) #t]\n      [else (is_equal_to_sum_even_iter n (- i 1))]))\n\
    \  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          (else (or (is_equal_to_sum_even-iter\
    \ (- n (* i 2)) (+ i 1))\n                    (is_equal_to_sum_even-iter n (+\
    \ i 1))))))\n  (is_equal_to_sum_even-iter n 1))\n", "  (cond\n    [(= n 0) #t]\n\
    \    [(even? n) (is_equal_to_sum_even (- n 2))]\n    [else #f]))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= n sum) (= count\
    \ 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n (* i 4)) #t]\n      [(< n (* i 4)) #f]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter\
    \ (- n i) 0))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) true]\n      [(= i n) false]\n      [(= n (+ (* 2 i) (* 2 (+ i 1)))) true]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (cond\n    [(= n 4) #f]\n    [(= n 6) #f]\n    [(= n 8) #t]))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i 0) #f]\n    \
    \  [(= n i) #t]\n      [(= n (+ i (is_equal_to_sum_even-iter n (- i 2)))) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (- i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          (else (or (is_equal_to_sum_even_iter (- n (*\
    \ i 2)) (+ i 1))\n                    (is_equal_to_sum_even_iter n (+ i 1))))))\n\
    \  (is_equal_to_sum_even_iter n 1))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4)\
    \ (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4) (= n\
    \ sum)]\n      [(= (remainder n 2) 0) (is_equal_to_sum_even-iter (- n 2) (+ sum\
    \ 2) (+ count 1))]\n      [else (is_equal_to_sum_even-iter (- n 1) (+ sum 1) (+\
    \ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (if (= n 0)\n        #t\n        (if (and (even? i) (> n i))\n   \
    \         (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n            (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((= n 0) #f)\n    \
    \      ((= n 1) #f)\n          ((= n 2) #f)\n          ((= n 3) #f)\n        \
    \  ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n          ((=\
    \ n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10)\
    \ #f)\n          ((= n 11) #f)\n          ((= n 12) #t)\n          ((= n 13) #f)\n\
    \          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n \
    \         ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n  \
    \        ((= n 20) #t)\n          ((= n 21) #f)\n          ((= n 22) #f)\n   \
    \       ((= n 23) #f)\n          ((= n 24) #t)\n          ((= n 25) #f)\n    \
    \      ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #t)\n     \
    \     ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n      \
    \    ((= n 32) #t)\n          ((= n 33) #f)\n          ((= n 34) #f)\n       \
    \   ((= n 35) #f)\n          ((= n 36) #t)\n          ((= n 37) #f)\n        \
    \  ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #t)\n         \
    \ ((= n 41) #f)\n          ((= n 42) #f)\n          ((= n 43) #f)\n          ((=\
    \ n 44) #t)\n          ((= n 45) #f)\n          ((= n 46) #f", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n count)\n    (cond\n      [(= count 0) (if (= n 0) #t #f)]\n      [(= (modulo\
    \ n 2) 0) (or (is_equal_to_sum_even-iter (- n 2) (- count 1))\n              \
    \                (is_equal_to_sum_even-iter n (- count 1)))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- count 1))]))\n  (is_equal_to_sum_even-iter n 4))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count\
    \ 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (sum-even-numbers\
    \ (- n i)))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even-iter (- n 2)\
    \ (+ sum 2) (+ count 1)))\n          (else (is_equal_to_sum_even-iter (- n 1)\
    \ (+ sum 1) (+ count 1)))))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (helper n i)\n    (cond\n      [(= i n) #f]\n      [(= n (+ i (* 2 (quotient\
    \ n 2)))) #t]\n      [else (helper n (+ i 2))]))\n  (helper n 2))\n", "  (define\
    \ (is_equal_to_sum_even-iter n sum count)\n    (cond\n      [(= count 4) (= n\
    \ sum)]\n      [(= n sum) #t]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n i acc)\n    (cond\n      [(= i 0) (= n acc)]\n\
    \      [(= n acc) #t]\n      [(< n acc) #f]\n      [else (is_equal_to_sum_even_iter\
    \ n (- i 2) (+ acc (* i 2)))]))\n  (is_equal_to_sum_even_iter n n 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i\
    \ 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= (remainder n i) 0) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (cond\n    [(= n 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n \
    \   [(= n 6) #f]\n    [(= n 8) #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n   \
    \ [(= n 14) #f]\n    [(= n 16) #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n   \
    \ [(= n 22) #f]\n    [(= n 24) #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n   \
    \ [(= n 30) #f]\n    [(= n 32) #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n   \
    \ [(= n 38) #f]\n    [(= n 40) #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n   \
    \ [(= n 46) #f]\n    [(= n 48) #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n   \
    \ [(= n 54) #f]\n    [(= n 56) #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n   \
    \ [(= n 62) #f]\n    [(= n 64) #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n   \
    \ [(= n 70) #f]\n    [(= n 72) #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n   \
    \ [(= n 78) #f]\n    [(= n 80) #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n   \
    \ [(= n 86) #f]\n    [(= n 88) #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n   \
    \ [(= n 94) #f]\n    [(= n 96) #t]\n    [(= n 98) #f]\n    [(= n 100) #", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n 0) #t]\n      [(= i\
    \ n) #f]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (remainder\
    \ n i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (-\
    \ n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n\
    \    (cond ((= count 4) (= n sum))\n          ((= (modulo n 2) 0) (is_equal_to_sum_even-iter\
    \ (- n 2) (+ sum 2) (+ count 1)))\n          (else (is_equal_to_sum_even-iter\
    \ (- n 1) (+ sum 1) (+ count 1)))))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n (* i 2)) #t]\n\
    \      [(< n (* i 2)) #f]\n      [else (is_equal_to_sum_even-iter (- n (* i 2))\
    \ (+ i 1))]))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0))\n", " \
    \ (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n      [(= count\
    \ 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n      [else\
    \ (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n (* i 4)) #t]\n      [(> n (* i 4)) (is_equal_to_sum_even_iter n (+ i 2))]\n\
    \      [else #f]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ (* 2\
    \ i) (* 2 (+ i 1)))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 1))]))\n\
    \  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even_helper\
    \ n (+ sum n) (+ count 1)))\n          (else (is_equal_to_sum_even_helper (- n\
    \ 1) sum count))))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i (+ n 2)) #f)\n          ((= i\
    \ (+ n 4)) #f)\n          ((= i (+ n 6)) #f)\n          ((= i (+ n 8)) #f)\n \
    \         (else (is_equal_to_sum_even-iter n (+ i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) #f]\n      [(even? i) (is_equal_to_sum_even_iter (- n\
    \ i) (- i 2))]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_helper n sum)\n    (cond\n      [(=\
    \ n 0) (= sum n)]\n      [(= n 2) (= sum n)]\n      [(= n 4) (= sum n)]\n    \
    \  [(= n 6) (= sum n)]\n      [(= n 8) (= sum n)]\n      [(= n 10) (= sum n)]\n\
    \      [(= n 12) (= sum n)]\n      [(= n 14) (= sum n)]\n      [(= n 16) (= sum\
    \ n)]\n      [(= n 18) (= sum n)]\n      [(= n 20) (= sum n)]\n      [(= n 22)\
    \ (= sum n)]\n      [(= n 24) (= sum n)]\n      [(= n 26) (= sum n)]\n      [(=\
    \ n 28) (= sum n)]\n      [(= n 30) (= sum n)]\n      [(= n 32) (= sum n)]\n \
    \     [(= n 34) (= sum n)]\n      [(= n 36) (= sum n)]\n      [(= n 38) (= sum\
    \ n)]\n      [(= n 40) (= sum n)]\n      [(= n 42) (= sum n)]\n      [(= n 44)\
    \ (= sum n)]\n      [(= n 46) (= sum n)]\n      [(= n 48) (= sum n)]\n      [(=\
    \ n 50) (= sum n)]\n      [(= n 52) (= sum n)]\n      [(= n 54) (= sum n)]\n \
    \     [(= n 56) (= sum n)]\n      [(= n 58) (= sum n)]\n      [(= n 60) (= sum\
    \ n)]\n      [(= n 62) (= sum n)]\n      [(= n 64) (= sum n)]\n      [(= n 66)\
    \ (= sum n)]\n      [(= n 68) (= sum n)]\n      [(= n 70) (= sum n)]\n      [(=\
    \ n 72) (= sum n)]\n      [(= n 74) (= sum n)]\n      [(= n 76) (= sum n)]\n \
    \     [(= n 78) (= sum n)]\n      [(= n 80) (= sum n)]\n      [(= n 82) (= sum\
    \ n)]\n      [(= n 84) (= sum n)]\n      [(= n 86) (= sum n)]\n      [(=", " \
    \ (define (is_equal_to_sum_even_iter n sum_even)\n    (cond\n      [(= n sum_even)\
    \ #t]\n      [(> n sum_even) (is_equal_to_sum_even_iter n (+ sum_even 2))]\n \
    \     [else #f]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even-iter (- n i)\
    \ (+ i 2))]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ n 0) #t]\n      [(= i n) #f]\n      [(= (remainder n i) 0)\n       (and (even?\
    \ i)\n            (is_equal_to_sum_even_iter (- n i) (+ i 2)))]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (cond\n    [(= n 0)\
    \ #t]\n    [(even? n) #t]\n    [else #f]))\n", "  (define (is_equal_to_sum_even-iter\
    \ n acc)\n    (cond\n      [(= n 0) (= acc 4)]\n      [(= n 2) (is_equal_to_sum_even-iter\
    \ 0 (+ acc 1))]\n      [(= n 4) (is_equal_to_sum_even-iter 0 (+ acc 1))]\n   \
    \   [(= n 6) (is_equal_to_sum_even-iter 0 (+ acc 1))]\n      [(= n 8) (is_equal_to_sum_even-iter\
    \ 0 (+ acc 1))]\n      [else (is_equal_to_sum_even-iter (- n 2) (+ acc 1))]))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2))]\n      [else #f]))\n  (is_equal_to_sum_even_helper n 2))\n", " \
    \ (define (is_equal_to_sum_even-iter n i)\n    (cond ((= i n) #t)\n          ((=\
    \ i 0) (is_equal_to_sum_even-iter n (+ i 2)))\n          ((= n i) #f)\n      \
    \    ((= n (+ i i)) #t)\n          (else (is_equal_to_sum_even-iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even-iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n\
    \          ((= n 0) #f)\n          ((= n 1) #f)\n          ((= n 2) #f)\n    \
    \      ((= n 3) #f)\n          ((= n 4) #f)\n          ((= n 5) #f)\n        \
    \  ((= n 6) #f)\n          ((= n 7) #f)\n          ((= n 8) #t)\n          ((=\
    \ n 9) #f)\n          ((= n 10) #f)\n          ((= n 11) #f)\n          ((= n\
    \ 12) #f)\n          ((= n 13) #f)\n          ((= n 14) #f)\n          ((= n 15)\
    \ #f)\n          ((= n 16) #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n\
    \          ((= n 19) #f)\n          ((= n 20) #f)\n          ((= n 21) #f)\n \
    \         ((= n 22) #f)\n          ((= n 23) #f)\n          ((= n 24) #t)\n  \
    \        ((= n 25) #f)\n          ((= n 26) #f)\n          ((= n 27) #f)\n   \
    \       ((= n 28) #f)\n          ((= n 29) #f)\n          ((= n 30) #f)\n    \
    \      ((= n 31) #f)\n          ((= n 32) #t)\n          ((= n 33) #f)\n     \
    \     ((= n 34) #f)\n          ((= n 35) #f)\n          ((= n 36) #f)\n      \
    \    ((= n 37) #f)\n          ((= n 38) #f)\n          ((= n 39) #f)\n       \
    \   ((= n 40) #t)\n          ((= n 41) #f)\n          ((= n 42) #f)\n        \
    \  ((= n 43) #f)\n          ((= n 44) #f)\n          ((= n 45) #f)\n         \
    \ ((= n 46) #f", "  (define (is_equal_to_sum_even_helper n sum count)\n    (cond\n\
    \      [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_helper n sum)\n    (cond\n    \
    \  [(= n sum) #t]\n      [(< n sum) #f]\n      [else (or (is_equal_to_sum_even_helper\
    \ n (+ sum 2))\n                (is_equal_to_sum_even_helper n (+ sum 4))\n  \
    \              (is_equal_to_sum_even_helper n (+ sum 6))\n                (is_equal_to_sum_even_helper\
    \ n (+ sum 8)))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i\
    \ i i)) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even-iter\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n\
    \ 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even-iter (- n i) 0))) #t]\n\
    \      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i 0) #f)\n          ((= (remainder n i) 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2)))\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #f]\n      [(and (even? i) (even? (- n i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 1))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-helper\
    \ n count)\n    (cond\n      [(= count 4) (= n 0)]\n      [(= (modulo n 2) 0)\
    \ (is_equal_to_sum_even-helper (- n 2) (+ count 1))]\n      [else (is_equal_to_sum_even-helper\
    \ (- n 1) count)]))\n  (is_equal_to_sum_even-helper n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond [(= n 0) #t]\n          [(= i n) #f]\n          [(and (even?\
    \ i) (is_equal_to_sum_even-iter (- n i) (+ i 2))) #t]\n          [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n i) #f]\n\
    \      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (- i\
    \ 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((= n sum) #t)\n\
    \          ((= n (+ sum 2)) #t)\n          ((&gt; n (+ sum 2)) (is_equal_to_sum_even_iter\
    \ n (+ sum 2) (+ count 1)))\n          (#t #f)))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= (modulo\
    \ n i) 0) (is_equal_to_sum_even_iter (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          (else (or (is_equal_to_sum_even-iter\
    \ (- n (* i 2)) (+ i 1))\n                    (is_equal_to_sum_even-iter n (+\
    \ i 1))))))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2)))\n          ((= i n) #t)\n          ((= i", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even-iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-helper\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-helper\
    \ n (+ i 2))]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even-helper (- n\
    \ i) (+ i 2))]\n      [else (is_equal_to_sum_even-helper n (+ i 2))]))\n  (is_equal_to_sum_even-helper\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #t)\n\
    \          ((= i 0) (is_equal_to_sum_even_iter n (+ i 2)))\n          ((even?\
    \ i) (is_equal_to_sum_even_iter (- n i) (+ i 2)))\n          (else (is_equal_to_sum_even_iter\
    \ n (+ i 2)))))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ (* 2\
    \ i) (* 2 (- n i)))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 1))]))\n\
    \  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= n 0) #t)\n          ((= i n) #f)\n          (else (or (is_equal_to_sum_even_iter\
    \ (- n (* i 2)) (+ i 1))\n                    (is_equal_to_sum_even_iter n (+\
    \ i 1))))))\n  (is_equal_to_sum_even_iter n 1))\n", "  (cond\n    [(= n 0) #t]\n\
    \    [(= n 2) #f]\n    [(= n 4) #t]\n    [(= n 6) #f]\n    [(= n 8) #t]\n    [(=\
    \ n 10) #f]\n    [(= n 12) #t]\n    [(= n 14) #f]\n    [(= n 16) #t]\n    [(=\
    \ n 18) #f]\n    [(= n 20) #t]\n    [(= n 22) #f]\n    [(= n 24) #t]\n    [(=\
    \ n 26) #f]\n    [(= n 28) #t]\n    [(= n 30) #f]\n    [(= n 32) #t]\n    [(=\
    \ n 34) #f]\n    [(= n 36) #t]\n    [(= n 38) #f]\n    [(= n 40) #t]\n    [(=\
    \ n 42) #f]\n    [(= n 44) #t]\n    [(= n 46) #f]\n    [(= n 48) #t]\n    [(=\
    \ n 50) #f]\n    [(= n 52) #t]\n    [(= n 54) #f]\n    [(= n 56) #t]\n    [(=\
    \ n 58) #f]\n    [(= n 60) #t]\n    [(= n 62) #f]\n    [(= n 64) #t]\n    [(=\
    \ n 66) #f]\n    [(= n 68) #t]\n    [(= n 70) #f]\n    [(= n 72) #t]\n    [(=\
    \ n 74) #f]\n    [(= n 76) #t]\n    [(= n 78) #f]\n    [(= n 80) #t]\n    [(=\
    \ n 82) #f]\n    [(= n 84) #t]\n    [(= n 86) #f]\n    [(= n 88) #t]\n    [(=\
    \ n 90) #f]\n    [(= n 92) #t]\n    [(= n 94) #f]\n    [(= n 96) #t]\n    [(=\
    \ n 98) #f]\n    [(= n 100) #", "  (define (is_equal_to_sum_even_iter n i)\n \
    \   (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+\
    \ i 2))]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even_iter (- n i) (+ i\
    \ 2))]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n  \
    \    [(= count 4) (= n sum)]\n      [(= n sum) #t]\n      [(= n (+ sum 2)) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\n\
    \      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even_iter n\
    \ (+ sum n) (+ count 1))]\n      [else (is_equal_to_sum_even_iter n sum count)]))\n\
    \  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= (remainder i 2) 0) (is_equal_to_sum_even_iter (- n i)\
    \ (+ i 2))]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= n\
    \ 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n count)\n    (cond\n      [(= count 4) (= n 0)]\n      [(= (modulo n 2) 0)\
    \ (is_equal_to_sum_even_iter (- n 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (letrec ([even? (lambda (n) (if (zero? (remainder n 2)) #t #f))]\n\
    \           [is-sum-of-4-even? (lambda (n)\n                                (if\
    \ (zero? n) #t\n                                    (if (even? n)\n          \
    \                              (is-sum-of-4-even? (- n 2))\n                 \
    \                       #f)))])\n    (is-sum-of-4-even? n)))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even-iter (- n i) (+ i 2))))\
    \ #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #f]\n      [(= n (+ i (* 2 2) (* 2 2) (* 2 2) (* 2 2))) #t]\n      [else\
    \ (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 2))\n",
  "  (cond\n    [(= n 0) #t]\n    [(even? n) (is_equal_to_sum_even (- n 2))]\n   \
    \ [else #f]))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\
    \ [(= count 4) (= n sum)]\n          [(even? n) (is_equal_to_sum_even-iter (-\
    \ n 2) (+ sum 2) (+ count 1))]\n          [else (is_equal_to_sum_even-iter (-\
    \ n 1) (+ sum 1) count)]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even_iter n acc)\n    (cond\n      [(= n 0) (equal? acc 4)]\n\
    \      [(= n 2) (is_equal_to_sum_even_iter (- n 2) (+ acc 1))]\n      [(= n 4)\
    \ (is_equal_to_sum_even_iter (- n 4) (+ acc 1))]\n      [(= n 6) (is_equal_to_sum_even_iter\
    \ (- n 6) (+ acc 1))]\n      [(= n 8) (is_equal_to_sum_even_iter (- n 8) (+ acc\
    \ 1))]\n      [else #f]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter (- n i) 0))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond ((=\
    \ count 4) (= n sum))\n          ((= n sum) #t)\n          ((< n sum) #f)\n  \
    \        (else (is_equal_to_sum_even_iter n (+ sum 2) (+ count 1)))))\n  (is_equal_to_sum_even_iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(=\
    \ i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even_iter (-\
    \ n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define\
    \ (is_equal_to_sum_even_helper n sum)\n    (cond ((= n sum) #t)\n          ((=\
    \ n 0) #f)\n          ((even? n) (is_equal_to_sum_even_helper (- n 2) (+ sum 2)))\n\
    \          (else (is_equal_to_sum_even_helper (- n 1) (+ sum 1)))))\n  (is_equal_to_sum_even_helper\
    \ n 0))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #f]\n      [(= n (+ i (* 2 (quotient (- n i) 2)))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum)\n    (cond ((= n sum) #t)\n          ((= n 0) #f)\n          ((= n 1)\
    \ #f)\n          ((= n 2) #f)\n          ((= n 3) #f)\n          ((= n 4) #f)\n\
    \          ((= n 5) #f)\n          ((= n 6) #f)\n          ((= n 7) #f)\n    \
    \      ((= n 8) #t)\n          ((= n 9) #f)\n          ((= n 10) #f)\n       \
    \   ((= n 11) #f)\n          ((= n 12) #f)\n          ((= n 13) #f)\n        \
    \  ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16) #t)\n         \
    \ ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n          ((=\
    \ n 20) #f)\n          ((= n 21) #f)\n          ((= n 22) #f)\n          ((= n\
    \ 23) #f)\n          ((= n 24) #t)\n          ((= n 25) #f)\n          ((= n 26)\
    \ #f)\n          ((= n 27) #f)\n          ((= n 28) #f)\n          ((= n 29) #f)\n\
    \          ((= n 30) #f)\n          ((= n 31) #f)\n          ((= n 32) #t)\n \
    \         ((= n 33) #f)\n          ((= n 34) #f)\n          ((= n 35) #f)\n  \
    \        ((= n 36) #f)\n          ((= n 37) #f)\n          ((= n 38) #f)\n   \
    \       ((= n 39) #f)\n          ((= n 40) #t)\n          ((= n 41) #f)\n    \
    \      ((= n 42) #f)\n          ((= n 43) #f)\n          ((= n 44) #f)\n     \
    \     ((= n 45) #f)\n          ((= n 46) #f)\n          ((= n 47) #f)\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n          ((= i n)\
    \ #f)\n          (else (or (is_equal_to_sum_even-iter (- n (* i 2)) (+ i 1))\n\
    \                    (is_equal_to_sum_even-iter n (+ i 1))))))\n  (is_equal_to_sum_even-iter\
    \ n 1))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+\
    \ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum count)\n    (cond\n  \
    \    [(= n sum) (= count 4)]\n      [(> n sum) (is_equal_to_sum_even-iter n (+\
    \ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n",
  "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i n) #t]\n    \
    \  [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= n i) #f]\n     \
    \ [else (or (is_equal_to_sum_even-iter (- n i) (+ i 2))\n                (is_equal_to_sum_even-iter\
    \ n (+ i 2)))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even_iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(> n sum) (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]\n     \
    \ [else #f]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(even? n) (is_equal_to_sum_even-iter\
    \ (- n 2) (+ sum 2) (+ count 1))]\n      [else (is_equal_to_sum_even-iter (- n\
    \ 1) (+ sum 1) (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define\
    \ (is_equal_to_sum_even-iter n acc)\n    (cond\n      [(= n acc) #t]\n      [(>\
    \ n acc) (is_equal_to_sum_even-iter n (+ acc 2))]\n      [else #f]))\n  (is_equal_to_sum_even-iter\
    \ n 0))\n", "  (cond\n    [(= n 0) #t]\n    [(= n 2) #f]\n    [(= n 4) #t]\n \
    \   [(= n 6) #f]\n    [(= n 8) #t]\n    [(= n 10) #f]\n    [(= n 12) #t]\n   \
    \ [(= n 14) #f]\n    [(= n 16) #t]\n    [(= n 18) #f]\n    [(= n 20) #t]\n   \
    \ [(= n 22) #f]\n    [(= n 24) #t]\n    [(= n 26) #f]\n    [(= n 28) #t]\n   \
    \ [(= n 30) #f]\n    [(= n 32) #t]\n    [(= n 34) #f]\n    [(= n 36) #t]\n   \
    \ [(= n 38) #f]\n    [(= n 40) #t]\n    [(= n 42) #f]\n    [(= n 44) #t]\n   \
    \ [(= n 46) #f]\n    [(= n 48) #t]\n    [(= n 50) #f]\n    [(= n 52) #t]\n   \
    \ [(= n 54) #f]\n    [(= n 56) #t]\n    [(= n 58) #f]\n    [(= n 60) #t]\n   \
    \ [(= n 62) #f]\n    [(= n 64) #t]\n    [(= n 66) #f]\n    [(= n 68) #t]\n   \
    \ [(= n 70) #f]\n    [(= n 72) #t]\n    [(= n 74) #f]\n    [(= n 76) #t]\n   \
    \ [(= n 78) #f]\n    [(= n 80) #t]\n    [(= n 82) #f]\n    [(= n 84) #t]\n   \
    \ [(= n 86) #f]\n    [(= n 88) #t]\n    [(= n 90) #f]\n    [(= n 92) #t]\n   \
    \ [(= n 94) #f]\n    [(= n 96) #t]\n    [(= n 98) #f]\n    [(= n 100) #", "  (define\
    \ (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i n) #t]\n      [(= i\
    \ 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= i (- n 2)) #f]\n      [else\
    \ (or (is_equal_to_sum_even_iter n (+ i 2)) (is_equal_to_sum_even_iter (- n i)\
    \ 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ i 2))]\n      [(= n (+ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n\
    \      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even_helper n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(< n sum) #f]\n      [else (is_equal_to_sum_even_helper n\
    \ (+ sum 2))]))\n  (is_equal_to_sum_even_helper n 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum)\n    (cond\n      [(= n sum) #t]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2))]\n      [else #f]))\n  (is_equal_to_sum_even_helper n 0))\n", " \
    \ (define (is_equal_to_sum_even-iter n i)\n    (cond\n      ((= i n) #f)\n   \
    \   ((= n (+ i (* 2 i) (* 4 i) (* 6 i))) #t)\n      (else (is_equal_to_sum_even-iter\
    \ n (+ i 1)))))\n  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i\
    \ i i)) #t]\n      [else (is_equal_to_sum_even-iter n (+ i 2))]))\n  (is_equal_to_sum_even-iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond [(= n 0) #t]\n\
    \          [(= i n) #f]\n          [(and (even? i) (is_equal_to_sum_even-iter\
    \ (- n i) (+ i 2))) #t]\n          [else (is_equal_to_sum_even-iter n (+ i 2))]))\n\
    \  (is_equal_to_sum_even-iter n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(even?\
    \ n) (is_equal_to_sum_even (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (if (= n 0)\n        #t\n        (if (= i 0)\n            #f\n   \
    \         (if (even? i)\n                (is_equal_to_sum_even_iter (- n i) (-\
    \ i 1))\n                (is_equal_to_sum_even_iter n (- i 1))))))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n \
    \     [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0)\
    \ #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(=\
    \ n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n \
    \     [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum)\
    \ #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(=\
    \ n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n \
    \     [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0)\
    \ #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(=\
    \ n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n \
    \     [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(= n sum)\
    \ #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n      [(=\
    \ n sum) #t]\n      [(= n 0) #f]\n      [(= n sum) #t]\n      [(= n 0) #f]\n \
    \     [(= n sum) #t", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n\
    \      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n \
    \     [(= n (+ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i 0) #f]\n      [(= n 0) #t]\n      [(> n 0) (or\
    \ (is_equal_to_sum_even_iter (- n (* 2 i)) i)\n                   (is_equal_to_sum_even_iter\
    \ n (- i 1)))]))\n  (is_equal_to_sum_even_iter n (/ n 2)))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #f]\n\
    \      [(= n (+ sum 2)) #t]\n      [else (is_equal_to_sum_even-iter n (+ sum 2)\
    \ (+ count 1))]))\n  (is_equal_to_sum_even-iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter\
    \ n (+ 2 i))]\n      [(= n (+ i i)) #t]\n      [else (or (is_equal_to_sum_even_iter\
    \ n (+ 2 i)) (is_equal_to_sum_even_iter (- n i) (+ 2 i)))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n sum)\n    (cond\n      [(=\
    \ n sum) #t]\n      [(< n sum) #f]\n      [else (or (is_equal_to_sum_even-iter\
    \ n (+ sum 2))\n                (is_equal_to_sum_even-iter n (+ sum 4))\n    \
    \            (is_equal_to_sum_even-iter n (+ sum 6))\n                (is_equal_to_sum_even-iter\
    \ n (+ sum 8)))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i\
    \ i i)) #t]\n      [else (is_equal_to_sum_even_iter n (+ i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i 0) #f)\n          ((= n i) #f)\n          ((= n (+ i (* 2 i)))\
    \ #t)\n          (else (is_equal_to_sum_even-iter n (- i 2)))))\n  (is_equal_to_sum_even-iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n count)\n    (cond\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4)\
    \ (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4)\
    \ (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4)\
    \ (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4)\
    \ (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4)\
    \ (= n 0)]\n      [(= n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(=\
    \ n 0) (= count 4)]\n      [(= count 4) (= n 0)]\n      [(= n 0) (= count 4)]\n\
    \      [(= count 4) (= n 0)]\n      [(= n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n i) #f]\n\
    \      [(= n (+ i (* 2 i))) #t]\n      [else (is_equal_to_sum_even-iter n (+ i\
    \ 2))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (is_equal_to_sum_even-iter (- n i) (- n i))]\n      [else (is_equal_to_sum_even-iter\
    \ n (- i 1))]))\n  (is_equal_to_sum_even-iter n n))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= sum n) (= count 4))\n          ((> sum n) #f)\n\
    \          ((= count 4) #f)\n          (else (is_equal_to_sum_even_iter n (+ sum\
    \ 2) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= i n) #t]\n      [(= i 0) #f]\n      [(= (remainder\
    \ i 2) 0) (or (is_equal_to_sum_even_iter (- n i) i) (is_equal_to_sum_even_iter\
    \ n (- i 2)))]\n      [else (is_equal_to_sum_even_iter n (- i 2))]))\n  (is_equal_to_sum_even_iter\
    \ n n))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= n (+\
    \ i (is_equal_to_sum_even_iter (- n i) 2))) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even-iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i 0) #f]\n      [(= n (* 2 i))\
    \ #t]\n      [(= n (+ (* 2 i) (* 2 (- i 1)))) #t]\n      [(= n (+ (* 2 i) (* 2\
    \ (- i 1)) (* 2 (- i 2)))) #t]\n      [(= n (+ (* 2 i) (* 2 (- i 1)) (* 2 (- i\
    \ 2)) (* 2 (- i 3)))) #t]\n      [else (is_equal_to_sum_even-iter n (- i 1))]))\n\
    \  (is_equal_to_sum_even-iter n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even_iter n (+ sum 2) (+ count\
    \ 1))]))\n  (is_equal_to_sum_even_iter n 0 0))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(= n sum) #t]\n\
    \      [(< n sum) #f]\n      [else (is_equal_to_sum_even_helper n (+ sum 2) (+\
    \ count 1))]))\n  (is_equal_to_sum_even_helper n 0 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n sum count)\n    (cond ((= count 4) (= n sum))\n          ((even? n) (is_equal_to_sum_even_iter\
    \ (- n 2) (+ sum 2) (+ count 1)))\n          (else (is_equal_to_sum_even_iter\
    \ (- n 1) (+ sum 1) (+ count 1)))))\n  (is_equal_to_sum_even_iter n 0 0))\n",
  "  (define (is_equal_to_sum_even_iter n i)\n    (cond ((= i n) #f)\n          ((=\
    \ i (+ n (* 2 2 2))) #t)\n          (else (is_equal_to_sum_even_iter n (+ i 2)))))\n\
    \  (is_equal_to_sum_even_iter n 2))\n", "  (cond\n    [(= n 0) #t]\n    [(even?\
    \ n) (is_equal_to_sum_even (- n 2))]\n    [else #f]))\n", "  (define (is_equal_to_sum_even_helper\
    \ n sum count)\n    (cond\n      [(= count 4) (= n sum)]\n      [(> n sum) (is_equal_to_sum_even_helper\
    \ n (+ sum 2) (+ count 1))]\n      [else #f]))\n  (is_equal_to_sum_even_helper\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond ((= n 0) #t)\n\
    \          ((= i n) #f)\n          (else (or (is_equal_to_sum_even-iter (- n (*\
    \ i 2)) (+ i 1))\n                    (is_equal_to_sum_even-iter n (+ i 1))))))\n\
    \  (is_equal_to_sum_even-iter n 1))\n", "  (define (is_equal_to_sum_even-iter\
    \ n sum count)\n    (cond\n      [(= n sum) (= count 4)]\n      [(> n sum)\n \
    \      (cond\n         [(= count 4) #t]\n         [else #f])]\n      [else\n \
    \      (is_equal_to_sum_even-iter n (+ sum 2) (+ count 1))]))\n  (is_equal_to_sum_even-iter\
    \ n 0 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(=\
    \ i 0) #f]\n      [(= n (* i 2)) #t]\n      [else (is_equal_to_sum_even-iter (-\
    \ n (* i 2)) (- i 1))]))\n  (is_equal_to_sum_even-iter n (/ n 2)))\n", "  (define\
    \ (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i 0) #f]\n      [(= n\
    \ 0) #t]\n      [(< n 0) #f]\n      [else (or (is_equal_to_sum_even-iter (- n\
    \ (* 2 i)) i)\n                (is_equal_to_sum_even-iter n (- i 1)))]))\n  (is_equal_to_sum_even-iter\
    \ n (/ n 2)))\n", "  (define (is_equal_to_sum_even_iter n sum count)\n    (cond\
    \ ((= count 4) (= n sum))\n          ((= n sum) #t)\n          ((= n 0) #f)\n\
    \          ((= n 1) #f)\n          ((= n 2) #f)\n          ((= n 3) #f)\n    \
    \      ((= n 4) #f)\n          ((= n 5) #f)\n          ((= n 6) #f)\n        \
    \  ((= n 7) #f)\n          ((= n 8) #t)\n          ((= n 9) #f)\n          ((=\
    \ n 10) #f)\n          ((= n 11) #f)\n          ((= n 12) #t)\n          ((= n\
    \ 13) #f)\n          ((= n 14) #f)\n          ((= n 15) #f)\n          ((= n 16)\
    \ #t)\n          ((= n 17) #f)\n          ((= n 18) #f)\n          ((= n 19) #f)\n\
    \          ((= n 20) #t)\n          ((= n 21) #f)\n          ((= n 22) #f)\n \
    \         ((= n 23) #f)\n          ((= n 24) #t)\n          ((= n 25) #f)\n  \
    \        ((= n 26) #f)\n          ((= n 27) #f)\n          ((= n 28) #t)\n   \
    \       ((= n 29) #f)\n          ((= n 30) #f)\n          ((= n 31) #f)\n    \
    \      ((= n 32) #t)\n          ((= n 33) #f)\n          ((= n 34) #f)\n     \
    \     ((= n 35) #f)\n          ((= n 36) #t)\n          ((= n 37) #f)\n      \
    \    ((= n 38) #f)\n          ((= n 39) #f)\n          ((= n 40) #t)\n       \
    \   ((= n 41) #f)\n          ((= n 42) #f)\n          ((= n 43) #f)\n        \
    \  ((= n 44) #t)\n          ((= n 45) #f)\n          ((= n 46) #f", "  (define\
    \ (is_equal_to_sum_even_iter n sum)\n    (cond\n      [(= n sum) #t]\n      [(<\
    \ n sum) #f]\n      [else (or (is_equal_to_sum_even_iter (- n 2) sum)\n      \
    \          (is_equal_to_sum_even_iter (- n 4) sum))]))\n  (is_equal_to_sum_even_iter\
    \ n 0))\n", "  (define (is_equal_to_sum_even-iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even-iter n (+ i 2))]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even-iter (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even-iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even-iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond ((= i n) #t)\n          ((= i (+ n 2)) #f)\n          ((= i\
    \ (+ n 4)) #f)\n          ((= i (+ n 6)) #f)\n          ((= i (+ n 8)) #f)\n \
    \         (else (is_equal_to_sum_even_iter n (+ i 2)))))\n  (is_equal_to_sum_even_iter\
    \ n 2))\n", "  (define (is_equal_to_sum_even_iter n i)\n    (cond\n      [(= i\
    \ n) #t]\n      [(= i 0) (is_equal_to_sum_even_iter n (+ i 2))]\n      [(= (remainder\
    \ n i) 0) (is_equal_to_sum_even_iter (- n i) (+ i 2))]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 0))\n", "  (define (is_equal_to_sum_even_iter\
    \ n i)\n    (cond\n      [(= n 0) #t]\n      [(= i n) #f]\n      [(= n (+ i i))\
    \ #t]\n      [(= n (+ i i i)) #t]\n      [(= n (+ i i i i)) #t]\n      [else (is_equal_to_sum_even_iter\
    \ n (+ i 2))]))\n  (is_equal_to_sum_even_iter n 2))\n", "  (if (= n 0)\n     \
    \ #t\n      (if (even? n)\n          (is_equal_to_sum_even (- n 2))\n        \
    \  #f)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
