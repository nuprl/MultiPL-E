name: HumanEval_153_Strongest_Extension
language: racket
prompt: "#lang racket\n\n;; You will be given the name of a class (a string) and a\
  \ list of extensions.\n;; The extensions are to be used to load additional classes\
  \ to the class. The\n;; strength of the extension is as follows: Let CAP be the\
  \ number of the uppercase\n;; letters in the extension's name, and let SM be the\
  \ number of lowercase letters \n;; in the extension's name, the strength is given\
  \ by the fraction CAP - SM. \n;; You should find the strongest extension and return\
  \ a string in this \n;; format: ClassName.StrongestExtensionName.\n;; If there are\
  \ two or more extensions with the same strength, you should\n;; choose the one that\
  \ comes first in the list.\n;; For example, if you are given \"Slices\" as the class\
  \ and a list of the\n;; extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then\
  \ you should\n;; return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest\
  \ extension \n;; (its strength is -1).\n;; Example:\n;; for Strongest_Extension('my_class',\
  \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n(define (Strongest_Extension class_name\
  \ extensions)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate Strongest_Extension))\n\
  \    (check-equal? (candidate \"Watashi\" (list \"tEN\" \"niNE\" \"eIGHt8OKe\"))\
  \ \"Watashi.eIGHt8OKe\")\n    (check-equal? (candidate \"Boku123\" (list \"nani\"\
  \ \"NazeDa\" \"YEs.WeCaNe\" \"32145tggg\")) \"Boku123.YEs.WeCaNe\")\n    (check-equal?\
  \ (candidate \"__YESIMHERE\" (list \"t\" \"eMptY\" \"nothing\" \"zeR00\" \"NuLl__\"\
  \ \"123NoooneB321\")) \"__YESIMHERE.NuLl__\")\n    (check-equal? (candidate \"K\"\
  \ (list \"Ta\" \"TAR\" \"t234An\" \"cosSo\")) \"K.TAR\")\n    (check-equal? (candidate\
  \ \"__HAHA\" (list \"Tab\" \"123\" \"781345\" \"-_-\")) \"__HAHA.123\")\n    (check-equal?\
  \ (candidate \"YameRore\" (list \"HhAas\" \"okIWILL123\" \"WorkOut\" \"Fails\" \"\
  -_-\")) \"YameRore.okIWILL123\")\n    (check-equal? (candidate \"finNNalLLly\" (list\
  \ \"Die\" \"NowW\" \"Wow\" \"WoW\")) \"finNNalLLly.WoW\")\n    (check-equal? (candidate\
  \ \"_\" (list \"Bb\" \"91245\")) \"_.Bb\")\n    (check-equal? (candidate \"Sp\"\
  \ (list \"671235\" \"Bb\")) \"Sp.671235\")\n))\n\n(test-humaneval)"
completions: ["  (define (strength ext)\n    (let ((cap (count (lambda (c) (char-upper-case?\
    \ c)) ext))\n          (sm (count (lambda (c) (char-lower-case? c)) ext)))\n \
    \     (/ cap sm)))\n  (define (strongest_extension lst)\n    (if (null? lst)\n\
    \        \"\"\n        (let ((ext (car lst))\n              (rest (cdr lst)))\n\
    \          (if (null? rest)\n              ext\n              (let ((strongest\
    \ (strongest_extension rest)))\n                (if (> (strength ext) (strength\
    \ strongest))\n                    ext\n                    strongest))))))\n\
    \  (string-append class_name \".\" (strongest_extension extensions)))\n", "  (define\
    \ (strength str)\n    (let ((caps (count-if char-upper-case? str))\n         \
    \ (smalls (count-if char-lower-case? str)))\n      (- caps smalls)))\n  (define\
    \ (strongest-extension-name extensions)\n    (apply max\n           (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ strength extensions))))\n", "  (define (strength extension)\n    (let ((cap\
    \ (count-if char-upper-case? extension))\n          (sm (count-if char-lower-case?\
    \ extension)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (list-ref extensions (list-index (strongest-extension-name\
    \ extensions) (map strength extensions))))\n  (string-append class_name \".\"\
    \ (strongest-extension-index extensions)))\n", "  (define (strength extension)\n\
    \    (let ((cap (count-if char-upper-case? extension))\n          (sm (count-if\
    \ char-lower-case? extension)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (let ((max-strength (apply max (map strength extensions))))\n\
    \      (first (filter (lambda (extension) (= max-strength (strength extension)))\n\
    \                     extensions))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (car (sort (lambda (ext1\
    \ ext2)\n                 (string<? ext1 ext2))\n               (filter (lambda\
    \ (ext)\n                         (= (strength ext) (strength (car extensions))))\n\
    \                       extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (/ (- caps\
    \ smalls) 1.0)))\n  (define (strongest-extension-name extensions)\n    (let ([strongest-extension\
    \ (first extensions)]\n          [strongest-strength (strength (first extensions))])\n\
    \      (for ([extension (rest extensions)])\n        (let ([strength (strength\
    \ extension)])\n          (when (> strength strongest-strength)\n            (set!\
    \ strongest-extension extension)\n            (set! strongest-strength strength))))\n\
    \      strongest-extension))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(string=?\
    \ (first extensions) strongest-extension-name)\n             (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]\n            [(> (strength (first\
    \ extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper-lower str)\n    (let* ([upper (count\
    \ (lambda (c) (char-upper-case? c)) str)]\n           [lower (count (lambda (c)\
    \ (char-lower-case? c)) str)])\n      (- upper lower)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map count-upper-lower extensions)))\n  (define\
    \ (strongest-extension-index extensions)\n    (let* ([strongest-extension-name\
    \ (strongest-extension-name extensions)]\n           [strongest-extension-index\
    \ (find-first (lambda (extension)\n                                          \
    \          (= (count-upper-lower extension)\n                                \
    \                       strongest-extension-name))\n                         \
    \                         extensions)])\n      strongest-extension-index))\n \
    \ (string-append class_name \".\" (list-ref extensions (strongest-extension-index\
    \ extensions))))\n", "  (define (strength ext)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension lst)\n    (if\
    \ (null? lst)\n        \"\"\n        (let ([ext (car lst)]\n              [rest\
    \ (cdr lst)])\n          (if (null? rest)\n              ext\n              (let\
    \ ([next (strongest-extension rest)])\n                (if (&gt; (strength ext)\
    \ (strength next))\n                    ext\n                    next))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n</code>\n",
  "  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n      (if (char-upper-case?\
    \ c) 1 0)))\n  (define (count-lower str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-lower-case? c) 1 0)))\n  (define (strength str)\n    (- (count-upper\
    \ str) (count-lower str)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmin (map strength extensions)))))\n", "  (define (count-upper-case\
    \ str)\n    (for/fold ([count 0]) ([c (in-string str)])\n      (if (char-upper-case?\
    \ c)\n          (+ count 1)\n          count)))\n  (define (count-lower-case str)\n\
    \    (for/fold ([count 0]) ([c (in-string str)])\n      (if (char-lower-case?\
    \ c)\n          (+ count 1)\n          count)))\n  (define (strength str)\n  \
    \  (/ (- (count-upper-case str) (count-lower-case str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n",
  "  (define (count-upper str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-upper-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-lower str)\n    (let loop ([i 0] [count 0])\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (- (count-upper str) (count-lower\
    \ str)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n        '()\n\
    \        (if (null? (cdr lst))\n            (car lst)\n            (if (< (strength\
    \ (car lst)) (strength (cadr lst)))\n                (strongest-extension (cdr\
    \ lst))\n                (strongest-extension (cons (car lst) (cddr lst)))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([extensions (sort\
    \ extensions (lambda (a b) (< (strength a) (strength b))))])\n      (car extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ((caps (count-if char-upper-case? extension))\n\
    \          (smalls (count-if char-lower-case? extension)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\"\n    \
    \    (let ((extension (car lst))\n              (rest (cdr lst)))\n          (if\
    \ (null? rest)\n              extension\n              (let ((next (strongest-extension\
    \ rest)))\n                (if (&gt; (strength extension) (strength next))\n \
    \                   extension\n                    next))))))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n</code>\n", "  (define\
    \ (strength ext)\n    (let ((caps (string-count ext #\\A #\\Z))\n          (smalls\
    \ (string-count ext #\\a #\\z)))\n      (/ (- caps smalls) (string-length ext))))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ((cap (regexp-match #rx\"[A-Z]\" ext))\n   \
    \       (sm (regexp-match #rx\"[a-z]\" ext)))\n      (- (length cap) (length sm))))\n\
    \  (define (strongest-extension lst)\n    (let ((max-strength (apply max (map\
    \ strength lst)))\n          (max-ext (car lst)))\n      (for ([ext lst])\n  \
    \      (if (= (strength ext) max-strength)\n            (set! max-ext ext)))\n\
    \      max-ext))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength extension)\n    (define (count-upper-case extension)\n    \
    \  (if (empty? extension)\n          0\n          (if (char-upper-case? (car extension))\n\
    \              (+ 1 (count-upper-case (cdr extension)))\n              (count-upper-case\
    \ (cdr extension)))))\n    (define (count-lower-case extension)\n      (if (empty?\
    \ extension)\n          0\n          (if (char-lower-case? (car extension))\n\
    \              (+ 1 (count-lower-case (cdr extension)))\n              (count-lower-case\
    \ (cdr extension)))))\n    (- (count-upper-case extension) (count-lower-case extension)))\n\
    \  (define (find-strongest-extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (> (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (find-strongest-extension (cons (car extensions) (cddr extensions)))\n\
    \                (find-strongest-extension (cdr extensions))))))\n  (string-append\
    \ class_name \".\" (find-strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let loop ([cap 0] [sm 0] [i 0])\n      (cond [(= i (string-length\
    \ ext))\n             (/ cap (- sm))]\n            [(char-upper-case? (string-ref\
    \ ext i))\n             (loop (+ cap 1) sm (+ i 1))]\n            [(char-lower-case?\
    \ (string-ref ext i))\n             (loop cap (+ sm 1) (+ i 1))]\n           \
    \ [else\n             (loop cap sm (+ i 1))])))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions)\n             strongest-extension-name]\n  \
    \          [(> (strength (first extensions)) (strength strongest-extension-name))\n\
    \             (strongest-extension-name-helper (rest extensions) (first extensions))]\n\
    \            [else\n             (strongest-extension-name-helper (rest extensions)\
    \ strongest-extension-name)]))\n    (strongest-extension-name-helper extensions\
    \ (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (define (count-upper str)\n\
    \      (if (empty? str)\n          0\n          (if (char-upper-case? (first str))\n\
    \              (+ 1 (count-upper (rest str)))\n              (count-upper (rest\
    \ str)))))\n    (define (count-lower str)\n      (if (empty? str)\n          0\n\
    \          (if (char-lower-case? (first str))\n              (+ 1 (count-lower\
    \ (rest str)))\n              (count-lower (rest str)))))\n    (- (count-upper\
    \ str) (count-lower str)))\n  (define (strongest-extension extensions)\n    (if\
    \ (empty? extensions)\n        \"\"\n        (if (empty? (rest extensions))\n\
    \            (first extensions)\n            (if (> (strength (first extensions))\
    \ (strength (second extensions)))\n                (strongest-extension (cons\
    \ (first extensions) (rest (rest extensions))))\n                (strongest-extension\
    \ (cons (second extensions) (rest (rest extensions))))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (count_upper str)\n\
    \    (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n      \
    \    count\n          (if (char-upper-case? (string-ref str i))\n            \
    \  (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (count_lower str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-lower-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (strength str)\n    (/ (- (count_upper str) (count_lower str)) 1.0))\n\
    \  (define (find_strongest extensions)\n    (if (null? extensions)\n        \"\
    \"\n        (if (= (strength (car extensions)) (strength (find_strongest (cdr\
    \ extensions))))\n            (car extensions)\n            (find_strongest (cdr\
    \ extensions)))))\n  (string-append class_name \".\" (find_strongest extensions)))\n",
  "  (define (strength ext)\n    (let ((caps (regexp-match #rx\"[A-Z]\" ext))\n  \
    \        (smalls (regexp-match #rx\"[a-z]\" ext)))\n      (/ (- (length caps)\
    \ (length smalls)) 1.0)))\n  (define (strongest-extension-name extensions)\n \
    \   (let ((strongest-extension (car extensions))\n          (strongest-strength\
    \ (strength (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n\
    \        (let ((strength (strength ext)))\n          (when (> strength strongest-strength)\n\
    \            (set! strongest-extension ext)\n            (set! strongest-strength\
    \ strength))))\n      strongest-extension))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (count-upper-lower str)\n\
    \    (let ([upper (count (lambda (c) (char-upper-case? c)) str)]\n          [lower\
    \ (count (lambda (c) (char-lower-case? c)) str)])\n      (- upper lower)))\n \
    \ (define (strongest-extension-name extensions)\n    (let ([extensions (sort extensions\
    \ (lambda (a b) (< (count-upper-lower a) (count-upper-lower b))))])\n      (car\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (let ([extensions (map (lambda (extension) (list extension (strength extension)))\
    \ extensions)])\n    (string-append class_name \".\" (car (argmax extensions (lambda\
    \ (x y) (< (cadr x) (cadr y))))))))\n", "  (define (strength str)\n    (let ([caps\
    \ (count-if char-upper-case? str)]\n          [smalls (count-if char-lower-case?\
    \ str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extension (car extensions)]\n          [rest (cdr extensions)])\n\
    \      (if (null? rest)\n          extension\n          (let ([next-extension\
    \ (strongest-extension-name rest)])\n            (if (&gt; (strength extension)\
    \ (strength next-extension))\n                extension\n                next-extension)))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n</code>\n",
  "  (define (strength ext)\n    (let loop ([i 0] [cap 0] [sm 0])\n      (cond [(=\
    \ i (string-length ext))\n             (/ cap (- cap sm))]\n            [(char-upper-case?\
    \ (string-ref ext i))\n             (loop (+ i 1) (+ cap 1) sm)]\n           \
    \ [(char-lower-case? (string-ref ext i))\n             (loop (+ i 1) cap (+ sm\
    \ 1))]\n            [else\n             (loop (+ i 1) cap sm)])))\n  (define (strongest-extension\
    \ lst)\n    (cond [(null? lst)\n           \"\"]\n          [(null? (cdr lst))\n\
    \           (car lst)]\n          [else\n           (let ([ext1 (car lst)]\n \
    \                [ext2 (cadr lst)])\n             (if (> (strength ext1) (strength\
    \ ext2))\n                 ext1\n                 ext2))]))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ((caps (count-if char-upper-case? ext))\n          (smalls (count-if\
    \ char-lower-case? ext)))\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ((strongest-extension (car extensions))\n          (strongest-extension-strength\
    \ (strength (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n\
    \        (let ((ext-strength (strength ext)))\n          (when (> ext-strength\
    \ strongest-extension-strength)\n            (set! strongest-extension ext)\n\
    \            (set! strongest-extension-strength ext-strength))))\n      strongest-extension))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) str)]\n          [smalls (count (lambda (c) (char-lower-case? c)) str)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (if (null? extensions)\n        \"\"\n        (let ([extension (car extensions)]\n\
    \              [rest (cdr extensions)])\n          (if (null? rest)\n        \
    \      extension\n              (let ([next-extension (car rest)]\n          \
    \          [next-rest (cdr rest)])\n                (if (< (strength extension)\
    \ (strength next-extension))\n                    (strongest-extension-name (cons\
    \ next-extension next-rest))\n                    (strongest-extension-name (cons\
    \ extension next-rest))))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count-if\
    \ char-upper-case? extension)]\n          [sm (count-if char-lower-case? extension)])\n\
    \      (- cap sm)))\n  (define (strongest-extension extensions)\n    (let ([extensions\
    \ (sort extensions (\u03BB (x y) (< (strength x) (strength y))))])\n      (car\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength str)\n\
    \    (let ([caps (regexp-match #rx\"[A-Z]\" str)]\n          [smalls (regexp-match\
    \ #rx\"[a-z]\" str)])\n      (- (length caps) (length smalls))))\n  (define (strongest-extension-name\
    \ extensions)\n    (if (null? extensions)\n        \"\"\n        (let ([ext (car\
    \ extensions)]\n              [rest (cdr extensions)])\n          (if (null? rest)\n\
    \              ext\n              (let ([rest-ext (strongest-extension-name rest)])\n\
    \                (if (> (strength ext) (strength rest-ext))\n                \
    \    ext\n                    rest-ext))))))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (count-upper str)\n \
    \   (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n  (define\
    \ (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (/ (- (count-upper str) (count-lower\
    \ str)) (string-length str)))\n  (define (strongest-extension strs)\n    (apply\
    \ max (map strength strs)))\n  (define (strongest-extension-name strs)\n    (list-ref\
    \ (filter (\u03BB (str) (= (strength str) (strongest-extension strs))) strs) 0))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (let ([extensions (sort extensions string<? #:key strength)])\n      (car extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n", "  (define (count-upper-case str)\n\
    \    (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n      \
    \    count\n          (if (char-upper-case? (string-ref str i))\n            \
    \  (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define\
    \ (count-lower-case str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-lower-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (strength str)\n    (/ (- (count-upper-case str) (count-lower-case\
    \ str)) 1.0))\n  (define (strongest-extension extensions)\n    (define (strongest-extension-helper\
    \ extensions strongest-strength strongest-extension)\n      (if (null? extensions)\n\
    \          strongest-extension\n          (let ([ext (car extensions)])\n    \
    \        (if (> (strength ext) strongest-strength)\n                (strongest-extension-helper\
    \ (cdr extensions) (strength ext) ext)\n                (strongest-extension-helper\
    \ (cdr extensions) strongest-strength strongest-extension)))))\n    (strongest-extension-helper\
    \ extensions -1.0 \"\"))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond\n        [(empty? extensions) strongest-extension-name]\n       \
    \ [(> (strength (first extensions)) (strength strongest-extension-name))\n   \
    \      (strongest-extension-name-helper (rest extensions) (first extensions))]\n\
    \        [else (strongest-extension-name-helper (rest extensions) strongest-extension-name)]))\n\
    \    (strongest-extension-name-helper extensions (first extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ extension)\n    (define (count_upper extension)\n      (if (empty? extension)\n\
    \          0\n          (if (char-upper-case? (car extension))\n             \
    \ (+ 1 (count_upper (cdr extension)))\n              (count_upper (cdr extension)))))\n\
    \    (define (count_lower extension)\n      (if (empty? extension)\n         \
    \ 0\n          (if (char-lower-case? (car extension))\n              (+ 1 (count_lower\
    \ (cdr extension)))\n              (count_lower (cdr extension)))))\n    (- (count_upper\
    \ extension) (count_lower extension)))\n  (define (strongest_extension extensions)\n\
    \    (if (empty? extensions)\n        \"\"\n        (if (= (strength (car extensions))\
    \ (strength (cadr extensions)))\n            (string-append class_name \".\" (car\
    \ extensions))\n            (string-append class_name \".\" (car extensions)))))\n\
    \  (strongest_extension extensions))\n", "  (define (count-caps str)\n    (define\
    \ (count-caps-iter str count)\n      (cond\n        [(empty? str) count]\n   \
    \     [(char-upper-case? (first str)) (count-caps-iter (rest str) (+ count 1))]\n\
    \        [else (count-caps-iter (rest str) count)]))\n    (count-caps-iter str\
    \ 0))\n  (define (count-smalls str)\n    (define (count-smalls-iter str count)\n\
    \      (cond\n        [(empty? str) count]\n        [(char-lower-case? (first\
    \ str)) (count-smalls-iter (rest str) (+ count 1))]\n        [else (count-smalls-iter\
    \ (rest str) count)]))\n    (count-smalls-iter str 0))\n  (define (strength str)\n\
    \    (/ (- (count-caps str) (count-smalls str)) (string-length str)))\n  (define\
    \ (strongest-extension-iter extensions strongest-extension)\n    (cond\n     \
    \ [(empty? extensions) strongest-extension]\n      [(> (strength (first extensions))\
    \ (strength strongest-extension))\n       (strongest-extension-iter (rest extensions)\
    \ (first extensions))]\n      [else (strongest-extension-iter (rest extensions)\
    \ strongest-extension)]))\n  (string-append class_name \".\" (strongest-extension-iter\
    \ extensions (first extensions))))\n", "  (let ([extensions (map string->list\
    \ extensions)])\n    (let ([strongest-extension (apply max extensions (lambda\
    \ (ext1 ext2)\n                                                      (let ([cap1\
    \ (count (lambda (c) (char-upper-case? c)) ext1)])\n                         \
    \                               (let ([sm1 (count (lambda (c) (char-lower-case?\
    \ c)) ext1)])\n                                                          (let\
    \ ([cap2 (count (lambda (c) (char-upper-case? c)) ext2)])\n                  \
    \                                          (let ([sm2 (count (lambda (c) (char-lower-case?\
    \ c)) ext2)])\n                                                              (if\
    \ (= (- cap1 sm1) (- cap2 sm2))\n                                            \
    \                      (string<? (list->string ext1) (list->string ext2))\n  \
    \                                                                (> (- cap1 sm1)\
    \ (- cap2 sm2))))))))))])\n      (string-append class_name \".\" (list->string\
    \ strongest-extension)))))\n", "  (define (strength str)\n    (let ([cap (count-if\
    \ char-upper-case? str)]\n          [sm (count-if char-lower-case? str)])\n  \
    \    (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength extension)\n\
    \    (let ((cap (count-if char-upper-case? extension))\n          (sm (count-if\
    \ char-lower-case? extension)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (let ((strongest-extension (car extensions))\n          (strongest-strength\
    \ (strength (car extensions))))\n      (for/fold ([strongest-extension (car extensions)]\n\
    \                 [strongest-strength (strength (car extensions))])\n        \
    \  ([extension (in-list (cdr extensions))])\n        (let ((strength (strength\
    \ extension)))\n          (if (> strength strongest-strength)\n              (values\
    \ extension strength)\n              (values strongest-extension strongest-strength))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-ext-name)\n      (cond [(empty? extensions) strongest-ext-name]\n\
    \            [(> (strength (first extensions)) (strength strongest-ext-name))\n\
    \             (strongest-extension-name-iter (rest extensions) (first extensions))]\n\
    \            [else (strongest-extension-name-iter (rest extensions) strongest-ext-name)]))\n\
    \    (strongest-extension-name-iter extensions (first extensions)))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ str)\n    (let ((caps (count-if char-upper-case? str))\n          (smalls (count-if\
    \ char-lower-case? str)))\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-iter extensions strongest-extension-name)\n\
    \      (cond ((null? extensions) strongest-extension-name)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-iter\
    \ (cdr extensions) strongest-extension-name))))\n    (strongest-extension-name-iter\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper-lower str)\n    (let ((upper 0) (lower\
    \ 0))\n      (for ([c (in-string str)])\n        (cond\n          [(char-upper-case?\
    \ c) (set! upper (+ upper 1))]\n          [(char-lower-case? c) (set! lower (+\
    \ lower 1))]))\n      (cons upper lower)))\n  (define (strength str)\n    (let\
    \ ((upper-lower (count-upper-lower str)))\n      (/ (- (car upper-lower) (cdr\
    \ upper-lower)) 1.0)))\n  (define (strongest-extension lst)\n    (let ((strongest-extension\
    \ (car lst))\n          (strongest-strength (strength (car lst))))\n      (for\
    \ ([ext (in-list (cdr lst))])\n        (let ((ext-strength (strength ext)))\n\
    \          (cond\n            [(> ext-strength strongest-strength)\n         \
    \    (set! strongest-extension ext)\n             (set! strongest-strength ext-strength)])))\n\
    \      strongest-extension))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (count-upper str)\n    (for/sum ([c (in-string\
    \ str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n \
    \ (define (strength str)\n    (- (count-upper str) (count-lower str)))\n  (define\
    \ (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (let ([strongest (apply max (map strength extensions))])\n \
    \   (string-append class_name \".\" (list-ref extensions (position strongest extensions)))))\n",
  "  (define (count_caps str)\n    (cond\n      [(empty? str) 0]\n      [(char-upper-case?\
    \ (car str)) (+ 1 (count_caps (cdr str)))]\n      [else (count_caps (cdr str))]))\n\
    \  (define (count_smalls str)\n    (cond\n      [(empty? str) 0]\n      [(char-lower-case?\
    \ (car str)) (+ 1 (count_smalls (cdr str)))]\n      [else (count_smalls (cdr str))]))\n\
    \  (define (strength str)\n    (/ (- (count_caps str) (count_smalls str)) (string-length\
    \ str)))\n  (define (strongest_extensions lst)\n    (cond\n      [(empty? lst)\
    \ (error \"No extensions\")]\n      [(empty? (cdr lst)) (car lst)]\n      [(>\
    \ (strength (car lst)) (strength (cadr lst))) (strongest_extensions (cons (car\
    \ lst) (cddr lst)))]\n      [else (strongest_extensions (cdr lst))]))\n  (string-append\
    \ class_name \".\" (strongest_extensions extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n     \
    \     [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([strongest-extension\
    \ (apply max extensions)])\n      (list-ref extensions (list-index strongest-extension\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper str)\n    (for/sum ([c (in-string\
    \ str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n \
    \ (define (strength str)\n    (- (count-upper str) (count-lower str)))\n  (define\
    \ (strongest-extension lst)\n    (let ([strongest (car lst)])\n      (for ([ext\
    \ (in-list (cdr lst))])\n        (when (> (strength ext) (strength strongest))\n\
    \          (set! strongest ext)))\n      strongest))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength str)\n   \
    \ (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if char-lower-case?\
    \ str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-strength strongest-name)\n\
    \      (cond [(empty? extensions) strongest-name]\n            [else (let ([extension\
    \ (first extensions)]\n                        [strength (strength extension)])\n\
    \                    (if (> strength strongest-strength)\n                   \
    \     (strongest-extension-name-helper (rest extensions) strength extension)\n\
    \                        (strongest-extension-name-helper (rest extensions) strongest-strength\
    \ strongest-name)))]))\n    (strongest-extension-name-helper extensions -1 \"\"\
    ))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count-if char-upper-case? ext)]\n  \
    \        [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (define (strongest-extension-index extensions)\n    (list-ref\
    \ extensions (argmax (map strength extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-index extensions)))\n", "  (define (strength ext)\n\
    \    (define (count-upper str)\n      (if (empty? str)\n          0\n        \
    \  (if (char-upper-case? (first str))\n              (+ 1 (count-upper (rest str)))\n\
    \              (count-upper (rest str)))))\n    (define (count-lower str)\n  \
    \    (if (empty? str)\n          0\n          (if (char-lower-case? (first str))\n\
    \              (+ 1 (count-lower (rest str)))\n              (count-lower (rest\
    \ str)))))\n    (- (count-upper ext) (count-lower ext)))\n  (define (strongest-extension\
    \ extensions)\n    (if (empty? extensions)\n        \"\"\n        (let ([ext (first\
    \ extensions)])\n          (if (empty? (rest extensions))\n              ext\n\
    \              (let ([next-ext (strongest-extension (rest extensions))])\n   \
    \             (if (> (strength ext) (strength next-ext))\n                   \
    \ ext\n                    next-ext))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              ext\n             \
    \ (let ([next-strongest (strongest-extension-name rest)])\n                (if\
    \ (> (strength ext) (strength next-strongest))\n                    ext\n    \
    \                next-strongest))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((caps (count-if char-upper-case?\
    \ ext))\n          (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max-by strength extensions))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n   \
    \       (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength extension)\n    (let ((cap-count (count-if char-upper-case? extension))\n\
    \          (sm-count (count-if char-lower-case? extension)))\n      (- cap-count\
    \ sm-count)))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) str)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-iter extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(> (strength (first extensions)) strongest-extension-strength)\n\
    \             (strongest-extension-name-iter (rest extensions) (first extensions)\
    \ (strength (first extensions)))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)]))\n\
    \    (strongest-extension-name-iter extensions (first extensions) (strength (first\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap-count (count-if\
    \ char-upper-case? extension)]\n          [sm-count (count-if char-lower-case?\
    \ extension)])\n      (- cap-count sm-count)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (first extensions)])\n      (for\
    \ ([extension extensions])\n        (when (> (strength extension) (strength strongest-extension))\n\
    \          (set! strongest-extension extension)))\n      strongest-extension))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength str)\n    (let ((cap (count-if char-upper-case? str))\n   \
    \       (sm (count-if char-lower-case? str)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-iter extensions strongest-extension-name)\n\
    \      (cond ((null? extensions) strongest-extension-name)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-name-iter\
    \ (cdr extensions) strongest-extension-name))))\n    (strongest-extension-name-iter\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ((caps (count-if\
    \ char-upper-case? extension))\n          (smalls (count-if char-lower-case? extension)))\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (lambda (a b) (< (strength a) (strength\
    \ b))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if char-upper-case?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ([ext (car lst)]\n          [rest\
    \ (cdr lst)])\n      (if (null? rest)\n          ext\n          (let ([next (strongest-extension\
    \ rest)])\n            (if (> (strength ext) (strength next))\n              \
    \  ext\n                next)))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm\
    \ (count-if char-lower-case? ext)))\n      (/ cap sm)))\n  (define (strongest-extension-name\
    \ exts)\n    (apply max-by strength exts))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define\
    \ (strongest_extension_name extensions)\n    (let ([strongest_extension (first\
    \ extensions)])\n      (for ([ext (in-list extensions)])\n        (when (> (strength\
    \ ext) (strength strongest_extension))\n          (set! strongest_extension ext)))\n\
    \      strongest_extension))\n  (string-append class_name \".\" (strongest_extension_name\
    \ extensions)))\n", "  (define (count-caps str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-smalls str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-caps str) (count-smalls str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n",
  "  (define (strength ext)\n    (let ((caps (count-if char-upper-case? ext))\n  \
    \        (smalls (count-if char-lower-case? ext)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (if (null? lst)\n        '()\n     \
    \   (if (null? (cdr lst))\n            (car lst)\n            (if (> (strength\
    \ (car lst)) (strength (cadr lst)))\n                (strongest-extension (cons\
    \ (car lst) (cddr lst)))\n                (strongest-extension (cdr lst))))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ((caps (count-if char-upper-case? extension))\n\
    \          (smalls (count-if char-lower-case? extension)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (strongest-extension-name\
    \ extensions))))\n", "  (define (strength ext)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([strongest-extension (car extensions)]\n          [strongest-strength\
    \ (strength (car extensions))])\n      (for ([ext (cdr extensions)])\n       \
    \ (let ([strength (strength ext)])\n          (when (> strength strongest-strength)\n\
    \            (set! strongest-extension ext)\n            (set! strongest-strength\
    \ strength))))\n      strongest-extension))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (count-upper str)\n \
    \   (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n  (define\
    \ (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (define\
    \ (strongest-extension-name lst)\n    (list-ref lst (argmax strength lst)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (count-caps str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-upper-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-smalls str)\n    (let loop ([i 0] [count 0])\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (- (count-caps str) (count-smalls\
    \ str)))\n  (define (strongest-extension lst)\n    (cond [(empty? lst) '()]\n\
    \          [(empty? (rest lst)) (first lst)]\n          [else (let ([a (first\
    \ lst)]\n                       [b (first (rest lst))])\n                  (if\
    \ (> (strength a) (strength b))\n                      (strongest-extension (cons\
    \ a (rest (rest lst))))\n                      (strongest-extension (cons b (rest\
    \ (rest lst))))))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (count-upper-case\
    \ str)\n    (foldl (lambda (c acc) (if (char-upper-case? c) (add1 acc) acc)) 0\
    \ str))\n  (define (count-lower-case str)\n    (foldl (lambda (c acc) (if (char-lower-case?\
    \ c) (add1 acc) acc)) 0 str))\n  (define (strength str)\n    (define upper (count-upper-case\
    \ str))\n    (define lower (count-lower-case str))\n    (/ (- upper lower) (add1\
    \ (string-length str))))\n  (define (strongest-extension lst)\n    (foldl (lambda\
    \ (ext acc)\n             (if (&gt; (strength ext) (strength acc)) ext acc))\n\
    \           (car lst) (cdr lst)))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n</code>\n", "  (define (strength ext)\n    (let ([caps (count\
    \ (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c)\
    \ (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (apply max extensions)])\n     \
    \ (list-ref extensions (list-index strongest-extension extensions))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ ext)\n    (define (count-upper ext)\n      (if (empty? ext)\n          0\n \
    \         (if (char-upper-case? (car ext))\n              (+ 1 (count-upper (cdr\
    \ ext)))\n              (count-upper (cdr ext)))))\n    (define (count-lower ext)\n\
    \      (if (empty? ext)\n          0\n          (if (char-lower-case? (car ext))\n\
    \              (+ 1 (count-lower (cdr ext)))\n              (count-lower (cdr\
    \ ext)))))\n    (/ (- (count-upper ext) (count-lower ext)) (length ext)))\n  (define\
    \ (strongest-extension extensions)\n    (if (empty? extensions)\n        \"\"\n\
    \        (if (empty? (cdr extensions))\n            (car extensions)\n       \
    \     (if (< (strength (car extensions)) (strength (cadr extensions)))\n     \
    \           (strongest-extension (cdr extensions))\n                (strongest-extension\
    \ (cons (car extensions) (cddr extensions)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (define (count-upper ext)\n      (cond\n        [(empty? ext) 0]\n        [(char-upper-case?\
    \ (car ext)) (+ 1 (count-upper (cdr ext)))]\n        [else (count-upper (cdr ext))]))\n\
    \    (define (count-lower ext)\n      (cond\n        [(empty? ext) 0]\n      \
    \  [(char-lower-case? (car ext)) (+ 1 (count-lower (cdr ext)))]\n        [else\
    \ (count-lower (cdr ext))]))\n    (/ (- (count-upper ext) (count-lower ext)) (string-length\
    \ ext)))\n  (define (strongest-extension extensions)\n    (cond\n      [(empty?\
    \ extensions) \"\"]\n      [(empty? (cdr extensions)) (car extensions)]\n    \
    \  [(> (strength (car extensions)) (strength (cadr extensions)))\n       (strongest-extension\
    \ (cons (car extensions) (cddr extensions)))]\n      [else (strongest-extension\
    \ (cdr extensions))]))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength extension)\n    (let ((caps (count-if\
    \ char-upper-case? extension))\n          (smalls (count-if char-lower-case? extension)))\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (if (null? extensions)\n        \"\"\n        (let ((strongest-extension (car\
    \ extensions))\n              (strongest-extension-strength (strength (car extensions))))\n\
    \          (for ((extension (cdr extensions)))\n            (let ((extension-strength\
    \ (strength extension)))\n              (if (> extension-strength strongest-extension-strength)\n\
    \                  (begin\n                    (set! strongest-extension extension)\n\
    \                    (set! strongest-extension-strength extension-strength)))))\n\
    \          strongest-extension)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension)\n\
    \      (cond\n        [(empty? extensions) (car strongest-extension)]\n      \
    \  [(> (strength (car extensions)) (strength (car strongest-extension)))\n   \
    \      (strongest-extension-name-helper (cdr extensions) (list (car extensions)))]\n\
    \        [else (strongest-extension-name-helper (cdr extensions) strongest-extension)]))\n\
    \    (strongest-extension-name-helper extensions (list (car extensions))))\n \
    \ (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (count_upper str)\n    (if (empty? str)\n        0\n        (if (char-upper-case?\
    \ (first str))\n            (+ 1 (count_upper (rest str)))\n            (count_upper\
    \ (rest str)))))\n  (define (count_lower str)\n    (if (empty? str)\n        0\n\
    \        (if (char-lower-case? (first str))\n            (+ 1 (count_lower (rest\
    \ str)))\n            (count_lower (rest str)))))\n  (define (strength str)\n\
    \    (/ (- (count_upper str) (count_lower str)) 1.0))\n  (define (strongest_extension_helper\
    \ extensions strongest_strength strongest_extension)\n    (if (empty? extensions)\n\
    \        (string-append class_name \".\" strongest_extension)\n        (let* ([extension\
    \ (first extensions)]\n               [strength (strength extension)])\n     \
    \     (if (> strength strongest_strength)\n              (strongest_extension_helper\
    \ (rest extensions) strength extension)\n              (strongest_extension_helper\
    \ (rest extensions) strongest_strength strongest_extension)))))\n  (strongest_extension_helper\
    \ extensions 0 \"\"))\n", "  (let ([extensions (map (lambda (extension)\n    \
    \                       (list extension\n                                 (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) extension)]\n               \
    \                        [sm (count (lambda (c) (char-lower-case? c)) extension)])\n\
    \                                   (/ cap sm))))\n                         extensions)])\n\
    \    (string-append class_name \".\" (car (argmax (lambda (extension) (cadr extension))\
    \ extensions)))))\n", "  (define (count_upper str)\n    (let loop ([i 0] [count\
    \ 0])\n      (if (&lt; i (string-length str))\n          (loop (+ i 1)\n     \
    \           (if (char-upper-case? (string-ref str i))\n                    (+\
    \ count 1)\n                    count))\n          count)))\n  (define (count_lower\
    \ str)\n    (let loop ([i 0] [count 0])\n      (if (&lt; i (string-length str))\n\
    \          (loop (+ i 1)\n                (if (char-lower-case? (string-ref str\
    \ i))\n                    (+ count 1)\n                    count))\n        \
    \  count)))\n  (define (strength str)\n    (let ([upper (count_upper str)]\n \
    \         [lower (count_lower str)])\n      (- upper lower)))\n  (define (find_strongest\
    \ extensions)\n    (let loop ([extensions extensions]\n               [strongest\
    \ (car extensions)]\n               [strength (strength (car extensions))])\n\
    \      (if (null? extensions)\n          strongest\n          (let ([ext (car\
    \ extensions)]\n                [str (strength ext)])\n            (if (&gt; str\
    \ strength)\n                (loop (cdr extensions) ext str)\n               \
    \ (loop (cdr extensions) strongest strength))))))\n  (string-append class_name\
    \ \".\" (find_strongest extensions)))\n</code>\n", "  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n",
  "  (define (strength ext)\n    (define (count-upper ext)\n      (cond\n        [(empty?\
    \ ext) 0]\n        [(char-upper-case? (car ext)) (+ 1 (count-upper (cdr ext)))]\n\
    \        [else (count-upper (cdr ext))]))\n    (define (count-lower ext)\n   \
    \   (cond\n        [(empty? ext) 0]\n        [(char-lower-case? (car ext)) (+\
    \ 1 (count-lower (cdr ext)))]\n        [else (count-lower (cdr ext))]))\n    (/\
    \ (- (count-upper ext) (count-lower ext)) (length ext)))\n  (define (find-strongest\
    \ extensions)\n    (cond\n      [(empty? extensions) '()]\n      [(empty? (cdr\
    \ extensions)) (car extensions)]\n      [(> (strength (car extensions)) (strength\
    \ (cadr extensions)))\n       (find-strongest (cons (car extensions) (cddr extensions)))]\n\
    \      [else (find-strongest (cdr extensions))]))\n  (string-append class_name\
    \ \".\" (find-strongest extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-ext)\n      (cond [(empty? extensions) (first strongest-ext)]\n\
    \            [(> (strength (first extensions)) (strength (first strongest-ext)))\n\
    \             (strongest-extension-name-helper (rest extensions) (list (first\
    \ extensions)))]\n            [else (strongest-extension-name-helper (rest extensions)\
    \ strongest-ext)]))\n    (strongest-extension-name-helper extensions (list (first\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if char-upcase?\
    \ ext)]\n          [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (let ([ext (car lst)]\n          [str\
    \ (strength ext)])\n      (for/fold ([str str]\n                 [ext ext])\n\
    \                ([curr-ext (cdr lst)])\n        (let ([curr-str (strength curr-ext)])\n\
    \          (cond\n            [(> curr-str str) (values curr-str curr-ext)]\n\
    \            [(= curr-str str) (values str ext)]\n            [else (values str\
    \ ext)])))))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength extension)\n    (define (count_upper extension)\n      (if\
    \ (empty? extension)\n          0\n          (if (char-upper-case? (car extension))\n\
    \              (+ 1 (count_upper (cdr extension)))\n              (count_upper\
    \ (cdr extension)))))\n    (define (count_lower extension)\n      (if (empty?\
    \ extension)\n          0\n          (if (char-lower-case? (car extension))\n\
    \              (+ 1 (count_lower (cdr extension)))\n              (count_lower\
    \ (cdr extension)))))\n    (- (count_upper extension) (count_lower extension)))\n\
    \  (define (strongest_extension extensions)\n    (if (empty? extensions)\n   \
    \     \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (&gt; (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (strongest_extension (cons (car extensions) (cddr extensions)))\n\
    \                (strongest_extension (cdr extensions))))))\n  (string-append\
    \ class_name \".\" (strongest_extension extensions)))\n</code>\n", "  (define\
    \ (strength ext)\n    (define (is-upper? c)\n      (and (char&lt;= #\\A c) (char&lt;=\
    \ c #\\Z)))\n    (define (is-lower? c)\n      (and (char&lt;= #\\a c) (char&lt;=\
    \ c #\\z)))\n    (define (count-upper str)\n      (if (string-null? str)\n   \
    \       0\n          (+ (if (is-upper? (string-ref str 0)) 1 0)\n            \
    \ (count-upper (string-tail str)))))\n    (define (count-lower str)\n      (if\
    \ (string-null? str)\n          0\n          (+ (if (is-lower? (string-ref str\
    \ 0)) 1 0)\n             (count-lower (string-tail str)))))\n    (/ (- (count-upper\
    \ ext) (count-lower ext))\n       (string-length ext)))\n  (define (strongest-extension\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (let* ([ext (car lst)]\n  \
    \             [str (strength ext)])\n          (if (null? (cdr lst))\n       \
    \       ext\n              (let ([next (strongest-extension (cdr lst))])\n   \
    \             (if (&gt; (strength next) str)\n                    next\n     \
    \               ext))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n</code>\n", "  (define (strength ext)\n    (let ([caps (filter\
    \ char-upper-case? (string->list ext))]\n          [smalls (filter char-lower-case?\
    \ (string->list ext))])\n      (/ (length caps) (- (length caps) (length smalls)))))\n\
    \  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\"\n    \
    \    (let ([strongest (car lst)]\n              [rest (cdr lst)])\n          (if\
    \ (null? rest)\n              strongest\n              (let ([next (car rest)]\n\
    \                    [rest-rest (cdr rest)])\n                (if (< (strength\
    \ next) (strength strongest))\n                    (strongest-extension rest)\n\
    \                    (strongest-extension (cons next rest-rest))))))))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (strength\
    \ ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n     \
    \     [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(> (strength (first\
    \ extensions)) strongest-extension-strength)\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions) (strength (first extensions)))]\n     \
    \       [else (strongest-extension-name-iter (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]))\n    (strongest-extension-name-iter extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define\
    \ (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-extension-name)\n      (if (null? extensions)\n       \
    \   strongest-extension-name\n          (let ([ext (car extensions)]\n       \
    \         [strength (strength ext)])\n            (if (&gt; strength (strength\
    \ strongest-extension-name))\n                (strongest-extension-name-helper\
    \ (cdr extensions) ext)\n                (strongest-extension-name-helper (cdr\
    \ extensions) strongest-extension-name)))))\n    (strongest-extension-name-helper\
    \ extensions (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (x) (char-upper-case? x)) ext)]\n          [smalls (count (lambda (x) (char-lower-case?\
    \ x)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([ext (car extensions)])\n      (if (null? (cdr extensions))\n     \
    \     ext\n          (let ([next-ext (strongest-extension-name (cdr extensions))])\n\
    \            (if (< (strength ext) (strength next-ext))\n                next-ext\n\
    \                ext)))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-helper\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [else (let ([extension-name\
    \ (first extensions)]\n                        [extension-strength (strength extension-name)])\n\
    \                    (if (> extension-strength strongest-extension-strength)\n\
    \                        (strongest-extension-name-helper (rest extensions) extension-name\
    \ extension-strength)\n                        (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)))]))\n\
    \    (strongest-extension-name-helper extensions (first extensions) (strength\
    \ (first extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (define (count-upper ext)\n\
    \      (if (empty? ext)\n          0\n          (if (char-upper-case? (car ext))\n\
    \              (+ 1 (count-upper (cdr ext)))\n              (count-upper (cdr\
    \ ext)))))\n    (define (count-lower ext)\n      (if (empty? ext)\n          0\n\
    \          (if (char-lower-case? (car ext))\n              (+ 1 (count-lower (cdr\
    \ ext)))\n              (count-lower (cdr ext)))))\n    (- (count-upper ext) (count-lower\
    \ ext)))\n  (define (strongest-extension extensions)\n    (if (empty? extensions)\n\
    \        \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (< (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (strongest-extension (cdr extensions))\n                (strongest-extension\
    \ (cons (car extensions) (cddr extensions)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (count_upper_lower str)\n\
    \    (let ([upper (count (lambda (c) (char-upper-case? c)) str)]\n          [lower\
    \ (count (lambda (c) (char-lower-case? c)) str)])\n      (cons upper lower)))\n\
    \  (define (strength str)\n    (let-values ([(upper lower) (count_upper_lower\
    \ str)])\n      (- upper lower)))\n  (define (strongest_extension_name extensions)\n\
    \    (apply max (map strength extensions)))\n  (define (strongest_extension_name_with_strength\
    \ extensions)\n    (define (strongest_extension_name_with_strength_helper extensions)\n\
    \      (if (null? extensions)\n          '()\n          (let ([extension (car\
    \ extensions)]\n                [strength (strength extension)])\n           \
    \ (cons (cons extension strength)\n                  (strongest_extension_name_with_strength_helper\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper2\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper2\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper3\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper3\
    \ (cdr extensions))))))\n    (define (strongest_extension_name_with_strength_helper4\
    \ extensions)\n      (if (null? extensions)\n          '()\n          (let ([extension\
    \ (car extensions)]\n                [strength (cdr extension)])\n           \
    \ (cons (cons (car extension) strength)\n                  (strongest_extension_name_with_strength_helper4\
    \ (cdr extensions))))))\n    (define (strongest_", "  (define (strength extension)\n\
    \    (let ((upper (count-upper extension))\n          (lower (count-lower extension)))\n\
    \      (/ (- upper lower) (length extension))))\n  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (find-strongest extensions)\n    (let ((strongest (car\
    \ extensions))\n          (strength (strength (car extensions))))\n      (for\
    \ ([ext (in-list (cdr extensions))])\n        (let ((ext-strength (strength ext)))\n\
    \          (when (> ext-strength strength)\n            (set! strength ext-strength)\n\
    \            (set! strongest ext))))\n      strongest))\n  (string-append class_name\
    \ \".\" (find-strongest extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (count-upper str)\n    (define (count-upper-iter str count)\n      (cond ((null?\
    \ str) count)\n            ((char-upper-case? (car str)) (count-upper-iter (cdr\
    \ str) (+ count 1)))\n            (else (count-upper-iter (cdr str) count))))\n\
    \    (count-upper-iter str 0))\n  (define (count-lower str)\n    (define (count-lower-iter\
    \ str count)\n      (cond ((null? str) count)\n            ((char-lower-case?\
    \ (car str)) (count-lower-iter (cdr str) (+ count 1)))\n            (else (count-lower-iter\
    \ (cdr str) count))))\n    (count-lower-iter str 0))\n  (define (strength str)\n\
    \    (/ (- (count-upper str) (count-lower str)) (string-length str)))\n  (define\
    \ (strongest-extension-iter extensions strongest-extension)\n    (cond ((null?\
    \ extensions) (string-append class_name \".\" strongest-extension))\n        \
    \  ((> (strength (car extensions)) (strength strongest-extension))\n         \
    \  (strongest-extension-iter (cdr extensions) (car extensions)))\n          (else\
    \ (strongest-extension-iter (cdr extensions) strongest-extension))))\n  (strongest-extension-iter\
    \ extensions (car extensions)))\n", "  (define (strength ext)\n    (let ([caps\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength ext)\n    (define (count-upper ext)\n      (if (empty? ext)\n    \
    \      0\n          (if (char-upper-case? (car ext))\n              (+ 1 (count-upper\
    \ (cdr ext)))\n              (count-upper (cdr ext)))))\n    (define (count-lower\
    \ ext)\n      (if (empty? ext)\n          0\n          (if (char-lower-case? (car\
    \ ext))\n              (+ 1 (count-lower (cdr ext)))\n              (count-lower\
    \ (cdr ext)))))\n    (- (count-upper ext) (count-lower ext)))\n  (define (strongest-extension\
    \ extensions)\n    (if (empty? extensions)\n        \"\"\n        (if (= (strength\
    \ (car extensions))\n               (strength (strongest-extension (cdr extensions))))\n\
    \            (car extensions)\n            (strongest-extension (cdr extensions)))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ extension)]\n          [sm (count (lambda (c) (char-lower-case? c)) extension)])\n\
    \      (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength ext)\n\
    \    (let ([cap (count-if char-upper-case? ext)]\n          [sm (count-if char-lower-case?\
    \ ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-iter extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(> (strength (first extensions)) strongest-extension-strength)\n\
    \             (strongest-extension-name-iter (rest extensions) (first extensions)\
    \ (strength (first extensions)))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name strongest-extension-strength)]))\n\
    \    (strongest-extension-name-iter extensions (first extensions) (strength (first\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-helper extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (format \"~a.~a\" class_name (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (define (count-upper-case str)\n\
    \      (define (count-upper-case-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(char-upper-case? (first str)) (count-upper-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-upper-case-iter (rest str)\
    \ count)]))\n      (count-upper-case-iter str 0))\n    (define (count-lower-case\
    \ str)\n      (define (count-lower-case-iter str count)\n        (cond\n     \
    \     [(empty? str) count]\n          [(char-lower-case? (first str)) (count-lower-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-lower-case-iter (rest str)\
    \ count)]))\n      (count-lower-case-iter str 0))\n    (/ (- (count-upper-case\
    \ ext) (count-lower-case ext)) 1.0))\n  (define (find-strongest-extension extensions)\n\
    \    (define (find-strongest-extension-iter extensions strongest-ext)\n      (cond\n\
    \        [(empty? extensions) strongest-ext]\n        [(> (strength (first extensions))\
    \ (strength strongest-ext)) (find-strongest-extension-iter (rest extensions) (first\
    \ extensions))]\n        [else (find-strongest-extension-iter (rest extensions)\
    \ strongest-ext)]))\n    (find-strongest-extension-iter extensions (first extensions)))\n\
    \  (string-append class_name \".\" (find-strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let loop ([i 0] [cap 0] [sm 0])\n      (cond [(=\
    \ i (string-length ext))\n             (/ cap (- sm))]\n            [(char-upper-case?\
    \ (string-ref ext i))\n             (loop (+ i 1) (+ cap 1) sm)]\n           \
    \ [(char-lower-case? (string-ref ext i))\n             (loop (+ i 1) cap (+ sm\
    \ 1))]\n            [else\n             (loop (+ i 1) cap sm)])))\n  (define (strongest_extension\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (let ([ext (car lst)]\n   \
    \           [rest (cdr lst)])\n          (if (null? rest)\n              ext\n\
    \              (let ([strongest (strongest_extension rest)])\n               \
    \ (if (> (strength ext) (strength strongest))\n                    ext\n     \
    \               strongest))))))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ((caps (for/sum ([c (in-string\
    \ str)])\n                   (if (char-upper-case? c) 1 0)))\n          (smalls\
    \ (for/sum ([c (in-string str)])\n                     (if (char-lower-case? c)\
    \ 1 0))))\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (count_upper str)\n \
    \   (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n  (define\
    \ (count_lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (/ (- (count_upper str) (count_lower\
    \ str)) (string-length str)))\n  (define (strongest_extension lst)\n    (apply\
    \ max (map strength lst)))\n  (define (strongest_extension_name lst)\n    (list-ref\
    \ lst (argmax (\u03BB (x) (strength x)) lst)))\n  (string-append class_name \"\
    .\" (strongest_extension_name extensions)))\n", "  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (define\
    \ (strongest-extension-name lst)\n    (list-ref lst (argmax strength lst)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c))\
    \ ext)]\n          [sm (count (lambda (c) (char-lower-case? c)) ext)])\n     \
    \ (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmax (map strength extensions)))))\n", "  (define (strength ext)\n    (let\
    \ ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength extension)\n    (define (count-upper-case str)\n      (define (count-upper-case-iter\
    \ str count)\n        (cond\n          [(empty? str) count]\n          [(char-upper-case?\
    \ (first str)) (count-upper-case-iter (rest str) (+ count 1))]\n          [else\
    \ (count-upper-case-iter (rest str) count)]))\n    (define (count-lower-case str)\n\
    \      (define (count-lower-case-iter str count)\n        (cond\n          [(empty?\
    \ str) count]\n          [(char-lower-case? (first str)) (count-lower-case-iter\
    \ (rest str) (+ count 1))]\n          [else (count-lower-case-iter (rest str)\
    \ count)]))\n    (/ (- (count-upper-case extension) (count-lower-case extension))\
    \ (length extension)))\n  (define (strongest-extension-iter extensions strongest-extension)\n\
    \    (cond\n      [(empty? extensions) (string-append class_name \".\" strongest-extension)]\n\
    \      [(> (strength (first extensions)) (strength strongest-extension)) (strongest-extension-iter\
    \ (rest extensions) (first extensions))]\n      [else (strongest-extension-iter\
    \ (rest extensions) strongest-extension)]))\n  (strongest-extension-iter extensions\
    \ (first extensions)))\n", "  (define (count-upper str)\n    (for/sum ([c (in-string\
    \ str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n \
    \ (define (strength str)\n    (/ (- (count-upper str) (count-lower str)) (string-length\
    \ str)))\n  (define (strongest-extension-name extensions)\n    (apply max (map\
    \ strength extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((cap (count (lambda (c)\
    \ (char-upper-case? c)) ext))\n          (sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)))\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ extension)\n    (let ((caps (for/sum ([c (in-string extension)])\n         \
    \          (if (char-upper-case? c) 1 0)))\n          (smalls (for/sum ([c (in-string\
    \ extension)])\n                     (if (char-lower-case? c) 1 0))))\n      (-\
    \ caps smalls)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-helper extensions strongest-extension-name)\n    \
    \  (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-helper\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-helper\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (define (is_upper? c)\n   \
    \   (and (char-alphabetic? c) (char-upper-case? c)))\n    (define (is_lower? c)\n\
    \      (and (char-alphabetic? c) (char-lower-case? c)))\n    (define (count-upper\
    \ str)\n      (define (count-upper-iter str count)\n        (cond [(empty? str)\
    \ count]\n              [(is_upper? (first str)) (count-upper-iter (rest str)\
    \ (+ count 1))]\n              [else (count-upper-iter (rest str) count)]))\n\
    \      (count-upper-iter str 0))\n    (define (count-lower str)\n      (define\
    \ (count-lower-iter str count)\n        (cond [(empty? str) count]\n         \
    \     [(is_lower? (first str)) (count-lower-iter (rest str) (+ count 1))]\n  \
    \            [else (count-lower-iter (rest str) count)]))\n      (count-lower-iter\
    \ str 0))\n    (/ (- (count-upper ext) (count-lower ext)) (string-length ext)))\n\
    \  (define (strongest-extension-iter extensions strongest-extension)\n    (cond\
    \ [(empty? extensions) strongest-extension]\n          [(> (strength (first extensions))\
    \ (strength strongest-extension))\n           (strongest-extension-iter (rest\
    \ extensions) (first extensions))]\n          [else (strongest-extension-iter\
    \ (rest extensions) strongest-extension)]))\n  (string-append class_name \".\"\
    \ (strongest-extension-iter extensions (first extensions))))\n", "  (define (strength\
    \ extension)\n    (define (count-upper str)\n      (if (empty? str)\n        \
    \  0\n          (if (char-upper-case? (first str))\n              (+ 1 (count-upper\
    \ (rest str)))\n              (count-upper (rest str)))))\n    (define (count-lower\
    \ str)\n      (if (empty? str)\n          0\n          (if (char-lower-case? (first\
    \ str))\n              (+ 1 (count-lower (rest str)))\n              (count-lower\
    \ (rest str)))))\n    (- (count-upper extension) (count-lower extension)))\n \
    \ (define (strongest-extension extensions)\n    (if (empty? extensions)\n    \
    \    \"\"\n        (if (empty? (rest extensions))\n            (first extensions)\n\
    \            (if (< (strength (first extensions)) (strength (second extensions)))\n\
    \                (strongest-extension (rest extensions))\n                (strongest-extension\
    \ (cons (first extensions) (rest (rest extensions))))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength str)\n   \
    \ (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if char-lower-case?\
    \ str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax (map strength extensions)))))\n", "  (define (strength\
    \ extension)\n    (define (count-uppercase str)\n      (define (is-uppercase?\
    \ ch)\n        (and (char-alphabetic? ch) (char-upper-case? ch)))\n      (foldl\
    \ (lambda (ch count)\n               (if (is-uppercase? ch)\n                \
    \   (+ count 1)\n                   count))\n             0\n             str))\n\
    \    (define (count-lowercase str)\n      (define (is-lowercase? ch)\n       \
    \ (and (char-alphabetic? ch) (char-lower-case? ch)))\n      (foldl (lambda (ch\
    \ count)\n               (if (is-lowercase? ch)\n                   (+ count 1)\n\
    \                   count))\n             0\n             str))\n    (- (count-uppercase\
    \ extension) (count-lowercase extension)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond ((null? extensions) strongest-extension-name)\n\
    \            ((> (strength (car extensions)) strongest-extension-strength)\n \
    \            (strongest-extension-name-helper (cdr extensions) (car extensions)\
    \ (strength (car extensions))))\n            (else (strongest-extension-name-helper\
    \ (cdr extensions) strongest-extension-name strongest-extension-strength))))\n\
    \    (strongest-extension-name-helper extensions (car extensions) (strength (car\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((cap (count-if char-upper-case?\
    \ ext))\n          (sm (count-if char-lower-case? ext)))\n      (- cap sm)))\n\
    \  (define (strongest-extension? ext1 ext2)\n    (or (> (strength ext1) (strength\
    \ ext2))\n        (and (= (strength ext1) (strength ext2))\n             (< (position\
    \ ext1 extensions) (position ext2 extensions)))))\n  (string-append class_name\
    \ \".\" (apply max extensions strongest-extension?)))\n", "  (define (strength\
    \ ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm (count-if\
    \ char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax strength extensions))))\n", "  (define (strength\
    \ ext)\n    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n      \
    \    [sm (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ([ext (car extensions)])\n\
    \      (if (null? (cdr extensions))\n          ext\n          (let ([next-ext\
    \ (car (cdr extensions))])\n            (if (> (strength ext) (strength next-ext))\n\
    \                ext\n                (strongest-extension-name (cdr extensions)))))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (count-uppercase str)\n    (cond ((null? str) 0)\n          ((char-upper-case?\
    \ (car str)) (+ 1 (count-uppercase (cdr str))))\n          (else (count-uppercase\
    \ (cdr str)))))\n  (define (count-lowercase str)\n    (cond ((null? str) 0)\n\
    \          ((char-lower-case? (car str)) (+ 1 (count-lowercase (cdr str))))\n\
    \          (else (count-lowercase (cdr str)))))\n  (define (strength str)\n  \
    \  (/ (- (count-uppercase str) (count-lowercase str)) (string-length str)))\n\
    \  (define (strongest-extension extensions)\n    (cond ((null? extensions) \"\"\
    )\n          ((null? (cdr extensions)) (car extensions))\n          ((> (strength\
    \ (car extensions)) (strength (cadr extensions)))\n           (strongest-extension\
    \ (cons (car extensions) (cddr extensions))))\n          (else (strongest-extension\
    \ (cdr extensions)))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (count-upper-lower str)\n    (let ((upper (count-if\
    \ char-upper-case? str))\n          (lower (count-if char-lower-case? str)))\n\
    \      (cons upper lower)))\n  (define (strength upper-lower)\n    (let ((upper\
    \ (car upper-lower))\n          (lower (cdr upper-lower)))\n      (- upper lower)))\n\
    \  (define (strongest-extension-name extensions)\n    (let ((extensions-with-strength\
    \ (map (lambda (ext)\n                                           (cons ext (strength\
    \ (count-upper-lower ext))))\n                                         extensions)))\n\
    \      (apply max-key (lambda (ext-strength1 ext-strength2)\n                \
    \       (if (= (strength (cdr ext-strength1))\n                              (strength\
    \ (cdr ext-strength2)))\n                           (string<? (car ext-strength1)\
    \ (car ext-strength2))\n                           (> (strength (cdr ext-strength1))\n\
    \                              (strength (cdr ext-strength2)))))\n           \
    \          extensions-with-strength)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count_upper_lower str)\n    (let ((upper 0) (lower\
    \ 0))\n      (for ([c (in-string str)])\n        (cond\n          [(char-upper-case?\
    \ c) (set! upper (+ upper 1))]\n          [(char-lower-case? c) (set! lower (+\
    \ lower 1))]))\n      (cons upper lower)))\n  (define (strength str)\n    (let\
    \ ((upper-lower (count_upper_lower str)))\n      (/ (- (car upper-lower) (cdr\
    \ upper-lower)) (string-length str))))\n  (define (strongest_extension_name extensions)\n\
    \    (let ((strongest_extension (car extensions))\n          (strongest_extension_strength\
    \ (strength (car extensions))))\n      (for ([ext (in-list (cdr extensions))])\n\
    \        (let ((ext_strength (strength ext)))\n          (cond\n            [(>\
    \ ext_strength strongest_extension_strength)\n             (set! strongest_extension\
    \ ext)\n             (set! strongest_extension_strength ext_strength)])))\n  \
    \    strongest_extension))\n  (string-append class_name \".\" (strongest_extension_name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name)\n\
    \    (let ([extensions-with-strength (map (lambda (ext) (list ext (strength ext)))\
    \ extensions)])\n      (apply max extensions-with-strength (lambda (a b) (string<?\
    \ (car a) (car b))))))\n  (string-append class_name \".\" (car (strongest-extension-name))))\n",
  "  (define (strength ext)\n    (let ([cap (regexp-match #rx\"[A-Z]\" ext)]\n   \
    \       [sm (regexp-match #rx\"[a-z]\" ext)])\n      (/ (- (length cap) (length\
    \ sm)))))\n  (define (strongest_extension extensions)\n    (let ([ext (car extensions)])\n\
    \      (if (null? (cdr extensions))\n          ext\n          (let ([next (car\
    \ (cdr extensions))])\n            (if (&gt; (strength ext) (strength next))\n\
    \                ext\n                (strongest_extension (cdr extensions)))))))\n\
    \  (string-append class_name \".\" (strongest_extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n\
    \          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension-name extensions)\n    (let ([strengths\
    \ (map strength extensions)])\n      (list-ref extensions (argmax strengths))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength extension)\n\
    \    (let ((cap (count-if char-upper-case? extension))\n          (sm (count-if\
    \ char-lower-case? extension)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-index\
    \ extensions)\n    (argmax (map strength extensions)))\n  (define (argmax lst)\n\
    \    (let ((max (apply max lst)))\n      (for/first ([(i x) (in-indexed lst)])\n\
    \        (when (= x max) i))))\n  (string-append class_name \".\" (list-ref extensions\
    \ (strongest-extension-index extensions))))\n", "  (define (strength extension)\n\
    \    (let ((cap (count-if char-upper-case? extension))\n          (sm (count-if\
    \ char-lower-case? extension)))\n      (- cap sm)))\n  (define (strongest-extension\
    \ extensions)\n    (define (strongest-extension-iter extensions strongest-extension)\n\
    \      (cond ((null? extensions) strongest-extension)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension))\n             (strongest-extension-iter\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-iter\
    \ (cdr extensions) strongest-extension))))\n    (strongest-extension-iter extensions\
    \ (car extensions)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension? extension1 extension2)\n    (let ([strength1\
    \ (strength extension1)]\n          [strength2 (strength extension2)])\n     \
    \ (cond\n        [(> strength1 strength2) #t]\n        [(< strength1 strength2)\
    \ #f]\n        [else (string<? extension1 extension2)])))\n  (define (strongest-extension\
    \ extensions)\n    (if (null? (cdr extensions))\n        (car extensions)\n  \
    \      (if (strongest-extension? (car extensions) (strongest-extension (cdr extensions)))\n\
    \            (car extensions)\n            (strongest-extension (cdr extensions)))))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm\
    \ (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (define (strongest-extension-name-with-strength\
    \ extensions)\n    (let ((strongest-extension-name (strongest-extension-name extensions)))\n\
    \      (list strongest-extension-name (strength strongest-extension-name))))\n\
    \  (define (strongest-extension-name-with-strength-and-index extensions)\n   \
    \ (let ((strongest-extension-name-with-strength (strongest-extension-name-with-strength\
    \ extensions)))\n      (cons (list-ref extensions (list-ref strongest-extension-name-with-strength\
    \ 1))\n            (list-ref strongest-extension-name-with-strength 0))))\n  (define\
    \ (strongest-extension-name-with-strength-and-index-and-class extensions)\n  \
    \  (cons class_name (strongest-extension-name-with-strength-and-index extensions)))\n\
    \  (define (strongest-extension-name-with-strength-and-index-and-class-and-dot\
    \ extensions)\n    (string-append (list-ref (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions) 0) \".\"))\n  (define (strongest-extension-name-with-strength-and-index-and-class-and-dot-and-extension\
    \ extensions)\n    (string-append (strongest-extension-name-with-strength-and-index-and-class-and-dot\
    \ extensions)\n                   (list-ref (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions) 1)))\n  (strongest-extension-name-with-strength-and-index-and-class-and-dot-and-extension\
    \ extensions))\n", "  (define (strength ext)\n    (define (count-caps str)\n \
    \     (define (count-caps-iter str count)\n        (cond\n          [(empty? str)\
    \ count]\n          [(char-upper-case? (first str)) (count-caps-iter (rest str)\
    \ (+ count 1))]\n          [else (count-caps-iter (rest str) count)]))\n     \
    \ (count-caps-iter str 0))\n    (define (count-smalls str)\n      (define (count-smalls-iter\
    \ str count)\n        (cond\n          [(empty? str) count]\n          [(char-lower-case?\
    \ (first str)) (count-smalls-iter (rest str) (+ count 1))]\n          [else (count-smalls-iter\
    \ (rest str) count)]))\n      (count-smalls-iter str 0))\n    (- (count-caps ext)\
    \ (count-smalls ext)))\n  (define (strongest-extension-iter extensions strongest-ext)\n\
    \    (cond\n      [(empty? extensions) (string-append class_name \".\" strongest-ext)]\n\
    \      [(> (strength (first extensions)) (strength strongest-ext))\n        (strongest-extension-iter\
    \ (rest extensions) (first extensions))]\n      [else (strongest-extension-iter\
    \ (rest extensions) strongest-ext)]))\n  (strongest-extension-iter extensions\
    \ (first extensions)))\n", "  (define (strength ext)\n    (let ([caps (count-if\
    \ char-upper-case? ext)]\n          [smalls (count-if char-lower-case? ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (string-append class_name \".\" (list-ref\
    \ extensions (argmax (map strength extensions)))))\n", "  (define (strength extension)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) extension)]\n      \
    \    [smalls (count (lambda (c) (char-lower-case? c)) extension)])\n      (- caps\
    \ smalls)))\n  (define (strongest-extension-name extensions)\n    (let ([extension\
    \ (car extensions)]\n          [rest (cdr extensions)])\n      (if (null? rest)\n\
    \          extension\n          (let ([stronger-extension (strongest-extension-name\
    \ rest)])\n            (if (&gt; (strength extension) (strength stronger-extension))\n\
    \                extension\n                stronger-extension)))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n</code>\n", "  (define\
    \ (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength extension)\n    (let\
    \ ([caps (count-if char-upper-case? extension)]\n          [smalls (count-if char-lower-case?\
    \ extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extension (car extensions)]\n          [rest (cdr extensions)])\n\
    \      (if (null? rest)\n          extension\n          (let ([next-extension\
    \ (strongest-extension-name rest)])\n            (if (&gt; (strength extension)\
    \ (strength next-extension))\n                extension\n                next-extension)))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (ext-strength ext)\n    (cons (strength ext)\
    \ ext))\n  (define (ext-name ext)\n    (string-append class_name \".\" ext))\n\
    \  (define (strongest-extension-name ext)\n    (ext-name (cdr ext)))\n  (strongest-extension-name\n\
    \   (apply max (map ext-strength extensions))))\n", "  (define (strength ext)\n\
    \    (let ([upper (count (lambda (c) (char-upper-case? c)) ext)]\n          [lower\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (/ (- upper lower) (max\
    \ upper lower))))\n  (define (strongest-extension-name extensions)\n    (apply\
    \ max (map strength extensions)))\n  (define (strongest-extension-index extensions)\n\
    \    (argmax (lambda (i) (strength (list-ref extensions i)))\n            (range\
    \ (length extensions))))\n  (string-append class_name \".\" (list-ref extensions\
    \ (strongest-extension-index extensions))))\n", "  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (define\
    \ (strongest-extension-name lst)\n    (car (filter (lambda (x) (= (strength x)\
    \ (strongest-extension lst))) lst)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([caps (count (lambda\
    \ (x) (char-upper-case? x)) extension)]\n          [smalls (count (lambda (x)\
    \ (char-lower-case? x)) extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (strength extension)\n    (let ((cap (count-if char-upper-case? extension))\n\
    \          (sm (count-if char-lower-case? extension)))\n      (- cap sm)))\n \
    \ (define (strongest-extension extensions)\n    (apply max (map strength extensions)))\n\
    \  (define (strongest-extension-name extensions)\n    (list-ref extensions (position\
    \ (strongest-extension extensions) extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (count-upper str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n \
    \ (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (/ (- (count-upper str) (count-lower\
    \ str)) 1.0))\n  (define (strongest-extension-name extensions)\n    (apply max\
    \ (map strength extensions)))\n  (define (strongest-extension-index extensions)\n\
    \    (argmax (\u03BB (x) (strength (list-ref extensions x)))\n            (range\
    \ (length extensions))))\n  (string-append class_name \".\" (list-ref extensions\
    \ (strongest-extension-index extensions))))\n", "  (define (strength str)\n  \
    \  (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if char-lower-case?\
    \ str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions string<? #:key strength)])\n      (car\
    \ extensions)))\n  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) extension)]\n          [smalls (count (lambda (c) (char-lower-case? c))\
    \ extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([strongest-extension (apply max extensions)])\n      (list-ref extensions\
    \ (position strongest-extension extensions))))\n  (string-append class_name \"\
    .\" (strongest-extension-name extensions)))\n", "  (define (count_upper str)\n\
    \    (let loop ([str str] [count 0])\n      (if (null? str)\n          count\n\
    \          (if (char-upper-case? (car str))\n              (loop (cdr str) (+\
    \ count 1))\n              (loop (cdr str) count)))))\n  (define (count_lower\
    \ str)\n    (let loop ([str str] [count 0])\n      (if (null? str)\n         \
    \ count\n          (if (char-lower-case? (car str))\n              (loop (cdr\
    \ str) (+ count 1))\n              (loop (cdr str) count)))))\n  (define (strength\
    \ str)\n    (/ (- (count_upper str) (count_lower str)) 1.0))\n  (define (strongest_extension\
    \ extensions)\n    (if (null? extensions)\n        \"\"\n        (let ([first\
    \ (car extensions)]\n              [rest (cdr extensions)])\n          (if (null?\
    \ rest)\n              first\n              (let ([next (strongest_extension rest)])\n\
    \                (if (> (strength first) (strength next))\n                  \
    \  first\n                    next))))))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ([ext (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              ext\n             \
    \ (let ([strongest-rest (strongest-extension-name rest)])\n                (if\
    \ (> (strength ext) (strength strongest-rest))\n                    ext\n    \
    \                strongest-rest))))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (let ([extensions (map (lambda (extension)\n          \
    \                 (list extension\n                                 (let ([cap\
    \ (count (lambda (c) (char-upper-case? c)) extension)]\n                     \
    \                  [sm (count (lambda (c) (char-lower-case? c)) extension)])\n\
    \                                   (/ cap sm))))\n                         extensions)])\n\
    \    (string-append class_name \".\" (car (argmax (lambda (x) (cadr x)) extensions)))))\n",
  "  (define (count-upper-lower str)\n    (let loop ([str str] [upper 0] [lower 0])\n\
    \      (cond [(empty? str) (values upper lower)]\n            [(char-upper-case?\
    \ (car str)) (loop (cdr str) (+ upper 1) lower)]\n            [(char-lower-case?\
    \ (car str)) (loop (cdr str) upper (+ lower 1))]\n            [else (loop (cdr\
    \ str) upper lower)])))\n  (define (strength str)\n    (let-values ([(upper lower)\
    \ (count-upper-lower str)])\n      (/ (- upper lower) 1.0)))\n  (define (strongest-extension\
    \ extensions)\n    (let loop ([extensions extensions] [strongest-extension '()]\
    \ [strongest-strength 0])\n      (cond [(empty? extensions) (if (empty? strongest-extension)\
    \ \"\" (car strongest-extension))]\n            [(> (strength (car extensions))\
    \ strongest-strength)\n             (loop (cdr extensions) (list (car extensions))\
    \ (strength (car extensions)))]\n            [(= (strength (car extensions)) strongest-strength)\n\
    \             (loop (cdr extensions) (cons (car extensions) strongest-extension)\
    \ strongest-strength)]\n            [else (loop (cdr extensions) strongest-extension\
    \ strongest-strength)])))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (count-caps str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-upper-case? c) 1 0)))\n  (define (count-smalls str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n  (define (strength\
    \ str)\n    (/ (- (count-caps str) (count-smalls str)) (string-length str)))\n\
    \  (define (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmin (map strength extensions)))))\n",
  "  (define (strength extension)\n    (let ((caps (count (lambda (c) (char-upper-case?\
    \ c)) extension))\n          (smalls (count (lambda (c) (char-lower-case? c))\
    \ extension)))\n      (/ (- caps smalls) (length extension))))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength extension)\n\
    \    (define (count-upper str)\n      (cond [(empty? str) 0]\n            [(char-upper-case?\
    \ (car str)) (+ 1 (count-upper (cdr str)))]\n            [else (count-upper (cdr\
    \ str))]))\n    (define (count-lower str)\n      (cond [(empty? str) 0]\n    \
    \        [(char-lower-case? (car str)) (+ 1 (count-lower (cdr str)))]\n      \
    \      [else (count-lower (cdr str))]))\n    (/ (- (count-upper extension) (count-lower\
    \ extension)) (string-length extension)))\n  (define (max-strength extensions)\n\
    \    (cond [(empty? extensions) 0]\n          [(> (strength (car extensions))\
    \ (max-strength (cdr extensions))) (strength (car extensions))]\n          [else\
    \ (max-strength (cdr extensions))]))\n  (define (find-max-strength extensions)\n\
    \    (cond [(empty? extensions) \"\"]\n          [(= (strength (car extensions))\
    \ (max-strength extensions)) (car extensions)]\n          [else (find-max-strength\
    \ (cdr extensions))]))\n  (string-append class_name \".\" (find-max-strength extensions)))\n",
  "  (define (strength ext)\n    (let* ([caps (regexp-match* #rx\"[A-Z]\" ext)]\n\
    \           [smalls (regexp-match* #rx\"[a-z]\" ext)])\n      (/ (- (length caps)\
    \ (length smalls)))))\n  (define (strongest-extension lst)\n    (let* ([exts (sort\
    \ lst (\u03BB (x y) (< (strength x) (strength y))))])\n      (car exts)))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (let* ([extensions\
    \ (map string->list extensions)]\n         [extensions (map (lambda (extension)\n\
    \                            (cons extension (count-upper-lower-case extension)))\n\
    \                          extensions)]\n         [extensions (map (lambda (extension)\n\
    \                            (cons (car extension)\n                         \
    \         (- (car (cdr extension))\n                                     (cadr\
    \ (cdr extension)))))\n                          extensions)]\n         [extensions\
    \ (sort extensions (lambda (ext1 ext2)\n                                     \
    \   (> (cadr ext1) (cadr ext2))))])\n    (string-append class_name \".\" (list->string\
    \ (car (car extensions))))))\n", "  (define (strength ext)\n    (let ([caps (count\
    \ (\u03BB (x) (char-upper-case? x)) ext)]\n          [smalls (count (\u03BB (x)\
    \ (char-lower-case? x)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions best-so-far)\n\
    \      (cond [(empty? extensions) (first best-so-far)]\n            [(> (strength\
    \ (first extensions)) (strength (first best-so-far)))\n             (strongest-extension-name-helper\
    \ (rest extensions) (list (first extensions)))]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) best-so-far)]))\n    (strongest-extension-name-helper extensions\
    \ (list (first extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension lst)\n    (cond [(empty? lst) '()]\n         \
    \ [(empty? (rest lst)) (first lst)]\n          [else (let ([first-strength (strength\
    \ (first lst))]\n                       [rest-strength (strength (strongest-extension\
    \ (rest lst)))])\n                  (if (> first-strength rest-strength)\n   \
    \                   (first lst)\n                      (strongest-extension (rest\
    \ lst))))]))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength extension)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) extension)]\n          [smalls (count (lambda (c) (char-lower-case? c))\
    \ extension)])\n      (/ (- caps smalls) (length extension))))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([strongest-extension (apply max extensions)])\n     \
    \ (list-ref extensions (list-index strongest-extension extensions))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ str)\n    (let ([caps (count-if char-upper-case? str)]\n          [smalls (count-if\
    \ char-lower-case? str)])\n      (- caps smalls)))\n  (let ([strongest-extension\
    \ (apply max (map strength extensions))])\n    (string-append class_name \".\"\
    \ (list-ref extensions strongest-extension))))\n", "  (define (strength extension)\n\
    \    (let ([cap (count-if char-upper-case? extension)]\n          [sm (count-if\
    \ char-lower-case? extension)])\n      (- cap sm)))\n  (define (strongest-extension\
    \ lst)\n    (apply max (map strength lst)))\n  (string-append class_name \".\"\
    \ (list-ref extensions (argmax strength extensions))))\n", "  (define (strength\
    \ extension)\n    (- (count-if char-upper-case? extension)\n       (count-if char-lower-case?\
    \ extension)))\n  (define (strongest-extension extensions)\n    (if (null? extensions)\n\
    \        \"\"\n        (let ((extension (car extensions)))\n          (if (null?\
    \ (cdr extensions))\n              extension\n              (let ((stronger-extension\
    \ (strongest-extension (cdr extensions))))\n                (if (&gt; (strength\
    \ extension) (strength stronger-extension))\n                    extension\n \
    \                   stronger-extension))))))\n  (string-append class_name \".\"\
    \ (strongest-extension extensions)))\n</code>\n", "  (define (count_upper str)\n\
    \    (define (helper str count)\n      (cond\n        [(empty? str) count]\n \
    \       [(char-upper-case? (first str)) (helper (rest str) (+ count 1))]\n   \
    \     [else (helper (rest str) count)]))\n    (helper str 0))\n  (define (count_lower\
    \ str)\n    (define (helper str count)\n      (cond\n        [(empty? str) count]\n\
    \        [(char-lower-case? (first str)) (helper (rest str) (+ count 1))]\n  \
    \      [else (helper (rest str) count)]))\n    (helper str 0))\n  (define (calc_strength\
    \ str)\n    (- (count_upper str) (count_lower str)))\n  (define (find_strongest\
    \ extensions)\n    (define (helper extensions strongest_ext)\n      (cond\n  \
    \      [(empty? extensions) strongest_ext]\n        [(> (calc_strength (first\
    \ extensions)) (calc_strength strongest_ext))\n         (helper (rest extensions)\
    \ (first extensions))]\n        [else (helper (rest extensions) strongest_ext)]))\n\
    \    (helper extensions (first extensions)))\n  (string-append class_name \".\"\
    \ (find_strongest extensions)))\n", "  (define (count-upper str)\n    (for/sum\
    \ ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower\
    \ str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n\
    \  (define (strength str)\n    (- (count-upper str) (count-lower str)))\n  (define\
    \ (strongest-extension lst)\n    (define (strongest-extension-helper lst strongest-extension)\n\
    \      (cond\n        [(empty? lst) strongest-extension]\n        [(> (strength\
    \ (first lst)) (strength strongest-extension))\n         (strongest-extension-helper\
    \ (rest lst) (first lst))]\n        [else (strongest-extension-helper (rest lst)\
    \ strongest-extension)]))\n    (strongest-extension-helper (rest lst) (first lst)))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength ext)\n    (let ((cap (count-if char-upper-case? ext))\n          (sm\
    \ (count-if char-lower-case? ext)))\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (list-ref extensions (argmax (map strength extensions)))))\n", "  (define\
    \ (count-upper str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length\
    \ str))\n          count\n          (if (char-upper-case? (string-ref str i))\n\
    \              (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-lower str)\n    (let loop ([i 0] [count 0])\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (/ (- (count-upper str) (count-lower\
    \ str)) (string-length str)))\n  (define (strongest-extension lst)\n    (if (null?\
    \ lst)\n        \"\"\n        (let loop ([lst lst] [max-strength -1] [max-extension\
    \ \"\"])\n          (if (null? lst)\n              max-extension\n           \
    \   (let ([str (car lst)]\n                    [str-strength (strength str)])\n\
    \                (if (> str-strength max-strength)\n                    (loop\
    \ (cdr lst) str-strength str)\n                    (loop (cdr lst) max-strength\
    \ max-extension)))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) str)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) str)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (define (strongest-extension-name-iter extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(> (strength\
    \ (first extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([cap (count (lambda (c)\
    \ (char-upper-case? c)) ext)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (lambda (a b) (< (strength a) (strength\
    \ b))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count (lambda\
    \ (c) (char-upper-case? c)) extension)]\n          [sm (count (lambda (c) (char-lower-case?\
    \ c)) extension)])\n      (- cap sm)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (strength ext)\n    (let\
    \ ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension-name extensions)\n    (let ([extensions (sort extensions\
    \ (lambda (a b) (string<? a b)))]\n          [strengths (map strength extensions)])\n\
    \      (let ([max-strength (apply max strengths)]\n            [max-strength-index\
    \ (list-index max-strength strengths)])\n        (list-ref extensions max-strength-index))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ([cap (count-if char-upper-case? extension)]\n\
    \          [sm (count-if char-lower-case? extension)])\n      (- cap sm)))\n \
    \ (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength ext)\n    (let ([cap\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-iter extensions strongest-extension-name)\n\
    \      (cond [(empty? extensions) strongest-extension-name]\n            [(string=?\
    \ (first extensions) strongest-extension-name)\n             (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]\n            [(> (strength (first\
    \ extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength extension)\n    (let ([cap (count-if\
    \ char-upper-case? extension)]\n          [sm (count-if char-lower-case? extension)])\n\
    \      (- cap sm)))\n  (define (strongest-extension-name extensions)\n    (define\
    \ (strongest-extension-name-iter extensions strongest-extension-name)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(> (strength (first\
    \ extensions)) (strength strongest-extension-name))\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions))]\n            [else (strongest-extension-name-iter\
    \ (rest extensions) strongest-extension-name)]))\n    (strongest-extension-name-iter\
    \ extensions (first extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper-lower str)\n    (let loop ([str str]\
    \ [upper 0] [lower 0])\n      (cond [(empty? str) (values upper lower)]\n    \
    \        [(char-upper-case? (car str)) (loop (cdr str) (+ upper 1) lower)]\n \
    \           [(char-lower-case? (car str)) (loop (cdr str) upper (+ lower 1))]\n\
    \            [else (loop (cdr str) upper lower)])))\n  (define (strength str)\n\
    \    (let-values ([(upper lower) (count-upper-lower str)])\n      (/ (- upper\
    \ lower) 1.0)))\n  (define (strongest-extension lst)\n    (let loop ([lst lst]\
    \ [max-strength 0] [max-extension \"\"])\n      (cond [(empty? lst) max-extension]\n\
    \            [(> (strength (car lst)) max-strength)\n             (loop (cdr lst)\
    \ (strength (car lst)) (car lst))]\n            [else (loop (cdr lst) max-strength\
    \ max-extension)])))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength_of_extension extension)\n    (let ((cap (count-if char-upper-case?\
    \ extension))\n          (sm (count-if char-lower-case? extension)))\n      (-\
    \ cap sm)))\n  (define (strongest_extension_name extensions)\n    (apply max (map\
    \ strength_of_extension extensions)))\n  (define (strongest_extension_name_with_strength\
    \ extensions)\n    (let ((strongest_strength (strongest_extension_name extensions)))\n\
    \      (filter (lambda (extension)\n                (= (strength_of_extension\
    \ extension) strongest_strength))\n              extensions)))\n  (string-append\
    \ class_name \".\" (first (strongest_extension_name_with_strength extensions))))\n",
  "  (define (strength ext)\n    (let ([caps (count (lambda (c) (char-upper-case?\
    \ c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case? c)) ext)])\n\
    \      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n  \
    \  (apply max (map strength extensions)))\n  (define (strongest-extension-name-with-strength\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))))\n  (define (strongest-extension-name-with-strength-and-index\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)))\n  (define (index ext extensions)\n    (if (null?\
    \ extensions)\n        -1\n        (if (equal? ext (car extensions))\n       \
    \     0\n            (+ 1 (index ext (cdr extensions))))))\n  (define (strongest-extension-name-with-strength-and-index-and-class\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name))\n  (define (strongest-extension-name-with-strength-and-index-and-class-and-extensions\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name\n          extensions))\n  (define\
    \ (strongest-extension-name-with-strength-and-index-and-class-and-extensions-and-class-name\
    \ extensions)\n    (list (strongest-extension-name extensions)\n          (strength\
    \ (strongest-extension-name extensions))\n          (index (strongest-extension-name\
    \ extensions) extensions)\n          class_name\n          extensions\n      \
    \    class_name))\n  (define (strongest-", "  (define (count-upper str)\n    (cond\n\
    \      [(empty? str) 0]\n      [(char-upper-case? (first str)) (+ 1 (count-upper\
    \ (rest str)))]\n      [else (count-upper (rest str))]))\n  (define (count-lower\
    \ str)\n    (cond\n      [(empty? str) 0]\n      [(char-lower-case? (first str))\
    \ (+ 1 (count-lower (rest str)))]\n      [else (count-lower (rest str))]))\n \
    \ (define (strength str)\n    (/ (- (count-upper str) (count-lower str)) (string-length\
    \ str)))\n  (define (strongest-extension lst)\n    (cond\n      [(empty? lst)\
    \ \"\"]\n      [(empty? (rest lst)) (first lst)]\n      [(> (strength (first lst))\
    \ (strength (second lst)))\n       (strongest-extension (cons (first lst) (rest\
    \ (rest lst))))]\n      [else (strongest-extension (rest lst))]))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (count-caps\
    \ str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n\
    \          count\n          (if (char-upper-case? (string-ref str i))\n      \
    \        (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (count-smalls str)\n    (let loop ([i 0] [count 0])\n      (if (= i\
    \ (string-length str))\n          count\n          (if (char-lower-case? (string-ref\
    \ str i))\n              (loop (+ i 1) (+ count 1))\n              (loop (+ i\
    \ 1) count)))))\n  (define (strength str)\n    (- (count-caps str) (count-smalls\
    \ str)))\n  (define (strongest-extension lst)\n    (if (null? lst)\n        \"\
    \"\n        (let loop ([lst (cdr lst)] [max (car lst)] [max-strength (strength\
    \ (car lst))])\n          (if (null? lst)\n              max\n              (let\
    \ ([str (car lst)] [str-strength (strength str)])\n                (if (> str-strength\
    \ max-strength)\n                    (loop (cdr lst) str str-strength)\n     \
    \               (loop (cdr lst) max max-strength)))))))\n  (string-append class_name\
    \ \".\" (strongest-extension extensions)))\n", "  (define (strength ext)\n   \
    \ (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm (count\
    \ (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([extensions (sort extensions (lambda (a b) (< (strength\
    \ a) (strength b))))])\n      (car extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ([caps (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (- caps smalls)))\n \
    \ (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength extension)\n    (let\
    \ ((cap (count-if char-upper-case? extension))\n          (sm (count-if char-lower-case?\
    \ extension)))\n      (- cap sm)))\n  (define (strongest-extension extension1\
    \ extension2)\n    (if (&gt; (strength extension1) (strength extension2))\n  \
    \      extension1\n        extension2))\n  (string-append class_name \".\" (reduce\
    \ strongest-extension extensions)))\n", "  (define (strength str)\n    (let ([caps\
    \ (count (lambda (c) (char-upper-case? c)) str)]\n          [smalls (count (lambda\
    \ (c) (char-lower-case? c)) str)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (let ([ext-strengths (map (lambda (ext) (cons ext (strength\
    \ ext))) extensions)])\n      (let ([max-strength (apply max (map cdr ext-strengths))])\n\
    \        (let ([strongest-ext (car (filter (lambda (ext-strength) (= (cdr ext-strength)\
    \ max-strength)) ext-strengths))])\n          (car strongest-ext)))))\n  (string-append\
    \ class_name \".\" (strongest-extension-name extensions)))\n", "  (define (strength\
    \ extension)\n    (define (count-upper-case str)\n      (define (count-upper-case-iter\
    \ str count)\n        (cond [(empty? str) count]\n              [(char-upper-case?\
    \ (car str)) (count-upper-case-iter (cdr str) (+ count 1))]\n              [else\
    \ (count-upper-case-iter (cdr str) count)]))\n    (define (count-lower-case str)\n\
    \      (define (count-lower-case-iter str count)\n        (cond [(empty? str)\
    \ count]\n              [(char-lower-case? (car str)) (count-lower-case-iter (cdr\
    \ str) (+ count 1))]\n              [else (count-lower-case-iter (cdr str) count)]))\n\
    \    (/ (- (count-upper-case extension) (count-lower-case extension)) 1.0))\n\
    \  (define (strongest-extension-iter extensions strongest-extension)\n    (cond\
    \ [(empty? extensions) strongest-extension]\n          [(> (strength (car extensions))\
    \ (strength strongest-extension)) (strongest-extension-iter (cdr extensions) (car\
    \ extensions))]\n          [else (strongest-extension-iter (cdr extensions) strongest-extension)]))\n\
    \  (string-append class_name \".\" (strongest-extension-iter extensions (car extensions))))\n",
  "  (define (strength ext)\n    (let ([caps (count-if char-upper-case? ext)]\n  \
    \        [smalls (count-if char-lower-case? ext)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension exts)\n    (let ([strongest (first exts)]\n  \
    \        [strength (strength strongest)])\n      (for ([ext (rest exts)])\n  \
    \      (let ([str (strength ext)])\n          (when (> str strength)\n       \
    \     (set! strength str)\n            (set! strongest ext))))\n      strongest))\n\
    \  (string-append class_name \".\" (strongest-extension extensions)))\n", "  (define\
    \ (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max-by strength extensions))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength extension)\n    (let ((caps (count-if char-upper-case? extension))\n\
    \          (smalls (count-if char-lower-case? extension)))\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (apply max-by strength extensions))\n\
    \  (format \"~a.~a\" class_name (strongest-extension-name extensions)))\n", " \
    \ (define (strength s)\n    (let ([caps (count-if char-upper-case? s)]\n     \
    \     [smalls (count-if char-lower-case? s)])\n      (- caps smalls)))\n  (define\
    \ (strongest-extension-name extensions)\n    (let ([extensions (sort extensions\
    \ (\u03BB (x y)\n                                        (string<? x y)))]\n \
    \         [strengths (map strength extensions)])\n      (let ([max-strength (apply\
    \ max strengths)])\n        (list-ref extensions (list-index max-strength strengths)))))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (count-upper str)\n    (for/sum ([c (in-string str)])\n      (if (char-upper-case?\
    \ c) 1 0)))\n  (define (count-lower str)\n    (for/sum ([c (in-string str)])\n\
    \      (if (char-lower-case? c) 1 0)))\n  (define (strength str)\n    (- (count-upper\
    \ str) (count-lower str)))\n  (define (strongest-extension-name extensions)\n\
    \    (apply max (map strength extensions)))\n  (string-append class_name \".\"\
    \ (strongest-extension-name extensions)))\n", "  (define (count_caps str)\n  \
    \  (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n        \
    \  count\n          (if (char-upper-case? (string-ref str i))\n              (loop\
    \ (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n  (define (count_smalls\
    \ str)\n    (let loop ([i 0] [count 0])\n      (if (= i (string-length str))\n\
    \          count\n          (if (char-lower-case? (string-ref str i))\n      \
    \        (loop (+ i 1) (+ count 1))\n              (loop (+ i 1) count)))))\n\
    \  (define (strength str)\n    (/ (- (count_caps str) (count_smalls str)) 1.0))\n\
    \  (define (strongest_extension lst)\n    (if (null? lst)\n        \"\"\n    \
    \    (let loop ([lst lst] [strongest (car lst)] [strength (strength (car lst))])\n\
    \          (if (null? lst)\n              strongest\n              (let ([str\
    \ (car lst)])\n                (if (> (strength str) strength)\n             \
    \       (loop (cdr lst) str (strength str))\n                    (loop (cdr lst)\
    \ strongest strength)))))))\n  (string-append class_name \".\" (strongest_extension\
    \ extensions)))\n", "  (define (strength ext)\n    (let ((cap (regexp-match #rx\"\
    [A-Z]\" ext))\n          (sm (regexp-match #rx\"[a-z]\" ext)))\n      (/ (- (length\
    \ cap) (length sm)) (length ext))))\n  (define (strongest-extension extensions)\n\
    \    (define (strongest-extension-helper extensions strongest-extension)\n   \
    \   (cond ((null? extensions) strongest-extension)\n            ((> (strength\
    \ (car extensions)) (strength strongest-extension))\n             (strongest-extension-helper\
    \ (cdr extensions) (car extensions)))\n            (else (strongest-extension-helper\
    \ (cdr extensions) strongest-extension))))\n    (strongest-extension-helper extensions\
    \ (car extensions)))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength str)\n    (let ([caps (count-if char-upper-case? str)]\n  \
    \        [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (let ([strongest (car extensions)]\n\
    \          [strength (strength (car extensions))])\n      (for ([ext (cdr extensions)])\n\
    \        (let ([ext-strength (strength ext)])\n          (when (> ext-strength\
    \ strength)\n            (set! strongest ext)\n            (set! strength ext-strength))))\n\
    \      strongest))\n  (string-append class_name \".\" (strongest-extension extensions)))\n",
  "  (define (strength ext)\n    (let ((cap (regexp-match #rx\"[A-Z]\" ext))\n   \
    \       (sm (regexp-match #rx\"[a-z]\" ext)))\n      (- (length cap) (length sm))))\n\
    \  (define (strongest-extension-name extensions)\n    (cond ((null? extensions)\
    \ \"\")\n          ((null? (cdr extensions)) (car extensions))\n          (else\n\
    \           (let ((first (car extensions))\n                 (second (cadr extensions)))\n\
    \             (if (> (strength first) (strength second))\n                 first\n\
    \                 second)))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (strength ext)\n    (let ([caps (count (lambda\
    \ (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda (c) (char-lower-case?\
    \ c)) ext)])\n      (- caps smalls)))\n  (define (strongest-extension-name extensions)\n\
    \    (let ([extensions (sort extensions (lambda (x y) (< (strength x) (strength\
    \ y))))])\n      (car extensions)))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n", "  (define (count-upper str)\n    (for/sum ([c (in-string\
    \ str)])\n      (if (char-upper-case? c) 1 0)))\n  (define (count-lower str)\n\
    \    (for/sum ([c (in-string str)])\n      (if (char-lower-case? c) 1 0)))\n \
    \ (define (strength str)\n    (- (count-upper str) (count-lower str)))\n  (define\
    \ (strongest-extension lst)\n    (apply max (map strength lst)))\n  (string-append\
    \ class_name \".\" (list-ref extensions (argmax (map strength extensions)))))\n",
  "  (define (strength extension)\n    (let ((cap (count-if char-upper-case? extension))\n\
    \          (sm (count-if char-lower-case? extension)))\n      (- cap sm)))\n \
    \ (define (strongest-extension-name extensions)\n    (apply max (map strength\
    \ extensions)))\n  (string-append class_name \".\" (list-ref extensions (argmax\
    \ (map strength extensions)))))\n", "  (define (strength ext)\n    (let ([caps\
    \ (count (lambda (c) (char-upper-case? c)) ext)]\n          [smalls (count (lambda\
    \ (c) (char-lower-case? c)) ext)])\n      (/ caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (apply max (map strength extensions)))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (let\
    \ ([max-strength (apply max (map strength extensions))])\n    (string-append class_name\
    \ \".\" (car (filter (lambda (ext) (= (strength ext) max-strength)) extensions)))))\n",
  "  (define (strength extension)\n    (let ([caps (count-if char-upper-case? extension)]\n\
    \          [smalls (count-if char-lower-case? extension)])\n      (/ caps smalls)))\n\
    \  (define (strongest-extension extensions)\n    (if (null? extensions)\n    \
    \    \"\"\n        (let ([extension (car extensions)]\n              [rest (cdr\
    \ extensions)])\n          (if (null? rest)\n              extension\n       \
    \       (let ([strongest (strongest-extension rest)])\n                (if (>\
    \ (strength extension) (strength strongest))\n                    extension\n\
    \                    strongest))))))\n  (string-append class_name \".\" (strongest-extension\
    \ extensions)))\n", "  (define (strength str)\n    (let ([caps (count-if char-upper-case?\
    \ str)]\n          [smalls (count-if char-lower-case? str)])\n      (- caps smalls)))\n\
    \  (define (strongest-extension-name extensions)\n    (define (strongest-extension-name-iter\
    \ extensions strongest-extension-name strongest-extension-strength)\n      (cond\
    \ [(empty? extensions) strongest-extension-name]\n            [(> (strength (first\
    \ extensions)) strongest-extension-strength)\n             (strongest-extension-name-iter\
    \ (rest extensions) (first extensions) (strength (first extensions)))]\n     \
    \       [else (strongest-extension-name-iter (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]))\n    (strongest-extension-name-iter extensions\
    \ (first extensions) (strength (first extensions))))\n  (string-append class_name\
    \ \".\" (strongest-extension-name extensions)))\n", "  (define (strength ext)\n\
    \    (let ([cap (count (lambda (c) (char-upper-case? c)) ext)]\n          [sm\
    \ (count (lambda (c) (char-lower-case? c)) ext)])\n      (- cap sm)))\n  (define\
    \ (strongest-extension-name extensions)\n    (let ([extensions (sort extensions\
    \ (lambda (a b) (< (strength a) (strength b))))])\n      (car extensions)))\n\
    \  (string-append class_name \".\" (strongest-extension-name extensions)))\n",
  "  (define (strength ext)\n    (define (count-upper ext)\n      (if (empty? ext)\n\
    \          0\n          (if (char-upper-case? (car ext))\n              (+ 1 (count-upper\
    \ (cdr ext)))\n              (count-upper (cdr ext)))))\n    (define (count-lower\
    \ ext)\n      (if (empty? ext)\n          0\n          (if (char-lower-case? (car\
    \ ext))\n              (+ 1 (count-lower (cdr ext)))\n              (count-lower\
    \ (cdr ext)))))\n    (/ (- (count-upper ext) (count-lower ext)) (length ext)))\n\
    \  (define (strongest-extension extensions)\n    (if (empty? extensions)\n   \
    \     \"\"\n        (if (empty? (cdr extensions))\n            (car extensions)\n\
    \            (if (> (strength (car extensions)) (strength (cadr extensions)))\n\
    \                (strongest-extension (cons (car extensions) (cddr extensions)))\n\
    \                (strongest-extension (cdr extensions))))))\n  (string-append\
    \ class_name \".\" (strongest-extension extensions)))\n", "  (define (count-upper\
    \ str)\n    (for/sum ([c (in-string str)])\n      (if (char-upper-case? c) 1 0)))\n\
    \  (define (count-lower str)\n    (for/sum ([c (in-string str)])\n      (if (char-lower-case?\
    \ c) 1 0)))\n  (define (strength str)\n    (/ (- (count-upper str) (count-lower\
    \ str)) (string-length str)))\n  (define (strongest-extension lst)\n    (apply\
    \ max (map strength lst)))\n  (string-append class_name \".\" (list-ref extensions\
    \ (argmin (map strength extensions)))))\n", "  (define (strength extension)\n\
    \    (let ([caps (count-if char-upper-case? extension)]\n          [smalls (count-if\
    \ char-lower-case? extension)])\n      (- caps smalls)))\n  (define (strongest-extension-name\
    \ extensions)\n    (define (strongest-extension-name-helper extensions strongest-extension-name\
    \ strongest-extension-strength)\n      (cond [(empty? extensions) strongest-extension-name]\n\
    \            [(< (strength (first extensions)) strongest-extension-strength)\n\
    \             (strongest-extension-name-helper (rest extensions) strongest-extension-name\
    \ strongest-extension-strength)]\n            [else (strongest-extension-name-helper\
    \ (rest extensions) (first extensions) (strength (first extensions)))]))\n   \
    \ (strongest-extension-name-helper extensions (first extensions) (strength (first\
    \ extensions))))\n  (string-append class_name \".\" (strongest-extension-name\
    \ extensions)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
