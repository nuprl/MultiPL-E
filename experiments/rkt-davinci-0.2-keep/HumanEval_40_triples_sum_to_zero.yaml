name: HumanEval_40_triples_sum_to_zero
language: racket
prompt: "#lang racket\n\n;; triples_sum_to_zero takes a list of integers as an input.\n\
  ;; it returns True if there are three distinct elements in the list that\n;; sum\
  \ to zero, and False otherwise.\n;; >>> triples_sum_to_zero([1, 3, 5, 0])\n;; False\n\
  ;; >>> triples_sum_to_zero([1, 3, -2, 1])\n;; True\n;; >>> triples_sum_to_zero([1,\
  \ 2, 3, 7])\n;; False\n;; >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n;; True\n\
  ;; >>> triples_sum_to_zero([1])\n;; False\n(define (triples_sum_to_zero l)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triples_sum_to_zero))\n\
  \    (check-equal? (candidate (list 1 3 5 0)) #f)\n    (check-equal? (candidate\
  \ (list 1 3 5 -1)) #f)\n    (check-equal? (candidate (list 1 3 -2 1)) #t)\n    (check-equal?\
  \ (candidate (list 1 2 3 7)) #f)\n    (check-equal? (candidate (list 1 2 5 7)) #f)\n\
  \    (check-equal? (candidate (list 2 4 -5 3 9 7)) #t)\n    (check-equal? (candidate\
  \ (list 1)) #f)\n    (check-equal? (candidate (list 1 3 5 -100)) #f)\n    (check-equal?\
  \ (candidate (list 100 3 5 -100)) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? l) false]\n    [(and (member (list (first l)\
    \ (second l) (- (first l) (second l))) (combinations 3 l))\n          (not (member\
    \ (list (first l) (second l) (- (first l) (second l))) (combinations 3 (rest l)))))\n\
    \     true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (car l) (cdr l)) (member\
    \ (car l) (cddr l))) #t]\n      [else (helper (cdr l))]))\n  (helper l))\n", " \
    \ (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n \
    \         (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n\
    \    [(empty? (rest (rest l))) false]\n    [else\n     (cond\n       [(= (apply\
    \ + (take l 3)) 0) true]\n       [else (triples_sum_to_zero (rest l))])]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n  \
    \        (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n\
    \    [(empty? (rest (rest l))) false]\n    [else\n     (or\n      (and\n     \
    \  (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n\
    \      (and\n       (= (list-ref l 0) (list-ref l 1))\n       (= (list-ref l 0)\
    \ (list-ref l 2)))\n      (and\n       (= (list-ref l 0) (list-ref l 1))\n   \
    \    (= (list-ref l 0) (list-ref l 2)))\n      (and\n       (= (list-ref l 0)\
    \ (list-ref l 1))\n       (= (list-ref l 0) (list-ref l 2)))\n      (and\n   \
    \    (= (list-ref", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty?\
    \ (rest l)) false]\n    [(empty? (rest (rest l))) false]\n    [else\n     (or\n\
    \      (and\n       (= (sum (first l) (first (rest l)) (first (rest (rest l))))\
    \ 0)\n       true)\n      (triples_sum_to_zero (rest l)))]))\n", "  (cond\n  \
    \  [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(= (length l) 1) false]\n    [(= (length l) 2) false]\n    [else\n\
    \     (let* ([a (first l)]\n            [b (second l)]\n            [c (third\
    \ l)]\n            [rest (drop l 3)])\n       (cond\n         [(= (+ a b c) 0)\
    \ true]\n         [else (triples_sum_to_zero rest)]))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (define (helper l)\n    (cond\n\
    \      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n      [(empty? (rest (rest\
    \ l))) #f]\n      [(= (sum (first l) (first (rest l)) (first (rest (rest l))))\
    \ 0) #t]\n      [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (first l) (rest l)) (member (- (first l)) (rest\
    \ l))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l))))\n     (or (triples_sum_to_zero (rest l)) true)]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n   \
    \ [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n\
    \     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (list (first l) (second l) (third l))\
    \ (combinations 3 l))\n          (= (apply + (first (combinations 3 l))) 0)) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member 0 l) (member (sub1 0 (first l)) l) (member (sub1 0 (sub1 0\
    \ (first l))) l)) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n         \
    \ (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l)\
    \ (cdr l)) (member (car l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0)\
    \ (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(=\
    \ (length l) 1) #f]\n    [(= (length l) 2) #f]\n    [(= (length l) 3) (or (= (sum\
    \ l) 0) #f)]\n    [else (or (triples_sum_to_zero (rest l))\n              (triples_sum_to_zero\
    \ (rest (rest l)))\n              (triples_sum_to_zero (rest (rest (rest l)))))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n  \
    \        (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list (first\
    \ l) (second l) (third l)) (combinations 3 l))\n          (= (apply + (first (combinations\
    \ 3 l))) 0)) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(empty? (cdr l)) false]\n    [(empty? (cddr l))\
    \ false]\n    [(and (not (empty? (cdddr l)))\n          (or (and (= (car l) (car\
    \ (cdr l)))\n                   (= (car l) (car (cddr l))))\n              (and\
    \ (= (car l) (car (cdr l)))\n                   (= (car l) (car (cddr l))))))\n\
    \     (triples_sum_to_zero (cdr l))]\n    [(= (car l) (car (cdr l)))\n     (triples_sum_to_zero\
    \ (cdr l))]\n    [(= (car l) (car (cddr l)))\n     (triples_sum_to_zero (cdr l))]\n\
    \    [(= (car (cdr l)) (car (cddr l)))\n     (triples_sum_to_zero (cdr l))]\n\
    \    [(= (+ (car l) (car (cdr l)) (car (cddr l))) 0)\n     true]\n    [else\n\
    \     (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(= (length l) 1) false]\n    [(= (length l) 2) false]\n    [else\n     (let\
    \ ([a (first l)]\n           [b (second l)]\n           [c (third l)])\n     \
    \  (cond\n         [(= (+ a b c) 0) true]\n         [else (triples_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n   \
    \ [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) true]\n \
    \   [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (if (empty?\
    \ l)\n      #f\n      (let ((a (first l))\n            (b (first (rest l)))\n\
    \            (c (first (rest (rest l)))))\n        (or (and (not (empty? (rest\
    \ (rest (rest l)))))\n                 (or (= (+ a b c) 0)\n                 \
    \    (triples_sum_to_zero (rest l))))\n            (triples_sum_to_zero (rest\
    \ l))))))\n", "  (define (helper l)\n    (cond\n      [(null? l) #f]\n      [(and\
    \ (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n      [else (helper\
    \ (cdr l))]))\n  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member\
    \ (first l) (rest l)) (member (- (first l)) (rest l))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l)\
    \ (cdr l)) (member (car l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0)\
    \ (cdr l))\n          (member (list-ref l 0) (cddr l))) true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l)\
    \ (cdr l)) (member (car l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (define (helper l)\n    (cond\n      [(empty? l) #f]\n      [(and\
    \ (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n      [else (helper\
    \ (cdr l))]))\n  (helper l))\n", "  (cond [(empty? l) false]\n        [(and (member\
    \ (car l) (cdr l))\n              (member (- (car l)) (cdr l)))\n         true]\n\
    \        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(= (length l) 2) #f]\n \
    \   [(= (length l) 3) (or (= (sum l) 0) #f)]\n    [else (or (triples_sum_to_zero\
    \ (rest l))\n              (triples_sum_to_zero (append (list (first l)) (rest\
    \ (rest l)))))]))\n", "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n\
    \    [(empty? (rest (rest l))) #f]\n    [(and (not (empty? (rest (rest (rest l)))))\n\
    \          (zero? (+ (first l) (first (rest l)) (first (rest (rest l)))))\n  \
    \        (not (member (first l) (rest (rest (rest l))))))\n     #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n    (cond\n   \
    \   [(empty? l) #f]\n      [(and (member? (car l) (cdr l)) (member? (car l) (cddr\
    \ l))) #t]\n      [else (helper (cdr l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(= (length l) 1) false]\n    [(= (length l) 2) false]\n    [else\n\
    \     (let ([a (first l)]\n           [b (second l)]\n           [c (third l)])\n\
    \       (if (= (+ a b c) 0)\n           true\n           (triples_sum_to_zero\
    \ (rest l))))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l))))\n     true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list (first l) (second l) (third l))\n                  (combinations\
    \ 3 l))\n          (= (apply + (first (combinations 3 l))) 0))\n     true]\n \
    \   [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(= (length l) 1) #f]\n    [(= (length l) 2) #f]\n    [(= (length\
    \ l) 3)\n     (or (= (sum l) 0) #f)]\n    [else\n     (or (triples_sum_to_zero\
    \ (rest l))\n         (triples_sum_to_zero (rest (rest l)))\n         (triples_sum_to_zero\
    \ (rest (rest (rest l)))))]))\n", "  (cond\n    [(null? l) #f]\n    [(and (member\
    \ (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and (empty? (cdr l)) (empty?\
    \ (cddr l))) #f]\n    [(and (empty? (cdr l)) (not (empty? (cddr l))))\n     (or\
    \ (= (list-ref l 0) (list-ref l 2))\n         (= (list-ref l 0) (list-ref l 3))\n\
    \         (= (list-ref l 1) (list-ref l 2))\n         (= (list-ref l 1) (list-ref\
    \ l 3))\n         (= (list-ref l 2) (list-ref l 3)))]\n    [(and (not (empty?\
    \ (cdr l))) (empty? (cddr l))) #f]\n    [(and (not (empty? (cdr l))) (not (empty?\
    \ (cddr l))))\n     (or (= (list-ref l 0) (list-ref l 1))\n         (= (list-ref\
    \ l 0) (list-ref l 2))\n         (= (list-ref l 0) (list-ref l 3))\n         (=\
    \ (list-ref l 1) (list-ref l 2))\n         (= (list-ref l 1) (list-ref l 3))\n\
    \         (= (list-ref l 2) (list-ref l 3)))]))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     (triples_sum_to_zero (cdr l))]\n    [(and (member (- (list-ref l\
    \ 0)) (cdr l))\n          (member (- (list-ref l 0)) (cddr l)))\n     (triples_sum_to_zero\
    \ (cdr l))]\n    [else\n     (or (triples_sum_to_zero (cdr l))\n         (member\
    \ (list-ref l 0) (cdr l))\n         (member (list-ref l 0) (cddr l))\n       \
    \  (member (- (list-ref l 0)) (cdr l))\n         (member (- (list-ref l 0)) (cddr\
    \ l)))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member\
    \ (first l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n  \
    \        (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(= (length l) 1) false]\n\
    \    [(= (length l) 2) false]\n    [else\n     (let* ([a (first l)]\n        \
    \    [b (second l)]\n            [c (third l)]\n            [rest (rest (rest\
    \ (rest l))))])\n       (cond\n         [(= (+ a b c) 0) true]\n         [else\
    \ (triples_sum_to_zero (cons a rest))]))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (empty? (cdr l)) (empty? (cddr l))) #f]\n    [(and (empty? (cdr l))\
    \ (not (empty? (cddr l))))\n     (if (= (list-ref l 0) (list-ref l 2)) #f #t)]\n\
    \    [(and (not (empty? (cdr l))) (empty? (cddr l))) #f]\n    [(and (not (empty?\
    \ (cdr l))) (not (empty? (cddr l))))\n     (if (or (= (list-ref l 0) (list-ref\
    \ l 1))\n             (= (list-ref l 0) (list-ref l 2))\n             (= (list-ref\
    \ l 1) (list-ref l 2)))\n         (triples_sum_to_zero (cdr l))\n         (if\
    \ (= (+ (list-ref l 0) (list-ref l 1) (list-ref l 2)) 0)\n             #t\n  \
    \           (triples_sum_to_zero (cdr l))))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(empty? (rest l)) false]\n    [(empty? (rest (rest l))) false]\n    [else\n\
    \     (let ([a (first l)]\n           [b (first (rest l))]\n           [c (first\
    \ (rest (rest l)))])\n       (or (and (= a 0) (= b 0) (= c 0))\n           (or\
    \ (and (= a b) (= b c))\n               (or (and (= a c) (= b c))\n          \
    \         (or (and (= (+ a b) c) (= (- a b) c))\n                       (or (and\
    \ (= (+ a c) b) (= (- a c) b))\n                           (and (= (+ b c) a)\
    \ (= (- b c) a))))))))))\n    (triples_sum_to_zero (rest l))))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (- (car l))\
    \ (cdr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n \
    \   [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(empty? (rest\
    \ (rest l))) false]\n    [else\n     (let ([a (first l)]\n           [b (first\
    \ (rest l))]\n           [c (first (rest (rest l)))])\n       (or (and (= a 0)\
    \ (= b 0) (= c 0))\n           (and (= a 0) (= b 0) (= (- c) 0))\n           (and\
    \ (= a 0) (= (- b) 0) (= c 0))\n           (and (= a 0) (= (- b) 0) (= (- c) 0))\n\
    \           (and (= (- a) 0) (= b 0) (= c 0))\n           (and (= (- a) 0) (=\
    \ b 0) (= (- c) 0))\n           (and (= (- a) 0) (= (- b) 0) (= c 0))\n      \
    \     (and (= (- a) 0) (= (- b) 0) (= (- c) 0))\n           (and (= (+ a b) c)\n\
    \                (not (member a (list b c)))\n                (not (member b (list\
    \ a c)))\n                (not (member c (list a b))))\n           (and (= (+\
    \ a (- b)) c)\n                (not (member a (list b c)))\n                (not\
    \ (member b (list a c)))\n                (not (member c (list a b))))\n     \
    \      (and (= (+ a c) b)\n                (not (member a (list b c)))\n     \
    \           (not (member b (list a c)))\n                (not (member c (list\
    \ a b))))\n           (and (= (+ a (- c)) b)\n                (not (member a (list\
    \ b c)))\n                (not (member b (list a c)))\n                (not (member\
    \ c (list a b))))\n           (and (= (+ (- a) b) c)\n                (not (member\
    \ a (list b c)))\n                (not (member b (list a c)))\n              \
    \  (not (member c (list a b))))\n           (and (= (+ (- a) (- b)) c)\n     \
    \           (not (member a (list b c)))\n                (not (member b (list\
    \ a c)))\n                (not (member", "  (define (helper l)\n    (cond\n  \
    \    [(empty? l) #f]\n      [(empty? (rest l)) #f]\n      [(empty? (rest (rest\
    \ l))) #f]\n      [(= (sum (first l) (first (rest l)) (first (rest (rest l))))\
    \ 0) #t]\n      [else (helper (rest l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (cdr l)) #f]\n      [(empty?\
    \ (cddr l)) #f]\n      [(= 0 (+ (car l) (cadr l) (caddr l))) #t]\n      [else\
    \ (triples_sum_to_zero_helper (cdr l))]))\n  (triples_sum_to_zero_helper l))\n",
  "  (cond\n    [(empty? l) false]\n    [(= (length l) 1) false]\n    [(= (length\
    \ l) 2) false]\n    [else\n     (let ([a (first l)]\n           [b (second l)]\n\
    \           [c (third l)])\n       (cond\n         [(= (+ a b c) 0) true]\n  \
    \       [else (triples_sum_to_zero (rest l))]))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(empty? (rest l)) false]\n    [(empty? (rest (rest l))) false]\n\
    \    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest l)) (first\
    \ (rest (rest l)))) 0)\n       true)\n      (triples_sum_to_zero (rest l)))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [(and (not (empty? (rest (rest (rest l)))))\n          (zero?\
    \ (+ (first l) (first (rest l)) (first (rest (rest l)))))\n          (not (member\
    \ (first l) (rest (rest (rest l))))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l1 l2 l3)\n    (cond\n      [(and (not (empty? l1)) (not (empty? l2)) (not (empty?\
    \ l3)))\n       (cond\n         [(= (+ (first l1) (first l2) (first l3)) 0) #t]\n\
    \         [else (triples_sum_to_zero_helper (rest l1) (rest l2) (rest l3))])]\n\
    \      [else #f]))\n  (triples_sum_to_zero_helper l l l))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (define (helper l)\n    (cond\n\
    \      [(empty? l) false]\n      [(empty? (cdr l)) false]\n      [(empty? (cddr\
    \ l)) false]\n      [(and (not (member (list (car l) (cadr l) (caddr l)) (cdddr\
    \ l)))\n            (= (apply + (list (car l) (cadr l) (caddr l))) 0))\n     \
    \  true]\n      [else (helper (cdr l))]))\n  (helper l))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car\
    \ l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n         \
    \ (member (list-ref l 0) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0)\
    \ (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n\
    \     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(null?\
    \ l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr l))) #t]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond [(empty? l) false]\n        [(and\
    \ (member (car l) (cdr l))\n              (member (- (car l)) (cdr l)))\n    \
    \     true]\n        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n   \
    \ [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(= 3 (length l)) (= 0 (apply + l))]\n    [else (or (triples_sum_to_zero\
    \ (rest l))\n              (triples_sum_to_zero (cons (first l) (rest (rest l)))))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", " \
    \ (define (helper l)\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l))\
    \ #f]\n      [(empty? (rest (rest l))) #f]\n      [(zero? (+ (first l) (first\
    \ (rest l)) (first (rest (rest l))))) #t]\n      [else (helper (rest l))]))\n\
    \  (helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member 0 l) (member\
    \ 0 l) (member 0 l)) #t]\n    [(and (member (car l) l) (member (car l) l) (member\
    \ (car l) l)) #t]\n    [(and (member (car l) l) (member (car l) l) (member (car\
    \ l) l)) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (list (first l) (second l) (third l)) (list-of-lists-of-three\
    \ l))\n          (= (apply + (list (first l) (second l) (third l))) 0))\n    \
    \ true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (first l) (rest l)) (member (first l) (rest (rest\
    \ l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(= (length l) 1) false]\n    [(= (length l) 2) false]\n    [else\n\
    \     (let ([a (first l)]\n           [b (second l)]\n           [c (third l)])\n\
    \       (cond\n         [(= (+ a b c) 0) true]\n         [else (triples_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l))))\n     true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [(and (not\
    \ (member (list (first l) (second l) (third l)) (list-of-triples l)))\n      \
    \    (= (apply + (list (first l) (second l) (third l))) 0))\n     #t]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n    [(and\
    \ (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n\
    \    [(empty? (rest (rest l))) false]\n    [else\n     (let* ([a (first l)]\n\
    \            [b (first (rest l))]\n            [c (first (rest (rest l)))]\n \
    \           [l2 (rest (rest (rest l)))]\n            [result (or (and (= (+ a\
    \ b c) 0) true)\n                        (triples_sum_to_zero l2))])\n       result)]))\n",
  "  (cond\n    [(null? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (define\
    \ (triples_sum_to_zero_helper l acc)\n    (cond\n      [(empty? l) (or (member\
    \ 0 acc) #f)]\n      [(empty? (rest l)) #f]\n      [(empty? (rest (rest l))) #f]\n\
    \      [else (triples_sum_to_zero_helper (rest l) (cons (+ (first l) (first (rest\
    \ l)) (first (rest (rest l)))) acc))]))\n  (triples_sum_to_zero_helper l '()))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l))\
    \ #f]\n    [(and (not (empty? l)) (not (empty? (cdr l))) (not (empty? (cddr l))))\n\
    \     (or (and (= (car l) (car (cdr l))) (= (car l) (car (cddr l))))\n       \
    \  (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n    [(empty? l) false]\n  \
    \  [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (list-ref l 0) (rest l))\n        \
    \  (member (list-ref l 0) (rest (rest l))))\n     (triples_sum_to_zero (rest l))]\n\
    \    [(and (member (list-ref l 0) (rest l))\n          (member (- (list-ref l\
    \ 0)) (rest (rest l))))\n     true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (if (empty? l)\n      #f\n      (or (and (member (car l) (cdr l))\n         \
    \      (member (- (car l)) (cdr l)))\n          (triples_sum_to_zero (cdr l)))))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr\
    \ l)) (member (- (car l)) (cdr l))) true]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest\
    \ l)) (member (first l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\
    \ true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (empty? (rest l)) (empty? (rest (rest l)))) false]\n  \
    \  [(and (empty? (rest l)) (zero? (apply + (list (first l) (first (rest l)) 0))))\
    \ true]\n    [(zero? (apply + (list (first l) (first (rest l)) (first (rest (rest\
    \ l)))))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n  \
    \  [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member\
    \ (- (first l)) (rest l))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car\
    \ l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (empty? (cdr l)) (empty? (cddr l))) false]\n\
    \    [(and (empty? (cdr l)) (not (empty? (cddr l))))\n     (or (and (= (car l)\
    \ 0) (= (cadr l) 0) (= (caddr l) 0))\n         (triples_sum_to_zero (cdr l)))]\n\
    \    [(and (not (empty? (cdr l))) (empty? (cddr l)))\n     (or (and (= (car l)\
    \ 0) (= (cadr l) 0))\n         (triples_sum_to_zero (cdr l)))]\n    [(and (not\
    \ (empty? (cdr l))) (not (empty? (cddr l))))\n     (or (and (= (car l) 0) (= (cadr\
    \ l) 0) (= (caddr l) 0))\n         (triples_sum_to_zero (cdr l)))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member (- (first\
    \ l)) (rest l))) true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (car l) (cdr l))\n          (member\
    \ (- (car l)) (cdr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n  \
    \        (member (list-ref l 0) (cddr l))) true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (cdr l)) false]\n\
    \    [(empty? (cddr l)) false]\n    [(and (not (empty? (cdddr l)))\n         \
    \ (or (and (= (car l) (car (cdr l)))\n                   (= (car l) (car (cddr\
    \ l))))\n              (and (= (car l) (car (cdr l)))\n                   (= (car\
    \ l) (car (cddr l))))))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car l)\
    \ (car (cdr l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car l) (car (cddr\
    \ l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car (cdr l)) (car (cddr\
    \ l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (+ (car l) (car (cdr l))\
    \ (car (cddr l))) 0)\n     true]\n    [else\n     (triples_sum_to_zero (cdr l))]))\n",
  "  (define (helper l)\n    (if (null? l)\n        #f\n        (if (member (- (car\
    \ l) (cadr l)) (cddr l))\n            #t\n            (helper (cdr l)))))\n  (if\
    \ (<= (length l) 2)\n      #f\n      (helper l)))\n", "  (cond\n    [(empty? l)\
    \ false]\n    [(and (member (list-ref l 0) (rest l))\n          (member (list-ref\
    \ l 0) (rest (rest l))))\n     true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member\
    \ (first l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member\
    \ (- (first l)) (rest l))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (rest l)) #f]\n    [(empty? (rest (rest\
    \ l))) #f]\n    [(and (member (add1 (add1 (car l))) (rest l))\n          (member\
    \ (add1 (car l)) (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(= (length l) 1) #f]\n    [(= (length l) 2)\
    \ #f]\n    [(= (length l) 3) (zero? (+ (first l) (second l) (third l)))]\n   \
    \ [else (or (triples_sum_to_zero (rest l))\n              (triples_sum_to_zero\
    \ (rest (rest l)))\n              (triples_sum_to_zero (rest (rest (rest l)))))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (list-ref l 0) (cdr\
    \ l))\n            (member (list-ref l 0) (cddr l))) #t]\n      [else (triples_sum_to_zero_helper\
    \ (cdr l))]))\n  (triples_sum_to_zero_helper (sort l <)))\n", "  (let ([l (sort\
    \ l <)])\n    (cond\n      [(empty? l) #f]\n      [(empty? (rest l)) #f]\n   \
    \   [(empty? (rest (rest l))) #f]\n      [(= (apply + (take l 3)) 0) #t]\n   \
    \   [else (triples_sum_to_zero (rest l))])))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (first l) (rest l)) (member (first l)\
    \ (rest (rest l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(empty? (rest l)) false]\n    [(empty? (rest (rest l))) false]\n    [else\n\
    \     (or\n      (and\n       (= (sum (first l) (first (rest l)) (first (rest\
    \ (rest l)))) 0)\n       true)\n      (triples_sum_to_zero (rest l)))]))\n", " \
    \ (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n \
    \         (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(empty? (cdr l)) #f]\n    [(empty? (cddr l)) #f]\n    [(= 0 (+ (car l) (cadr\
    \ l) (caddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (- (car l)) (cdr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref l 0) (cdr l))\n  \
    \        (member (list-ref l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n\
    \    [(empty? (rest (rest l))) false]\n    [else\n     (let ([a (first l)]\n \
    \          [b (first (rest l))]\n           [c (first (rest (rest l)))])\n   \
    \    (or (and (= (+ a b c) 0)\n                (not (equal? a b))\n          \
    \      (not (equal? a c))\n                (not (equal? b c)))\n           (triples_sum_to_zero\
    \ (rest l))))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (first\
    \ l) (rest l)) (member (first l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list (first\
    \ l) (second l) (third l))\n                  (combinations 3 l))\n          (=\
    \ 0 (apply + (list (first l) (second l) (third l)))))\n     true]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (not (empty? (cdr\
    \ l))) (not (empty? (cddr l))))\n     (or (and (= (car l) (car (cdr l)))\n   \
    \           (= (car l) (car (cddr l))))\n         (triples_sum_to_zero (cdr l)))]\n\
    \    [else false]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list (first l) (second l) (third l)) (list-of-triples l))\n\
    \          (= (apply + (list (first l) (second l) (third l))) 0))\n     true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l1 l2)\n    (cond\n      [(empty? l1) #f]\n      [(empty? l2) (triples_sum_to_zero_helper\
    \ (rest l1) (rest l1))]\n      [(= 0 (+ (first l1) (first l2))) #t]\n      [else\
    \ (triples_sum_to_zero_helper l1 (rest l2))]))\n  (triples_sum_to_zero_helper\
    \ l l))\n", "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr\
    \ l))\n          (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (define (triples_sum_to_zero_helper\
    \ l)\n    (cond\n      [(null? l) #f]\n      [(and (member (car l) (cdr l)) (member\
    \ (- (car l)) (cdr l))) #t]\n      [else (triples_sum_to_zero_helper (cdr l))]))\n\
    \  (triples_sum_to_zero_helper l))\n", "  (cond\n    [(empty? l) #f]\n    [(=\
    \ 3 (length l)) (zero? (apply + l))]\n    [else (or (triples_sum_to_zero (rest\
    \ l))\n              (triples_sum_to_zero (append (list (first l)) (rest (rest\
    \ l)))))]))\n", "  (cond\n    [(empty? l) #f]\n    [(or (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 1)) (zero? (list-ref l 2)))\n         (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 1)) (zero? (list-ref l 3)))\n         (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 1)) (zero? (list-ref l 4)))\n         (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 2)) (zero? (list-ref l 3)))\n         (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 2)) (zero? (list-ref l 4)))\n         (and (zero? (list-ref\
    \ l 0)) (zero? (list-ref l 3)) (zero? (list-ref l 4)))\n         (and (zero? (list-ref\
    \ l 1)) (zero? (list-ref l 2)) (zero? (list-ref l 3)))\n         (and (zero? (list-ref\
    \ l 1)) (zero? (list-ref l 2)) (zero? (list-ref l 4)))\n         (and (zero? (list-ref\
    \ l 1)) (zero? (list-ref l 3)) (zero? (list-ref l 4)))\n         (and (zero? (list-ref\
    \ l 2)) (zero? (list-ref l 3)) (zero? (list-ref l 4))))\n     #t]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (car l) (cdr l)) (member (- (car l)) (cdr l))) true]\n    [else (triples_sum_to_zero\
    \ (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) #f]\n \
    \   [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n\
    \    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref\
    \ l 0) (cddr l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n     \
    \     (member (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(= (length l) 1) false]\n\
    \    [(= (length l) 2) false]\n    [else\n     (let ([a (first l)]\n         \
    \  [b (second l)]\n           [c (third l)])\n       (if (= (+ a b c) 0)\n   \
    \        true\n           (triples_sum_to_zero (rest l))))]))\n", "  (cond\n \
    \   [(empty? l) #f]\n    [(and (member (list-ref l 0) (cdr l))\n          (member\
    \ (list-ref l 0) (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member\
    \ (- (first l)) (rest l))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) false]\n    [(empty? (rest l)) false]\n    [(empty? (rest\
    \ (rest l))) false]\n    [else\n     (or\n      (and\n       (= (list-ref l 0)\
    \ (- (list-ref l 1) (list-ref l 2)))\n       (or\n        (and\n         (= (list-ref\
    \ l 0) (list-ref l 1))\n         (= (list-ref l 0) (list-ref l 2)))\n        (and\n\
    \         (not (= (list-ref l 0) (list-ref l 1)))\n         (not (= (list-ref\
    \ l 0) (list-ref l 2)))\n         (not (= (list-ref l 1) (list-ref l 2))))))\n\
    \      (triples_sum_to_zero (rest l))))))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list (first l) (second l) (third l)) (list-of-lists-of-three\
    \ l))\n          (= (sum (list (first l) (second l) (third l))) 0))\n     true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (first l) (rest (rest l)))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) #f]\n\
    \    [(empty? (rest l)) #f]\n    [(empty? (rest (rest l))) #f]\n    [(zero? (+\
    \ (first l) (first (rest l)) (first (rest (rest l))))) #t]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (rest l))\n          (member (list-ref l 0) (rest (rest l))))\n     true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (first l) (rest l)) (member (- (first l)) (rest l))) true]\n\
    \    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(= (length l) 1) false]\n    [(= (length l) 2) false]\n    [else\n     (let\
    \ ([a (first l)]\n           [b (second l)]\n           [c (third l)])\n     \
    \  (cond\n         [(= (+ a b c) 0) true]\n         [else (triples_sum_to_zero\
    \ (rest l))]))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l)))\n     true]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list-ref l 0) (rest l))\n          (member (list-ref l 0) (rest (rest\
    \ l))))\n     true]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(empty? (cdr l)) #f]\n    [(empty? (cddr l))\
    \ #f]\n    [(= (apply + (take l 3)) 0) #t]\n    [else (triples_sum_to_zero (cdr\
    \ l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (car l) (cdr\
    \ l)) (member (car l) (cddr l))) true]\n    [else (triples_sum_to_zero (cdr l))]))\n",
  "  (cond\n    [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l)\
    \ (cddr l))) #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n  \
    \  [(empty? l) #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l)))\
    \ #t]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l)\
    \ #f]\n    [(and (member (car l) (cdr l)) (member (car l) (cddr l))) #t]\n   \
    \ [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n\
    \    [(and (member (list (first l) (second l) (third l)) (combinations 3 l))\n\
    \          (= (apply + (first (combinations 3 l))) 0))\n     true]\n    [else\
    \ (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty? l) false]\n   \
    \ [(and (member (list-ref l 0) (cdr l))\n          (member (list-ref l 0) (cddr\
    \ l)))\n     true]\n    [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) false]\n    [(and (member (first l) (rest l)) (member (first\
    \ l) (rest (rest l)))) true]\n    [else (triples_sum_to_zero (rest l))]))\n",
  "  (cond [(empty? l) false]\n        [(and (member (car l) (cdr l)) (member (- (car\
    \ l)) (cdr l))) true]\n        [else (triples_sum_to_zero (cdr l))]))\n", "  (cond\n\
    \    [(empty? l) #f]\n    [(and (member (list (first l) (second l) (third l))\
    \ (list-of-triples l))\n          (sum-to-zero? (list (first l) (second l) (third\
    \ l)))) #t]\n    [else (triples_sum_to_zero (rest l))]))\n", "  (cond\n    [(empty?\
    \ l) false]\n    [(empty? (rest l)) false]\n    [(empty? (rest (rest l))) false]\n\
    \    [else\n     (or\n      (and\n       (= (sum (first l) (first (rest l)) (first\
    \ (rest (rest l)))) 0)\n       true)\n      (triples_sum_to_zero (rest l)))]))\n",
  "  (define (helper l)\n    (cond\n      [(empty? l) #f]\n      [(and (member (car\
    \ l) (cdr l)) (member (car l) (cddr l))) #t]\n      [else (helper (cdr l))]))\n\
    \  (helper l))\n", "  (cond\n    [(empty? l) false]\n    [(and (member (list-ref\
    \ l 0) (cdr l))\n          (member (list-ref l 0) (cddr l))) true]\n    [else\
    \ (triples_sum_to_zero (cdr l))]))\n", "  (cond\n    [(empty? l) false]\n    [(and\
    \ (member (list (first l) (second l) (- (first l) (second l))) (combinations 3\
    \ l))\n          (not (member (list (first l) (second l) (- (first l) (second\
    \ l))) (combinations 3 (rest l)))))\n     true]\n    [else (triples_sum_to_zero\
    \ (rest l))]))\n", "  (cond\n    [(empty? l) false]\n    [(empty? (cdr l)) false]\n\
    \    [(empty? (cddr l)) false]\n    [(and (not (empty? (cdddr l)))\n         \
    \ (or (and (= (car l) (car (cdr l)))\n                   (= (car l) (car (cddr\
    \ l))))\n              (and (= (car l) (car (cdr l)))\n                   (= (car\
    \ l) (car (cddr l))))))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car l)\
    \ (car (cdr l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car l) (car (cddr\
    \ l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (car (cdr l)) (car (cddr\
    \ l)))\n     (triples_sum_to_zero (cdr l))]\n    [(= (+ (car l) (car (cdr l))\
    \ (car (cddr l))) 0)\n     true]\n    [else\n     (triples_sum_to_zero (cdr l))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
