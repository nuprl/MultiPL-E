language: racket
name: HumanEval_91_is_bored
results:
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter (lambda (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split\
    \ #rx\"[.?!]\" S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvop9ybop.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvop9ybop.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvop9ybop.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (s) (string=? (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsrq33qj7.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsrq33qj7.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsrq33qj7.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S n)\n    (cond\n      [(empty? S) n]\n      [(string=? (first\
    \ S) \"I\") (is_bored-helper (rest S) (+ n 1))]\n      [else (is_bored-helper\
    \ (rest S) n)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuexw_ei.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyuexw_ei.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuexw_ei.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuexw_ei.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyuexw_ei.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyuexw_ei.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfz7rc2jf.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfz7rc2jf.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfz7rc2jf.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfz7rc2jf.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfz7rc2jf.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfz7rc2jf.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7xzmek.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsi7xzmek.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsi7xzmek.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7xzmek.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsi7xzmek.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsi7xzmek.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4jpz79c1.rkt:14:16: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmp4jpz79c1.rkt:14:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (filter (lambda (x) (string=? (substring x 0 1) \"I\"))\n                  (regexp-split\
    \ #rx\"\\.|\\?|!\" S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkslxlksv.rkt:13:32: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpms0hkw4k.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpms0hkw4k.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpms0hkw4k.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpms0hkw4k.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpms0hkw4k.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpms0hkw4k.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpigpvpsxm.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpigpvpsxm.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpigpvpsxm.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpigpvpsxm.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpigpvpsxm.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpigpvpsxm.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxy0tv4si.rkt:14:16: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpxy0tv4si.rkt:14:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4o42sava.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4o42sava.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4o42sava.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4o42sava.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4o42sava.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4o42sava.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9yi7g6x.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbmn9jo.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8hbmn9jo.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8hbmn9jo.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8hbmn9jo.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8hbmn9jo.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8hbmn9jo.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu2peb3qw.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu2peb3qw.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu2peb3qw.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu2peb3qw.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu2peb3qw.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu2peb3qw.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xjkjml2.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudj_m6vk.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpudj_m6vk.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpudj_m6vk.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpudj_m6vk.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpudj_m6vk.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpudj_m6vk.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8of7ooeo.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8of7ooeo.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8of7ooeo.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8of7ooeo.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8of7ooeo.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8of7ooeo.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_9_169g.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0_9_169g.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0_9_169g.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_9_169g.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0_9_169g.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0_9_169g.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (and (equal? (first x) \"I\")\n                          (not (equal?\
    \ (second x) \"am\"))))\n         (split-string S \"\\\\.|\\\\?|!\")))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvsvwkz6p.rkt:14:10: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpvsvwkz6p.rkt:14:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp23pw94b2.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1b6nn2p.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc1b6nn2p.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc1b6nn2p.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc1b6nn2p.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpc1b6nn2p.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc1b6nn2p.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz8vb3z3j.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpz8vb3z3j.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpz8vb3z3j.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbnhsh8d.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjbnhsh8d.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjbnhsh8d.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjbnhsh8d.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjbnhsh8d.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjbnhsh8d.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp534zd5ok.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp534zd5ok.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp534zd5ok.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (if (string-contains\
    \ S \"I\")\n      1\n      0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpafhfqeo5.rkt:12:7: string-contains: unbound identifier\n  in: string-contains\n\
    \  location...:\n   /tmp/tmpafhfqeo5.rkt:12:7\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdyfigcl.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkdyfigcl.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkdyfigcl.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkdyfigcl.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpkdyfigcl.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkdyfigcl.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? \"I\" (car x))) (split S)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnrwao7hv.rkt:12:46: split: unbound identifier\n  in: split\n  location...:\n\
    \   /tmp/tmpnrwao7hv.rkt:12:46\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaabpm1u.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiaabpm1u.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiaabpm1u.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiaabpm1u.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiaabpm1u.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiaabpm1u.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9a1pdda.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpe9a1pdda.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe9a1pdda.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe9a1pdda.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpe9a1pdda.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe9a1pdda.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored-helper S)\n    (cond [(empty? S) 0]\n          [(equal? (first S)\
    \ \"I\") (+ 1 (is-bored-helper (rest S)))]\n          [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ko0g0em.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ko0g0em.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ko0g0em.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ko0g0em.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ko0g0em.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ko0g0em.rkt:28:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-if\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp57g9ucpk.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmp57g9ucpk.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(equal? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5sifwg3.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph5sifwg3.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5sifwg3.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph5sifwg3.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph5sifwg3.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph5sifwg3.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpki_uwcqb.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph_trjbgc.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmph_trjbgc.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph_trjbgc.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph_trjbgc.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmph_trjbgc.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph_trjbgc.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\")\n     (+ 1 (is_bored\
    \ (substring S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsw2bcued.rkt:23:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsw2bcued.rkt:24:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsw2bcued.rkt:25:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsw2bcued.rkt:26:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsw2bcued.rkt:27:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsw2bcued.rkt:28:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\")\n     (+ 1 (is_bored\
    \ (string-drop S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpb261tv5p.rkt:14:16: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpb261tv5p.rkt:14:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S i)\n    (cond\n      [(= i (string-length S)) 0]\n      [(string=?\
    \ (substring S i (+ i 2)) \"I \") (+ 1 (is_bored-helper S (+ i 2)))]\n      [else\
    \ (is_bored-helper S (+ i 1))]))\n  (is_bored-helper S 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qmo36ny.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 12\n  valid range:\
    \ [0, 11]\n  string: \"Hello world\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qmo36ny.rkt:25:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 17\n  valid range: [0, 16]\n \
    \ string: \"Is the sky blue?\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8qmo36ny.rkt:26:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 12\n  valid range: [0, 11]\n \
    \ string: \"I love It !\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp8qmo36ny.rkt:27:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 4\n  valid range: [0, 3]\n  string:\
    \ \"bIt\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8qmo36ny.rkt:28:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 54\n  valid range: [0, 53]\n  string: \"I feel good today. I\
    \ will be productive. will kill It\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qmo36ny.rkt:29:4\n\nsubstring:\
    \ ending index is out of range\n  ending index: 31\n  valid range: [0, 30]\n \
    \ string: \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (s) (string=? (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp31ibj01p.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S i)\n    (cond\n      [(= i (string-length S)) 0]\n      [(=\
    \ (string-ref S i) #\\I) (+ 1 (is_bored-helper S (+ i 1)))]\n      [else (is_bored-helper\
    \ S (+ i 1))]))\n  (is_bored-helper S 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:24:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:25:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:26:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:27:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\b\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:28:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplzri56er.rkt:29:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi9513qz9.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi9513qz9.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi9513qz9.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi9513qz9.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi9513qz9.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi9513qz9.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9lz2o8a2.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9lz2o8a2.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9lz2o8a2.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9lz2o8a2.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9lz2o8a2.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9lz2o8a2.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc9cuciz7.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx9t_i9jh.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpx9t_i9jh.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx9t_i9jh.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx9t_i9jh.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpx9t_i9jh.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx9t_i9jh.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let loop\
    \ ([S (string-split S #\\.)]\n             [n 0])\n    (cond [(empty? S) n]\n\
    \          [(string=? (string-trim (first S)) \"I\")\n           (loop (rest S)\
    \ (+ n 1))]\n          [else (loop (rest S) n)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcy55kzcp.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcy55kzcp.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcy55kzcp.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcy55kzcp.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcy55kzcp.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcy55kzcp.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ssmkrs8.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8ssmkrs8.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ssmkrs8.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ssmkrs8.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8ssmkrs8.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ssmkrs8.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1f_hsx6a.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1f_hsx6a.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1f_hsx6a.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1f_hsx6a.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1f_hsx6a.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1f_hsx6a.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4k4octml.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4k4octml.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4k4octml.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4k4octml.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4k4octml.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4k4octml.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S acc)\n    (cond\n      [(empty? S) acc]\n      [(equal? (first\
    \ S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n      [else (is_bored-helper\
    \ (rest S) acc)]))\n  (is_bored-helper (string-split S) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppnpzi5n6.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnhqrmc.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0bnhqrmc.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bnhqrmc.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0bnhqrmc.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0bnhqrmc.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0bnhqrmc.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (s) (string=? (substring s 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3ubab36z.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3ubab36z.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3ubab36z.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbv5ml051.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpbv5ml051.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbv5ml051.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? \"I\" (car (string-split S #\\space))) (+\
    \ 1 (is_bored (cdr (string-split S #\\space))))]\n    [else (is_bored (cdr (string-split\
    \ S #\\space)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfw98z4hr.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfw98z4hr.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfw98z4hr.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfw98z4hr.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfw98z4hr.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfw98z4hr.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (split-string S \"\
    [.?!]\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpchy58jy5.rkt:13:10: split-string: unbound identifier\n  in: split-string\n\
    \  location...:\n   /tmp/tmpchy58jy5.rkt:13:10\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaygbhzib.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaygbhzib.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaygbhzib.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaygbhzib.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpaygbhzib.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpaygbhzib.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S acc)\n    (cond\n      [(empty? S) acc]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n      [else (is_bored-helper\
    \ (rest S) acc)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1ojtd3c.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt1ojtd3c.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1ojtd3c.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1ojtd3c.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt1ojtd3c.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt1ojtd3c.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqhc8z3h5.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnel5v5io.rkt:14:16: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpnel5v5io.rkt:14:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-take S 1) \"I\") (+ 1 (is_bored (string-drop\
    \ S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn8amxn2c.rkt:14:16: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpn8amxn2c.rkt:14:16\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpima9gwas.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpima9gwas.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpima9gwas.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpima9gwas.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpima9gwas.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpima9gwas.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppymitg00.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmppymitg00.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppymitg00.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppymitg00.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmppymitg00.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppymitg00.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3j3yi0ux.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3j3yi0ux.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3j3yi0ux.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3j3yi0ux.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3j3yi0ux.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3j3yi0ux.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (count-boredoms S)\n    (cond\n      [(string=? S \"\") 0]\n      [(string=?\
    \ (substring S 0 2) \"I \") (+ 1 (count-boredoms (substring S 2)))]\n      [else\
    \ (count-boredoms (substring S 1))]))\n  (count-boredoms S))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp81tzwi5r.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp81tzwi5r.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp81tzwi5r.rkt:26:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp81tzwi5r.rkt:27:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp81tzwi5r.rkt:28:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp81tzwi5r.rkt:29:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw8klen63.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpw8klen63.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw8klen63.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw8klen63.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpw8klen63.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw8klen63.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0cx6zjq.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp0cx6zjq.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp0cx6zjq.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp0cx6zjq.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp0cx6zjq.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp0cx6zjq.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep0k92au.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpep0k92au.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpep0k92au.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpep0k92au.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpep0k92au.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpep0k92au.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1_pq98x.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj1_pq98x.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj1_pq98x.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj1_pq98x.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj1_pq98x.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj1_pq98x.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp67b7vt2.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp67b7vt2.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp67b7vt2.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp67b7vt2.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp67b7vt2.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp67b7vt2.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmf_ffuo.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([sentences\
    \ (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"\
    I\" s)) sentences))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp66_x41p3.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp66_x41p3.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp66_x41p3.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp66_x41p3.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp66_x41p3.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp66_x41p3.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4cawh4d1.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4cawh4d1.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4cawh4d1.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4cawh4d1.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp4cawh4d1.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4cawh4d1.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplbz18h1o.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first (string-split S #\\.)) \"I\") (+ 1\
    \ (is_bored (string-drop S 1)))]\n    [else (is_bored (string-drop S 1))]))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgrcejenq.rkt:14:65: string-drop: unbound identifier\n  in: string-drop\n\
    \  location...:\n   /tmp/tmpgrcejenq.rkt:14:65\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([words\
    \ (string-split S #\\space)])\n    (length (filter (lambda (x) (string=? x \"\
    I\")) words))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nw5om6u.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3nw5om6u.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nw5om6u.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3nw5om6u.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3nw5om6u.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3nw5om6u.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5du5i3lq.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5du5i3lq.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5du5i3lq.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5du5i3lq.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5du5i3lq.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5du5i3lq.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (string-split S #rx\"[.?!]\")\n         (lambda (S) (string-prefix? \"I\" (string-trim\
    \ S)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qu25ktg.rkt:20:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"Hello world\"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5qu25ktg.rkt:21:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"Is the sky blue\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qu25ktg.rkt:22:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"I love It \"\
    )\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5qu25ktg.rkt:23:4\n\ncount: contract violation\n  expected:\
    \ procedure?\n  given: '(\"bIt\")\n  argument position: 1st\n  other arguments...:\n\
    \   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qu25ktg.rkt:24:4\n\ncount:\
    \ contract violation\n  expected: procedure?\n  given: '(\"I feel good today\"\
    \ \" I will be productive\" \" will kill It\")\n  argument position: 1st\n  other\
    \ arguments...:\n   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5qu25ktg.rkt:25:4\n\
    \ncount: contract violation\n  expected: procedure?\n  given: '(\"You and I are\
    \ going for a walk\")\n  argument position: 1st\n  other arguments...:\n   #<procedure:...tmp/tmp5qu25ktg.rkt:13:9>\n\
    --------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ejk9sp2.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_ejk9sp2.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_ejk9sp2.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_ejk9sp2.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_ejk9sp2.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_ejk9sp2.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9li94iw.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy9li94iw.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy9li94iw.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy9li94iw.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpy9li94iw.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy9li94iw.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? S \"\") 0]\n        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n        [else (is_bored (substring S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg_ipcf7i.rkt:22:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg_ipcf7i.rkt:23:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg_ipcf7i.rkt:24:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg_ipcf7i.rkt:25:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg_ipcf7i.rkt:26:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxodv8gfj.rkt:23:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxodv8gfj.rkt:24:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxodv8gfj.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxodv8gfj.rkt:26:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxodv8gfj.rkt:27:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02wsxoj.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk02wsxoj.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk02wsxoj.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk02wsxoj.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk02wsxoj.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk02wsxoj.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmgsx5p2.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbmgsx5p2.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmgsx5p2.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmgsx5p2.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbmgsx5p2.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbmgsx5p2.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hhk8nbf.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7hhk8nbf.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7hhk8nbf.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7hhk8nbf.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7hhk8nbf.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7hhk8nbf.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpc563c1cr.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? \"I\" (substring x 0 1)))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_4qmh3yn.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5_kfs5y4.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp5_kfs5y4.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5_kfs5y4.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpagvqw3yn.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpagvqw3yn.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpagvqw3yn.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpagvqw3yn.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpagvqw3yn.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpagvqw3yn.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0629g_3w.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0629g_3w.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0629g_3w.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0629g_3w.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0629g_3w.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0629g_3w.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-iter S count)\n    (cond ((string=? S \"\") count)\n          ((string=?\
    \ (substring S 0 1) \"I\")\n           (is_bored-iter (substring S 1 (string-length\
    \ S)) (+ count 1)))\n          (else (is_bored-iter (substring S 1 (string-length\
    \ S)) count))))\n  (is_bored-iter S 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvwjtxggp.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvwjtxggp.rkt:26:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvwjtxggp.rkt:27:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvwjtxggp.rkt:28:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvwjtxggp.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4lua94ri.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphsvn52js.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphsvn52js.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphsvn52js.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphsvn52js.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphsvn52js.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphsvn52js.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp38x34deo.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp38x34deo.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp38x34deo.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf7t9hapf.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltzeiufl.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpltzeiufl.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpltzeiufl.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpltzeiufl.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpltzeiufl.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpltzeiufl.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89cujd5f.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp89cujd5f.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp89cujd5f.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp89cujd5f.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp89cujd5f.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp89cujd5f.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\")\n       (is_bored-helper (rest S) (+ count 1))]\n      [else\
    \ (is_bored-helper (rest S) count)]))\n  (is_bored-helper (string-split S #\\\
    .) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15u2o6h.rkt:25:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn15u2o6h.rkt:26:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15u2o6h.rkt:27:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15u2o6h.rkt:28:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn15u2o6h.rkt:29:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn15u2o6h.rkt:30:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-if\
    \ (lambda (x) (string=? (string-take x 1) \"I\"))\n            (split-string S\
    \ \"[.?!]\")))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprsihyyzn.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmprsihyyzn.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpti0ye2ry.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpti0ye2ry.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpti0ye2ry.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpti0ye2ry.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpti0ye2ry.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpti0ye2ry.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6585vp12.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6585vp12.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6585vp12.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6585vp12.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6585vp12.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6585vp12.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplotjlh2o.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmplotjlh2o.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplotjlh2o.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplotjlh2o.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmplotjlh2o.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplotjlh2o.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjy52s9sk.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjy52s9sk.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjy52s9sk.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjy52s9sk.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjy52s9sk.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjy52s9sk.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvq16j5lr.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvq16j5lr.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvq16j5lr.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvq16j5lr.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpvq16j5lr.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvq16j5lr.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo3ysn6jc.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeq8c1os0.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpeq8c1os0.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeq8c1os0.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeq8c1os0.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpeq8c1os0.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpeq8c1os0.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxdg_9s1.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdxdg_9s1.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxdg_9s1.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxdg_9s1.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdxdg_9s1.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxdg_9s1.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp71uyl9xw.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (count-boredoms S)\n    (cond\n      [(null? S) 0]\n      [(string=? (car S)\
    \ \"I\") (+ 1 (count-boredoms (cdr S)))]\n      [else (count-boredoms (cdr S))]))\n\
    \  (count-boredoms (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk4xmcxl.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdk4xmcxl.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk4xmcxl.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk4xmcxl.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdk4xmcxl.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdk4xmcxl.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eof9wjv.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6eof9wjv.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6eof9wjv.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eof9wjv.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6eof9wjv.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6eof9wjv.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj6lg0y8.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphj6lg0y8.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphj6lg0y8.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphj6lg0y8.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphj6lg0y8.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphj6lg0y8.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ect_r7n.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8ect_r7n.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ect_r7n.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8ect_r7n.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp8ect_r7n.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8ect_r7n.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S i)\n    (cond\n      [(= i (string-length S)) 0]\n      [(and\
    \ (= (string-ref S i) #\\I)\n            (or (= (string-ref S (+ i 1)) #\\.)\n\
    \                (= (string-ref S (+ i 1)) #\\?)\n                (= (string-ref\
    \ S (+ i 1)) #\\!)))\n       (+ 1 (is_bored-helper S (+ i 1)))]\n      [else (is_bored-helper\
    \ S (+ i 1))]))\n  (is_bored-helper S 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:28:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:29:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:30:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:31:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\b\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:32:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\I\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpaenp766h.rkt:33:4\n\
    \n=: contract violation\n  expected: number?\n  given: #\\Y\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh9kb8bf.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj5tx9kc0.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm_10zv4a.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklwg42fv.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpklwg42fv.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpklwg42fv.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpklwg42fv.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpklwg42fv.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpklwg42fv.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpijxqw771.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpijxqw771.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpijxqw771.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpijxqw771.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpijxqw771.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpijxqw771.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjsp5tv7.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfjsp5tv7.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjsp5tv7.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfjsp5tv7.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfjsp5tv7.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjsp5tv7.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond [(empty? S) 0]\n          [(string=? (first S)\
    \ \"I\") (+ 1 (is_bored-helper (rest S)))]\n          [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps0ue7g1a.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps0ue7g1a.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps0ue7g1a.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmps0ue7g1a.rkt:26:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmps0ue7g1a.rkt:27:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmps0ue7g1a.rkt:28:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphrh79k0v.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuc1nfs6u.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuc1nfs6u.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuc1nfs6u.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuc1nfs6u.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpuc1nfs6u.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuc1nfs6u.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpst2f2ami.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpst2f2ami.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpst2f2ami.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpst2f2ami.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpst2f2ami.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpst2f2ami.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf94ngppt.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf94ngppt.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf94ngppt.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf94ngppt.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpf94ngppt.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpf94ngppt.rkt:26:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-if\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n            (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqat8gsmz.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpqat8gsmz.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxy2vzg8.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdxy2vzg8.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxy2vzg8.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxy2vzg8.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpdxy2vzg8.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxy2vzg8.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([sentences\
    \ (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"\
    I\" s)) sentences))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop5v8ocm.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpop5v8ocm.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpop5v8ocm.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpop5v8ocm.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpop5v8ocm.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpop5v8ocm.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr_8acnod.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsd6ujh47.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsd6ujh47.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsd6ujh47.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsd6ujh47.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsd6ujh47.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsd6ujh47.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (string-upcase (substring S 0 1)) \"I\")\n\
    \     (+ 1 (is_bored (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n\
    \    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjp_zefac.rkt:23:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjp_zefac.rkt:24:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjp_zefac.rkt:25:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjp_zefac.rkt:26:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjp_zefac.rkt:27:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjp_zefac.rkt:28:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2306ndza.rkt:23:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2306ndza.rkt:24:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2306ndza.rkt:25:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2306ndza.rkt:26:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2306ndza.rkt:27:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? S \"\") 0]\n        [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored\
    \ (substring S 1)))]\n        [else (is_bored (substring S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyozmhjoi.rkt:22:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyozmhjoi.rkt:23:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyozmhjoi.rkt:24:4

    actual:     1

    expected:   0

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyozmhjoi.rkt:25:4

    actual:     3

    expected:   2

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyozmhjoi.rkt:26:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev18xi5x.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpev18xi5x.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpev18xi5x.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpev18xi5x.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpev18xi5x.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpev18xi5x.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm5ojfmeg.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpm5ojfmeg.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm5ojfmeg.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm5ojfmeg.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpm5ojfmeg.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm5ojfmeg.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82ksnx0j.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp82ksnx0j.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp82ksnx0j.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp82ksnx0j.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp82ksnx0j.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp82ksnx0j.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflw8y8ng.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpflw8y8ng.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpflw8y8ng.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflw8y8ng.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpflw8y8ng.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpflw8y8ng.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpstqn_ff1.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpstqn_ff1.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpstqn_ff1.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpstqn_ff1.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpstqn_ff1.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpstqn_ff1.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4g7o3o_h.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(equal?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2hyjpir.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm2hyjpir.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2hyjpir.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2hyjpir.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpm2hyjpir.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpm2hyjpir.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-iter S acc)\n    (cond\n      [(empty? S) acc]\n      [(string=? (first\
    \ S) \"I\") (is_bored-iter (rest S) (+ acc 1))]\n      [else (is_bored-iter (rest\
    \ S) acc)]))\n  (is_bored-iter (string-split S #\\.) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5v4reojg.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5v4reojg.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5v4reojg.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5v4reojg.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5v4reojg.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5v4reojg.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bdeoc68.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bdeoc68.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7bdeoc68.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7bdeoc68.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp7bdeoc68.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7bdeoc68.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-boredoms\
    \ (string-split S #\\.)\n                  0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjtn_2t4p.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmpjtn_2t4p.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41yk1fpy.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp41yk1fpy.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp41yk1fpy.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp41yk1fpy.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp41yk1fpy.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp41yk1fpy.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpps5hucp3.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjq7_29c5.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjq7_29c5.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjq7_29c5.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjq7_29c5.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjq7_29c5.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjq7_29c5.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(string=? S \"\") 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma1vbpwk.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpma1vbpwk.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpma1vbpwk.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpma1vbpwk.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpma1vbpwk.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpma1vbpwk.rkt:26:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpusbw6sj8.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpusbw6sj8.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpusbw6sj8.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpusbw6sj8.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpusbw6sj8.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpusbw6sj8.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\.|\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsk62xia5.rkt:13:23: read-syntax: unknown escape sequence `\\.`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp475mrs0s.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcizqq_h.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjcizqq_h.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjcizqq_h.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjcizqq_h.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpjcizqq_h.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjcizqq_h.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([sentences\
    \ (string-split S #\\.)])\n    (length (filter (lambda (s) (string-prefix? \"\
    I\" s)) sentences))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\")\
    \ 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj651qxv5.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj651qxv5.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj651qxv5.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj651qxv5.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj651qxv5.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj651qxv5.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp278_cxkk.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdfbjo8v.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmptdfbjo8v.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptdfbjo8v.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptdfbjo8v.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmptdfbjo8v.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmptdfbjo8v.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (length\
    \ (regexp-match #rx\"^I\" (string-split S #rx\"[.?!]\"))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpryl52v09.rkt:19:4\n\
    \nregexp-match: contract violation\n  expected: (or/c bytes? string? input-port?\
    \ path?)\n  given: '(\"Hello world\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpryl52v09.rkt:20:4\n\nregexp-match:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"Is the sky blue\")\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpryl52v09.rkt:21:4\n\nregexp-match:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"I love It \")\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpryl52v09.rkt:22:4\n\nregexp-match: contract\
    \ violation\n  expected: (or/c bytes? string? input-port? path?)\n  given: '(\"\
    bIt\")\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpryl52v09.rkt:23:4\n\nregexp-match: contract violation\n  expected:\
    \ (or/c bytes? string? input-port? path?)\n  given: '(\"I feel good today\" \"\
    \ I will be productive\" \" will kill It\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpryl52v09.rkt:24:4\n\nregexp-match:\
    \ contract violation\n  expected: (or/c bytes? string? input-port? path?)\n  given:\
    \ '(\"You and I are going for a walk\")\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xti28y9.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2xti28y9.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2xti28y9.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2xti28y9.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2xti28y9.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2xti28y9.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph433mm1v.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmph433mm1v.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph433mm1v.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph433mm1v.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmph433mm1v.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph433mm1v.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp98ntbpfk.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsjw5j5ed.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsjw5j5ed.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsjw5j5ed.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsjw5j5ed.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpsjw5j5ed.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsjw5j5ed.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppx2qgvyq.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmppx2qgvyq.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppx2qgvyq.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pe1i56y.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_pe1i56y.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_pe1i56y.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_pe1i56y.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp_pe1i56y.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_pe1i56y.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fq1pz9g.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3fq1pz9g.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3fq1pz9g.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3fq1pz9g.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3fq1pz9g.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3fq1pz9g.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([words\
    \ (string-split S #\\space)])\n    (length (filter (lambda (w) (string=? w \"\
    I\")) words))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xgzr85f.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7xgzr85f.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xgzr85f.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7xgzr85f.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7xgzr85f.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7xgzr85f.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qowp7fe.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9qowp7fe.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9qowp7fe.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9qowp7fe.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9qowp7fe.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9qowp7fe.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    \\\\.|\\\\?|!\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n\
    \    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8itdwjm.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpj8itdwjm.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpj8itdwjm.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(equal? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp814iq02t.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-if\
    \ (lambda (x) (string=? (string-upcase (substring x 0 1)) \"I\"))\n          \
    \  (regexp-split #rx\"[.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppp59ugi_.rkt:12:3: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmppp59ugi_.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmhlokzgo.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmhlokzgo.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmhlokzgo.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmhlokzgo.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpmhlokzgo.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmhlokzgo.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is-bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(equal? (first\
    \ S) \"I\") (+ 1 (is-bored-helper (rest S)))]\n      [else (is-bored-helper (rest\
    \ S))]))\n  (is-bored-helper (string-split S)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpajhyvax3.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphab4te3k.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphab4te3k.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphab4te3k.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphab4te3k.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmphab4te3k.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphab4te3k.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n        [else (is_bored (substring S 1))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_epa40l.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3_epa40l.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3_epa40l.rkt:23:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3_epa40l.rkt:24:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3_epa40l.rkt:25:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3_epa40l.rkt:26:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc9ml7og.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgc9ml7og.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc9ml7og.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgc9ml7og.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgc9ml7og.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgc9ml7og.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9zb260jp.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(string=? S \"\") 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored\
    \ (substring S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1_p1r3s.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo1_p1r3s.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1_p1r3s.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1_p1r3s.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpo1_p1r3s.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo1_p1r3s.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphviimzuz.rkt:29:4

    actual:     1

    expected:   0

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3jr7g5le.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3jr7g5le.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3jr7g5le.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3jr7g5le.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp3jr7g5le.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3jr7g5le.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9epin64a.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9epin64a.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9epin64a.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9epin64a.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9epin64a.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9epin64a.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (and (string=? (substring x 0 1) \"I\") (string=? (substring x 1\
    \ 1) \" \"))) (string-split S #\\.)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpntux0ll5.rkt:19:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpntux0ll5.rkt:20:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpntux0ll5.rkt:21:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpntux0ll5.rkt:22:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpntux0ll5.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpntux0ll5.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx435ptxt.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx435ptxt.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx435ptxt.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx435ptxt.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpx435ptxt.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpx435ptxt.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count-boredoms\
    \ (string-split S #\\.)\n                  0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1wtw3t9n.rkt:12:3: count-boredoms: unbound identifier\n  in: count-boredoms\n\
    \  location...:\n   /tmp/tmp1wtw3t9n.rkt:12:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5sa0737i.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8602o_7i.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S)\n    (cond\n      [(empty? S) 0]\n      [(string=? (first\
    \ S) \"I\") (+ 1 (is_bored-helper (rest S)))]\n      [else (is_bored-helper (rest\
    \ S))]))\n  (is_bored-helper (string-split S #\\.)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3frw7zaa.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3frw7zaa.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3frw7zaa.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3frw7zaa.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3frw7zaa.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3frw7zaa.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([S\
    \ (string-split S #\\.)])\n    (length (filter (lambda (S) (string-prefix? \"\
    I\" S)) S))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4774lqbb.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4774lqbb.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4774lqbb.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4774lqbb.rkt:23:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4774lqbb.rkt:24:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4774lqbb.rkt:25:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mayil69.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9mayil69.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mayil69.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9mayil69.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9mayil69.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9mayil69.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S count)\n    (cond\n      [(empty? S) count]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ count 1))]\n      [else (is_bored-helper\
    \ (rest S) count)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n \
    \   (check-equal? (candidate \"Hello world\") 0)\n    (check-equal? (candidate\
    \ \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It !\") 1)\n\
    \    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate \"I feel\
    \ good today. I will be productive. will kill It\") 2)\n    (check-equal? (candidate\
    \ \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2b2ttc5.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn2b2ttc5.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2b2ttc5.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2b2ttc5.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpn2b2ttc5.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpn2b2ttc5.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecstdaq7.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpecstdaq7.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpecstdaq7.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpecstdaq7.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpecstdaq7.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpecstdaq7.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1 (string-length S))))]\n    [else (is_bored (substring S 1 (string-length\
    \ S)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42u0k4rf.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp42u0k4rf.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp42u0k4rf.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42u0k4rf.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp42u0k4rf.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp42u0k4rf.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfldomwyv.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfldomwyv.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfldomwyv.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfldomwyv.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpfldomwyv.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfldomwyv.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppl18r56e.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (define\
    \ (is_bored-helper S acc)\n    (cond\n      [(empty? S) acc]\n      [(string=?\
    \ (first S) \"I\") (is_bored-helper (rest S) (+ acc 1))]\n      [else (is_bored-helper\
    \ (rest S) acc)]))\n  (is_bored-helper (string-split S #\\.) 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal?\
    \ (candidate \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\"\
    ) 0)\n    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpclr2eq7s.rkt:24:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpclr2eq7s.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpclr2eq7s.rkt:26:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpclr2eq7s.rkt:27:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\.\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpclr2eq7s.rkt:28:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\.\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpclr2eq7s.rkt:29:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\.\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpflc95x78.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (count\
    \ (lambda (x) (string=? (substring x 0 1) \"I\"))\n         (regexp-split #rx\"\
    [.?!]\" S)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n    (check-equal?\
    \ (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate \"I love It\
    \ !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal? (candidate\
    \ \"I feel good today. I will be productive. will kill It\") 2)\n    (check-equal?\
    \ (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk_i7iuop.rkt:21:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpk_i7iuop.rkt:22:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpk_i7iuop.rkt:24:4\nactual:     1\nexpected:   2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgulvi_al.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgulvi_al.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgulvi_al.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgulvi_al.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpgulvi_al.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgulvi_al.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (let ([words\
    \ (string-split S #\\space)])\n    (length (filter (lambda (w) (string=? w \"\
    I\")) words))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate is_bored))\n    (check-equal? (candidate \"Hello world\") 0)\n   \
    \ (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal? (candidate\
    \ \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n    (check-equal?\
    \ (candidate \"I feel good today. I will be productive. will kill It\") 2)\n \
    \   (check-equal? (candidate \"You and I are going for a walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprb_7o0jb.rkt:20:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprb_7o0jb.rkt:21:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb_7o0jb.rkt:22:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprb_7o0jb.rkt:23:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprb_7o0jb.rkt:24:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprb_7o0jb.rkt:25:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\
    \ [(empty? S) 0]\n        [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \        [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:22:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:24:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:25:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppvpjisjt.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicyvt82r.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpicyvt82r.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpicyvt82r.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpicyvt82r.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpicyvt82r.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpicyvt82r.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmz97nobn.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_44_4t6.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2_44_4t6.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2_44_4t6.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2_44_4t6.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp2_44_4t6.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2_44_4t6.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (first S) \"I\") (+ 1 (is_bored (rest S)))]\n\
    \    [else (is_bored (rest S))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate \"Hello world\"\
    ) 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n    (check-equal?\
    \ (candidate \"I love It !\") 1)\n    (check-equal? (candidate \"bIt\") 0)\n \
    \   (check-equal? (candidate \"I feel good today. I will be productive. will kill\
    \ It\") 2)\n    (check-equal? (candidate \"You and I are going for a walk\") 0)\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:23:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Is the sky blue?\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I love It !\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:25:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"bIt\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"I feel good today. I will be productive. will kill It\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo62v3yu1.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"You and I are going for a walk\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiin9a4r6.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiin9a4r6.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiin9a4r6.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiin9a4r6.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpiin9a4r6.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiin9a4r6.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi17_df6u.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi17_df6u.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi17_df6u.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi17_df6u.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpi17_df6u.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi17_df6u.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 2) \"I \") (+ 1 (is_bored (substring\
    \ S 2)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rozdx62.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"d\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9rozdx62.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    ?\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9rozdx62.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9rozdx62.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 2\n  valid range: [0,\
    \ 1]\n  string: \"t\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp9rozdx62.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 2\n  valid range: [0, 1]\n  string: \"\
    t\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9rozdx62.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 2\n  valid range: [0, 1]\n  string: \"k\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; You'll be given a string of words, and your task is\
    \ to count the number\n;; of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n;; Sentences are delimited by '.', '?' or '!'.\n;; For example:\n\
    ;; >>> is_bored(\"Hello world\")\n;; 0\n;; >>> is_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n;; 1\n(define (is_bored S)\n  (cond\n\
    \    [(empty? S) 0]\n    [(string=? (substring S 0 1) \"I\") (+ 1 (is_bored (substring\
    \ S 1)))]\n    [else (is_bored (substring S 1))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_bored))\n    (check-equal? (candidate\
    \ \"Hello world\") 0)\n    (check-equal? (candidate \"Is the sky blue?\") 0)\n\
    \    (check-equal? (candidate \"I love It !\") 1)\n    (check-equal? (candidate\
    \ \"bIt\") 0)\n    (check-equal? (candidate \"I feel good today. I will be productive.\
    \ will kill It\") 2)\n    (check-equal? (candidate \"You and I are going for a\
    \ walk\") 0)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8zcd1jr.rkt:22:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp8zcd1jr.rkt:23:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp8zcd1jr.rkt:24:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp8zcd1jr.rkt:25:4\n\
    \nsubstring: ending index is out of range\n  ending index: 1\n  valid range: [0,\
    \ 0]\n  string: \"\"\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmpp8zcd1jr.rkt:26:4\n\nsubstring: ending\
    \ index is out of range\n  ending index: 1\n  valid range: [0, 0]\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp8zcd1jr.rkt:27:4\n\nsubstring: ending index is out of range\n\
    \  ending index: 1\n  valid range: [0, 0]\n  string: \"\"\n--------------------\n"
  stdout: ''
