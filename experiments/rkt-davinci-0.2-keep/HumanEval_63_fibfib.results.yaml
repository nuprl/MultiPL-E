name: HumanEval_63_fibfib
language: racket
results:
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (= n 0)\n      0\n      (if (= n 1)\n       \
    \   0\n          (if (= n 2)\n              1\n              (+ (fibfib (- n 1))\
    \ (fibfib (- n 2)) (fibfib (- n 3)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal?\
    \ (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate\
    \ 8) 24)\n    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12)\
    \ 274)\n    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 0)\n          0\n   \
    \       1)\n      (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjhjbjjz9.rkt:28:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjhjbjjz9.rkt:29:4\nactual:     7\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjhjbjjz9.rkt:30:4\nactual:     44\nexpected:\
    \   24\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjhjbjjz9.rkt:31:4\nactual:     149\nexpected:   81\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjhjbjjz9.rkt:32:4\n\
    actual:     504\nexpected:   274\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjhjbjjz9.rkt:33:4\nactual:\
    \     1705\nexpected:   927\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 2) 1 0)\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 2) 1 0)\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond\n      [(=\
    \ n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fibfib-iter (- n\
    \ 1) b c (+ a b c))]))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond\n      [(=\
    \ n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fibfib-iter (- n\
    \ 1) b c (+ a b c))]))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 0)\n          0\n   \
    \       1)\n      (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp9mkp6n.rkt:28:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgp9mkp6n.rkt:29:4\nactual:     7\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpgp9mkp6n.rkt:30:4\nactual:     44\nexpected:\
    \   24\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgp9mkp6n.rkt:31:4\nactual:     149\nexpected:   81\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp9mkp6n.rkt:32:4\n\
    actual:     504\nexpected:   274\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgp9mkp6n.rkt:33:4\nactual:\
    \     1705\nexpected:   927\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond\n      [(=\
    \ n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fibfib-iter (- n\
    \ 1) b c (+ a b c))]))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (or (= n 0) (= n 1))\n      0\n      (if (= n\
    \ 2)\n          1\n          (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter a b c n)\n    (if (= n 0)\n\
    \        a\n        (fibfib-iter b c (+ a b c) (- n 1))))\n  (fibfib-iter 0 0\
    \ 1 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond\n      [(=\
    \ n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fibfib-iter (- n\
    \ 1) b c (+ a b c))]))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (or (= n 0) (= n 1))\n      0\n      (if (= n\
    \ 2)\n          1\n          (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond\n      [(=\
    \ n 0) a]\n      [(= n 1) b]\n      [(= n 2) c]\n      [else (fibfib-iter (- n\
    \ 1) b c (+ a b c))]))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (= n 0)\n      0\n      (if (= n 1)\n       \
    \   0\n          (if (= n 2)\n              1\n              (+ (fibfib (- n 1))\
    \ (fibfib (- n 2)) (fibfib (- n 3)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal?\
    \ (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate\
    \ 8) 24)\n    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12)\
    \ 274)\n    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter a b c n)\n    (if (= n 0)\n\
    \        a\n        (fibfib-iter b c (+ a b c) (- n 1))))\n  (fibfib-iter 0 0\
    \ 1 n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond ((= n 0) 0)\n        ((= n 1) 0)\n        ((=\
    \ n 2) 1)\n        (else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (or (= n 0) (= n 1))\n      0\n      (if (= n\
    \ 2)\n          1\n          (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 0)\n          0\n   \
    \       1)\n      (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpojk37abk.rkt:28:4\n\
    actual:     1\nexpected:   0\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpojk37abk.rkt:29:4\nactual:     7\n\
    expected:   4\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpojk37abk.rkt:30:4\nactual:     44\nexpected:\
    \   24\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpojk37abk.rkt:31:4\nactual:     149\nexpected:   81\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpojk37abk.rkt:32:4\n\
    actual:     504\nexpected:   274\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpojk37abk.rkt:33:4\nactual:\
    \     1705\nexpected:   927\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 2) 1 0)\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (define (fibfib-iter n a b c)\n    (cond ((= n 0)\
    \ a)\n          ((= n 1) b)\n          ((= n 2) c)\n          (else (fibfib-iter\
    \ (- n 1) b c (+ a b c)))))\n  (fibfib-iter n 0 0 1))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 2) 1 0)\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond [(= n 0) 0]\n        [(= n 1) 0]\n        [(=\
    \ n 2) 1]\n        [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (or (= n 0) (= n 1))\n      0\n      (if (= n\
    \ 2)\n          1\n          (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n\
    \ 3))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ fibfib))\n    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1)\
    \ 0)\n    (check-equal? (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n\
    \    (check-equal? (candidate 10) 81)\n    (check-equal? (candidate 12) 274)\n\
    \    (check-equal? (candidate 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (if (< n 3)\n      (if (= n 2) 1 0)\n      (+ (fibfib\
    \ (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate fibfib))\n    (check-equal? (candidate\
    \ 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal? (candidate 5) 4)\n\
    \    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate 10) 81)\n \
    \   (check-equal? (candidate 12) 274)\n    (check-equal? (candidate 14) 927)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; The FibFib number sequence is a sequence similar to\
    \ the Fibbonacci sequnece that's defined as follows:\n;; fibfib(0) == 0\n;; fibfib(1)\
    \ == 0\n;; fibfib(2) == 1\n;; fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\
    ;; Please write a function to efficiently compute the n-th element of the fibfib\
    \ number sequence.\n;; >>> fibfib(1)\n;; 0\n;; >>> fibfib(5)\n;; 4\n;; >>> fibfib(8)\n\
    ;; 24\n(define (fibfib n)\n  (cond\n    [(= n 0) 0]\n    [(= n 1) 0]\n    [(=\
    \ n 2) 1]\n    [else (+ (fibfib (- n 1)) (fibfib (- n 2)) (fibfib (- n 3)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate fibfib))\n\
    \    (check-equal? (candidate 2) 1)\n    (check-equal? (candidate 1) 0)\n    (check-equal?\
    \ (candidate 5) 4)\n    (check-equal? (candidate 8) 24)\n    (check-equal? (candidate\
    \ 10) 81)\n    (check-equal? (candidate 12) 274)\n    (check-equal? (candidate\
    \ 14) 927)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
