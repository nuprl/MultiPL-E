language: racket
name: HumanEval_92_any_int
results:
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4zlh1lj3.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphhey29gf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpppbujha9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8vzxr07o.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpurd2fk8k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpotu703xt.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk7pysk33.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpizkwsnmu.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkmmi43k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpccfrrp5q.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdqyvtmu_.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9agmiyki.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqtxs10vw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7cbzm9k0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpypo9ubsw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_8j4slz0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2z5tpgx7.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0wwxprcf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd2wm_o13.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp2ruc8zr.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq8r1h6eu.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl16v3g3p.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx_gwez1i.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp527szt2x.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpidujum9f.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpap0mn3fy.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqr7dsy5a.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk2fq26ro.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11s0718x.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0sp6imgt.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxdljdnev.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0w7o0c58.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl6l8uq8p.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxisn2goh.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc0je9byh.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_3t_g7du.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp19m5klu1.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzy0wla95.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk0267dl8.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpykov6531.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxhkn4ndw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyn1_uc12.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxvna04w6.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3wery_2z.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryu3ylgf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprd3_u2r7.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6k_kehzu.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryza3jsr.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpphenv2zd.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfxl2mojk.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcs66yj7v.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2n7oh9e4.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpasi8djqs.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp90a36xg5.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe31mblcu.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpybbswdo9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzrh1pmln.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppgcam_9l.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpag_jutsf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo4nc2fip.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2feqaaal.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphiaq8wxw.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpojwlcouv.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8l89mf9q.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4mindljo.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ylcuiuz.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd4hviiov.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc2mfib1e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmmce_jp6.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9qalet2n.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa87gt7k_.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdsm0qedv.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplzsf1_z9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_wp108jq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2x7oai1z.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdnmhnxtx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk4i2ede9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcrn3j63i.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu1lvd9lq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (and (= x (+ y z)) (= x (+\
    \ z y)))\n           (and (= y (+ x z)) (= y (+ z x)))\n           (and (= z (+\
    \ x y)) (= z (+ y x))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n   \
    \ (check-equal? (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5)\
    \ #f)\n    (check-equal? (candidate 2 6 2) #f)\n    (check-equal? (candidate 4\
    \ 2 2) #t)\n    (check-equal? (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate\
    \ -4 6 2) #t)\n    (check-equal? (candidate 2 1 1) #t)\n    (check-equal? (candidate\
    \ 3 4 7) #t)\n    (check-equal? (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuxy7l9vo.rkt:31:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz8qmgoet.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp983phxqx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4h4x1ojq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo0kayad9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\n\
    \   (integer? x)\n   (integer? y)\n   (integer? z)\n   (or\n    (= x (+ y z))\n\
    \    (= y (+ x z))\n    (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n\
    \    (check-equal? (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5\
    \ 3.5) #f)\n    (check-equal? (candidate 2 6 2) #f)\n    (check-equal? (candidate\
    \ 4 2 2) #t)\n    (check-equal? (candidate 2.2 2.2 2.2) #f)\n    (check-equal?\
    \ (candidate -4 6 2) #t)\n    (check-equal? (candidate 2 1 1) #t)\n    (check-equal?\
    \ (candidate 3 4 7) #t)\n    (check-equal? (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps5rq0qdd.rkt:35:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnsuxhcit.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpox__cj6k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_pmw2i2u.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0afrajws.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b8jxt3x.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplw6ogatf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1it8stns.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps_hwr5g2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsmdixf_9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbfb0et8g.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoqsc8jax.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjrxi5o2e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppi9znvvm.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_obocfm.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_p2kgk7.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmx7esrh6.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6gz_pvp.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6r02x0xl.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0550hn1c.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpurkewuci.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsl2dx5u5.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0hlfta5k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa3zesrgh.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9dguneu0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjibnif8b.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplq53b_rk.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmputax0lrd.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph886vhrs.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjxtsow0u.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgyustqy.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2vw1ok5.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2ihv47mv.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkz7n_hm0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfp8uaw0e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1pcuf_qh.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9wabpzy.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= (+ x y) z) (= (+ x z)\
    \ y) (= (+ y z) x))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwg7jqv47.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcsivf67_.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmqsldxov.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp68o1y4vx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvtm90y3s.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf0wadd0a.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmeluy21k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcdqhccww.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcqxph7su.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0_rz2axi.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbkblbct9.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo1ui416t.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgn9ttr3c.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv0az96d2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5rw77q9k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0jkus7y.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz8zxt5f2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy65cj9_p.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpegpj4keq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy4tbdaav.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27q76t1j.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd_e6tpph.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdquk6xwd.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb422f8lh.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvtanp3j0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1dxc5w2k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplesyrr22.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpznjpy209.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvnfcytpb.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptg6j6531.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpti4bcbwx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpabusj1mq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrq7cqlp.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuf0x0b0n.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpur2lhm5e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn7akimrf.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmposnzhxgc.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8og8dqz2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6ay63jnt.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z) (or (= x (+ y z)) (= y (+ x z)) (= z\
    \ (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu5sjap7b.rkt:28:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp23sl6va.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1k92f4cx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzqwevx6n.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjw0s17k2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6g5l1w9v.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdfho3tsl.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpifb9dhjy.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl90110s_.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp27hl_qwy.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpksrk6pwx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0cik1bfm.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxy_d3t5k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6wzdxgvz.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphuzyywwk.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxjkjfoxr.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9v2zs5_0.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp41ekw2xe.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsflc3puv.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl1dpr1cx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl7wvnl7k.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3npx2r_5.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa99pojik.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvvmhvsht.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkrt9g0h2.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5dor3ndo.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpya67tiyg.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpu_yby6is.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm41mlkx6.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvh__ml45.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (and (= x (+ y z)) (= x (-\
    \ y z)))\n           (and (= y (+ x z)) (= y (- x z)))\n           (and (= z (+\
    \ x y)) (= z (- x y))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n   \
    \ (check-equal? (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5)\
    \ #f)\n    (check-equal? (candidate 2 6 2) #f)\n    (check-equal? (candidate 4\
    \ 2 2) #t)\n    (check-equal? (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate\
    \ -4 6 2) #t)\n    (check-equal? (candidate 2 1 1) #t)\n    (check-equal? (candidate\
    \ 3 4 7) #t)\n    (check-equal? (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps6nr_5ma.rkt:22:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps6nr_5ma.rkt:26:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps6nr_5ma.rkt:28:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps6nr_5ma.rkt:29:4

    actual:     #f

    expected:   #t

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmps6nr_5ma.rkt:30:4

    actual:     #f

    expected:   #t

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdbv0xthq.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqdaq9k0n.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjyw0mc8y.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnd4qcj4t.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpebb4q9yx.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv5_a3m4e.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxlcr3r8b.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgfn4le7b.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Create a function that takes 3 numbers.\n;; Returns\
    \ true if one of the numbers is equal to the sum of the other two, and all numbers\
    \ are integers.\n;; Returns false in any other cases.\n;; Examples\n;; any_int(5,\
    \ 2, 7) \u279E True\n;; any_int(3, 2, 2) \u279E False\n;; any_int(3, -2, 1) \u279E\
    \ True\n;; any_int(3.6, -2.2, 2) \u279E False\n(define (any_int x y z)\n  (and\
    \ (integer? x) (integer? y) (integer? z)\n       (or (= x (+ y z)) (= y (+ x z))\
    \ (= z (+ x y)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate any_int))\n    (check-equal? (candidate 2 3 1) #t)\n    (check-equal?\
    \ (candidate 2.5 2 3) #f)\n    (check-equal? (candidate 1.5 5 3.5) #f)\n    (check-equal?\
    \ (candidate 2 6 2) #f)\n    (check-equal? (candidate 4 2 2) #t)\n    (check-equal?\
    \ (candidate 2.2 2.2 2.2) #f)\n    (check-equal? (candidate -4 6 2) #t)\n    (check-equal?\
    \ (candidate 2 1 1) #t)\n    (check-equal? (candidate 3 4 7) #t)\n    (check-equal?\
    \ (candidate 3.0 4 7) #f)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphwa0m39g.rkt:29:4

    actual:     #t

    expected:   #f

    --------------------

    '
  stdout: ''
