name: HumanEval_143_words_in_sentence
language: racket
prompt: "#lang racket\n\n;; You are given a string representing a sentence,\n;; the\
  \ sentence contains some words separated by a space,\n;; and you have to return\
  \ a string that contains the words from the original sentence,\n;; whose lengths\
  \ are prime numbers,\n;; the order of the words in the new string should be the\
  \ same as the original one.\n;; Example 1:\n;; Input: sentence = \"This is a test\"\
  \n;; Output: \"is\"\n;; Example 2:\n;; Input: sentence = \"lets go for swimming\"\
  \n;; Output: \"go for\"\n;; Constraints:\n;; * 1 <= len(sentence) <= 100\n;; * sentence\
  \ contains only letters\n(define (words_in_sentence sentence)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate words_in_sentence))\n\
  \    (check-equal? (candidate \"This is a test\") \"is\")\n    (check-equal? (candidate\
  \ \"lets go for swimming\") \"go for\")\n    (check-equal? (candidate \"there is\
  \ no place available here\") \"there is no place\")\n    (check-equal? (candidate\
  \ \"Hi I am Hussein\") \"Hi am Hussein\")\n    (check-equal? (candidate \"go for\
  \ it\") \"go for it\")\n    (check-equal? (candidate \"here\") \"\")\n    (check-equal?\
  \ (candidate \"here is\") \"is\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-prime? n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((empty?\
    \ sentence) empty)\n          ((is-prime? (string-length (first sentence)))\n\
    \           (cons (first sentence) (prime-words-in-sentence (rest sentence))))\n\
    \          (else (prime-words-in-sentence (rest sentence)))))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (iter words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((> i (sqrt n)) #t)\n            ((zero? (modulo n i)) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (i) (list-ref (string-split sentence #\\space) i))\n\
    \         (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n  \
    \    (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n    \
    \      ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ (lambda (word) (string-length word))\n         (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (map (lambda (word) (list-ref\
    \ (string-split sentence #\\space) word))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n\
    \      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (let loop ([i 3])\n\
    \         (cond\n           [(= i n) #t]\n           [(zero? (modulo n i)) #f]\n\
    \           [else (loop (+ i 2))]))]))\n  (for/list ([word (in-list (string-split\
    \ sentence \" \"))])\n    (if (is-prime? (string-length word))\n        word\n\
    \        #f)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (iter sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (iter (cdr sentence))))\n          (else (iter (cdr\
    \ sentence)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2)\
    \ #t]\n      [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n\
    \           [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n    (cond\n \
    \     [(empty? words) '()]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n divisor)\n      (cond ((= divisor\
    \ 1) #t)\n            ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper\
    \ n (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond ((null?\
    \ sentence) (string-join (reverse acc) \" \"))\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (words-in-sentence-iter (cdr sentence) (cons (car\
    \ sentence) acc)))\n          (else (words-in-sentence-iter (cdr sentence) acc))))\n\
    \  (words-in-sentence-iter (string-split sentence #\\space) '()))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i n) #t)\n                   ((= (remainder n i) 0) #f)\n                  \
    \ (else (loop (+ i 2))))))))\n  (for/list ([word (in-list (string-split sentence))])\n\
    \    (if (is-prime? (string-length word))\n        word\n        \"\")))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (is-divisible? n divisor)\n\
    \         (cond\n           [(= divisor 1) #f]\n           [(= (modulo n divisor)\
    \ 0) #t]\n           [else (is-divisible? n (- divisor 1))]))\n       (is-divisible?\
    \ n (- n 1))]))\n  (define (prime-words words)\n    (cond\n      [(empty? words)\
    \ empty]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (prime-words (rest words)))]\n      [else (prime-words (rest words))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((< i n) (if (zero?\
    \ (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n    (iter 2))\n\
    \  (define (word-lengths sentence)\n    (map string-length (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (filter (lambda\
    \ (w) (member (string-length w) (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n \
    \       [(= (modulo n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (prime-words-in-sentence (rest\
    \ sentence)))]\n      [else (prime-words-in-sentence (rest sentence))]))\n  (string-join\
    \ (prime-words-in-sentence (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (-\
    \ i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (apply string-append (words-in-sentence-helper (string-split sentence #\\space))))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i 1) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (- i 1))]))\n    (iter (-\
    \ n 1)))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n  \
    \    [(is-prime? (string-length (first words)))\n       (cons (first words) (iter\
    \ (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-iter? n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n\
    \  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-iter (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence words)\n    (cond\
    \ ((null? sentence) words)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (words-in-sentence-helper (cdr sentence) (append words (list (car\
    \ sentence)))))\n          (else (words-in-sentence-helper (cdr sentence) words))))\n\
    \  (words-in-sentence-helper (string-split sentence #\\space) '()))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (=\
    \ (modulo n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (prime-words sentence)\n    (cond ((empty? sentence) empty)\n          ((is-prime?\
    \ (string-length (first sentence)))\n           (cons (first sentence) (prime-words\
    \ (rest sentence))))\n          (else (prime-words (rest sentence)))))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond ((= d 1) #t)\n          \
    \  ((= (modulo n d) 0) #f)\n            (else (is-prime-helper n (- d 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n\
    \          (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join\
    \ (words-in-sentence-helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n        \
    \  ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (prime-words (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (quotient n 2)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-iter? n (- divisor 1)))))\n    (is-prime-iter? n (-\
    \ n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond ((null?\
    \ sentence) result)\n          ((is-prime? (string-length (car sentence)))\n \
    \          (words-in-sentence-iter (cdr sentence) (string-append result \" \"\
    \ (car sentence))))\n          (else (words-in-sentence-iter (cdr sentence) result))))\n\
    \  (words-in-sentence-iter (string-split sentence #\\space) \"\"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (iter words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime n)\n    (define (is-prime-iter n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-iter n (- i 1))]))\n    (is-prime-iter n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond\n      [(empty? sentence) result]\n      [(is-prime\
    \ (string-length (first sentence)))\n       (words-in-sentence-iter (rest sentence)\
    \ (string-append result (first sentence) \" \"))]\n      [else (words-in-sentence-iter\
    \ (rest sentence) result)]))\n  (substring (words-in-sentence-iter (string-split\
    \ sentence) \"\") 0 (- (string-length (words-in-sentence-iter (string-split sentence)\
    \ \"\")) 1)))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n    \
    \      ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n     \
    \     ((= n 2) #t)\n          ((even? n) #f)\n          (else\n           (let\
    \ loop ((i 3))\n             (cond ((= i n) #t)\n                   ((= (remainder\
    \ n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (prime-words-in-sentence (cdr\
    \ sentence))))\n          (else (prime-words-in-sentence (cdr sentence)))))\n\
    \  (string-join (prime-words-in-sentence (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (helper sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (helper (cdr sentence))))\n          (else (helper\
    \ (cdr sentence)))))\n  (string-join (helper (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n divisor)\n\
    \      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n \
    \           (else (is-prime-helper n (- divisor 1)))))\n    (is-prime-helper n\
    \ (- n 1)))\n  (define (prime-words-in-sentence sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime? (string-length (car sentence)))\n           (cons\
    \ (car sentence) (prime-words-in-sentence (cdr sentence))))\n          (else (prime-words-in-sentence\
    \ (cdr sentence)))))\n  (string-join (prime-words-in-sentence (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(> i (sqrt n)) #t]\n        [(= (modulo n i) 0) #f]\n     \
    \   [else (iter (+ i 1))]))\n    (iter 2))\n  (for/list ([word (in-list (string-split\
    \ sentence))])\n    (if (is-prime? (string-length word))\n        word)))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (iter k)\n      (cond ((= k n) #t)\n            ((is-divisible?\
    \ n k) #f)\n            (else (iter (+ k 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n    \
    \      ((is-prime? (string-length (car sentence)))\n           (cons (car sentence)\
    \ (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter sentence)\n    (cond\n   \
    \   [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (iter (rest sentence)))]\n      [else (iter (rest\
    \ sentence))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (divisible? a b)\n      (= (modulo\
    \ a b) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divisible? n test-divisor) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (quotient n 2)))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (loop i)\n      (cond ((= i n) #t)\n            ((is-divisible? n\
    \ i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (loop\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (loop (cdr sentence))))\n\
    \          (else (loop (cdr sentence)))))\n  (string-join (loop (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n   \
    \   (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i)\
    \ 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (filter (lambda (word)\n              (member\
    \ (string-length word) (prime-word-lengths sentence)))\n            (string-split\
    \ sentence #\\space)))\n  (string-join prime-words #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n divisor)\n      (cond ((= divisor 1) #t)\n\
    \            ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper\
    \ n (- divisor 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(=\
    \ n 2) #t]\n      [(= (remainder n 2) 0) #f]\n      [else\n       (define (iter\
    \ i)\n         (cond\n           [(> (* i i) n) #t]\n           [(= (remainder\
    \ n i) 0) #f]\n           [else (iter (+ i 2))]))\n       (iter 3)]))\n  (define\
    \ (iter words)\n    (cond\n      [(null? words) '()]\n      [(is-prime? (string-length\
    \ (car words)))\n       (cons (car words) (iter (cdr words)))]\n      [else (iter\
    \ (cdr words))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n  \
    \  (iter (- n 1)))\n  (define (iter words)\n    (cond ((null? words) '())\n  \
    \        ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (loop\
    \ i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n \
    \           (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (word-at\
    \ index sentence)\n    (string-join (list-ref (string-split sentence #\\space)\
    \ index) \"\"))\n  (define (loop i)\n    (cond ((>= i (string-length sentence))\
    \ '())\n          ((is-prime? (string-length (word-at i sentence)))\n        \
    \   (cons (word-at i sentence) (loop (+ i 1))))\n          (else (loop (+ i 1)))))\n\
    \  (string-join (loop 0) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n     \
    \ (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n     \
    \ (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-words sentence)\n    (cond\
    \ ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime n)\n    (define (is-prime-iter n\
    \ i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (is-prime-iter n (- i 1)))))\n    (is-prime-iter n (- n 1)))\n  (define\
    \ (words-in-sentence-iter sentence acc)\n    (cond ((null? sentence) acc)\n  \
    \        ((is-prime (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (string-append acc \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) acc))))\n  (words-in-sentence-iter (string-split sentence) \"\
    \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (define (words-in-sentence-helper-helper sentence words)\n  \
    \    (cond\n        [(empty? sentence) (reverse words)]\n        [(is-prime? (string-length\
    \ (first sentence)))\n         (words-in-sentence-helper-helper (rest sentence)\
    \ (cons (first sentence) words))]\n        [else (words-in-sentence-helper-helper\
    \ (rest sentence) words)]))\n    (words-in-sentence-helper-helper sentence '()))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n     \
    \ (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else (is-prime-helper\
    \ n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n      \
    \    ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (words-in-sentence-iter\
    \ sentence result)\n    (cond ((null? sentence) result)\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (string-append result \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) result))))\n  (words-in-sentence-iter (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i\
    \ 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n\
    \    (iter (- n 1)))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper n i)\n     \
    \ (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (helper\
    \ n (+ i 1)))))\n    (helper n 2))\n  (for/list ([word (in-list (string-split\
    \ sentence))])\n    (if (is-prime? (string-length word))\n        word\n     \
    \   \"\")))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (-\
    \ i 1))]))\n    (iter (- n 1)))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (divisible? a b)\n      (= (modulo a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words sentence)\n  \
    \  (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (prime-words-in-sentence sentence)\n    (define (iter sentence)\n \
    \     (cond\n        [(empty? sentence) empty]\n        [(is-prime? (string-length\
    \ (first sentence)))\n         (cons (first sentence) (iter (rest sentence)))]\n\
    \        [else (iter (rest sentence))]))\n    (iter (string-split sentence #\\\
    space)))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n    \
    \    [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n     \
    \ (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n     \
    \ (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence acc)\n    (cond\n      [(empty? sentence)\
    \ (string-join (reverse acc) \" \")]\n      [(is-prime? (string-length (first\
    \ sentence)))\n       (words-in-sentence-helper (rest sentence) (cons (first sentence)\
    \ acc))]\n      [else (words-in-sentence-helper (rest sentence) acc)]))\n  (words-in-sentence-helper\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n  \
    \    (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-words-iter sentence lengths)\n      (cond ((null?\
    \ sentence) '())\n            ((null? lengths) '())\n            ((= (string-length\
    \ (car sentence)) (car lengths))\n             (cons (car sentence) (prime-words-iter\
    \ (cdr sentence) (cdr lengths))))\n            (else (prime-words-iter (cdr sentence)\
    \ lengths))))\n    (prime-words-iter (string-split sentence #\\space) (prime-lengths\
    \ sentence)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (- i 1)))))\n    (iter (- n 1)))\n\
    \  (define (iter sentence)\n    (cond ((null? sentence) '())\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (cons (car sentence) (iter (cdr\
    \ sentence))))\n          (else (iter (cdr sentence)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor\
    \ n)\n      (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-length-words sentence)\n  \
    \  (if (string-empty? sentence)\n        \"\"\n        (let* ((word (string-take-while\
    \ (lambda (c) (not (char=? c #\\space))) sentence))\n               (rest (string-drop-while\
    \ (lambda (c) (not (char=? c #\\space))) sentence)))\n          (if (is-prime?\
    \ (string-length word))\n              (string-append word \" \" (prime-length-words\
    \ rest))\n              (prime-length-words rest)))))\n  (string-trim (prime-length-words\
    \ sentence)))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((> i (/ n 2)) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (filter-prime-lengths word-lengths)\n\
    \    (filter is-prime? word-lengths))\n  (define (filter-prime-words sentence\
    \ word-lengths)\n    (for/list ([word (in-list (string-split sentence #\\space))]\n\
    \               [length (in-list word-lengths)])\n      (if (= (string-length\
    \ word) length)\n          word)))\n  (string-join (filter-prime-words sentence\
    \ (filter-prime-lengths (word-lengths sentence))) #\\space))\n", "  (define (is-prime?\
    \ n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(= n 3) #t]\n\
    \      [(= n 4) #f]\n      [(= n 5) #t]\n      [(= n 6) #f]\n      [(= n 7) #t]\n\
    \      [(= n 8) #f]\n      [(= n 9) #f]\n      [(= n 10) #f]\n      [(= n 11)\
    \ #t]\n      [(= n 12) #f]\n      [(= n 13) #t]\n      [(= n 14) #f]\n      [(=\
    \ n 15) #f]\n      [(= n 16) #f]\n      [(= n 17) #t]\n      [(= n 18) #f]\n \
    \     [(= n 19) #t]\n      [(= n 20) #f]\n      [(= n 21) #f]\n      [(= n 22)\
    \ #f]\n      [(= n 23) #t]\n      [(= n 24) #f]\n      [(= n 25) #f]\n      [(=\
    \ n 26) #f]\n      [(= n 27) #f]\n      [(= n 28) #f]\n      [(= n 29) #t]\n \
    \     [(= n 30) #f]\n      [(= n 31) #t]\n      [(= n 32) #f]\n      [(= n 33)\
    \ #f]\n      [(= n 34) #f]\n      [(= n 35) #f]\n      [(= n 36) #f]\n      [(=\
    \ n 37) #t]\n      [(= n 38) #f]\n      [(= n 39) #f]\n      [(= n 40) #f]\n \
    \     [(= n 41) #t]\n      [(= n 42) #f]\n      [(= n 43) #t]\n      [(= n 44)\
    \ #f]\n      [(= n 45) #f]\n      [(= n 46) #f]\n      [(= n 47) #t]\n      [(=\
    \ n 48) #f]\n      [(= n 49) #f]\n      [(= n 50)", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond ((null? sentence) acc)\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (words-in-sentence-iter (cdr sentence) (string-append\
    \ acc (car sentence) \" \")))\n          (else (words-in-sentence-iter (cdr sentence)\
    \ acc))))\n  (string-trim (words-in-sentence-iter (string-split sentence) \"\"\
    )))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder\
    \ a b) 0))\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ empty]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (prime? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n\
    \ i) 0) #f)\n            (else (prime? n (- i 1)))))\n    (prime? n (- n 1)))\n\
    \  (for/list ([word (in-list (string-split sentence))])\n    (if (is-prime? (string-length\
    \ word))\n        word)))\n", "  (define (is-prime? n)\n    (cond\n      [(= n\
    \ 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n      [else\n       (define\
    \ (iter i)\n         (cond\n           [(> i (sqrt n)) #t]\n           [(= (modulo\
    \ n i) 0) #f]\n           [else (iter (+ i 1))]))\n       (iter 3)]))\n  (define\
    \ (iter sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime?\
    \ (string-length (first sentence)))\n       (cons (first sentence) (iter (rest\
    \ sentence)))]\n      [else (iter (rest sentence))]))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter? n (- i\
    \ 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter sentence\
    \ result)\n    (cond ((null? sentence) result)\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (words-in-sentence-iter (cdr sentence) (string-append\
    \ result \" \" (car sentence))))\n          (else (words-in-sentence-iter (cdr\
    \ sentence) result))))\n  (words-in-sentence-iter (string-split sentence \" \"\
    ) \"\"))\n", "  (define (is-prime? n)\n    (define (divides? a b) (= (remainder\
    \ b a) 0))\n    (define (find-divisor n test-divisor)\n      (cond ((> (square\
    \ test-divisor) n) n)\n            ((divides? test-divisor n) test-divisor)\n\
    \            (else (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor\
    \ n 2) n))\n  (define (prime-words sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (prime-words (cdr sentence))))\n          (else (prime-words (cdr\
    \ sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n div)\n\
    \      (cond\n        [(= div 1) #t]\n        [(= (modulo n div) 0) #f]\n    \
    \    [else (is-prime-helper n (- div 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter? n (quotient n\
    \ 2)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond ((null? sentence)\
    \ acc)\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (string-append acc \" \" (car sentence))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) acc))))\n  (words-in-sentence-iter (string-split sentence) \"\
    \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (prime-words sentence)\n    (define (iter words)\n \
    \     (cond ((null? words) '())\n            ((is-prime? (string-length (car words)))\n\
    \             (cons (car words) (iter (cdr words))))\n            (else (iter\
    \ (cdr words)))))\n    (iter (string-split sentence #\\space)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-words-iter sentence lengths)\n      (cond ((null?\
    \ sentence) '())\n            ((member (string-length (car sentence)) lengths)\n\
    \             (cons (car sentence) (prime-words-iter (cdr sentence) lengths)))\n\
    \            (else (prime-words-iter (cdr sentence) lengths))))\n    (prime-words-iter\
    \ (string-split sentence #\\space) (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor n\
    \ test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (for/list ([word (in-list (string-split\
    \ sentence))])\n    (if (is-prime? (string-length word))\n        word)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter?\
    \ n (- i 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond ((null? sentence) (string-join (reverse acc) \" \"\
    ))\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (cons (car sentence) acc)))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) acc))))\n  (words-in-sentence-iter (string-split sentence) '()))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond\n     \
    \   [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-helper\
    \ n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (divisible? a b)\n      (= (remainder a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words-in-sentence (cdr sentence))))\n\
    \          (else (prime-words-in-sentence (cdr sentence)))))\n  (string-join (prime-words-in-sentence\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(zero? (modulo\
    \ n i)) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper\
    \ lst)\n    (cond\n      [(null? lst) '()]\n      [(is-prime? (string-length (car\
    \ lst))) (cons (car lst) (helper (cdr lst)))]\n      [else (helper (cdr lst))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((< i n) (if (is-divisible? n i) #f (iter (+\
    \ i 1))))\n            (else #t)))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (filter (lambda (word) (member (string-length word) (prime-lengths\
    \ sentence)))\n            (string-split sentence #\\space)))\n  (string-join\
    \ prime-words #\\space))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) empty]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words acc)\n    (cond ((null? words) (string-join (reverse acc) \" \"))\n  \
    \        ((is-prime? (string-length (car words)))\n           (iter (cdr words)\
    \ (cons (car words) acc)))\n          (else (iter (cdr words) acc))))\n  (iter\
    \ (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond\
    \ ((null? words) '())\n          ((is-prime? (string-length (car words)))\n  \
    \         (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-iter n i)\n      (cond\n        [(= i n)\
    \ #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter n (+ i 1))]))\n\
    \    (is-prime-iter n 2))\n  (define (words-in-sentence-iter sentence acc)\n \
    \   (cond\n      [(empty? sentence) (reverse acc)]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-iter (rest sentence) (cons (first\
    \ sentence) acc))]\n      [else (words-in-sentence-iter (rest sentence) acc)]))\n\
    \  (string-join (words-in-sentence-iter (string-split sentence #\\space) '())\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n\
    \        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (helper\
    \ (+ i 1))]))\n    (helper 2))\n  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) empty]\n      [(is-prime? (string-length (first lst)))\n       (cons (first\
    \ lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient\
    \ n 2)))])\n        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n\
    \  (define (word-lengths s)\n    (for/list ([w (in-list (string-split s))])\n\
    \      (string-length w)))\n  (define (prime-lengths l)\n    (for/list ([n (in-list\
    \ l)])\n      (if (is-prime? n) n)))\n  (define (prime-words s)\n    (for/list\
    \ ([w (in-list (string-split s))])\n      (if (member (string-length w) (prime-lengths\
    \ (word-lengths s))) w)))\n  (string-join (prime-words sentence) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter sentence words)\n    (cond ((null? sentence) words)\n \
    \         ((is-prime? (string-length (car sentence)))\n           (iter (cdr sentence)\
    \ (append words (list (car sentence)))))\n          (else (iter (cdr sentence)\
    \ words))))\n  (string-join (iter (string-split sentence #\\space) '()) #\\space))\n",
  "  (define (prime? n)\n    (define (divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (find-divisor n test-divisor)\n      (cond ((> (square test-divisor)\
    \ n) n)\n            ((divisible? n test-divisor) test-divisor)\n            (else\
    \ (find-divisor n (+ test-divisor 1)))))\n    (= (find-divisor n 2) n))\n  (define\
    \ (prime-words sentence)\n    (if (empty? sentence)\n        empty\n        (if\
    \ (prime? (string-length (first sentence)))\n            (cons (first sentence)\
    \ (prime-words (rest sentence)))\n            (prime-words (rest sentence)))))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter?\
    \ n (- i 1)))))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond ((null? sentence) (string-join (reverse acc) \" \"\
    ))\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (cons (car sentence) acc)))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) acc))))\n  (words-in-sentence-iter (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (prime-words-in-sentence sentence)\n    (define\
    \ (iter words)\n      (cond ((null? words) '())\n            ((is-prime? (string-length\
    \ (car words)))\n             (cons (car words) (iter (cdr words))))\n       \
    \     (else (iter (cdr words)))))\n    (iter (string-split sentence #\\space)))\n\
    \  (string-join (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (word-at-index sentence i)\n    (list-ref (string-split sentence #\\space) i))\n\
    \  (define (word-at-index-with-length sentence i)\n    (list (word-at-index sentence\
    \ i) (string-length (word-at-index sentence i))))\n  (define (word-at-index-with-length-is-prime?\
    \ sentence i)\n    (is-prime? (string-length (word-at-index sentence i))))\n \
    \ (define (prime-words sentence)\n    (filter (lambda (x) (word-at-index-with-length-is-prime?\
    \ sentence x))\n            (build-list (length (string-split sentence #\\space))\n\
    \                        (lambda (x) x))))\n  (define (prime-words-in-sentence\
    \ sentence)\n    (map (lambda (x) (word-at-index sentence x))\n         (prime-words\
    \ sentence)))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a\
    \ b) 0))\n    (define (iter i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words result)\n    (cond ((null? words) result)\n          ((is-prime? (string-length\
    \ (car words)))\n           (iter (cdr words) (string-append result \" \" (car\
    \ words))))\n          (else (iter (cdr words) result))))\n  (iter (string-split\
    \ sentence #\\space) \"\"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty?\
    \ words) '()]\n      [(is-prime? (string-length (first words)))\n       (cons\
    \ (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond\n      [(null? words) '()]\n      [(is-prime? (string-length\
    \ (car words)))\n       (cons (car words) (iter (cdr words)))]\n      [else (iter\
    \ (cdr words))]))\n  (string-join (iter (string-split sentence #\\space)) \" \"\
    ))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(=\
    \ i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) '()]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (word-lengths-in-sentence sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-word-lengths-in-sentence\
    \ sentence)\n    (filter is-prime? (word-lengths-in-sentence sentence)))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-helper\
    \ sentence lengths)\n      (cond ((empty? lengths) '())\n            ((= (string-length\
    \ (first sentence)) (first lengths))\n             (cons (first sentence) (prime-words-in-sentence-helper\
    \ (rest sentence) (rest lengths))))\n            (else (prime-words-in-sentence-helper\
    \ (rest sentence) lengths))))\n    (prime-words-in-sentence-helper (string-split\
    \ sentence #\\space) (prime-word-lengths-in-sentence sentence)))\n  (string-join\
    \ (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n  \
    \        (else\n           (let loop ((i 3))\n             (cond ((= i n) #t)\n\
    \                   ((= (remainder n i) 0) #f)\n                   (else (loop\
    \ (+ i 2))))))))\n  (define (prime-words sentence)\n    (for/list ([word (in-list\
    \ (string-split sentence))])\n      (if (is-prime? (string-length word))\n   \
    \       word)))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (if (= i n) #t\n          (if (=\
    \ (modulo n i) 0) #f\n              (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (prime-words-in-sentence sentence)\n    (define (prime-words-in-sentence-iter\
    \ sentence result)\n      (if (empty? sentence) result\n          (let ([word\
    \ (first sentence)])\n            (if (is-prime? (string-length word))\n     \
    \           (prime-words-in-sentence-iter (rest sentence) (append result (list\
    \ word)))\n                (prime-words-in-sentence-iter (rest sentence) result)))))\n\
    \    (prime-words-in-sentence-iter (string-split sentence #\\space) '()))\n  (string-join\
    \ (prime-words-in-sentence sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond ((null?\
    \ sentence) result)\n          ((is-prime? (string-length (car sentence)))\n \
    \          (words-in-sentence-iter (cdr sentence) (string-append result \" \"\
    \ (car sentence))))\n          (else (words-in-sentence-iter (cdr sentence) result))))\n\
    \  (words-in-sentence-iter (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n d)\n      (cond\n        [(= d 1) #t]\n \
    \       [(= (modulo n d) 0) #f]\n        [else (is-prime-helper n (- d 1))]))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (words-in-sentence-helper\
    \ (rest sentence)))]\n      [else (words-in-sentence-helper (rest sentence))]))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\n      \
    \  [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (get-words sentence)\n    (string-split sentence #\\\
    space))\n  (define (get-prime-words words)\n    (filter (lambda (word) (is-prime\
    \ (string-length word))) words))\n  (define (join-words words)\n    (string-join\
    \ words #\\space))\n  (join-words (get-prime-words (get-words sentence))))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n\
    \        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) '()]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-iter?\
    \ n div)\n      (cond ((= div 1) #t)\n            ((= (modulo n div) 0) #f)\n\
    \            (else (is-prime-iter? n (- div 1)))))\n    (is-prime-iter? n (- n\
    \ 1)))\n  (define (words-in-sentence-iter sentence result)\n    (cond ((null?\
    \ sentence) result)\n          ((is-prime? (string-length (car sentence)))\n \
    \          (words-in-sentence-iter (cdr sentence) (string-append result \" \"\
    \ (car sentence))))\n          (else (words-in-sentence-iter (cdr sentence) result))))\n\
    \  (words-in-sentence-iter (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n    (define\
    \ (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n\
    \            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (w) (list-ref (string-split sentence #\\space) w))\n\
    \         (prime-word-lengths sentence)))\n  (string-join prime-words #\\space))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1)\
    \ #t)\n            ((= (modulo n i) 0) #f)\n            (else (is-prime-helper\
    \ n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence \" \")) \" \"\
    ))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n\
    \          ((even? n) #f)\n          (else\n           (let loop ((i 3))\n   \
    \          (cond ((= i n) #t)\n                   ((= (remainder n i) 0) #f)\n\
    \                   (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n\
    \    (define (prime-words-iter sentence acc)\n      (cond ((null? sentence) acc)\n\
    \            ((is-prime? (string-length (car sentence)))\n             (prime-words-iter\
    \ (cdr sentence) (append acc (list (car sentence)))))\n            (else (prime-words-iter\
    \ (cdr sentence) acc))))\n    (prime-words-iter sentence '()))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper lst)\n   \
    \ (cond\n      [(empty? lst) empty]\n      [(is-prime? (string-length (first lst)))\n\
    \       (cons (first lst) (helper (rest lst)))]\n      [else (helper (rest lst))]))\n\
    \  (string-join (helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter sentence)\n    (cond\n      [(empty? sentence) empty]\n     \
    \ [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (\u03BB (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (\u03BB\
    \ (word) (string-ref word 0))\n         (filter (\u03BB (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((> i (sqrt n)) #t)\n            ((= (modulo n i) 0) #f)\n \
    \           (else (iter (+ i 1)))))\n    (iter 2))\n  (define (prime-words sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (prime-words (cdr sentence))))\n          (else\
    \ (prime-words (cdr sentence)))))\n  (string-join (prime-words (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n    \
    \  (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (iter (+ i 1)))))\n    (iter 2))\n  (define (iter sentence result)\n    (cond\
    \ ((null? sentence) result)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (iter (cdr sentence) (string-append result \" \" (car sentence))))\n\
    \          (else (iter (cdr sentence) result))))\n  (iter (string-split sentence)\
    \ \"\"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((= i\
    \ n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n\
    \    (iter 2))\n  (define (prime-words sentence)\n    (cond ((null? sentence)\
    \ '())\n          ((is-prime (string-length (car sentence)))\n           (cons\
    \ (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n d)\n  \
    \    (cond ((= d 1) #t)\n            ((= (modulo n d) 0) #f)\n            (else\
    \ (is-prime-helper n (- d 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence words)\n    (cond ((null? sentence) words)\n\
    \          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-helper\
    \ (cdr sentence) (cons (car sentence) words)))\n          (else (words-in-sentence-helper\
    \ (cdr sentence) words))))\n  (string-join (reverse (words-in-sentence-helper\
    \ (string-split sentence #\\space) '())) \" \"))\n", "  (define (is-prime? n)\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [(even? n) #f]\n   \
    \   [else\n       (let loop ([i 3])\n         (cond\n           [(= i n) #t]\n\
    \           [(= (remainder n i) 0) #f]\n           [else (loop (+ i 2))]))]))\n\
    \  (define (prime-words sentence)\n    (cond\n      [(empty? sentence) empty]\n\
    \      [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (prime-words (rest sentence)))]\n      [else (prime-words (rest sentence))]))\n\
    \  (string-join (prime-words (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n \
    \     [(even? n) #f]\n      [else\n       (define (iter i)\n         (cond\n \
    \          [(= i n) #t]\n           [(= (modulo n i) 0) #f]\n           [else\
    \ (iter (+ i 1))]))\n       (iter 3)]))\n  (define (iter words)\n    (cond\n \
    \     [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter sentence)\n    (cond\n      [(empty? sentence) empty]\n     \
    \ [(is-prime? (string-length (first sentence)))\n       (cons (first sentence)\
    \ (iter (rest sentence)))]\n      [else (iter (rest sentence))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n   \
    \       (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (divisors n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n\
    \        (if (zero? (modulo n i)) i)))\n    (empty? (divisors n)))\n  (define\
    \ (prime-words sentence)\n    (for/list ([word (in-list (string-split sentence))])\n\
    \      (if (is-prime? (string-length word)) word)))\n  (string-join (prime-words\
    \ sentence) \" \"))\n", "  (define (prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (-\
    \ i 1)))))\n    (iter (- n 1)))\n  (define (prime-words sentence)\n    (define\
    \ (iter words)\n      (cond ((null? words) '())\n            ((prime? (string-length\
    \ (car words)))\n             (cons (car words) (iter (cdr words))))\n       \
    \     (else (iter (cdr words)))))\n    (iter (string-split sentence #\\space)))\n\
    \  (string-join (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond ((empty?\
    \ sentence) empty)\n          ((is-prime? (string-length (first sentence)))\n\
    \           (cons (first sentence) (words-in-sentence-helper (rest sentence))))\n\
    \          (else (words-in-sentence-helper (rest sentence)))))\n  (string-join\
    \ (words-in-sentence-helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n   \
    \     [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n      \
    \      (else (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond ((null? sentence) '())\n\
    \          ((is-prime? (string-length (car sentence)))\n           (cons (car\
    \ sentence) (words-in-sentence-helper (cdr sentence))))\n          (else (words-in-sentence-helper\
    \ (cdr sentence)))))\n  (string-join (words-in-sentence-helper (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper\
    \ n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n \
    \       [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper n (- n 1)))\n\
    \  (define (words-in-sentence-helper sentence)\n    (cond\n      [(empty? sentence)\
    \ empty]\n      [(is-prime? (string-length (first sentence)))\n       (cons (first\
    \ sentence) (words-in-sentence-helper (rest sentence)))]\n      [else (words-in-sentence-helper\
    \ (rest sentence))]))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n\
    \      [(empty? words) empty]\n      [(is-prime? (string-length (first words)))\n\
    \       (cons (first words) (iter (rest words)))]\n      [else (iter (rest words))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even?\
    \ n) #f)\n          (else\n           (let loop ((i 3))\n             (cond ((=\
    \ i n) #t)\n                   ((= (remainder n i) 0) #f)\n                  \
    \ (else (loop (+ i 2))))))))\n  (define (prime-words sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n  \
    \      [(= i n) #t]\n        [(zero? (modulo n i)) #f]\n        [else (iter (+\
    \ i 1))]))\n    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words)\
    \ '()]\n      [(is-prime? (string-length (first words)))\n       (cons (first\
    \ words) (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-iter? n i)\n      (cond\n        [(= i n) #t]\n       \
    \ [(= (modulo n i) 0) #f]\n        [else (is-prime-iter? n (+ i 1))]))\n    (is-prime-iter?\
    \ n 2))\n  (define (words-in-sentence-iter sentence acc)\n    (cond\n      [(empty?\
    \ sentence) (reverse acc)]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (words-in-sentence-iter (rest sentence) (cons (first sentence) acc))]\n\
    \      [else (words-in-sentence-iter (rest sentence) acc)]))\n  (words-in-sentence-iter\
    \ (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter i)\n      (cond ((> i\
    \ (/ n 2)) #t)\n            ((is-divisible? n i) #f)\n            (else (iter\
    \ (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map string-length\
    \ (string-split sentence #\\space)))\n  (define (prime-lengths sentence)\n   \
    \ (filter is-prime? (word-lengths sentence)))\n  (define (prime-words sentence)\n\
    \    (filter (lambda (word)\n              (is-prime? (string-length word)))\n\
    \            (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (helper i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (helper (+ i 1))]))\n    (helper 2))\n  (define (helper\
    \ sentence)\n    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (helper (rest sentence)))]\n\
    \      [else (helper (rest sentence))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (helper\
    \ i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n   \
    \     [else (helper (- i 1))]))\n    (helper (- n 1)))\n  (define (helper sentence)\n\
    \    (cond\n      [(empty? sentence) empty]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (cons (first sentence) (helper (rest sentence)))]\n\
    \      [else (helper (rest sentence))]))\n  (string-join (helper (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (iter divisor)\n      (cond\
    \ ((> divisor (sqrt n)) #t)\n            ((is-divisible? n divisor) #f)\n    \
    \        (else (iter (+ divisor 1)))))\n    (iter 2))\n  (define (iter words)\n\
    \    (cond ((null? words) '())\n          ((is-prime? (string-length (car words)))\n\
    \           (cons (car words) (iter (cdr words))))\n          (else (iter (cdr\
    \ words)))))\n  (string-join (iter (string-split sentence #\\space)) \" \"))\n",
  "  (define (is-prime? n)\n    (define (helper i)\n      (cond\n        [(= i n)\
    \ #t]\n        [(zero? (modulo n i)) #f]\n        [else (helper (+ i 1))]))\n\
    \    (helper 2))\n  (define (helper words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (helper (rest words)))]\n      [else (helper (rest words))]))\n  (string-join\
    \ (helper (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (cond ((= n 1) #f)\n          ((= n 2) #t)\n          ((even? n) #f)\n\
    \          (else\n           (let loop ((i 3))\n             (cond ((> (* i i)\
    \ n) #t)\n                   ((= (modulo n i) 0) #f)\n                   (else\
    \ (loop (+ i 2))))))))\n  (string-join\n   (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n           (string-split sentence #\\space))\n   #\\space))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n    \
    \        ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (\u03BB (x) (string-length\
    \ x)) (string-split sentence #\\space)))\n  (define (filter-prime-lengths sentence)\n\
    \    (filter is-prime? (word-lengths sentence)))\n  (define (filter-prime-words\
    \ sentence)\n    (filter (\u03BB (x) (member (string-length x) (filter-prime-lengths\
    \ sentence))) (string-split sentence #\\space)))\n  (string-join (filter-prime-words\
    \ sentence) #\\space))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n         \
    \  (let loop ((i 3))\n             (cond ((= i n) #t)\n                   ((=\
    \ (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (string-join\n\
    \   (filter (lambda (word) (is-prime? (string-length word)))\n           (string-split\
    \ sentence #\\space))\n   #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map (lambda (word) (string-length word))\n         (string-split sentence\
    \ #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (lambda\
    \ (word) (string-ref word 0))\n         (filter (lambda (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (if (= i n) #t\n          (if (= (modulo n i) 0) #f\n            \
    \  (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n    (map\
    \ string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-words-iter sentence word-lengths)\n      (if (null?\
    \ word-lengths) '()\n          (if (= (string-length (car sentence)) (car word-lengths))\n\
    \              (cons (car sentence) (prime-words-iter (cdr sentence) (cdr word-lengths)))\n\
    \              (prime-words-iter (cdr sentence) word-lengths))))\n    (prime-words-iter\
    \ (string-split sentence #\\space) (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond ((null?\
    \ sentence) acc)\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (words-in-sentence-iter (cdr sentence) (string-append acc \" \" (car sentence))))\n\
    \          (else (words-in-sentence-iter (cdr sentence) acc))))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) \"\"))\n", "  (define (is-prime? n)\n    (define\
    \ (divides? a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (prime-words words)\n    (cond ((null?\
    \ words) '())\n          ((is-prime? (string-length (car words)))\n          \
    \ (cons (car words) (prime-words (cdr words))))\n          (else (prime-words\
    \ (cdr words)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((=\
    \ i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+ i\
    \ 1)))))\n    (iter 2))\n  (define (word-lengths lst)\n    (cond ((null? lst)\
    \ '())\n          ((is-prime? (string-length (car lst)))\n           (cons (car\
    \ lst) (word-lengths (cdr lst))))\n          (else (word-lengths (cdr lst)))))\n\
    \  (string-join (word-lengths (string-split sentence #\\space)) \" \"))\n", " \
    \ (define (is-prime? n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n  \
    \  (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n        \
    \  ((is-prime? (string-length (car words)))\n           (cons (car words) (iter\
    \ (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths\
    \ sentence)\n    (map (\u03BB (word) (string-length word))\n         (string-split\
    \ sentence #\\space)))\n  (define (prime-word-lengths sentence)\n    (filter is-prime?\
    \ (word-lengths sentence)))\n  (define (prime-words sentence)\n    (map (\u03BB\
    \ (word) (string-ref word 0))\n         (filter (\u03BB (word) (is-prime? (string-length\
    \ word)))\n                 (string-split sentence #\\space))))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond\
    \ ((null? words) '())\n          ((is-prime? (string-length (car words)))\n  \
    \         (cons (car words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n\
    \  (string-join (iter (string-split sentence #\\space)) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-prime-helper? n i)\n      (if (= i 1)\n     \
    \     #t\n          (if (= (modulo n i) 0)\n              #f\n              (is-prime-helper?\
    \ n (- i 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence acc)\n    (if (string-empty? sentence)\n        acc\n        (define\
    \ (words-in-sentence-helper-helper sentence acc)\n          (if (string-empty?\
    \ sentence)\n              acc\n              (define (words-in-sentence-helper-helper-helper\
    \ sentence acc)\n                (if (string-empty? sentence)\n              \
    \      acc\n                    (words-in-sentence-helper-helper-helper (substring\
    \ sentence 1) (string-append acc (substring sentence 0 1)))))\n              (words-in-sentence-helper-helper\
    \ (substring sentence 1) (words-in-sentence-helper-helper-helper sentence acc))))\n\
    \        (if (is-prime? (string-length (words-in-sentence-helper-helper sentence\
    \ \"\")))\n            (words-in-sentence-helper (substring sentence (add 1 (string-length\
    \ (words-in-sentence-helper-helper sentence \"\")))) (string-append acc (words-in-sentence-helper-helper\
    \ sentence \"\") \" \"))\n            (words-in-sentence-helper (substring sentence\
    \ (add 1 (string-length (words-in-sentence-helper-helper sentence \"\")))) acc))))\n\
    \  (words-in-sentence-helper sentence \"\"))\n", "  (define (is-prime? n)\n  \
    \  (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n    (is-prime-iter?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (cond ((null?\
    \ sentence) acc)\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (words-in-sentence-iter (cdr sentence) (string-append acc \" \" (car sentence))))\n\
    \          (else (words-in-sentence-iter (cdr sentence) acc))))\n  (words-in-sentence-iter\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (define (iter\
    \ i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n        \
    \    (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter sentence result)\n\
    \    (cond ((null? sentence) result)\n          ((is-prime? (string-length (car\
    \ sentence)))\n           (iter (cdr sentence) (string-append result \" \" (car\
    \ sentence))))\n          (else (iter (cdr sentence) result))))\n  (iter (string-split\
    \ sentence) \"\"))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (word-lengths-are-prime? sentence)\n    (for/and\
    \ ([word (in-list (string-split sentence))])\n      (is-prime (string-length word))))\n\
    \  (define (prime-words sentence)\n    (for/list ([word (in-list (string-split\
    \ sentence))])\n      (if (is-prime (string-length word))\n          word\n  \
    \        \"\")))\n  (string-join (prime-words sentence) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (words-in-sentence-iter sentence result)\n    (cond ((null? sentence) result)\n\
    \          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (string-append result \" \" (car sentence))))\n          (else\
    \ (words-in-sentence-iter (cdr sentence) result))))\n  (words-in-sentence-iter\
    \ (string-split sentence) \"\"))\n", "  (define (is-prime? n)\n    (define (divisors\
    \ n)\n      (for/list ([i (in-range 1 (add1 (quotient n 2)))])\n        (if (zero?\
    \ (modulo n i)) i)))\n    (null? (divisors n)))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-word-lengths-indexes\
    \ sentence)\n    (for/list ([i (in-range (length (word-lengths sentence)))])\n\
    \      (if (member (list-ref (word-lengths sentence) i) (prime-word-lengths sentence))\
    \ i)))\n  (define (prime-words sentence)\n    (for/list ([i (in-range (length\
    \ (string-split sentence #\\space)))])\n      (if (member i (prime-word-lengths-indexes\
    \ sentence))\n          (list-ref (string-split sentence #\\space) i))))\n  (string-join\
    \ (prime-words sentence) #\\space))\n", "  (define (is-prime? n)\n    (define\
    \ (is-prime-helper n i)\n      (cond\n        [(= i 1) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (is-prime-helper n (- i 1))]))\n    (is-prime-helper\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence result)\n    (cond\n\
    \      [(empty? sentence) (string-join result)]\n      [(is-prime? (string-length\
    \ (first sentence)))\n       (words-in-sentence-helper (rest sentence) (append\
    \ result (list (first sentence))))]\n      [else (words-in-sentence-helper (rest\
    \ sentence) result)]))\n  (words-in-sentence-helper (string-split sentence #\\\
    space) '()))\n", "  (define (is-prime n)\n    (define (iter i)\n      (cond ((=\
    \ i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (- i\
    \ 1)))))\n    (iter (- n 1)))\n  (define (iter words)\n    (cond ((null? words)\
    \ '())\n          ((is-prime (string-length (car words)))\n           (cons (car\
    \ words) (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (prime? n i)\n      (if (= i 1)\n          #t\n          (if (= (modulo\
    \ n i) 0)\n              #f\n              (prime? n (- i 1)))))\n    (prime?\
    \ n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n    (if (empty?\
    \ sentence)\n        (string-join (reverse acc) \" \")\n        (let* ([word (first\
    \ sentence)]\n               [word-len (string-length word)])\n          (if (is-prime?\
    \ word-len)\n              (words-in-sentence-iter (rest sentence) (cons word\
    \ acc))\n              (words-in-sentence-iter (rest sentence) acc)))))\n  (words-in-sentence-iter\
    \ (string-split sentence) '()))\n", "  (define (is-prime? n)\n    (define (divides?\
    \ a b) (= (remainder b a) 0))\n    (define (find-divisor n test-divisor)\n   \
    \   (cond ((> (square test-divisor) n) n)\n            ((divides? test-divisor\
    \ n) test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n\
    \    (= (find-divisor n 2) n))\n  (define (prime-words sentence)\n    (cond ((null?\
    \ sentence) '())\n          ((is-prime? (string-length (car sentence)))\n    \
    \       (cons (car sentence) (prime-words (cdr sentence))))\n          (else (prime-words\
    \ (cdr sentence)))))\n  (string-join (prime-words (string-split sentence #\\space))\
    \ \" \"))\n", "  (define (is-prime? n)\n    (cond ((= n 1) #f)\n          ((=\
    \ n 2) #t)\n          ((even? n) #f)\n          (else\n           (let loop ((i\
    \ 3))\n             (cond ((&gt; i (sqrt n)) #t)\n                   ((zero? (modulo\
    \ n i)) #f)\n                   (else (loop (+ i 2))))))))\n  (define (words-in-sentence-helper\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (words-in-sentence-helper\
    \ (cdr sentence))))\n          (else (words-in-sentence-helper (cdr sentence)))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (iter 2))\n  (define (iter words)\n    (cond\n      [(empty? words) empty]\n\
    \      [(is-prime? (string-length (first words)))\n       (cons (first words)\
    \ (iter (rest words)))]\n      [else (iter (rest words))]))\n  (string-join (iter\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (define\
    \ (iter i)\n      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n  \
    \          (else (iter (- i 1)))))\n    (iter (- n 1)))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter prime? (word-lengths sentence)))\n\
    \  (define (word-at-index sentence index)\n    (list-ref (string-split sentence\
    \ #\\space) index))\n  (define (prime-words sentence)\n    (map (lambda (index)\
    \ (word-at-index sentence index))\n         (prime-word-lengths sentence)))\n\
    \  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (is-prime-helper? n divisor)\n      (cond ((= divisor 1) #t)\n  \
    \          ((= (modulo n divisor) 0) #f)\n            (else (is-prime-helper?\
    \ n (- divisor 1)))))\n    (is-prime-helper? n (- n 1)))\n  (define (words-in-sentence-helper\
    \ sentence words)\n    (cond ((null? sentence) words)\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (words-in-sentence-helper (cdr sentence) (append\
    \ words (list (car sentence)))))\n          (else (words-in-sentence-helper (cdr\
    \ sentence) words))))\n  (string-join (words-in-sentence-helper (string-split\
    \ sentence) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n\
    \      (cond\n        [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else\
    \ (iter (+ i 1))]))\n    (iter 2))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (iter words)\n      (cond\n        [(empty? words) empty]\n     \
    \   [(is-prime? (string-length (first words)))\n         (cons (first words) (iter\
    \ (rest words)))]\n        [else (iter (rest words))]))\n    (iter (string-split\
    \ sentence #\\space)))\n  (string-join (prime-words-in-sentence sentence) #\\\
    space))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((< i\
    \ n) (if (zero? (modulo n i)) #f (iter (+ i 1))))\n            (else #t)))\n \
    \   (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n       \
    \   ((is-prime? (string-length (car words))) (cons (car words) (iter (cdr words))))\n\
    \          (else (iter (cdr words)))))\n  (iter (string-split sentence #\\space)))\n",
  "  (define (is-prime? n)\n    (define (is-prime-helper? n divisor)\n      (cond\n\
    \        [(= divisor 1) #t]\n        [(= (modulo n divisor) 0) #f]\n        [else\
    \ (is-prime-helper? n (- divisor 1))]))\n    (is-prime-helper? n (- n 1)))\n \
    \ (define (words-in-sentence-helper sentence result)\n    (cond\n      [(empty?\
    \ sentence) result]\n      [(is-prime? (string-length (first sentence)))\n   \
    \    (words-in-sentence-helper (rest sentence) (string-append result (first sentence)\
    \ \" \"))]\n      [else (words-in-sentence-helper (rest sentence) result)]))\n\
    \  (words-in-sentence-helper (string-split sentence) \"\"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo\
    \ n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\
    \ ((= i n) #t)\n            ((= (modulo n i) 0) #f)\n            (else (iter (+\
    \ i 1)))))\n    (iter 2))\n  (define (iter words)\n    (cond ((null? words) '())\n\
    \          ((is-prime? (string-length (car words)))\n           (cons (car words)\
    \ (iter (cdr words))))\n          (else (iter (cdr words)))))\n  (string-join\
    \ (iter (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n\
    \    (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i)\
    \ 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ sentence)\n    (cond ((null? sentence) '())\n          ((is-prime? (string-length\
    \ (car sentence)))\n           (cons (car sentence) (iter (cdr sentence))))\n\
    \          (else (iter (cdr sentence)))))\n  (string-join (iter (string-split\
    \ sentence #\\space)) \" \"))\n", "  (define (prime? n)\n    (cond ((= n 1) #f)\n\
    \          ((= n 2) #t)\n          ((even? n) #f)\n          (else\n         \
    \  (let loop ((i 3))\n             (cond ((= i n) #t)\n                   ((=\
    \ (remainder n i) 0) #f)\n                   (else (loop (+ i 2))))))))\n  (define\
    \ (words-in-sentence-iter sentence acc)\n    (cond ((null? sentence) (string-join\
    \ (reverse acc) \" \"))\n          ((prime? (string-length (car sentence)))\n\
    \           (words-in-sentence-iter (cdr sentence) (cons (car sentence) acc)))\n\
    \          (else (words-in-sentence-iter (cdr sentence) acc))))\n  (words-in-sentence-iter\
    \ (string-split sentence #\\space) '()))\n", "  (define (is-prime? n)\n    (define\
    \ (iter i)\n      (if (= i n) #t\n          (if (= (modulo n i) 0) #f\n      \
    \        (iter (+ i 1)))))\n    (iter 2))\n  (define (word-lengths sentence)\n\
    \    (map string-length (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (define (prime-word? word)\n      (member (string-length word)\
    \ (prime-word-lengths sentence)))\n    (filter prime-word? (string-split sentence\
    \ #\\space)))\n  (string-join (prime-words sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter\
    \ words)\n    (cond ((null? words) '())\n          ((is-prime? (string-length\
    \ (car words)))\n           (cons (car words) (iter (cdr words))))\n         \
    \ (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence #\\\
    space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible? a b)\n\
    \      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n      (define\
    \ (find-divisor n test-divisor)\n        (cond ((> (square test-divisor) n) n)\n\
    \              ((is-divisible? n test-divisor) test-divisor)\n              (else\
    \ (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n    (= (smallest-divisor\
    \ n) n))\n  (define (prime-words words)\n    (cond ((null? words) '())\n     \
    \     ((is-prime? (string-length (car words)))\n           (cons (car words) (prime-words\
    \ (cdr words))))\n          (else (prime-words (cdr words)))))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (divisible? a b)\n      (= (modulo a b) 0))\n    (define (find-divisor\
    \ n test-divisor)\n      (cond ((> (square test-divisor) n) n)\n            ((divisible?\
    \ n test-divisor) test-divisor)\n            (else (find-divisor n (+ test-divisor\
    \ 1)))))\n    (= (find-divisor n 2) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (prime-words-in-sentence-iter sentence words)\n      (cond ((null?\
    \ sentence) words)\n            ((is-prime? (string-length (car sentence)))\n\
    \             (prime-words-in-sentence-iter (cdr sentence) (append words (list\
    \ (car sentence)))))\n            (else (prime-words-in-sentence-iter (cdr sentence)\
    \ words))))\n    (prime-words-in-sentence-iter (string-split sentence #\\space)\
    \ '()))\n  (string-join (prime-words-in-sentence sentence) #\\space))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (smallest-divisor n)\n      (define (find-divisor n test-divisor)\n\
    \        (cond ((> (square test-divisor) n) n)\n              ((is-divisible?\
    \ n test-divisor) test-divisor)\n              (else (find-divisor n (+ test-divisor\
    \ 1)))))\n      (find-divisor n 2))\n    (= (smallest-divisor n) n))\n  (define\
    \ (prime-words sentence)\n    (cond ((null? sentence) '())\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (cons (car sentence) (prime-words\
    \ (cdr sentence))))\n          (else (prime-words (cdr sentence)))))\n  (string-join\
    \ (prime-words (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-iter? n i)\n      (cond ((= i 1) #t)\n           \
    \ ((= (modulo n i) 0) #f)\n            (else (is-prime-iter? n (- i 1)))))\n \
    \   (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter sentence acc)\n\
    \    (cond ((null? sentence) (string-join (reverse acc) \" \"))\n          ((is-prime?\
    \ (string-length (car sentence)))\n           (words-in-sentence-iter (cdr sentence)\
    \ (cons (car sentence) acc)))\n          (else (words-in-sentence-iter (cdr sentence)\
    \ acc))))\n  (words-in-sentence-iter (string-split sentence #\\space) '()))\n",
  "  (define (is-prime n)\n    (define (is-prime-iter n i)\n      (cond ((= i 1) #t)\n\
    \            ((= (modulo n i) 0) #f)\n            (else (is-prime-iter n (- i\
    \ 1)))))\n    (is-prime-iter n (- n 1)))\n  (define (words-in-sentence-iter sentence\
    \ result)\n    (cond ((null? sentence) result)\n          ((is-prime (string-length\
    \ (car sentence)))\n           (words-in-sentence-iter (cdr sentence) (string-append\
    \ result (car sentence) \" \")))\n          (else (words-in-sentence-iter (cdr\
    \ sentence) result))))\n  (words-in-sentence-iter (string-split sentence) \"\"\
    ))\n", "  (define (is-prime? n)\n    (define (is-prime-iter? n divisor)\n    \
    \  (cond ((= divisor 1) #t)\n            ((= (modulo n divisor) 0) #f)\n     \
    \       (else (is-prime-iter? n (- divisor 1)))))\n    (is-prime-iter? n (- n\
    \ 1)))\n  (define (words-in-sentence-iter sentence words)\n    (cond ((null? sentence)\
    \ words)\n          ((is-prime? (string-length (car sentence)))\n           (words-in-sentence-iter\
    \ (cdr sentence) (append words (list (car sentence)))))\n          (else (words-in-sentence-iter\
    \ (cdr sentence) words))))\n  (string-join (words-in-sentence-iter (string-split\
    \ sentence) '()) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n divisor)\n      (cond ((= divisor 1) #t)\n            ((= (modulo n divisor)\
    \ 0) #f)\n            (else (is-prime-helper? n (- divisor 1)))))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence words)\n    (cond\
    \ ((null? sentence) words)\n          ((is-prime? (string-length (car sentence)))\n\
    \           (words-in-sentence-helper (cdr sentence) (append words (list (car\
    \ sentence)))))\n          (else (words-in-sentence-helper (cdr sentence) words))))\n\
    \  (string-join (words-in-sentence-helper (string-split sentence) '()) \" \"))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (word-lengths sentence)\n    (map (lambda (word) (string-length\
    \ word))\n         (string-split sentence #\\space)))\n  (define (prime-word-lengths\
    \ sentence)\n    (filter is-prime? (word-lengths sentence)))\n  (define (prime-words\
    \ sentence)\n    (map (lambda (word) (string-ref word 0))\n         (filter (lambda\
    \ (word) (is-prime? (string-length word)))\n                 (string-split sentence\
    \ #\\space))))\n  (string-join (prime-words sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond ((> i (/ n 2)) #t)\n            ((zero?\
    \ (modulo n i)) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (prime-words sentence)\n    (define (iter words)\n      (cond ((null? words)\
    \ '())\n            ((is-prime? (string-length (car words)))\n             (cons\
    \ (car words) (iter (cdr words))))\n            (else (iter (cdr words)))))\n\
    \    (iter (string-split sentence #\\space)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (define (words-in-sentence-helper-helper\
    \ sentence acc)\n      (cond ((null? sentence) (reverse acc))\n            ((is-prime?\
    \ (string-length (car sentence)))\n             (words-in-sentence-helper-helper\
    \ (cdr sentence) (cons (car sentence) acc)))\n            (else (words-in-sentence-helper-helper\
    \ (cdr sentence) acc))))\n    (words-in-sentence-helper-helper (string-split sentence\
    \ #\\space) '()))\n  (string-join (words-in-sentence-helper sentence) #\\space))\n",
  "  (define (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n     \
    \       ((= (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter\
    \ 2))\n  (define (iter words)\n    (cond ((null? words) '())\n          ((is-prime?\
    \ (string-length (car words)))\n           (cons (car words) (iter (cdr words))))\n\
    \          (else (iter (cdr words)))))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-prime-helper?\
    \ n divisor)\n      (cond\n        [(= divisor 1) #t]\n        [(= (modulo n divisor)\
    \ 0) #f]\n        [else (is-prime-helper? n (- divisor 1))]))\n    (is-prime-helper?\
    \ n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n    (cond\n    \
    \  [(empty? sentence) empty]\n      [(is-prime? (string-length (first sentence)))\n\
    \       (cons (first sentence) (words-in-sentence-helper (rest sentence)))]\n\
    \      [else (words-in-sentence-helper (rest sentence))]))\n  (string-join (words-in-sentence-helper\
    \ (string-split sentence #\\space)) \" \"))\n", "  (define (is-prime? n)\n   \
    \ (define (iter i)\n      (cond ((= i n) #t)\n            ((= (modulo n i) 0)\
    \ #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define (iter sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (iter (cdr sentence))))\n          (else (iter\
    \ (cdr sentence)))))\n  (string-join (iter (string-split sentence #\\space)) \"\
    \ \"))\n", "  (define (is-prime? n)\n    (define (iter i)\n      (cond\n     \
    \   [(= i n) #t]\n        [(= (modulo n i) 0) #f]\n        [else (iter (+ i 1))]))\n\
    \    (cond\n      [(= n 1) #f]\n      [(= n 2) #t]\n      [else (iter 2)]))\n\
    \  (define (iter words)\n    (cond\n      [(empty? words) empty]\n      [(is-prime?\
    \ (string-length (first words)))\n       (cons (first words) (iter (rest words)))]\n\
    \      [else (iter (rest words))]))\n  (string-join (iter (string-split sentence\
    \ #\\space)) \" \"))\n", "  (define (is-prime? n)\n    (define (is-divisible?\
    \ a b)\n      (= (remainder a b) 0))\n    (define (smallest-divisor n)\n     \
    \ (define (find-divisor n test-divisor)\n        (cond ((> (square test-divisor)\
    \ n) n)\n              ((is-divisible? n test-divisor) test-divisor)\n       \
    \       (else (find-divisor n (+ test-divisor 1)))))\n      (find-divisor n 2))\n\
    \    (= (smallest-divisor n) n))\n  (define (prime-words-in-sentence sentence)\n\
    \    (define (prime-words-in-sentence-iter sentence result)\n      (cond ((null?\
    \ sentence) result)\n            ((is-prime? (string-length (car sentence)))\n\
    \             (prime-words-in-sentence-iter (cdr sentence) (append result (list\
    \ (car sentence)))))\n            (else (prime-words-in-sentence-iter (cdr sentence)\
    \ result))))\n    (prime-words-in-sentence-iter (string-split sentence) '()))\n\
    \  (string-join (prime-words-in-sentence sentence) \" \"))\n", "  (define (is-prime?\
    \ n)\n    (define (iter i)\n      (cond\n        [(= i n) #t]\n        [(= (modulo\
    \ n i) 0) #f]\n        [else (iter (+ i 1))]))\n    (iter 2))\n  (define (iter\
    \ lst)\n    (cond\n      [(null? lst) '()]\n      [(is-prime? (string-length (car\
    \ lst))) (cons (car lst) (iter (cdr lst)))]\n      [else (iter (cdr lst))]))\n\
    \  (string-join (iter (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (is-divisible? a b)\n      (= (remainder a b) 0))\n\
    \    (define (loop i)\n      (cond ((> i (sqrt n)) #t)\n            ((is-divisible?\
    \ n i) #f)\n            (else (loop (+ i 1)))))\n    (loop 2))\n  (define (word-lengths\
    \ sentence)\n    (map string-length (string-split sentence #\\space)))\n  (define\
    \ (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths sentence)))\n\
    \  (define (prime-words sentence)\n    (map (lambda (i) (list-ref (string-split\
    \ sentence #\\space) i))\n         (prime-word-lengths sentence)))\n  (string-join\
    \ (prime-words sentence) \" \"))\n", "  (define (is-prime? n)\n    (define (divisible?\
    \ a b)\n      (= (modulo a b) 0))\n    (define (find-divisor n test-divisor)\n\
    \      (cond ((> (square test-divisor) n) n)\n            ((divisible? n test-divisor)\
    \ test-divisor)\n            (else (find-divisor n (+ test-divisor 1)))))\n  \
    \  (= (find-divisor n 2) n))\n  (for/list ([word (in-list (string-split sentence))])\n\
    \    (if (is-prime? (string-length word))\n        word)))\n", "  (define (is-prime?\
    \ n)\n    (define (is-prime-helper n i)\n      (cond ((= i 1) #t)\n          \
    \  ((= (modulo n i) 0) #f)\n            (else (is-prime-helper n (- i 1)))))\n\
    \    (is-prime-helper n (- n 1)))\n  (define (words-in-sentence-helper sentence)\n\
    \    (cond ((null? sentence) '())\n          ((is-prime? (string-length (car sentence)))\n\
    \           (cons (car sentence) (words-in-sentence-helper (cdr sentence))))\n\
    \          (else (words-in-sentence-helper (cdr sentence)))))\n  (string-join\
    \ (words-in-sentence-helper (string-split sentence #\\space)) \" \"))\n", "  (define\
    \ (is-prime? n)\n    (define (iter i)\n      (cond ((= i n) #t)\n            ((=\
    \ (modulo n i) 0) #f)\n            (else (iter (+ i 1)))))\n    (iter 2))\n  (define\
    \ (word-lengths sentence)\n    (map string-length (string-split sentence #\\space)))\n\
    \  (define (prime-word-lengths sentence)\n    (filter is-prime? (word-lengths\
    \ sentence)))\n  (define (prime-words sentence)\n    (define (iter words lengths)\n\
    \      (cond ((null? words) '())\n            ((member (string-length (car words))\
    \ lengths)\n             (cons (car words) (iter (cdr words) lengths)))\n    \
    \        (else (iter (cdr words) lengths))))\n    (iter (string-split sentence\
    \ #\\space) (prime-word-lengths sentence)))\n  (string-join (prime-words sentence)\
    \ #\\space))\n", "  (define (is-prime? n)\n    (define (is-prime-helper n i)\n\
    \      (cond ((= i 1) #t)\n            ((= (modulo n i) 0) #f)\n            (else\
    \ (is-prime-helper n (- i 1)))))\n    (is-prime-helper n (- n 1)))\n  (define\
    \ (words-in-sentence-helper sentence)\n    (cond ((string=? sentence \"\") \"\"\
    )\n          ((is-prime? (string-length (car (string-split sentence #\\space))))\n\
    \           (string-append (car (string-split sentence #\\space)) \" \" (words-in-sentence-helper\
    \ (cdr (string-split sentence #\\space)))))\n          (else (words-in-sentence-helper\
    \ (cdr (string-split sentence #\\space))))))\n  (words-in-sentence-helper sentence))\n",
  "  (define (is-prime? n)\n    (define (is-prime-iter? n i)\n      (cond\n      \
    \  [(= i 1) #t]\n        [(= (modulo n i) 0) #f]\n        [else (is-prime-iter?\
    \ n (- i 1))]))\n    (is-prime-iter? n (- n 1)))\n  (define (words-in-sentence-iter\
    \ sentence acc)\n    (cond\n      [(null? sentence) (string-join (reverse acc)\
    \ \" \")]\n      [(is-prime? (string-length (car sentence)))\n       (words-in-sentence-iter\
    \ (cdr sentence) (cons (car sentence) acc))]\n      [else (words-in-sentence-iter\
    \ (cdr sentence) acc)]))\n  (words-in-sentence-iter (string-split sentence) '()))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
