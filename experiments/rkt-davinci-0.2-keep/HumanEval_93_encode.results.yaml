language: racket
name: HumanEval_93_encode
results:
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (define (is-vowel? c)\n         (member (char-downcase c) '(#\\\
    a #\\e #\\i #\\o #\\u)))\n       (cond\n         [(is-vowel? c)\n          (next-next-char\
    \ c)]\n         [(char-lower-case? c)\n          (next-char c)]\n         [(char-upper-case?\
    \ c)\n          (char-upcase (next-char c))])]\n      [else c]))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcl_iwpwk.rkt:31:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcl_iwpwk.rkt:31:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-vowel c)\n         (cond\n           [(vowel?\
    \ c) (next-char (next-char c))]\n           [else (next-char c)]))\n       (cond\n\
    \         [(vowel? c) (char-upcase (next-vowel c))]\n         [else (char-upcase\
    \ c)])]\n      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6wkz0y39.rkt:29:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6wkz0y39.rkt:29:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (or (char=? c #\\a)\n             (char=?\
    \ c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n      \
    \       (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\b\n             (next-char\
    \ (next-char c))))\n       (if (vowel? c)\n           (next-next-char c)\n   \
    \        (next-char c))]\n      [else c]))\n  (define (encode-string s)\n    (string-map\
    \ encode-char s))\n  (encode-string message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9obwlphe.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp9obwlphe.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2j72eykv.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2j72eykv.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let* ([vowels (string-&gt;list \"aeiou\")]\n               [vowel-index\
    \ (list-index (lambda (v) (char=? c v)) vowels)]\n               [next-vowel (if\
    \ vowel-index\n                               (list-ref vowels (modulo (+ 2 vowel-index)\
    \ (length vowels)))\n                               c)])\n          next-vowel)\n\
    \        c))\n  (string-join (map swap-case (map encode-char (string-&gt;list\
    \ message))) \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n  \
    \  (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1tkn0ia2.rkt:27:20: read-syntax: missing `]` to close `[` on line\
    \ 22, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 27\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (char-next (char-next c))\n        c))\n  (string-map\
    \ swap-case (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6vjumyid.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp6vjumyid.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (next-vowel c)\n    (cond\n      [(char=? c #\\\
    a) #\\c]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\i) #\\k]\n      [(char=?\
    \ c #\\o) #\\q]\n      [(char=? c #\\u) #\\w]\n      [else c]))\n  (define (encode-char\
    \ c)\n    (cond\n      [(char-vowel? c) (next-vowel c)]\n      [else (swap-case\
    \ c)]))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0wfjo30o.rkt:30:8: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp0wfjo30o.rkt:30:8\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (char-upcase (if (char=? c #\\z)\
    \ #\\a (char+ c 1))))\n       (define (next-next-char c)\n         (char-upcase\
    \ (if (char=? c #\\y) #\\a (char+ c 2))))\n       (define (is-vowel? c)\n    \
    \     (or (char=? c #\\a)\n             (char=? c #\\e)\n             (char=?\
    \ c #\\i)\n             (char=? c #\\o)\n             (char=? c #\\u)))\n    \
    \   (cond\n         [(is-vowel? c) (next-next-char c)]\n         [else (next-char\
    \ c)])]\n      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpryqz0kxj.rkt:18:46: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpryqz0kxj.rkt:18:46\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-ci&gt;=? c #\\a)\n\
    \        (if (char-ci&lt;=? c #\\z)\n            (char-upcase c)\n           \
    \ (char-downcase c))\n        c))\n  (define (encode-char c)\n    (cond\n    \
    \  [(char-ci=? c #\\a) #\\c]\n      [(char-ci=? c #\\e) #\\g]\n      [(char-ci=?\
    \ c #\\i) #\\k]\n      [(char-ci=? c #\\o) #\\q]\n      [(char-ci=? c #\\u) #\\\
    w]\n      [(char-ci=? c #\\y) #\\a]\n      [else c]))\n  (string-map swap-case\
    \ (string-map encode-char message)))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa9_m7nfu.rkt:14:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 30\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (equal? c #\\a)\n          (equal? c #\\e)\n          (equal? c #\\i)\n\
    \          (equal? c #\\o)\n          (equal? c #\\u)))\n    (define (encode-vowel\
    \ c)\n      (define (next-vowel c)\n        (cond\n          [(equal? c #\\a)\
    \ #\\e]\n          [(equal? c #\\e) #\\i]\n          [(equal? c #\\i) #\\o]\n\
    \          [(equal? c #\\o) #\\u]\n          [(equal? c #\\u) #\\a]))\n      (next-vowel\
    \ (next-vowel c)))\n    (cond\n      [(is-vowel? c) (encode-vowel c)]\n      [(char-alphabetic?\
    \ c) (char-upcase c)]\n      [else c]))\n  (define (encode-string s)\n    (string-join\
    \ (map encode-char (string->list s))))\n  (encode-string message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpynihl88d.rkt:43:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    T #\\E #\\S #\\T)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpynihl88d.rkt:44:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\M #\\e #\\D #\\i #\\\
    S #\\u #\\R)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynihl88d.rkt:45:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\Y #\\E #\\S)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpynihl88d.rkt:46:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\T #\\H #\\u\
    \ #\\S #\\space #\\u #\\S #\\space #\\i #\\space #\\M #\\o #\\S #\\S #\\i #\\\
    G #\\o)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpynihl88d.rkt:47:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\I #\\space #\\D #\\a #\\N #\\T #\\space #\\\
    K #\\N #\\O #\\W #\\space #\\W #\\H #\\A #\\T #\\space #\\T #\\O #\\space #\\\
    W #\\R #\\I #\\T #\\E)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (cond\n         [(is-vowel? c)\n          (next-next-char c)]\n\
    \         [else\n          (next-char c)])]\n      [else\n       c]))\n  (define\
    \ (encode-string str)\n    (string-map encode-char str))\n  (encode-string message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeq3fr8rj.rkt:31:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpeq3fr8rj.rkt:31:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel c)\n    \
    \  (member c '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n    (define (next-vowel c)\n\
    \      (cond\n        [(equal? c \"z\") \"b\"]\n        [(equal? c \"u\") \"a\"\
    ]\n        [else (string-ref (string-append c \"abcdefghijklmnopqrstuvwxyz\")\
    \ (+ 1 (string-index c \"abcdefghijklmnopqrstuvwxyz\")))]))\n    (define (next-char\
    \ c)\n      (cond\n        [(equal? c \"z\") \"a\"]\n        [else (string-ref\
    \ (string-append c \"abcdefghijklmnopqrstuvwxyz\") (+ 1 (string-index c \"abcdefghijklmnopqrstuvwxyz\"\
    )))]))\n    (cond\n      [(is-vowel c) (next-vowel c)]\n      [else (next-char\
    \ c)]))\n  (define (encode-string s)\n    (cond\n      [(empty? s) empty]\n  \
    \    [else (cons (encode-char (first s)) (encode-string (rest s)))]))\n  (encode-string\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7a_nsl56.rkt:21:79: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp7a_nsl56.rkt:21:79\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa62d826i.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa62d826i.rkt:26:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-vowel c)\n         (cond\n           [(equal? c #\\\
    a) #\\e]\n           [(equal? c #\\e) #\\i]\n           [(equal? c #\\i) #\\o]\n\
    \           [(equal? c #\\o) #\\u]\n           [(equal? c #\\u) #\\a]))\n    \
    \   (if (is-vowel? c)\n           (next-vowel c)\n           (char-upcase c))]\n\
    \      [else c]))\n  (define (encode-string s)\n    (string-join (map encode-char\
    \ (string->list s))))\n  (encode-string message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4tieg8tx.rkt:39:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    T #\\E #\\S #\\T)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4tieg8tx.rkt:40:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\M #\\a #\\D #\\e #\\\
    S #\\o #\\R)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4tieg8tx.rkt:41:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\Y #\\E #\\S)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4tieg8tx.rkt:42:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\T #\\H #\\o\
    \ #\\S #\\space #\\o #\\S #\\space #\\e #\\space #\\M #\\i #\\S #\\S #\\e #\\\
    G #\\i)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4tieg8tx.rkt:43:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\I #\\space #\\D #\\u #\\N #\\T #\\space #\\\
    K #\\N #\\O #\\W #\\space #\\W #\\H #\\A #\\T #\\space #\\T #\\O #\\space #\\\
    W #\\R #\\I #\\T #\\E)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (equal? c #\\a)\n          (equal? c #\\e)\n          (equal? c #\\i)\n\
    \          (equal? c #\\o)\n          (equal? c #\\u)))\n    (define (swap-case\
    \ c)\n      (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (define (next-vowel c)\n      (cond ((equal? c #\\a) #\\c)\n     \
    \       ((equal? c #\\e) #\\g)\n            ((equal? c #\\i) #\\k)\n         \
    \   ((equal? c #\\o) #\\q)\n            ((equal? c #\\u) #\\w)))\n    (if (is-vowel?\
    \ c)\n        (next-vowel c)\n        (swap-case c)))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp424vy4vf.rkt:22:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmp424vy4vf.rkt:22:11\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kjasv85.rkt:21:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kjasv85.rkt:22:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kjasv85.rkt:23:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kjasv85.rkt:24:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7kjasv85.rkt:25:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (let* ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")]\n\
    \              [index (string-index (string-downcase c) alphabet)]\n         \
    \     [new-index (+ index 2)])\n         (if (>= new-index (length alphabet))\n\
    \             (list-ref alphabet (- new-index (length alphabet)))\n          \
    \   (list-ref alphabet new-index)))]\n      [else c]))\n  (string-join (map encode-char\
    \ (string->list message))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzx0ecf1j.rkt:18:22: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpzx0ecf1j.rkt:18:22\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond [(char-alphabetic? c)\n\
    \           (if (char-lower-case? c)\n               (char-upcase c)\n       \
    \        (char-downcase c))]\n          [(char=? c #\\a) #\\c]\n          [(char=?\
    \ c #\\e) #\\g]\n          [(char=? c #\\i) #\\k]\n          [(char=? c #\\o)\
    \ #\\q]\n          [(char=? c #\\u) #\\w]\n          [else c]))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpegsugtun.rkt:25:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpegsugtun.rkt:25:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (define (is-vowel? c)\n      (or (char=? c #\\a)\n          (char=? c #\\\
    e)\n          (char=? c #\\i)\n          (char=? c #\\o)\n          (char=? c\
    \ #\\u)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n  \
    \          ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n      \
    \      ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (if (is-vowel?\
    \ c)\n        (next-vowel c)\n        (swap-case c)))\n  (map encode-char (string->list\
    \ message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyb8qk9b.rkt:41:4\n\
    actual:     '(#\\t #\\e #\\s #\\t)\nexpected:   \"tgst\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyb8qk9b.rkt:42:4\n\
    actual:     '(#\\m #\\w #\\D #\\c #\\S #\\k #\\R)\nexpected:   \"mWDCSKR\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyb8qk9b.rkt:43:4\n\
    actual:     '(#\\y #\\e #\\s)\nexpected:   \"ygs\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqyb8qk9b.rkt:44:4\nactual:\n\
    \  '(#\\t\n  #\\H\n  #\\k\n  #\\S\n  #\\space\n  #\\k\n  #\\S\n  #\\space\n  #\\\
    c\n  #\\space\n  #\\M\n  #\\g\n  #\\S\n  #\\S\n  #\\c\n  #\\G\n  #\\g)\nexpected:\
    \   \"tHKS KS C MGSSCGG\"\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqyb8qk9b.rkt:45:4\nactual:\n  '(#\\\
    i\n  #\\space\n  #\\d\n  #\\q\n  #\\n\n  #\\T\n  #\\space\n  #\\k\n  #\\N\n  #\\\
    o\n  #\\W\n  #\\space\n  #\\w\n  #\\H\n  #\\a\n  #\\T\n  #\\space\n  #\\T\n  #\\\
    o\n  #\\space\n  #\\w\n  #\\R\n  #\\i\n  #\\T\n  #\\e)\nexpected:   \"k dQnT kNqW\
    \ wHcT Tq wRkTg\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (char-next (char-next c))\n        c))\n  (string-map swap-case (string-map\
    \ encode-char message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxxftwzcx.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpxxftwzcx.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [else c]))\n  (define (encode-char c)\n    (swap-vowel (swap-case\
    \ c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1l6hz9c0.rkt:28:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1l6hz9c0.rkt:28:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphm71de9_.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphm71de9_.rkt:26:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-vowel c)\n         (cond\n\
    \           [(char=? c #\\a) #\\e]\n           [(char=? c #\\e) #\\i]\n      \
    \     [(char=? c #\\i) #\\o]\n           [(char=? c #\\o) #\\u]\n           [(char=?\
    \ c #\\u) #\\a]))\n       (if (is-vowel? c)\n           (next-vowel c)\n     \
    \      (char-upcase c))]\n      [else c]))\n  (define (encode-string str)\n  \
    \  (string-join (map encode-char (string->list str))))\n  (encode-string message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8lm2e0f7.rkt:43:4\n\
    \nstring-join: contract violation\n  expected: (listof string?)\n  given: '(#\\\
    T #\\E #\\S #\\T)\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8lm2e0f7.rkt:44:4\n\nstring-join: contract\
    \ violation\n  expected: (listof string?)\n  given: '(#\\M #\\a #\\D #\\e #\\\
    S #\\o #\\R)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8lm2e0f7.rkt:45:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\Y #\\E #\\S)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8lm2e0f7.rkt:46:4\n\nstring-join:\
    \ contract violation\n  expected: (listof string?)\n  given: '(#\\T #\\H #\\o\
    \ #\\S #\\space #\\o #\\S #\\space #\\e #\\space #\\M #\\i #\\S #\\S #\\e #\\\
    G #\\i)\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8lm2e0f7.rkt:47:4\n\nstring-join: contract violation\n  expected:\
    \ (listof string?)\n  given: '(#\\I #\\space #\\D #\\u #\\N #\\T #\\space #\\\
    K #\\N #\\O #\\W #\\space #\\W #\\H #\\A #\\T #\\space #\\T #\\O #\\space #\\\
    W #\\R #\\I #\\T #\\E)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm0o2en0f.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpm0o2en0f.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((vowels '#(#\\a #\\e #\\i #\\o #\\u)))\n          (if (member c\
    \ vowels)\n              (let ((next-vowel (list-ref vowels (modulo (+ (list-index\
    \ c vowels) 2) (length vowels)))))\n                (swap-case next-vowel))\n\
    \              (swap-case c)))\n        c))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkucvc74k.rkt:24:61: list-index: unbound identifier\n  in: list-index\n\
    \  location...:\n   /tmp/tmpkucvc74k.rkt:24:61\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c)))\n  (define (encode-char c)\n    (if (vowel? c)\n    \
    \    (let ([vowels (string-&gt;list \"aeiou\")])\n          (list-ref vowels (+\
    \ (list-index (char-downcase c) vowels 2) 2)))\n        (swap-case c)))\n  (string-&gt;list\
    \ (map encode-char (string-&gt;list message))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx1_zeciw.rkt:20:21: read-syntax: missing `]` to close `[` on line\
    \ 18, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 20\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (cond\n      [(char-alphabetic? c) (swap-case c)]\n      [(char=? c #\\a)\
    \ #\\c]\n      [(char=? c #\\e) #\\g]\n      [(char=? c #\\i) #\\k]\n      [(char=?\
    \ c #\\o) #\\q]\n      [(char=? c #\\u) #\\w]\n      [else c]))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_31occfg.rkt:27:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_31occfg.rkt:27:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((vowels (string-&gt;list \"aeiou\"))\n              (alphabet (string-&gt;list\
    \ \"abcdefghijklmnopqrstuvwxyz\")))\n          (if (member c vowels)\n       \
    \       (list-ref alphabet (+ (list-index c vowels 2) 2))\n              c))\n\
    \        c))\n  (string-join (map encode-char (map swap-case (string-&gt;list\
    \ message))) \"\"))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa6gxbnwg.rkt:28:47: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 29\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-upper-case? c)\n            (char-downcase c)\n            (char-upcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-upper-case? c)\n            (char-upcase (char-next (char-next\
    \ c)))\n            (char-downcase (char-next (char-next c))))\n        c))\n\
    \  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n        (if (char-upper-case?\
    \ c)\n            (char-upcase (char-next (char-next c)))\n            (char-downcase\
    \ (char-next (char-next c))))\n        c))\n  (define (is-vowel c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (encode-message message)\n    (if\
    \ (empty? message)\n        empty\n        (cons (if (is-vowel (car message))\n\
    \                  (encode-vowel (car message))\n                  (encode-char\
    \ (car message)))\n              (encode-message (cdr message)))))\n  (string-join\
    \ (encode-message (string->list message))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_rettggt.rkt:23:26: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmp_rettggt.rkt:23:26\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase (string-downcase message)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvny2sfv0.rkt:21:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvny2sfv0.rkt:22:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvny2sfv0.rkt:23:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvny2sfv0.rkt:24:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvny2sfv0.rkt:25:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (replace-vowel\
    \ c)\n    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n\
    \      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c\
    \ #\\u) #\\w]\n      [else c]))\n  (string-map (lambda (c) (replace-vowel (swap-case\
    \ c))) message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n  \
    \  (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkomjwin6.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkomjwin6.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (if (char-lower-case? c)\n            (char-upcase (char-next (char-next c)))\n\
    \            (char-downcase (char-next (char-next c))))\n        c))\n  (string-map\
    \ encode-char (string-map swap-case message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7xd1fj6p.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp7xd1fj6p.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpr_8sudvl.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpr_8sudvl.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase (char-next (char-next\
    \ c)))\n            (char-downcase (char-next (char-next c))))\n        c))\n\
    \  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n        (if (char-vowel?\
    \ c)\n            (encode-char c)\n            c)\n        c))\n  (define (encode-message\
    \ message)\n    (if (empty? message)\n        \"\"\n        (string-append (encode-vowel\
    \ (first message))\n                       (encode-message (rest message)))))\n\
    \  (encode-message (string-map swap-case message)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg1f1z50e.rkt:23:26: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpg1f1z50e.rkt:23:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpukxxsabc.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpukxxsabc.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (let ([vowels (string-&gt;list \"aeiou\")])\n          (list-ref vowels (modulo\
    \ (+ (list-index (char-&gt;integer c) vowels) 2) 5)))\n        c))\n  (string-join\
    \ (map (lambda (c) (integer-&gt;char (encode-char (swap-case c)))) (string-&gt;list\
    \ message))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpmr847hwo.rkt:25:32: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase (string-replace message \"a\" \"c\")\n  \
    \               (string-replace message \"e\" \"g\")\n                 (string-replace\
    \ message \"i\" \"k\")\n                 (string-replace message \"o\" \"q\")\n\
    \                 (string-replace message \"u\" \"w\")))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpegapusla.rkt:25:4\n\
    \nstring-upcase: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpegapusla.rkt:26:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpegapusla.rkt:27:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpegapusla.rkt:28:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpegapusla.rkt:29:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (let* ([c (char-upcase c)]\n              [c (if (char-in-range?\
    \ c #\\A #\\Z)\n                     (char-upcase c)\n                     c)])\n\
    \         (cond\n           [(char-in-range? c #\\A #\\Z)\n            (let* ([c\
    \ (char-upcase c)]\n                   [c (if (char-in-range? c #\\A #\\Z)\n \
    \                         (char-upcase c)\n                          c)])\n  \
    \            (cond\n                [(char-in-range? c #\\A #\\Z)\n          \
    \       (let* ([c (char-upcase c)]\n                        [c (if (char-in-range?\
    \ c #\\A #\\Z)\n                               (char-upcase c)\n             \
    \                  c)])\n                   (cond\n                     [(char-in-range?\
    \ c #\\A #\\Z)\n                      (let* ([c (char-upcase c)]\n           \
    \                  [c (if (char-in-range? c #\\A #\\Z)\n                     \
    \               (char-upcase c)\n                                    c)])\n  \
    \                      (cond\n                          [(char-in-range? c #\\\
    A #\\Z)\n                           (let* ([c (char-upcase c)]\n             \
    \                     [c (if (char-in-range? c #\\A #\\Z)\n                  \
    \                       (char-upcase c)\n                                    \
    \     c)])\n                             (cond\n                             \
    \  [(char-in-range? c #\\A #\\Z)\n                                (let* ([c (char-upcase\
    \ c)]\n                                       [c (if (char-in-range? c #\\A #\\\
    Z)\n                                              (char-upcase c)\n          \
    \                                    c)])\n                                  (cond\n\
    \                                    [(char-in-range? c #\\A #\\Z)\n         \
    \                            (let* ([c (char-upcase c)]\n                    \
    \                        [c (if (char-in-range? c #\\A #\\Z)\n               \
    \                                    (char-\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmptj8yv0sp.rkt:55:51: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 56\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n  \
    \           (let ([c (char-upcase c)])\n               (if (or (char=? c #\\A)\
    \ (char=? c #\\E) (char=? c #\\I) (char=? c #\\O) (char=? c #\\U))\n         \
    \          (char-downcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase (char-upcase\
    \ (char-upcase (char-up\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9lvsckg5.rkt:18:1113: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 19\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (define (swap-case\
    \ c)\n      (if (char-upper-case? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n     \
    \       ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n         \
    \   ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (if (is-vowel?\
    \ c)\n        (next-vowel c)\n        (swap-case c)))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp70xzh_l7.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp70xzh_l7.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (next-char c)\n     \
    \ (integer->char (+ (char->integer c) 1)))\n    (define (next-next-char c)\n \
    \     (integer->char (+ (char->integer c) 2)))\n    (define (swap-case c)\n  \
    \    (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (if (is-vowel? c)\n        (next-next-char c)\n        (swap-case\
    \ c)))\n  (map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpscxqtmqo.rkt:22:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpscxqtmqo.rkt:22:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      ((char=? c #\\a) #\\c)\n      ((char=? c #\\e) #\\g)\n     \
    \ ((char=? c #\\i) #\\k)\n      ((char=? c #\\o) #\\q)\n      ((char=? c #\\u)\
    \ #\\w)\n      (else c)))\n  (define (encode-char c)\n    (swap-vowel (swap-case\
    \ c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5nr0svew.rkt:28:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5nr0svew.rkt:28:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6ug_7gdy.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6ug_7gdy.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upcase? c)\n      \
    \  (char-downcase c)\n        (char-upcase c)))\n  (define (next-vowel c)\n  \
    \  (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n          ((char=?\
    \ c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=? c #\\u)\
    \ #\\w)\n          (else c)))\n  (define (encode-char c)\n    (if (vowel? c)\n\
    \        (next-vowel c)\n        (swap-case c)))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjbr5j5_4.rkt:15:9: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpjbr5j5_4.rkt:15:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (cond\n           [(char=? c #\\\
    z) #\\a]\n           [(char=? c #\\Z) #\\A]\n           [else (char+ c 1)]))\n\
    \       (define (next-next-char c)\n         (cond\n           [(char=? c #\\\
    y) #\\a]\n           [(char=? c #\\Y) #\\A]\n           [else (next-char (next-char\
    \ c))]))\n       (cond\n         [(char-vowel? c) (next-next-char c)]\n      \
    \   [else (next-char c)])]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2psxceq8.rkt:21:18: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp2psxceq8.rkt:21:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond [(char-alphabetic? c)\n\
    \           (define (next-char c)\n             (if (char=? c #\\z)\n        \
    \         #\\a\n                 (char+ c 1)))\n           (define (vowel? c)\n\
    \             (or (char=? c #\\a)\n                 (char=? c #\\e)\n        \
    \         (char=? c #\\i)\n                 (char=? c #\\o)\n                \
    \ (char=? c #\\u)))\n           (define (encode-vowel c)\n             (define\
    \ (next-vowel c)\n               (if (vowel? c)\n                   (next-vowel\
    \ (next-char c))\n                   c))\n             (next-vowel (next-char\
    \ c)))\n           (if (vowel? c)\n               (encode-vowel c)\n         \
    \      (next-char c))]\n          [else c]))\n  (define (encode-string s)\n  \
    \  (if (string-empty? s)\n        \"\"\n        (string-append (string (encode-char\
    \ (string-ref s 0)))\n                       (encode-string (substring s 1)))))\n\
    \  (encode-string message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7sp1jjle.rkt:19:18: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp7sp1jjle.rkt:19:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl95iohiw.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpl95iohiw.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmph_pi8deh.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmph_pi8deh.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(or (char=? c\
    \ #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n   \
    \    (char-upcase (char-next (char-next c)))]\n      [(or (char=? c #\\A) (char=?\
    \ c #\\E) (char=? c #\\I) (char=? c #\\O) (char=? c #\\U))\n       (char-downcase\
    \ (char-next (char-next c)))]\n      [else (char-upcase c)]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqhhandwb.rkt:17:21: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpqhhandwb.rkt:17:21\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n       \
    \ [alphabet (list #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l\
    \ #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z)])\n \
    \   (define (swap-case c)\n      (if (char-lower-case? c)\n          (char-upcase\
    \ c)\n          (char-downcase c)))\n    (define (encode-char c)\n      (if (member\
    \ c vowels)\n          (list-ref alphabet (+ (position c alphabet 2) 2))\n   \
    \       (swap-case c)))\n    (string-join (map encode-char (string->list message)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpidef2fjk.rkt:22:33: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpidef2fjk.rkt:22:33\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpguq9sjex.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpguq9sjex.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encoder c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-upper-case? c)\n           (char-downcase c)\n        \
    \   (char-upcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encoder message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7_s68ilm.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7_s68ilm.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-char c)\n         (integer->char\
    \ (+ (char->integer c) 1)))\n       (define (next-next-char c)\n         (integer->char\
    \ (+ (char->integer c) 2)))\n       (define (swap-case c)\n         (if (char-upper-case?\
    \ c)\n             (char-downcase c)\n             (char-upcase c)))\n       (cond\n\
    \         [(is-vowel? c)\n          (next-next-char c)]\n         [else\n    \
    \      (swap-case c)])]\n      [else\n       c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkz7eckhr.rkt:38:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkz7eckhr.rkt:38:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (swap-case c)\n     \
    \ (if (char-lower-case? c)\n          (char-upcase c)\n          (char-lower-case\
    \ c)))\n    (define (next-vowel c)\n      (cond ((equal? c #\\u) #\\a)\n     \
    \       (else (char+ c 1))))\n    (define (next-next-vowel c)\n      (cond ((equal?\
    \ c #\\u) #\\a)\n            ((equal? c #\\a) #\\e)\n            (else (char+\
    \ c 2))))\n    (cond ((is-vowel? c) (next-next-vowel c))\n          (else (swap-case\
    \ c))))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5dj6dew6.rkt:20:11: char-lower-case: unbound identifier\n  in:\
    \ char-lower-case\n  location...:\n   /tmp/tmp5dj6dew6.rkt:20:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmparad6qd1.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmparad6qd1.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (if (char=? c #\\z)\n           \
    \  #\\a\n             (char+ c 1)))\n       (define (next-next-char c)\n     \
    \    (next-char (next-char c)))\n       (define (is-vowel? c)\n         (or (char=?\
    \ c #\\a)\n             (char=? c #\\e)\n             (char=? c #\\i)\n      \
    \       (char=? c #\\o)\n             (char=? c #\\u)))\n       (define (swap-case\
    \ c)\n         (if (char-upper-case? c)\n             (char-downcase c)\n    \
    \         (char-upcase c)))\n       (cond\n         [(is-vowel? c)\n         \
    \ (next-next-char c)]\n         [else\n          (swap-case c)])]\n      [else\n\
    \       c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1rs97z9y.rkt:20:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp1rs97z9y.rkt:20:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (cond\n           [(char=? c #\\\
    z) #\\a]\n           [(char=? c #\\Z) #\\A]\n           [else (char+ c 1)]))\n\
    \       (define (next-next-char c)\n         (cond\n           [(char=? c #\\\
    x) #\\a]\n           [(char=? c #\\X) #\\A]\n           [else (next-char (next-char\
    \ c))]))\n       (define (is-vowel? c)\n         (or (char-ci=? c #\\a)\n    \
    \         (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u)))\n       (cond\n         [(is-vowel?\
    \ c) (next-next-char c)]\n         [(char-lower-case? c) (char-upcase c)]\n  \
    \       [(char-upper-case? c) (char-downcase c)]\n         [else c])]\n      [else\
    \ c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpaexklpo4.rkt:21:18: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpaexklpo4.rkt:21:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpymp5n7vy.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpymp5n7vy.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (swap-case c)\n     \
    \ (if (char-lower-case? c)\n          (char-upcase c)\n          (char-lower-case\
    \ c)))\n    (define (next-vowel c)\n      (cond\n        [(char=? c #\\u) #\\\
    a]\n        [(char=? c #\\a) #\\e]\n        [(char=? c #\\e) #\\i]\n        [(char=?\
    \ c #\\i) #\\o]\n        [(char=? c #\\o) #\\u]\n        [else #\\a]))\n    (if\
    \ (is-vowel? c)\n        (next-vowel c)\n        (swap-case c)))\n  (map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9rzarmrt.rkt:20:11: char-lower-case: unbound identifier\n  in:\
    \ char-lower-case\n  location...:\n   /tmp/tmp9rzarmrt.rkt:20:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (define (swap-case\
    \ c)\n      (if (char-upper-case? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (define (encode-vowel c)\n      (define (next-vowel c)\n        (cond\n\
    \          [(char=? c #\\u) #\\a]\n          [(char=? c #\\a) #\\e]\n        \
    \  [(char=? c #\\e) #\\i]\n          [(char=? c #\\i) #\\o]\n          [(char=?\
    \ c #\\o) #\\u]))\n      (next-vowel c))\n    (if (is-vowel? c)\n        (encode-vowel\
    \ c)\n        (swap-case c)))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvmf7qp2h.rkt:37:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpvmf7qp2h.rkt:37:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_yspuw7a.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_yspuw7a.rkt:26:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfuzipkq.rkt:21:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfuzipkq.rkt:22:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfuzipkq.rkt:23:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfuzipkq.rkt:24:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqfuzipkq.rkt:25:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upcase? c)\n      \
    \  (char-downcase c)\n        (char-upcase c)))\n  (define (next-vowel c)\n  \
    \  (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n          ((char=?\
    \ c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=? c #\\u)\
    \ #\\w)\n          (else c)))\n  (define (encode-char c)\n    (cond ((char-alphabetic?\
    \ c)\n           (next-vowel (swap-case c)))\n          (else c)))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjyef6zpo.rkt:15:9: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpjyef6zpo.rkt:15:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (encode-char c)\n    (if (vowel? c)\n        (let ([next-char\
    \ (char+ c 2)])\n          (if (char=? next-char #\\y)\n              (char+ next-char\
    \ 2)\n              next-char))\n        c))\n  (string-map (lambda (c) (encode-char\
    \ (swap-case c))) message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4u5g6dvi.rkt:28:26: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp4u5g6dvi.rkt:28:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (char-next (char-next c))\n        c))\n  (string-map\
    \ swap-case (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5wdbbttr.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp5wdbbttr.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ([c (char-upcase c)])\n          (if (member c (string-&gt;list\
    \ \"AEIOU\"))\n              (char-&gt;integer (list-ref (string-&gt;list \"CDFGHJKLMNPQRSTVWXYZABCDE\"\
    ) (modulo (+ (char-&gt;integer c) 2) 26))\n                             integer-&gt;char)\n\
    \              c))\n        c))\n  (string-join (map encode-char (map swap-case\
    \ (string-&gt;list message))) \"\"))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpm79tehsw.rkt:28:47: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 29\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-vowel c)\n         (cond\n           [(= c #\\u) #\\\
    a]\n           [else (char (+ c 1))]))\n       (define (next-char c)\n       \
    \  (cond\n           [(= c #\\z) #\\a]\n           [else (char (+ c 1))]))\n \
    \      (define (next-next-char c)\n         (cond\n           [(= c #\\y) #\\\
    a]\n           [(= c #\\z) #\\b]\n           [else (char (+ c 2))]))\n       (define\
    \ (swap-case c)\n         (cond\n           [(char-lower-case? c) (char-upcase\
    \ c)]\n           [(char-upper-case? c) (char-downcase c)]))\n       (cond\n \
    \        [(vowel? c) (swap-case (next-vowel c))]\n         [(vowel? (next-char\
    \ c)) (swap-case (next-next-char c))]\n         [else (swap-case (next-char c))])]\n\
    \      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8swrha96.rkt:22:18: char: unbound identifier\n  in: char\n  location...:\n\
    \   /tmp/tmp8swrha96.rkt:22:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (swap-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (define (swap-message message)\n    (string-map swap-char\
    \ message))\n  (swap-message message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz8xsoijb.rkt:28:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpz8xsoijb.rkt:28:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (next-vowel c)\n    (cond ((char=? c #\\a) #\\c)\n\
    \          ((char=? c #\\e) #\\g)\n          ((char=? c #\\i) #\\k)\n        \
    \  ((char=? c #\\o) #\\q)\n          ((char=? c #\\u) #\\w)\n          (else c)))\n\
    \  (define (encode-char c)\n    (next-vowel (swap-case c)))\n  (define (encode-string\
    \ s)\n    (string-map encode-char s))\n  (encode-string message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7x2ufh_t.rkt:30:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7x2ufh_t.rkt:30:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (define (next-vowel\
    \ c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\e) #\\g)\n\
    \            ((char=? c #\\i) #\\k)\n            ((char=? c #\\o) #\\q)\n    \
    \        ((char=? c #\\u) #\\w)))\n    (cond ((is-vowel? c) (next-vowel c))\n\
    \          ((char-alphabetic? c) (char-upcase c))\n          (else c)))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa4cyr4ax.rkt:30:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa4cyr4ax.rkt:30:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (next-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (encode-char c)\n    (if (char-alphabetic?\
    \ c)\n        (next-vowel (swap-case c))\n        c))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_utx3g6m.rkt:29:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_utx3g6m.rkt:29:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-upper-case? c)\n           (char-downcase c)\n        \
    \   (char-upcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc2bi0m41.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpc2bi0m41.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (char-upcase (if (= c #\\z) #\\a\
    \ (char+ c 1))))\n       (define (next-next-char c)\n         (char-upcase (if\
    \ (= c #\\y) #\\a (char+ c 2))))\n       (define (is-vowel? c)\n         (or (=\
    \ c #\\a) (= c #\\e) (= c #\\i) (= c #\\o) (= c #\\u)))\n       (define (encode-vowel\
    \ c)\n         (next-next-char c))\n       (define (encode-consonant c)\n    \
    \     (next-char c))\n       (cond\n         [(is-vowel? c) (encode-vowel c)]\n\
    \         [else (encode-consonant c)])]\n      [else c]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpggru3w4x.rkt:18:41: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpggru3w4x.rkt:18:41\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond [(char-alphabetic? c)\n\
    \           (if (char-lower-case? c)\n               (char-upcase c)\n       \
    \        (char-downcase c))]\n          [(char=? c #\\a) #\\c]\n          [(char=?\
    \ c #\\e) #\\g]\n          [(char=? c #\\i) #\\k]\n          [(char=? c #\\o)\
    \ #\\q]\n          [(char=? c #\\u) #\\w]\n          [else c]))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv9unwvtk.rkt:25:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv9unwvtk.rkt:25:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (cond\n         [(vowel? c)\n          (next-next-char c)]\n\
    \         [else\n          (next-char c)])]\n      [else\n       c]))\n  (define\
    \ (encode-string s)\n    (string-map encode-char s))\n  (encode-string message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpypksin1j.rkt:31:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpypksin1j.rkt:31:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (if (member c '(#\\a #\\e #\\i #\\o #\\u))\n        (list-ref '(#\\c #\\\
    f #\\j #\\o #\\r) (position c '(#\\a #\\e #\\i #\\o #\\u)))\n        c))\n  (map\
    \ (lambda (c) (encode-char (swap-case c))) message))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnq4p71c5.rkt:20:42: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmpnq4p71c5.rkt:20:42\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-vowel? c)\n    \
    \    (char-next (char-next c))\n        c))\n  (string-map encode-vowel (string-map\
    \ encode-char message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7e37go_6.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp7e37go_6.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n\
    \            ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n    \
    \        ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (cond\
    \ ((is-vowel? c) (next-vowel c))\n          ((char-alphabetic? c) (char-upcase\
    \ c))\n          (else c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_jpnnd9i.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_jpnnd9i.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u)))\n  (define (next-vowel c)\n    (cond\n      [(= c #\\u) #\\a]\n    \
    \  [(= c #\\e) #\\i]\n      [(= c #\\i) #\\o]\n      [(= c #\\o) #\\u]\n     \
    \ [(= c #\\a) #\\e]))\n  (define (next-letter c)\n    (cond\n      [(= c #\\z)\
    \ #\\a]\n      [(= c #\\Z) #\\A]\n      [else (char (+ 1 (char->integer c)))]))\n\
    \  (define (encode-letter c)\n    (cond\n      [(is-vowel? c) (next-vowel c)]\n\
    \      [(is-vowel? (next-letter c)) (next-letter (next-letter c))]\n      [else\
    \ (next-letter c)]))\n  (define (encode-message message)\n    (cond\n      [(empty?\
    \ message) empty]\n      [else (cons (encode-letter (car message))\n         \
    \         (encode-message (cdr message)))]))\n  (define (swap-case c)\n    (cond\n\
    \      [(char-upper-case? c) (char-downcase c)]\n      [(char-lower-case? c) (char-upcase\
    \ c)]\n      [else c]))\n  (define (swap-case-message message)\n    (cond\n  \
    \    [(empty? message) empty]\n      [else (cons (swap-case (car message))\n \
    \                 (swap-case-message (cdr message)))]))\n  (encode-message (swap-case-message\
    \ message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpua_lmtkw.rkt:27:13: char: unbound identifier\n  in: char\n  location...:\n\
    \   /tmp/tmpua_lmtkw.rkt:27:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (let ([vowels (string-&gt;list \"aeiou\")])\n          (list-ref vowels (modulo\
    \ (+ (list-index (char-&gt;integer c) vowels) 2) 5)))\n        c))\n  (string-&gt;list\
    \ (string-join (map (lambda (c) (integer-&gt;char (encode-char (swap-case c))))\
    \ (string-&gt;list message)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpezaw1x_l.rkt:25:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (encode-vowel c)\n        (swap-case c)))\n\
    \  (define (encode-vowel c)\n    (define (next-vowel c)\n      (if (char-vowel?\
    \ c)\n          (next-vowel (char-next c))\n          c))\n    (define (next-next-vowel\
    \ c)\n      (if (char-vowel? c)\n          (next-next-vowel (char-next c))\n \
    \         c))\n    (next-next-vowel (next-vowel c)))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprfth5mhv.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmprfth5mhv.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      ((char=? c #\\a) #\\c)\n      ((char=? c #\\e) #\\g)\n     \
    \ ((char=? c #\\i) #\\k)\n      ((char=? c #\\o) #\\q)\n      ((char=? c #\\u)\
    \ #\\w)\n      (else c)))\n  (define (encode-char c)\n    (swap-vowel (swap-case\
    \ c)))\n  (define (encode-string s)\n    (string-map encode-char s))\n  (encode-string\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt5ucic0p.rkt:29:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt5ucic0p.rkt:29:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let* ([vowels (string->list \"aeiou\")]\n               [vowel-index\
    \ (find-index (lambda (v) (char=? v c)) vowels)]\n               [new-vowel-index\
    \ (modulo (+ 2 vowel-index) (length vowels))])\n          (list-ref vowels new-vowel-index))\n\
    \        c))\n  (string-join\n   (map (lambda (c) (encode-char (swap-case c)))\n\
    \        (string->list message))\n   \"\"))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpxu9e25cv.rkt:23:29: find-index: unbound identifier\n  in: find-index\n\
    \  location...:\n   /tmp/tmpxu9e25cv.rkt:23:29\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-vowel? c)\n            (char-upcase (char-next (char-next (char-downcase\
    \ c))))\n            (char-upcase c))\n        c))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfkmqr_v8.rkt:16:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpfkmqr_v8.rkt:16:13\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (shift-char c)\n         (if (is-vowel?\
    \ c)\n             (if (char=? c #\\u)\n                 #\\a\n              \
    \   (char+ c 2))\n             (char+ c 1)))]\n      [else c]))\n  (define (encode-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (encode-char (string-ref s 0)))\n                       (encode-string (substring\
    \ s 1)))))\n  (encode-string message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4lsn820g.rkt:15:4: begin (possibly implicit): no expression after\
    \ a sequence of internal definitions\n  in: (begin (define (is-vowel? c) (or (char=?\
    \ c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))) (define\
    \ (shift-char c) (if (is-vowel? c) (if (char=? c #\\u) #\\a (char+ c 2)) (char+\
    \ c 1))))\n  location...:\n   /tmp/tmp4lsn820g.rkt:15:4\n   /tmp/tmp4lsn820g.rkt:17:7\n\
    \   /tmp/tmp4lsn820g.rkt:23:7\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (encode-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplp71p0uo.rkt:27:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmplp71p0uo.rkt:27:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (swap-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (define (swap-string s)\n    (string-map swap-char s))\n\
    \  (swap-string message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpy5ngeb9j.rkt:28:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpy5ngeb9j.rkt:28:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (define (swap-case c)\n         (if (char-lower-case? c)\n \
    \            (char-upcase c)\n             (char-downcase c)))\n       (if (is-vowel?\
    \ c)\n           (next-next-char c)\n           (swap-case c))]\n      [else c]))\n\
    \  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphmgvxnt3.rkt:31:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphmgvxnt3.rkt:31:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (let ([message (string-&gt;list message)])\n    (map (lambda\
    \ (c)\n           (if (char-alphabetic? c)\n               (if (char-lower-case?\
    \ c)\n                   (if (char-vowel? c)\n                       (char-&gt;integer\
    \ (char-upcase c))\n                       (char-&gt;integer c))\n           \
    \        (if (char-vowel? c)\n                       (char-&gt;integer (char-downcase\
    \ c))\n                       (char-&gt;integer c)))\n               (char-&gt;integer\
    \ c)))\n         message)))\n</code>\nI get the following error:\n<code>char-&gt;integer:\
    \ expects argument of type &lt;char&gt;; given #\\A\n</code>\nI'm not sure why\
    \ this is happening. I'm using <code>char-&gt;integer</code> to convert the character\
    \ to an integer so that I can add 2 to it, and then convert it back to a character.\n\
    I'm also not sure if this is the best way to do this. I'm new to Racket and functional\
    \ programming.\n\n\nA:\n\nThe problem is that <code>char-&gt;integer</code> expects\
    \ a character, but you're passing it an integer.\nYou can use <code>integer-&gt;char</code>\
    \ to convert the integer back to a character.\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv2wji8vh.rkt:21:19: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond ((char-alphabetic? c)\n\
    \           (let ((vowels (string-&gt;list \"aeiouAEIOU\")))\n             (if\
    \ (member c vowels)\n                 (let ((c-index (list-index (char-&gt;integer\
    \ c) vowels)))\n                   (integer-&gt;char (+ (char-&gt;integer c) 2)))\n\
    \                 (char-upcase c))))\n          (else c)))\n  (string-&gt;list\
    \ (map encode-char (string-&gt;list message))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpewhz898m.rkt:22:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 23\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp81sg0vs2.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp81sg0vs2.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (member c '(#\\a #\\e #\\\
    i #\\o #\\u))\n        (list-ref '(#\\c #\\f #\\j #\\o #\\t)\n               \
    \   (position c '(#\\a #\\e #\\i #\\o #\\u)))\n        c))\n  (string-map swap-case\n\
    \              (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp72sn0l5a.rkt:23:19: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmp72sn0l5a.rkt:23:19\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (if (char-lower-case? c)\n            (char-upcase (char-next (char-next c)))\n\
    \            (char-downcase (char-next (char-next c))))\n        c))\n  (string-map\
    \ encode-char (string-map swap-case message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7daoy7fw.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp7daoy7fw.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (define (next-vowel c)\n          (if (member c '(#\\a #\\e #\\i #\\\
    o #\\u))\n              (if (= c #\\u)\n                  #\\a\n             \
    \     (char+ c 1))\n              (next-vowel (char+ c 1))))\n        (next-vowel\
    \ (char+ c 2)))\n    (swap-case c))\n  (define (encode-message message)\n    (if\
    \ (empty? message)\n        \"\"\n        (string-append (string (encode-char\
    \ (string-ref message 0)))\n                       (encode-message (substring\
    \ message 1)))))\n  (encode-message message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpexwd5hs9.rkt:22:8: define: not allowed in an expression context\n\
    \  in: (define (next-vowel c) (if (member c (quote (#\\a #\\e #\\i #\\o #\\u)))\
    \ (if (= c #\\u) #\\a (char+ c 1)) (next-vowel (char+ c 1))))\n  location...:\n\
    \   /tmp/tmpexwd5hs9.rkt:22:8\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:9:4:\
    \ normalize-definition/mk-rhs\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/norm-define.rkt:165:4:\
    \ normalize-definition\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/private/kw.rkt:1117:2\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (or (char=? c #\\a)\n             (char=?\
    \ c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n      \
    \       (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\b\n             (next-char\
    \ (next-char c))))\n       (if (vowel? c)\n           (next-next-char c)\n   \
    \        (next-char c))]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqvilu0x2.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpqvilu0x2.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn7k5db6e.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpn7k5db6e.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (cond\n      [(is-vowel?\
    \ c)\n       (define (next-vowel c)\n         (cond\n           [(char=? c #\\\
    a) #\\c]\n           [(char=? c #\\e) #\\g]\n           [(char=? c #\\i) #\\k]\n\
    \           [(char=? c #\\o) #\\q]\n           [(char=? c #\\u) #\\w]))\n    \
    \   (next-vowel c)]\n      [(char-alphabetic? c)\n       (if (char-upper-case?\
    \ c)\n           (char-downcase c)\n           (char-upcase c))]\n      [else\
    \ c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzspvaz5b.rkt:36:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzspvaz5b.rkt:36:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (char-next (char-next c))\n        c))\n  (string-map\
    \ swap-case (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphxdnqi7_.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmphxdnqi7_.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-vowel c)\n         (cond\n\
    \           [(char=? c #\\a) #\\c]\n           [(char=? c #\\e) #\\g]\n      \
    \     [(char=? c #\\i) #\\k]\n           [(char=? c #\\o) #\\q]\n           [(char=?\
    \ c #\\u) #\\w]))\n       (if (is-vowel? c)\n           (next-vowel c)\n     \
    \      (char-upcase c))]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1s47_6d5.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1s47_6d5.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n  \
    \           (let ([c (char-upcase c)])\n               (cond\n               \
    \  [(char=? c #\\A) #\\C]\n                 [(char=? c #\\E) #\\G]\n         \
    \        [(char=? c #\\I) #\\K]\n                 [(char=? c #\\O) #\\Q]\n   \
    \              [(char=? c #\\U) #\\W]\n                 [(char=? c #\\Y) #\\A]\n\
    \                 [else (char-downcase (char-next c))]))\n             c))\n \
    \      (string->list message)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_4bg9jfu.rkt:24:39: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmp_4bg9jfu.rkt:24:39\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp34flsfwo.rkt:21:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp34flsfwo.rkt:22:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp34flsfwo.rkt:23:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp34flsfwo.rkt:24:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp34flsfwo.rkt:25:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (cond\n    [(empty? message) empty]\n    [else\n     (cons\
    \ (encode-char (first message))\n           (encode (rest message)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwx_jpk76.rkt:17:12: encode-char: unbound identifier\n  in: encode-char\n\
    \  location...:\n   /tmp/tmpwx_jpk76.rkt:17:12\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (define (swap-case\
    \ c)\n      (if (char-upper-case? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n     \
    \       ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n         \
    \   ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (if (is-vowel?\
    \ c)\n        (next-vowel c)\n        (swap-case c)))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpk1r8c7hf.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpk1r8c7hf.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (shift-char c)\n         (define\
    \ (shift-char-helper c)\n           (cond\n             [(char=? c #\\z) #\\b]\n\
    \             [(char=? c #\\y) #\\a]\n             [else (char+ c 2)]))\n    \
    \     (if (is-vowel? c)\n             (shift-char-helper c)\n             c))\n\
    \       (if (char-lower-case? c)\n           (char-upcase (shift-char c))\n  \
    \         (char-downcase (shift-char c)))]\n      [else c]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpttwnvzv5.rkt:28:20: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpttwnvzv5.rkt:28:20\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplp14bo9h.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmplp14bo9h.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgfchg2oz.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgfchg2oz.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (next-char c)\n     \
    \ (integer->char (+ (char->integer c) 1)))\n    (define (next-next-char c)\n \
    \     (integer->char (+ (char->integer c) 2)))\n    (define (swap-case c)\n  \
    \    (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (cond ((is-vowel? c) (next-next-char c))\n          (else (swap-case\
    \ c))))\n  (map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbfiigjkl.rkt:22:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpbfiigjkl.rkt:22:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (encode-char c)\n    (if\
    \ (vowel? c)\n        (list-ref '(#\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\\
    m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)\n                  (modulo\
    \ (+ (char-&gt;integer c) 2) 26))\n        c))\n  (string-join\n   (map (lambda\
    \ (c) (encode-char (swap-case c)))\n        (string-&gt;list message))\n   \"\"\
    ))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp53ej84sq.rkt:25:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase (string-replace message \"a\" \"c\") (string-replace\
    \ message \"e\" \"g\") (string-replace message \"i\" \"k\") (string-replace message\
    \ \"o\" \"q\") (string-replace message \"u\" \"w\")))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hr2zidf.rkt:21:4\n\
    \nstring-upcase: arity mismatch;\n the expected number of arguments does not match\
    \ the given number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hr2zidf.rkt:22:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hr2zidf.rkt:23:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hr2zidf.rkt:24:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_hr2zidf.rkt:25:4\n\nstring-upcase:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 1\n  given: 5\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-downcase (char-upcase c 2))\n\
    \            (char-upcase (char-downcase c 2)))\n        c))\n  (string-map encode-char\
    \ (string-map swap-case message)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw_dlquse.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw_dlquse.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ([vowels (string-&gt;list \"aeiou\")])\n          (if (member c\
    \ vowels)\n              (let ([vowel-index (list-index (lambda (x) (= x c)) vowels)])\n\
    \                (list-ref vowels (modulo (+ 2 vowel-index) (length vowels))))\n\
    \              c))\n        c))\n  (string-&gt;list (map swap-case (map encode-char\
    \ (string-&gt;list message)))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8lv491oq.rkt:27:9: read-syntax: missing `]` to close `[` on line\
    \ 22, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 27\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-vowel c)\n         (cond\n           [(vowel?\
    \ c)\n            (next-char (next-char c))]\n           [else\n            (next-char\
    \ c)]))\n       (cond\n         [(vowel? c)\n          (next-vowel c)]\n     \
    \    [else\n          (next-char c)])]\n      [else\n       c]))\n  (define (encode-string\
    \ s)\n    (string-map encode-char s))\n  (encode-string message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg6yxbt4s.rkt:35:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpg6yxbt4s.rkt:35:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u)))\n    (if (is-vowel? c)\n        (define\
    \ (next-vowel c)\n          (if (char=? c #\\u)\n              #\\a\n        \
    \      (next-vowel (char+ c 1))))\n        (next-vowel (next-vowel c)))\n    (define\
    \ (encode-string s)\n      (if (string-empty? s)\n          \"\"\n          (string-append\
    \ (encode-char (string-ref s 0))\n                         (encode-string (substring\
    \ s 1)))))\n    (encode-string (string-map swap-case message)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi3vnjw_8.rkt:13:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 36\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkpdh3zgw.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkpdh3zgw.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-message message)\n    (if (empty? message)\n\
    \        \"\"\n        (string-append (encode-char (first message))\n        \
    \               (encode-message (rest message)))))\n  (define (encode-vowels message)\n\
    \    (if (empty? message)\n        \"\"\n        (string-append (encode-vowel\
    \ (first message))\n                       (encode-vowels (rest message)))))\n\
    \  (define (encode-message message)\n    (if (empty? message)\n        \"\"\n\
    \        (string-append (encode-char (first message))\n                      \
    \ (encode-message (rest message)))))\n  (define (encode-vowels message)\n    (if\
    \ (empty? message)\n        \"\"\n        (string-append (encode-vowel (first\
    \ message))\n                       (encode-vowels (rest message)))))\n  (define\
    \ (encode-message message)\n    (if (empty? message)\n        \"\"\n        (string-append\
    \ (encode-char (first message))\n                       (encode-message (rest\
    \ message)))))\n  (define (encode-vowels message)\n    (if (empty? message)\n\
    \        \"\"\n        (string-append (encode-vowel (first message))\n       \
    \                (encode-vowels (rest message)))))\n  (define (encode-message\
    \ message)\n    (if (empty?\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwr0ezj9g.rkt:63:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 64\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (define (swap-case c)\n         (if (char-upper-case? c)\n \
    \            (char-downcase c)\n             (char-upcase c)))\n       (cond\n\
    \         [(is-vowel? c)\n          (next-next-char c)]\n         [else\n    \
    \      (swap-case c)])]\n      [else\n       c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1e_tpy1y.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1e_tpy1y.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-vowel c)\n         (cond\n           [(vowel? c)\n\
    \            (define (next-vowel-helper c)\n              (cond\n            \
    \    [(vowel? c) c]\n                [else (next-vowel-helper (char+ c 1))]))\n\
    \            (next-vowel-helper (char+ c 2))]\n           [else c]))\n       (if\
    \ (char-lower-case? c)\n           (char-upcase (next-vowel c))\n           (char-downcase\
    \ (next-vowel c)))]\n      [else c]))\n  (string-map encode-char message))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp_ulufwf6.rkt:25:42: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp_ulufwf6.rkt:25:42\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (or (char=? c #\\a)\n             (char=?\
    \ c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n      \
    \       (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\b\n             (next-char\
    \ (next-char c))))\n       (if (vowel? c)\n           (next-next-char c)\n   \
    \        (next-char c))]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7k1f42gi.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp7k1f42gi.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (if (member c '(#\\a #\\e #\\i #\\o #\\u))\n        (list-ref '(#\\c #\\\
    f #\\j #\\o #\\t) (position c '(#\\a #\\e #\\i #\\o #\\u)))\n        c))\n  (define\
    \ (encode-char c)\n    (swap-vowel (swap-case c)))\n  (string-join (map encode-char\
    \ (string->list message))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp01o9a_0z.rkt:20:42: position: unbound identifier\n  in: position\n\
    \  location...:\n   /tmp/tmp01o9a_0z.rkt:20:42\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\a\n             (next-char\
    \ (next-char c))))\n       (if (is-vowel? c)\n           (next-next-char c)\n\
    \           (next-char c))]\n      [else c]))\n  (define (encode-string s)\n \
    \   (string-map encode-char s))\n  (encode-string message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp925gg25w.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp925gg25w.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond ((char-alphabetic? c)\n\
    \           (if (char-lower-case? c)\n               (char-upcase c)\n       \
    \        (char-downcase c)))\n          ((char=? c #\\a) #\\c)\n          ((char=?\
    \ c #\\e) #\\g)\n          ((char=? c #\\i) #\\k)\n          ((char=? c #\\o)\
    \ #\\q)\n          ((char=? c #\\u) #\\w)\n          (else c)))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnjvp85p9.rkt:25:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpnjvp85p9.rkt:25:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (encode-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiox8elwg.rkt:27:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpiox8elwg.rkt:27:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (if (char=? c #\\z)\n           \
    \  #\\a\n             (char+ c 1)))\n       (define (next-next-char c)\n     \
    \    (if (char=? c #\\y)\n             #\\a\n             (next-char (next-char\
    \ c))))\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n        \
    \     (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\\
    o)\n             (char=? c #\\u)))\n       (cond\n         [(is-vowel? c)\n  \
    \        (next-next-char c)]\n         [else\n          (next-char c)])]\n   \
    \   [else\n       c]))\n  (define (encode-string s)\n    (string-map encode-char\
    \ s))\n  (encode-string message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp59u40ii4.rkt:20:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp59u40ii4.rkt:20:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp7cft0tut.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7cft0tut.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encoder c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encoder message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp98_sqqgz.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp98_sqqgz.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case char)\n    (cond\n      [(char-lower-case?\
    \ char) (char-upcase char)]\n      [(char-upper-case? char) (char-downcase char)]\n\
    \      [else char]))\n  (define (encode-char char)\n    (cond\n      [(char=?\
    \ char #\\a) #\\c]\n      [(char=? char #\\e) #\\g]\n      [(char=? char #\\i)\
    \ #\\k]\n      [(char=? char #\\o) #\\q]\n      [(char=? char #\\u) #\\w]\n  \
    \    [(char=? char #\\A) #\\C]\n      [(char=? char #\\E) #\\G]\n      [(char=?\
    \ char #\\I) #\\K]\n      [(char=? char #\\O) #\\Q]\n      [(char=? char #\\U)\
    \ #\\W]\n      [else char]))\n  (string-map (lambda (char) (encode-char (swap-case\
    \ char))) message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n  \
    \  (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkh3jdvex.rkt:32:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkh3jdvex.rkt:32:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (define (is-vowel? c)\n      (or (char=? c #\\a)\n          (char=? c #\\\
    e)\n          (char=? c #\\i)\n          (char=? c #\\o)\n          (char=? c\
    \ #\\u)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n  \
    \          ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n      \
    \      ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (if (is-vowel?\
    \ c)\n        (next-vowel c)\n        (swap-case c)))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp5stwt_2n.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5stwt_2n.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-upper-case? c)\n           (char-downcase c)\n        \
    \   (char-upcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpu60e6iub.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpu60e6iub.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (encode-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp93c5o7hk.rkt:27:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp93c5o7hk.rkt:27:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n    (define (next-vowel c)\n      (cond ((char=? c #\\a) #\\c)\n\
    \            ((char=? c #\\e) #\\g)\n            ((char=? c #\\i) #\\k)\n    \
    \        ((char=? c #\\o) #\\q)\n            ((char=? c #\\u) #\\w)))\n    (cond\
    \ ((is-vowel? c) (next-vowel c))\n          ((char-alphabetic? c) (char-upcase\
    \ c))\n          (else c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp90j_zwv6.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp90j_zwv6.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-downcase (char-upcase c 2))\n\
    \            (char-upcase (char-downcase c 2)))\n        c))\n  (define (encode-string\
    \ s)\n    (if (empty? s)\n        \"\"\n        (string-append (encode-char (first\
    \ s))\n                       (encode-string (rest s)))))\n  (encode-string (string-map\
    \ swap-case message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpx9xwbam_.rkt:31:18: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpx9xwbam_.rkt:31:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (vowel? c)\n  \
    \  (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n   \
    \     (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (next-vowel c)\n \
    \   (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n         \
    \ ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)))\n  (define (encode-char c)\n    (if (vowel? c)\n        (next-vowel\
    \ c)\n        (swap-case c)))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6cmluuk1.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6cmluuk1.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpkz0jaurl.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkz0jaurl.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpg2_76gyv.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpg2_76gyv.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-upper-case? c)\n           (char-downcase c)\n        \
    \   (char-upcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppivgwsiz.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppivgwsiz.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((vowels (string-&gt;list \"aeiouAEIOU\")))\n          (if (member\
    \ c vowels)\n              (let ((index (index-of c vowels)))\n              \
    \  (list-ref vowels (+ index 2)))\n              (swap-case c)))\n        c))\n\
    \  (list-&gt;string (map encode-char (string-&gt;list message))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnrw4tese.rkt:28:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 30\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (shift-char c)\n         (define\
    \ (shift-char-helper c)\n           (cond\n             [(char=? c #\\z) #\\b]\n\
    \             [(char=? c #\\y) #\\a]\n             [else (char+ c 2)]))\n    \
    \     (if (is-vowel? c)\n             (shift-char-helper c)\n             c))\n\
    \       (if (char-upper-case? c)\n           (char-downcase (shift-char c))\n\
    \           (char-upcase (shift-char c)))]\n      [else c]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3ywk7ha1.rkt:28:20: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp3ywk7ha1.rkt:28:20\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (if (= c #\\z)\n             #\\\
    a\n             (integer->char (+ (char->integer c) 1))))\n       (define (next-next-char\
    \ c)\n         (next-char (next-char c)))\n       (define (is-vowel? c)\n    \
    \     (member c '(#\\a #\\e #\\i #\\o #\\u)))\n       (define (swap-case c)\n\
    \         (if (char-upper-case? c)\n             (char-downcase c)\n         \
    \    (char-upcase c)))\n       (cond\n         [(is-vowel? c)\n          (next-next-char\
    \ c)]\n         [else\n          (swap-case c)])]\n      [else\n       c]))\n\
    \  (string-&gt;list message))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp394tzdlk.rkt:36:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 37\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((vowels (string-&gt;list \"aeiou\")))\n          (if (member c\
    \ vowels)\n              (list-ref vowels (+ (list-index c vowels) 2))\n     \
    \         c))\n        c))\n  (string-&gt;list\n   (string-join\n    (map (lambda\
    \ (c) (list-&gt;string (list (encode-char c))))\n         (map swap-case (string-&gt;list\
    \ message)))\n    \"\")))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpz1k951_c.rkt:29:9: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 32\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond ((char-alphabetic? c)\n\
    \           (if (char-lower-case? c)\n               (char-upcase c)\n       \
    \        (char-downcase c)))\n          ((char=? c #\\a) #\\c)\n          ((char=?\
    \ c #\\e) #\\g)\n          ((char=? c #\\i) #\\k)\n          ((char=? c #\\o)\
    \ #\\q)\n          ((char=? c #\\u) #\\w)\n          (else c)))\n  (string-map\
    \ encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp2wxav_ls.rkt:25:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2wxav_ls.rkt:25:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (vowel? c)\n  \
    \  (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n   \
    \     (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (next-vowel c)\n \
    \   (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n         \
    \ ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)))\n  (define (encode-char c)\n    (if (vowel? c)\n        (next-vowel\
    \ c)\n        (swap-case c)))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp0sldr7bf.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0sldr7bf.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (string-map\n\
    \     (lambda (c)\n       (cond\n         [(char-alphabetic? c)\n          (char-upcase\
    \ c)]\n         [(member c vowels)\n          (char-upcase (list-ref vowels (modulo\
    \ (+ (list-index c vowels) 2) 5)))]\n         [else\n          c]))\n     message)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfv1yr_z1.rkt:15:5: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpfv1yr_z1.rkt:15:5\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (list-ref (list #\\e #\\i #\\o #\\u #\\a #\\e #\\i #\\o #\\u #\\a)\n     \
    \             (modulo (+ (char-&gt;integer c) 2) 10))\n        c))\n  (string-&gt;list\n\
    \   (map (lambda (c) (encode-char (swap-case c)))\n        (string-&gt;list message))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpt8vsck5q.rkt:27:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 29\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (swap-case c)\n         (if (char-lower-case?\
    \ c)\n             (char-upcase c)\n             (char-downcase c)))\n       (define\
    \ (next-char c)\n         (integer->char (+ (char->integer c) 1)))\n       (define\
    \ (next-next-char c)\n         (integer->char (+ (char->integer c) 2)))\n    \
    \   (cond\n         [(is-vowel? c)\n          (next-next-char c)]\n         [else\n\
    \          (swap-case c)])]\n      [else\n       c]))\n  (string-&gt;list (string-map\
    \ encode-char message)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9yohwxp3.rkt:38:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 39\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n        \
    \  ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (swap-char c)\n    (swap-vowel\
    \ (swap-case c)))\n  (string-map swap-char message))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6jat777v.rkt:27:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6jat777v.rkt:27:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ([c (swap-case c)])\n          (if (or (char-ci=? c #\\a)\n    \
    \              (char-ci=? c #\\e)\n                  (char-ci=? c #\\i)\n    \
    \              (char-ci=? c #\\o)\n                  (char-ci=? c #\\u))\n   \
    \           (char-upcase (char-next (char-next c)))\n              c))\n     \
    \   c))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv36b4o6g.rkt:28:28: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpv36b4o6g.rkt:28:28\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (let ([c (char-upcase c)])\n         (cond\n           [(char=? c\
    \ #\\A) #\\C]\n           [(char=? c #\\E) #\\G]\n           [(char=? c #\\I)\
    \ #\\K]\n           [(char=? c #\\O) #\\Q]\n           [(char=? c #\\U) #\\W]\n\
    \           [(char=? c #\\Y) #\\A]\n           [else (char-upcase (char-next (char-next\
    \ c)))])\n         )]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp4z0xs9id.rkt:25:31: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmp4z0xs9id.rkt:25:31\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase (char-next (char-next\
    \ c)))\n            (char-downcase (char-next (char-next c))))\n        c))\n\
    \  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n        (if (or (char=?\
    \ c #\\a)\n                (char=? c #\\e)\n                (char=? c #\\i)\n\
    \                (char=? c #\\o)\n                (char=? c #\\u))\n         \
    \   (encode-char c)\n            c)\n        c))\n  (define (encode-message message)\n\
    \    (if (empty? message)\n        '()\n        (cons (encode-vowel (swap-case\
    \ (first message)))\n              (encode-message (rest message)))))\n  (list->string\
    \ (encode-message (string->list message))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppg2clupc.rkt:23:26: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmppg2clupc.rkt:23:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (cond\n         [(char-lower-case? c)\n          (char-upcase c)]\n\
    \         [(char-upper-case? c)\n          (char-downcase c)])]\n      [(char-vowel?\
    \ c)\n       (char-next (char-next c))]\n      [else c]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyf56hx_d.rkt:22:8: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpyf56hx_d.rkt:22:8\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (let ([message (string-upcase message)])\n    (for/fold\
    \ ([encoded-message \"\"]) ([c (in-string message)])\n      (cond\n        [(char-alphabetic?\
    \ c)\n         (cond\n           [(member c '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n\
    \            (string-append encoded-message (string (char-upcase (+ c 2))))]\n\
    \           [else\n            (string-append encoded-message (string c))])]\n\
    \        [else\n         (string-append encoded-message (string c))]))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy85zv5i9.rkt:31:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy85zv5i9.rkt:32:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy85zv5i9.rkt:33:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy85zv5i9.rkt:34:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpy85zv5i9.rkt:35:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (encode-vowel c)\n        (swap-case c)))\n\
    \  (define (encode-vowel c)\n    (define (next-vowel c)\n      (if (char-vowel?\
    \ c)\n          (next-vowel (next-char c))\n          c))\n    (define (next-char\
    \ c)\n      (integer->char (+ 1 (char->integer c))))\n    (define (prev-char c)\n\
    \      (integer->char (- (char->integer c) 1)))\n    (define (prev-vowel c)\n\
    \      (if (char-vowel? c)\n          (prev-vowel (prev-char c))\n          c))\n\
    \    (define (char-vowel? c)\n      (or (char=? c #\\a)\n          (char=? c #\\\
    e)\n          (char=? c #\\i)\n          (char=? c #\\o)\n          (char=? c\
    \ #\\u)))\n    (define (char-lower-case? c)\n      (and (>= (char->integer c)\
    \ (char->integer #\\a))\n           (<= (char->integer c) (char->integer #\\z))))\n\
    \    (define (char-upcase c)\n      (integer->char (- (char->integer c) 32)))\n\
    \    (define (char-downcase c)\n      (integer->char (+ (char->integer c) 32)))\n\
    \    (if (char-lower-case? c)\n        (prev-vowel (next-vowel c))\n        (prev-vowel\
    \ (next-vowel (char-downcase c)))))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmps4n8bhtx.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmps4n8bhtx.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpghg7pdft.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpghg7pdft.rkt:26:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-upcase message))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaedligy.rkt:21:4

    actual:     "TEST"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaedligy.rkt:22:4

    actual:     "MUDASIR"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaedligy.rkt:23:4

    actual:     "YES"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaedligy.rkt:24:4

    actual:     "THIS IS A MESSAGE"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphaedligy.rkt:25:4

    actual:     "I DONT KNOW WHAT TO WRITE"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (if (char-lower-case? c)\n            (char-upcase (char-next (char-next c)))\n\
    \            (char-downcase (char-next (char-next c))))\n        c))\n  (string-map\
    \ swap-case (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmphlhy9a2y.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmphlhy9a2y.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (char-next (char-next c))\n        c))\n  (string-map\
    \ swap-case (string-map encode-char message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsh8_asp5.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpsh8_asp5.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (let ((vowels (string-&gt;list \"aeiouAEIOU\")))\n      (if (member c vowels)\n\
    \          (list-ref vowels (+ 2 (list-index c vowels)))\n          c)))\n  (string-&gt;list\n\
    \   (map (lambda (c) (encode-char (swap-case c)))\n        (string-&gt;list message))))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpdwfl8gy1.rkt:25:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 26\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (map (lambda (c)\n         (if (char-alphabetic? c)\n  \
    \           (if (char-upper-case? c)\n                 (char-downcase c)\n   \
    \              (char-upcase c))\n             c))\n       message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oo8s7s.rkt:27:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"TEST\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oo8s7s.rkt:28:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Mudasir\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oo8s7s.rkt:29:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"YES\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp1oo8s7s.rkt:30:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"This is a message\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp1oo8s7s.rkt:31:4\n\nmap: contract violation\n  expected:\
    \ list?\n  given: \"I DoNt KnOw WhAt tO WrItE\"\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [(char=? c #\\A) #\\C]\n      [(char=? c #\\E) #\\G]\n      [(char=?\
    \ c #\\I) #\\K]\n      [(char=? c #\\O) #\\Q]\n      [(char=? c #\\U) #\\W]\n\
    \      [else (swap-case c)]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpv3vf3wk1.rkt:31:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv3vf3wk1.rkt:31:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (swap-vowel c)\n    (if (member c '(#\\a #\\e #\\\
    i #\\o #\\u))\n        (list-ref '(#\\c #\\d #\\f #\\g #\\h) (- (char->integer\
    \ c) 97))\n        c))\n  (string-map swap-vowel (string-map swap-case message)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpsfk8jf4s.rkt:24:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpsfk8jf4s.rkt:24:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8ypxhgwz.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8ypxhgwz.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (shift-char c)\n         (cond\n\
    \           [(char=? c #\\z) #\\b]\n           [(char=? c #\\y) #\\a]\n      \
    \     [else (char+ c 2)]))\n       (if (is-vowel? c)\n           (shift-char c)\n\
    \           (char-upcase c))]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa4xoknk2.rkt:27:18: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpa4xoknk2.rkt:27:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (or (char=? c #\\a)\n             (char=?\
    \ c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n      \
    \       (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\a\n             (next-char\
    \ (next-char c))))\n       (if (vowel? c)\n           (next-next-char c)\n   \
    \        (next-char c))]\n      [else c]))\n  (define (encode-string s)\n    (if\
    \ (string-empty? s)\n        \"\"\n        (string-append (string (encode-char\
    \ (string-ref s 0)))\n                       (encode-string (substring s 1)))))\n\
    \  (encode-string message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpslh3vxws.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpslh3vxws.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (encode-vowel c)\n         (define\
    \ (next-vowel c)\n           (cond\n             [(char=? c #\\a) #\\c]\n    \
    \         [(char=? c #\\e) #\\g]\n             [(char=? c #\\i) #\\k]\n      \
    \       [(char=? c #\\o) #\\q]\n             [(char=? c #\\u) #\\w]))\n      \
    \   (next-vowel c))\n       (define (encode-consonant c)\n       (define (next-consonant\
    \ c)\n         (cond\n           [(char=? c #\\b) #\\d]\n           [(char=? c\
    \ #\\c) #\\f]\n           [(char=? c #\\d) #\\h]\n           [(char=? c #\\f)\
    \ #\\j]\n           [(char=? c #\\g) #\\l]\n           [(char=? c #\\h) #\\n]\n\
    \           [(char=? c #\\j) #\\p]\n           [(char=? c #\\k) #\\r]\n      \
    \     [(char=? c #\\l) #\\t]\n           [(char=? c #\\m) #\\v]\n           [(char=?\
    \ c #\\n) #\\x]\n           [(char=? c #\\p) #\\z]\n           [(char=? c #\\\
    q) #\\b]\n           [(char=? c #\\r) #\\d]\n           [(char=? c #\\s) #\\f]\n\
    \           [(char=? c #\\t) #\\h]\n           [(char=? c #\\v) #\\j]\n      \
    \     [(char=? c #\\w) #\\l]\n           [(\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmprattez8t.rkt:53:12: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 54\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [else c]))\n  (define (encode-char c)\n    (swap-vowel (swap-case\
    \ c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpl2e5v27p.rkt:28:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpl2e5v27p.rkt:28:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((vowels '#(#\\a #\\e #\\i #\\o #\\u)))\n          (if (member c\
    \ vowels)\n              (let ((index (index-of c vowels)))\n                (if\
    \ (= index 4)\n                    (vector-ref vowels 0)\n                   \
    \ (vector-ref vowels (+ index 2))))\n              (swap-case c)))\n        c))\n\
    \  (string-join (map encode-char (string->list message))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97zkes5t.rkt:37:4\n\
    \nmember: not a proper list\n  in: '#(#\\a #\\e #\\i #\\o #\\u)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97zkes5t.rkt:38:4\n\
    \nmember: not a proper list\n  in: '#(#\\a #\\e #\\i #\\o #\\u)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97zkes5t.rkt:39:4\n\
    \nmember: not a proper list\n  in: '#(#\\a #\\e #\\i #\\o #\\u)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97zkes5t.rkt:40:4\n\
    \nmember: not a proper list\n  in: '#(#\\a #\\e #\\i #\\o #\\u)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp97zkes5t.rkt:41:4\n\
    \nmember: not a proper list\n  in: '#(#\\a #\\e #\\i #\\o #\\u)\n--------------------\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (let ([c (char-upcase c)])\n         (cond\n           [(char=? c\
    \ #\\A) #\\C]\n           [(char=? c #\\E) #\\G]\n           [(char=? c #\\I)\
    \ #\\K]\n           [(char=? c #\\O) #\\Q]\n           [(char=? c #\\U) #\\W]\n\
    \           [(char=? c #\\Y) #\\A]\n           [else (char-upcase (char-next (char-next\
    \ c)))])\n         )]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc3anafhc.rkt:25:31: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpc3anafhc.rkt:25:31\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a)\n       #\\c]\n      [(char=? c\
    \ #\\e)\n       #\\g]\n      [(char=? c #\\i)\n       #\\k]\n      [(char=? c\
    \ #\\o)\n       #\\q]\n      [(char=? c #\\u)\n       #\\w]\n      [else c]))\n\
    \  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1u0aa340.rkt:31:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1u0aa340.rkt:31:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (let ([c (char-upcase c)])\n         (cond\n           [(member c\
    \ '(#\\A #\\E #\\I #\\O #\\U))\n            (let ([c (char-downcase c)])\n   \
    \           (char-upcase (char-next (char-next c))))]\n           [else (char-downcase\
    \ c)]))]\n      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpariotrnf.rkt:21:28: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpariotrnf.rkt:21:28\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9p5oa_q6.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9p5oa_q6.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-char c)\n         (define\
    \ (next-char-helper c)\n           (if (char=? c #\\z)\n               #\\a\n\
    \               (char+ c 1)))\n         (if (is-vowel? c)\n             (next-char-helper\
    \ (next-char-helper c))\n             (next-char-helper c)))\n       (if (is-vowel?\
    \ c)\n           (char-upcase (next-char c))\n           (char-downcase c))]\n\
    \      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp35jyhy1c.rkt:27:16: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmp35jyhy1c.rkt:27:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [else c]))\n  (string-map (lambda (c) (swap-vowel (swap-case c)))\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1uw1aa31.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1uw1aa31.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (is-vowel? c)\n   \
    \   (or (char=? c #\\a)\n          (char=? c #\\e)\n          (char=? c #\\i)\n\
    \          (char=? c #\\o)\n          (char=? c #\\u)))\n    (define (swap-case\
    \ c)\n      (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (define (next-vowel c)\n      (cond\n        [(char=? c #\\u) #\\\
    a]\n        [(char=? c #\\a) #\\e]\n        [(char=? c #\\e) #\\i]\n        [(char=?\
    \ c #\\i) #\\o]\n        [(char=? c #\\o) #\\u]))\n    (cond\n      [(is-vowel?\
    \ c) (next-vowel c)]\n      [else (swap-case c)]))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmplze4_udc.rkt:22:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmplze4_udc.rkt:22:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      ((char=? c #\\a) #\\c)\n      ((char=? c #\\e) #\\g)\n     \
    \ ((char=? c #\\i) #\\k)\n      ((char=? c #\\o) #\\q)\n      ((char=? c #\\u)\
    \ #\\w)\n      (else c)))\n  (define (encode-char c)\n    (swap-vowel (swap-case\
    \ c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjtvk7pn3.rkt:28:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjtvk7pn3.rkt:28:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [else c]))\n  (string-map (lambda (c) (swap-vowel (swap-case c)))\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp9drgo7r6.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9drgo7r6.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpwrup7pxw.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwrup7pxw.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (string-map (lambda (c)\n                (cond\n       \
    \           [(char-alphabetic? c)\n                   (if (char-lower-case? c)\n\
    \                       (char-upcase c)\n                       (char-downcase\
    \ c))]\n                  [(char=? c #\\a) #\\c]\n                  [(char=? c\
    \ #\\e) #\\g]\n                  [(char=? c #\\i) #\\k]\n                  [(char=?\
    \ c #\\o) #\\q]\n                  [(char=? c #\\u) #\\w]\n                  [else\
    \ c]))\n              message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpa0fwow_w.rkt:14:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa0fwow_w.rkt:14:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpn1fte01_.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpn1fte01_.rkt:26:3\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-vowel c)\n         (cond\n           [(is-vowel?\
    \ c)\n            (next-char (next-char c))]\n           [else\n            (next-char\
    \ c)]))\n       (if (is-vowel? c)\n           (next-vowel c)\n           (next-char\
    \ c))]\n      [else\n       c]))\n  (define (encode-string s)\n    (list->string\
    \ (map encode-char (string->list s))))\n  (encode-string message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprh8d6ahu.rkt:41:4

    actual:     "UFTU"

    expected:   "tgst"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprh8d6ahu.rkt:42:4

    actual:     "Nwectks"

    expected:   "mWDCSKR"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprh8d6ahu.rkt:43:4

    actual:     "ZFT"

    expected:   "ygs"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprh8d6ahu.rkt:44:4

    actual:     "Uikt kt c ngttchg"

    expected:   "tHKS KS C MGSSCGG"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprh8d6ahu.rkt:45:4

    actual:     "J EqOu LoPx XiBu uP XsJuF"

    expected:   "k dQnT kNqW wHcT Tq wRkTg"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (if (char-vowel? c)\n        (char-next (char-next c))\n        c))\n  (string-map\
    \ encode-char (string-map swap-case message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeu9jmu09.rkt:19:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpeu9jmu09.rkt:19:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-downcase (char-upcase c))\n\
    \            (char-upcase (char-downcase c)))\n        c))\n  (define (encode-vowel\
    \ c)\n    (cond ((char=? c #\\a) #\\c)\n          ((char=? c #\\e) #\\g)\n   \
    \       ((char=? c #\\i) #\\k)\n          ((char=? c #\\o) #\\q)\n          ((char=?\
    \ c #\\u) #\\w)\n          (else c)))\n  (define (encode-letter c)\n    (encode-vowel\
    \ (encode-char c)))\n  (string-map encode-letter message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpgwo8xmx3.rkt:35:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgwo8xmx3.rkt:35:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (let ((c (swap-case c)))\n          (if (or (char=? c #\\a) (char=? c\
    \ #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (swap-case\
    \ (char-next (char-next c)))\n              c))\n        c))\n  (string-map encode-char\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpivvs8na4.rkt:24:26: char-next: unbound identifier\n  in: char-next\n\
    \  location...:\n   /tmp/tmpivvs8na4.rkt:24:26\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (encode-char c)\n\
    \    (define (is-vowel? c)\n      (or (char=? c #\\a) (char=? c #\\e) (char=?\
    \ c #\\i) (char=? c #\\o) (char=? c #\\u)))\n    (if (is-vowel? c)\n        (swap-case\
    \ (char-upcase c))\n        (swap-case c)))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpeg89ex4o.rkt:24:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpeg89ex4o.rkt:24:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (next-char c)\n         (integer->char (+ (char->integer\
    \ c) 1)))\n       (define (next-next-char c)\n         (integer->char (+ (char->integer\
    \ c) 2)))\n       (define (swap-case c)\n         (if (char-upper-case? c)\n \
    \            (char-downcase c)\n             (char-upcase c)))\n       (cond\n\
    \         [(is-vowel? c)\n          (next-next-char c)]\n         [else\n    \
    \      (swap-case c)])]\n      [else\n       c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpcq2t1v02.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcq2t1v02.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpjjye21_j.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjjye21_j.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-vowel c)\n    (if (char-alphabetic? c)\n\
    \        (if (char-lower-case? c)\n            (char\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpztcev3bo.rkt:65:12: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 66\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-alphabetic? c)\n  \
    \      (if (char-lower-case? c)\n            (char-upcase c)\n            (char-downcase\
    \ c))\n        c))\n  (define (encode-char c)\n    (if (char-vowel? c)\n     \
    \   (char-next (char-next c))\n        c))\n  (string-map encode-char (string-map\
    \ swap-case message)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"tgst\"\
    )\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate\
    \ \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS\
    \ KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpbe30fypw.rkt:21:9: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpbe30fypw.rkt:21:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (cond\n      [(char-upper-case?\
    \ c) (char-downcase c)]\n      [(char-lower-case? c) (char-upcase c)]\n      [else\
    \ c]))\n  (define (encode-char c)\n    (cond\n      [(char=? c #\\a) #\\c]\n \
    \     [(char=? c #\\e) #\\g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\\
    o) #\\q]\n      [(char=? c #\\u) #\\w]\n      [(char=? c #\\A) #\\C]\n      [(char=?\
    \ c #\\E) #\\G]\n      [(char=? c #\\I) #\\K]\n      [(char=? c #\\O) #\\Q]\n\
    \      [(char=? c #\\U) #\\W]\n      [else c]))\n  (define (encode-string s)\n\
    \    (if (string-empty? s)\n        \"\"\n        (string-append (encode-char\
    \ (string-ref s 0))\n                       (encode-string (substring s 1)))))\n\
    \  (encode-string (string-map swap-case message)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpoftfizbs.rkt:33:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpoftfizbs.rkt:33:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (or (char=? c #\\a)\n           \
    \  (char=? c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n\
    \             (char=? c #\\u)))\n       (define (next-vowel c)\n         (cond\n\
    \           [(char=? c #\\a) #\\c]\n           [(char=? c #\\e) #\\g]\n      \
    \     [(char=? c #\\i) #\\k]\n           [(char=? c #\\o) #\\q]\n           [(char=?\
    \ c #\\u) #\\w]))\n       (if (is-vowel? c)\n           (next-vowel c)\n     \
    \      (char-upcase c))]\n      [else c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpw_o_wiyg.rkt:34:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw_o_wiyg.rkt:34:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (is-vowel? c)\n         (member c '(#\\a #\\e #\\i #\\o #\\\
    u)))\n       (define (encode-vowel c)\n         (define (next-vowel c)\n     \
    \      (cond\n             [(equal? c #\\a) #\\c]\n             [(equal? c #\\\
    e) #\\g]\n             [(equal? c #\\i) #\\k]\n             [(equal? c #\\o) #\\\
    q]\n             [(equal? c #\\u) #\\w]))\n         (next-vowel (next-vowel c)))\n\
    \       (if (is-vowel? c)\n           (encode-vowel c)\n           (char-upcase\
    \ c))]\n      [else c]))\n  (string-map encode-char message))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal?\
    \ (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"\
    mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp99tt219s.rkt:32:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp99tt219s.rkt:32:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (let ([c (char-upcase c)])\n\
    \      (cond\n        [(char-alphabetic? c)\n         (define (next-char c)\n\
    \           (if (= c #\\Z)\n               #\\A\n               (char (+ c 1))))\n\
    \         (define (next-next-char c)\n           (if (= c #\\Y)\n            \
    \   #\\B\n               (next-char (next-char c))))\n         (cond\n       \
    \    [(char-vowel? c)\n            (next-next-char c)]\n           [else\n   \
    \         (next-char c)])]\n        [else\n         c])))\n  (define (encode-string\
    \ s)\n    (string-join (map encode-char (string->list s))))\n  (encode-string\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpzbxxv6u_.rkt:21:16: char: unbound identifier\n  in: char\n  location...:\n\
    \   /tmp/tmpzbxxv6u_.rkt:21:16\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upcase? c)\n      \
    \  (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n \
    \   (cond\n      [(char-alphabetic? c)\n       (swap-case c)]\n      [(char=?\
    \ c #\\a)\n       #\\c]\n      [(char=? c #\\e)\n       #\\g]\n      [(char=?\
    \ c #\\i)\n       #\\k]\n      [(char=? c #\\o)\n       #\\q]\n      [(char=?\
    \ c #\\u)\n       #\\w]\n      [else\n       c]))\n  (string-map encode-char message))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n\
    \    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate\
    \ \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n\
    \    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n\
    \    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqie4yatj.rkt:15:9: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpqie4yatj.rkt:15:9\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpznou9dc_.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpznou9dc_.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpnzwl3ogd.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpnzwl3ogd.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (vowel? c)\n         (or (char=? c #\\a)\n             (char=?\
    \ c #\\e)\n             (char=? c #\\i)\n             (char=? c #\\o)\n      \
    \       (char=? c #\\u)))\n       (define (next-char c)\n         (if (char=?\
    \ c #\\z)\n             #\\a\n             (char+ c 1)))\n       (define (next-next-char\
    \ c)\n         (if (char=? c #\\y)\n             #\\b\n             (next-char\
    \ (next-char c))))\n       (if (vowel? c)\n           (next-next-char c)\n   \
    \        (next-char c))]\n      [else c]))\n  (define (encode-string s)\n    (if\
    \ (string-empty? s)\n        \"\"\n        (string-append (encode-char (string-ref\
    \ s 0))\n                       (encode-string (substring s 1)))))\n  (encode-string\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqx3zmzy0.rkt:26:14: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpqx3zmzy0.rkt:26:14\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-lower-case? c)\n  \
    \      (char-upcase c)\n        (char-downcase c)))\n  (define (swap-vowel c)\n\
    \    (cond\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\g]\n     \
    \ [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=? c #\\u)\
    \ #\\w]\n      [else c]))\n  (string-map (lambda (c) (swap-vowel (swap-case c)))\
    \ message))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ encode))\n    (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal?\
    \ (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\")\
    \ \"ygs\")\n    (check-equal? (candidate \"This is a message\") \"tHKS KS C MGSSCGG\"\
    )\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT\
    \ Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi7ld0eci.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpi7ld0eci.rkt:26:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (cond\n    [(empty? message) empty]\n    [else (cons (encode-char\
    \ (first message)) (encode (rest message)))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate encode))\n    (check-equal? (candidate\
    \ \"TEST\") \"tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n\
    \    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate\
    \ \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate\
    \ \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpc7mpr29f.rkt:16:17: encode-char: unbound identifier\n  in: encode-char\n\
    \  location...:\n   /tmp/tmpc7mpr29f.rkt:16:17\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (define (next-char c)\n         (cond\n           [(char=? c #\\\
    z) #\\a]\n           [(char=? c #\\Z) #\\A]\n           [else (char+ c 1)]))\n\
    \       (define (next-next-char c)\n         (cond\n           [(char=? c #\\\
    y) #\\a]\n           [(char=? c #\\Y) #\\A]\n           [else (next-char (next-char\
    \ c))]))\n       (cond\n         [(char-vowel? c) (next-next-char c)]\n      \
    \   [else (next-char c)])]\n      [else c]))\n  (define (encode-string s)\n  \
    \  (if (string-empty? s)\n        \"\"\n        (string-append (encode-string\
    \ (substring s 1))\n                       (string (encode-char (string-ref s\
    \ 0))))))\n  (encode-string message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyh0zi91y.rkt:21:18: char+: unbound identifier\n  in: char+\n  location...:\n\
    \   /tmp/tmpyh0zi91y.rkt:21:18\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (define (vowel? c)\n      (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n    (define (next-char c)\n      (integer->char\
    \ (+ (char->integer c) 1)))\n    (define (next-vowel c)\n      (cond ((equal?\
    \ c #\\u) #\\a)\n            (else (next-char c))))\n    (define (swap-case c)\n\
    \      (if (char-upcase? c)\n          (char-downcase c)\n          (char-upcase\
    \ c)))\n    (cond ((vowel? c) (next-vowel c))\n          (else (swap-case c))))\n\
    \  (map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpd1xuroe3.rkt:23:11: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpd1xuroe3.rkt:23:11\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (swap-case c)\n    (if (char-upper-case? c)\n  \
    \      (char-downcase c)\n        (char-upcase c)))\n  (define (encode-char c)\n\
    \    (if (vowel? c)\n        (encode-vowel c)\n        (swap-case c)))\n  (define\
    \ (vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (encode-vowel\
    \ c)\n    (define (next-vowel c)\n      (cond\n        [(equal? c #\\a) #\\e]\n\
    \        [(equal? c #\\e) #\\i]\n        [(equal? c #\\i) #\\o]\n        [(equal?\
    \ c #\\o) #\\u]\n        [(equal? c #\\u) #\\a]))\n    (swap-case (next-vowel\
    \ c)))\n  (string-map encode-char message))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate encode))\n    (check-equal? (candidate \"TEST\") \"\
    tgst\")\n    (check-equal? (candidate \"Mudasir\") \"mWDCSKR\")\n    (check-equal?\
    \ (candidate \"YES\") \"ygs\")\n    (check-equal? (candidate \"This is a message\"\
    ) \"tHKS KS C MGSSCGG\")\n    (check-equal? (candidate \"I DoNt KnOw WhAt tO WrItE\"\
    ) \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpe5hzfaip.rkt:33:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpe5hzfaip.rkt:33:3\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Write a function that takes a message, and encodes\
    \ in such a \n;; way that it swaps case of all letters, replaces all vowels in\
    \ \n;; the message with the letter that appears 2 places ahead of that \n;; vowel\
    \ in the english alphabet. \n;; Assume only letters. \n;; Examples:\n;; >>> encode('test')\n\
    ;; 'TGST'\n;; >>> encode('This is a message')\n;; 'tHKS KS C MGSSCGG'\n(define\
    \ (encode message)\n  (define (encode-char c)\n    (cond\n      [(char-alphabetic?\
    \ c)\n       (if (char-lower-case? c)\n           (char-upcase c)\n          \
    \ (char-downcase c))]\n      [(char=? c #\\a) #\\c]\n      [(char=? c #\\e) #\\\
    g]\n      [(char=? c #\\i) #\\k]\n      [(char=? c #\\o) #\\q]\n      [(char=?\
    \ c #\\u) #\\w]\n      [else c]))\n  (string-map encode-char message))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encode))\n   \
    \ (check-equal? (candidate \"TEST\") \"tgst\")\n    (check-equal? (candidate \"\
    Mudasir\") \"mWDCSKR\")\n    (check-equal? (candidate \"YES\") \"ygs\")\n    (check-equal?\
    \ (candidate \"This is a message\") \"tHKS KS C MGSSCGG\")\n    (check-equal?\
    \ (candidate \"I DoNt KnOw WhAt tO WrItE\") \"k dQnT kNqW wHcT Tq wRkTg\")\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppbdfdbzl.rkt:26:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppbdfdbzl.rkt:26:3\n"
  stdout: ''
