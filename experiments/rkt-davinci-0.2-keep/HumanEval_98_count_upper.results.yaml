name: HumanEval_98_count_upper
language: racket
results:
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7ns3gnu.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi7ns3gnu.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7ns3gnu.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi7ns3gnu.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7ns3gnu.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpi7ns3gnu.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpi7ns3gnu.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpew9bipuq.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpew9bipuq.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpew9bipuq.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpew9bipuq.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpew9bipuq.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpew9bipuq.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpew9bipuq.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (vowel? (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n\
    \          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpup2rmnw1.rkt:11:27: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpup2rmnw1.rkt:11:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ i)\n    (= (remainder i 2) 0))\n  (define (count_upper_helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_upper? (first s))\n       (if (is_vowel? (first\
    \ s))\n           (+ 1 (count_upper_helper (rest s) (+ i 1)))\n           (count_upper_helper\
    \ (rest s) (+ i 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n\
    \  (count_upper_helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwfpko7k.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjwfpko7k.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwfpko7k.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjwfpko7k.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwfpko7k.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjwfpko7k.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjwfpko7k.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels s)\n    (cond\n   \
    \   [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel? (first s)))\n\
    \       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (filter even? (enumerate s))))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpng4rmxlm.rkt:19:37: enumerate: unbound identifier\n  in: enumerate\n\
    \  location...:\n   /tmp/tmpng4rmxlm.rkt:19:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (add1 (length s))))\n       (count_upper-helper\
    \ (rest s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6knl8nl.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo6knl8nl.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6knl8nl.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo6knl8nl.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6knl8nl.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo6knl8nl.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6knl8nl.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([n (string-length s)])\n    (define (count_upper_helper s i)\n      (cond\n\
    \        [(= i n) 0]\n        [(and (even? i) (char-upper-case? (string-ref s\
    \ i)))\n         (+ 1 (count_upper_helper s (+ i 1)))]\n        [else (count_upper_helper\
    \ s (+ i 1))]))\n    (count_upper_helper s 0)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjh3rrpa7.rkt:23:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjh3rrpa7.rkt:25:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpjh3rrpa7.rkt:26:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nnlvdsc.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8nnlvdsc.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nnlvdsc.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8nnlvdsc.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nnlvdsc.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8nnlvdsc.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8nnlvdsc.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbvnutup0.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpbvnutup0.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b11kucl.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5b11kucl.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b11kucl.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5b11kucl.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b11kucl.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp5b11kucl.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp5b11kucl.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond ((= i (string-length s)) 0)\n          ((=\
    \ (modulo i 2) 0)\n           (cond ((char-upper-case? (string-ref s i)) (+ 1\
    \ (count_upper_helper s (+ i 1))))\n                 (else (count_upper_helper\
    \ s (+ i 1)))))\n          (else (count_upper_helper s (+ i 1)))))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpapg_opxx.rkt:22:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpapg_opxx.rkt:24:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpapg_opxx.rkt:25:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-even-indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is_even? (string-length s))\n \
    \           (is_upper? (string-ref s 0))\n            (is_vowel? (string-ref s\
    \ 0)))\n       (+ 1 (count-upper-vowels-even-indices (substring s 1)))]\n    \
    \  [else (count-upper-vowels-even-indices (substring s 1))]))\n  (count-upper-vowels-even-indices\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgt84d_n.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphgt84d_n.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphgt84d_n.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgt84d_n.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphgt84d_n.rkt:34:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphgt84d_n.rkt:35:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphgt84d_n.rkt:36:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn8eo685m.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpn8eo685m.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zv3ekaw.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zv3ekaw.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zv3ekaw.rkt:22:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zv3ekaw.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zv3ekaw.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zv3ekaw.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zv3ekaw.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (vowel? (first s))\n            (even? (length s)))\n\
    \       (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5s29ijk4.rkt:13:13: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp5s29ijk4.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond [(empty? s) 0]\n          [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)) (is_even? (rest s)))\n           (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n          [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlxp6pqj.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdlxp6pqj.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlxp6pqj.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdlxp6pqj.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlxp6pqj.rkt:31:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdlxp6pqj.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdlxp6pqj.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i acc)\n    (cond\n      [(empty? s) acc]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (count_upper-helper (rest s)\
    \ (+ i 1) (+ acc 1))]\n      [else (count_upper-helper (rest s) (+ i 1) acc)]))\n\
    \  (count_upper-helper s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpim6hv37r.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpim6hv37r.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpim6hv37r.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpim6hv37r.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpim6hv37r.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpim6hv37r.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpim6hv37r.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrlysjc4.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcrlysjc4.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrlysjc4.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcrlysjc4.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrlysjc4.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcrlysjc4.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcrlysjc4.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (+ 1 (count_upper_helper (rest s)\
    \ (+ i 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpab1kcptp.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpab1kcptp.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpab1kcptp.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpab1kcptp.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpab1kcptp.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpab1kcptp.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpab1kcptp.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0))\n          (char-upper-case?\
    \ (string-ref s 0)))\n     (+ 1 (count_upper (substring s 2)))]\n    [else (count_upper\
    \ (substring s 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n\
    \    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"\
    dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphu4it7v5.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmphu4it7v5.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref s\
    \ 0)) (char-upper-case? (string-ref s 0)))\n     (+ 1 (count_upper (substring\
    \ s 1)))]\n    [else (count_upper (substring s 1))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphdytauk3.rkt:11:37: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmphdytauk3.rkt:11:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper_helper s i acc)\n    (if (or\
    \ (null? s) (= i (string-length s)))\n        acc\n        (if (and (is_upper?\
    \ (string-ref s i)) (is_vowel? (string-ref s i)))\n            (count_upper_helper\
    \ s (+ i 2) (+ acc 1))\n            (count_upper_helper s (+ i 2) acc))))\n  (count_upper_helper\
    \ s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdhv0h8s0.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpdhv0h8s0.rkt:27:4\n\nstring-ref:\
    \ index is out of range\n  index: 8\n  valid range: [0, 6]\n  string: \"abcdefg\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdhv0h8s0.rkt:29:4\n\nstring-ref: index is out of range\n \
    \ index: 2\n  valid range: [0, 0]\n  string: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdhv0h8s0.rkt:30:4\n\nstring-ref:\
    \ index is out of range\n  index: 2\n  valid range: [0, 0]\n  string: \"U\"\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdhv0h8s0.rkt:32:4\nactual:     0\nexpected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E\
    \ #\\I #\\O #\\U))))\n  (define (even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-even-indexes s)\n    (cond\n      [(empty? s) 0]\n      [(even?\
    \ (string-length s))\n       (+ (if (is_upper (string-ref s 0)) 1 0)\n       \
    \   (count-upper-even-indexes (substring s 1)))]\n      [else\n       (count-upper-even-indexes\
    \ (substring s 1))]))\n  (count-upper-even-indexes s))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3lswc90.rkt:29:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu3lswc90.rkt:30:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3lswc90.rkt:31:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3lswc90.rkt:32:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpu3lswc90.rkt:33:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3lswc90.rkt:34:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpu3lswc90.rkt:35:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpk_fkp4a5.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpk_fkp4a5.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (char-upper-case? c))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (define (count-upper-vowels-in-even-indices-iter\
    \ s i count)\n      (cond\n        [(empty? s) count]\n        [(and (is_even?\
    \ i) (is_upper? (first s)) (is_vowel? (first s)))\n         (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1) (+ count 1))]\n        [else (count-upper-vowels-in-even-indices-iter\
    \ (rest s) (+ i 1) count)]))\n    (count-upper-vowels-in-even-indices-iter s 0\
    \ 0))\n  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_ajn7y.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqt_ajn7y.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_ajn7y.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqt_ajn7y.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_ajn7y.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqt_ajn7y.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqt_ajn7y.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper_vowels_in_even_indices s)\n\
    \    (cond\n      [(empty? s) 0]\n      [(and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (+ 1 (count_upper_vowels_in_even_indices (rest s)))]\n \
    \     [else (count_upper_vowels_in_even_indices (rest s))]))\n  (count_upper_vowels_in_even_indices\
    \ (rest s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqyh7hfe8.rkt:26:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqyh7hfe8.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqyh7hfe8.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqyh7hfe8.rkt:29:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqyh7hfe8.rkt:30:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqyh7hfe8.rkt:31:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqyh7hfe8.rkt:32:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (vowel? (first s))) (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4y5gi22g.rkt:12:23: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp4y5gi22g.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(and (even? i) (vowel? (string-ref s i)))\n       (count_upper_helper\
    \ s (+ i 1) (+ acc 1))]\n      [else (count_upper_helper s (+ i 1) acc)]))\n \
    \ (count_upper_helper s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuqdz5whf.rkt:12:23: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpuqdz5whf.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyp2w9dk.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfyp2w9dk.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyp2w9dk.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfyp2w9dk.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyp2w9dk.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfyp2w9dk.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfyp2w9dk.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s)) (even? (add1 i))) (count_upper_helper (rest s) (add1 i))]\n     \
    \ [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper s 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzy22b3zm.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzy22b3zm.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzy22b3zm.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzy22b3zm.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzy22b3zm.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzy22b3zm.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzy22b3zm.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (string-length s)) (vowel? (string-ref s\
    \ 0))) (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps1vj7plv.rkt:11:37: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmps1vj7plv.rkt:11:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (vowel? (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n\
    \          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkmx0hev6.rkt:11:27: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpkmx0hev6.rkt:11:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4pqjkpm.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy4pqjkpm.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4pqjkpm.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy4pqjkpm.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4pqjkpm.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpy4pqjkpm.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpy4pqjkpm.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(= i 0) (+\
    \ (count_upper-helper (rest s) 1)\n                  (if (member (first s) '(#\\\
    A #\\E #\\I #\\O #\\U)) 1 0))]\n      [else (count_upper-helper (rest s) (- i\
    \ 1))]))\n  (count_upper-helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp12lnirt_.rkt:22:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12lnirt_.rkt:23:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12lnirt_.rkt:24:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12lnirt_.rkt:25:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12lnirt_.rkt:26:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp12lnirt_.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp12lnirt_.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpei29cq90.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpei29cq90.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length\
    \ s))) (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpffyzegzr.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpffyzegzr.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(even?\
    \ i)\n       (cond\n         [(member (first s) '(#\\A #\\E #\\I #\\O #\\U))\n\
    \          (loop (rest s) (+ i 1) (+ count 1))]\n         [else (loop (rest s)\
    \ (+ i 1) count)])]\n      [else (loop (rest s) (+ i 1) count)])))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvgvv52rf.rkt:18:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpvgvv52rf.rkt:18:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcrww_vco.rkt:12:23: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpcrww_vco.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count_upper-helper s i acc)\n   \
    \ (cond\n      [(empty? s) acc]\n      [(and (is_even? i) (is_upper? (first s))\
    \ (is_vowel? (first s)))\n       (count_upper-helper (rest s) (+ i 1) (+ acc 1))]\n\
    \      [else (count_upper-helper (rest s) (+ i 1) acc)]))\n  (count_upper-helper\
    \ s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzeiw7ufw.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzeiw7ufw.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzeiw7ufw.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzeiw7ufw.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzeiw7ufw.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzeiw7ufw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzeiw7ufw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvi4zm0f_.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpvi4zm0f_.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) 0]\n      [(= (remainder\
    \ i 2) 0)\n       (cond\n         [(char-upper-case? (first s)) (+ 1 (count_upper-helper\
    \ (rest s) (+ i 1)))]\n         [else (count_upper-helper (rest s) (+ i 1))])]\n\
    \      [else (count_upper-helper (rest s) (+ i 1))]))\n  (count_upper-helper s\
    \ 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6p012by.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6p012by.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6p012by.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6p012by.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6p012by.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd6p012by.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd6p012by.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5agj_ag.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5agj_ag.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5agj_ag.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5agj_ag.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5agj_ag.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt5agj_ag.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5agj_ag.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphsxgprd9.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmphsxgprd9.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (char-upcase c))\n  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-even? n)\n    (= (remainder n 2)\
    \ 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is-even? (length s))\n            (is-upper? (first s))\n\
    \            (is-vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp375z3gxj.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is-upper? (first s)) (+ 1 (count-upper-vowels (rest s)))]\n \
    \     [else (count-upper-vowels (rest s))]))\n  (define (even-indices s)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= (modulo (length s) 2) 0) (cons (first\
    \ s) (even-indices (rest s)))]\n      [else (even-indices (rest s))]))\n  (count-upper-vowels\
    \ (even-indices s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpozvu307v.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(is_upper? (first s))\n       (+ 1 (count-upper-even-indices\
    \ (rest s)))]\n      [else\n       (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (rest (rest s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph8yldosl.rkt:26:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph8yldosl.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph8yldosl.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph8yldosl.rkt:29:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph8yldosl.rkt:30:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph8yldosl.rkt:31:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph8yldosl.rkt:32:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count_upper_helper s n)\n    (cond\n      [(empty? s) n]\n      [(is_even?\
    \ n) (count_upper_helper (rest s) (+ n (if (is_upper? (first s)) 1 0)))]\n   \
    \   [else (count_upper_helper (rest s) n)]))\n  (count_upper_helper s 0))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfcsjxzz.rkt:26:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgfcsjxzz.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfcsjxzz.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgfcsjxzz.rkt:29:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfcsjxzz.rkt:30:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgfcsjxzz.rkt:31:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpgfcsjxzz.rkt:32:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count_upper-helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_even? i)\n       (if (and (is_upper? (first\
    \ s)) (is_vowel? (first s)))\n           (+ 1 (count_upper-helper (rest s) (+\
    \ i 1)))\n           (count_upper-helper (rest s) (+ i 1)))]\n      [else (count_upper-helper\
    \ (rest s) (+ i 1))]))\n  (count_upper-helper s 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d60pr9j.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d60pr9j.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d60pr9j.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d60pr9j.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d60pr9j.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d60pr9j.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d60pr9j.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3kr66pt5.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp3kr66pt5.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (remainder i 2)))\n       (count_upper_helper\
    \ (rest s) (+ i 1))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n \
    \ (count_upper_helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qyqloy9.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8qyqloy9.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qyqloy9.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8qyqloy9.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qyqloy9.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8qyqloy9.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8qyqloy9.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i count)\n    (cond ((= i (string-length s)) count)\n\
    \          ((and (char-upper-case? (string-ref s i))\n                (vowel?\
    \ (string-ref s i)))\n           (count_upper-helper s (+ i 2) (+ count 1)))\n\
    \          (else (count_upper-helper s (+ i 2) count))))\n  (count_upper-helper\
    \ s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu4hp53dp.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpu4hp53dp.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (even? i) (vowel? (string-ref s i)))\n           (loop (+ i 1) (+ count\
    \ 1))]\n          [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbz37r14l.rkt:11:27: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpbz37r14l.rkt:11:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (even? (string-length s))\n          (vowel? (string-ref\
    \ s 0))\n          (char-upper-case? (string-ref s 0)))\n     (+ 1 (count_upper\
    \ (substring s 1)))]\n    [else (count_upper (substring s 1))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfumv0zl9.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpfumv0zl9.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (if (empty? s)\n        0\n        (if (and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n            (+ 1 (count-upper-vowels-in-even-indices (rest (rest\
    \ s))))\n            (count-upper-vowels-in-even-indices (rest (rest s))))))\n\
    \  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpb8cnwtar.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb8cnwtar.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb8cnwtar.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb8cnwtar.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb8cnwtar.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpb8cnwtar.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpb8cnwtar.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s)))\n     (+\
    \ 1 (count_upper (rest s)))]\n    [else (count_upper (rest s))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0oasxwc4.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp0oasxwc4.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xn82312.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6xn82312.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xn82312.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6xn82312.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xn82312.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6xn82312.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6xn82312.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (cond\n      [(empty? s) 0]\n      [(member (string-ref\
    \ s 0) '(\"A\" \"E\" \"I\" \"O\" \"U\"))\n       (+ 1 (count_upper (substring\
    \ s 2)))]\n      [else (count_upper (substring s 2))])))\n</code>\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyrx8wx6d.rkt:15:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpyrx8wx6d.rkt:15:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpym9sju88.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpym9sju88.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpym9sju88.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpym9sju88.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpym9sju88.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpym9sju88.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpym9sju88.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh7rli1k.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmh7rli1k.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh7rli1k.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmh7rli1k.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh7rli1k.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmh7rli1k.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmh7rli1k.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper-helper s i)\n    (if (or (=\
    \ i (string-length s))\n            (not (is_upper? (string-ref s i))))\n    \
    \    0\n        (+ (if (is_vowel? (string-ref s i)) 1 0)\n           (count_upper-helper\
    \ s (+ i 2)))))\n  (count_upper-helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjlw2rd4.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpfjlw2rd4.rkt:29:4\n\nstring-ref:\
    \ index is out of range\n  index: 2\n  valid range: [0, 0]\n  string: \"B\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfjlw2rd4.rkt:30:4\n\nstring-ref: index is out of range\n \
    \ index: 2\n  valid range: [0, 0]\n  string: \"U\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfjlw2rd4.rkt:32:4\nactual:\
    \     0\nexpected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (count-if (lambda (c) (and (vowel? c) (even? (string-index\
    \ s c)))) s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkxcz6zu0.rkt:10:5: count-if: unbound identifier\n  in: count-if\n\
    \  location...:\n   /tmp/tmpkxcz6zu0.rkt:10:5\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp14bb0zmh.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp14bb0zmh.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp14bb0zmh.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp14bb0zmh.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp14bb0zmh.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp14bb0zmh.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp14bb0zmh.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (vowel? (first s))\n            (even? (string-index\
    \ s (first s))))\n       (loop (rest s) (+ count 1))]\n      [else (loop (rest\
    \ s) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5jqcdmt0.rkt:13:13: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp5jqcdmt0.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfm5kkffo.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfm5kkffo.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfm5kkffo.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfm5kkffo.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfm5kkffo.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpfm5kkffo.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpfm5kkffo.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(is_upper? (first s)) (count-upper-vowels (rest s) (+ i 1))]\n\
    \      [else (count-upper-vowels (rest s) i)]))\n  (count-upper-vowels s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd4vvo1pc.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd4vvo1pc.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd4vvo1pc.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd4vvo1pc.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd4vvo1pc.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd4vvo1pc.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd4vvo1pc.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (is_even? i)\n    (= (modulo i 2) 0))\n\
    \  (define (count-upper-vowels-in-even-indices s)\n    (cond [(empty? s) 0]\n\
    \          [(and (is_even? (first s)) (is_upper? (second s)) (is_vowel? (second\
    \ s)))\n           (+ 1 (count-upper-vowels-in-even-indices (rest (rest s))))]\n\
    \          [else (count-upper-vowels-in-even-indices (rest s))]))\n  (count-upper-vowels-in-even-indices\
    \ (string-indexes s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n\
    \    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"\
    dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpsac3zl8l.rkt:20:39: string-indexes: unbound identifier\n  in: string-indexes\n\
    \  location...:\n   /tmp/tmpsac3zl8l.rkt:20:39\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i)\n                (member (string-upcase (first s)) '(\"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n           (loop (rest s) (+ i 1) (+ count 1))]\n        \
    \  [else (loop (rest s) (+ i 1) count)])))\n</code>\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprlihurdd.rkt:15:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmprlihurdd.rkt:15:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjsyl1o60.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjsyl1o60.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjsyl1o60.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjsyl1o60.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjsyl1o60.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjsyl1o60.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjsyl1o60.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s)) (even? (add1 i)))\n       (count_upper_helper (rest s) (add1 i))]\n\
    \      [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp86yjckp5.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp86yjckp5.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp86yjckp5.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp86yjckp5.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp86yjckp5.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp86yjckp5.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp86yjckp5.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s i)\n    (cond ((empty? s)\
    \ i)\n          ((is_upper? (first s))\n           (count-upper-vowels (rest s)\
    \ (+ i 1)))\n          (else (count-upper-vowels (rest s) i))))\n  (count-upper-vowels\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphe5lrp8e.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphe5lrp8e.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphe5lrp8e.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphe5lrp8e.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphe5lrp8e.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphe5lrp8e.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphe5lrp8e.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (is-even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty? s)\
    \ 0]\n      [(and (is-even? (length s)) (is-upper? (first s)) (is-vowel? (first\
    \ s)))\n       (+ 1 (count-upper-vowels-in-even-indices (rest s)))]\n      [else\
    \ (count-upper-vowels-in-even-indices (rest s))]))\n  (count-upper-vowels-in-even-indices\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:28:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:29:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt2qxibjf.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuia04kpr.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuia04kpr.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuia04kpr.rkt:22:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuia04kpr.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuia04kpr.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuia04kpr.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuia04kpr.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (if (or (= i (string-length s)) (odd? i))\n  \
    \      0\n        (if (or (char=? (string-ref s i) #\\A)\n                (char=?\
    \ (string-ref s i) #\\E)\n                (char=? (string-ref s i) #\\I)\n   \
    \             (char=? (string-ref s i) #\\O)\n                (char=? (string-ref\
    \ s i) #\\U))\n            (+ 1 (count_upper_helper s (+ i 1)))\n            (count_upper_helper\
    \ s (+ i 1)))))\n  (count_upper_helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxtxkwp3e.rkt:26:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxtxkwp3e.rkt:32:4\nactual:     1\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpo2mb2med.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpo2mb2med.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s)) (even? (add1 i)))\n       (count_upper_helper (rest s) (add1 i))]\n\
    \      [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbfhs55e.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdbfhs55e.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbfhs55e.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdbfhs55e.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbfhs55e.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdbfhs55e.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdbfhs55e.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (even? i) (vowel? (string-ref s i)))\n           (loop (+ i 1) (+ count\
    \ 1))]\n          [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp57rdllr8.rkt:11:27: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp57rdllr8.rkt:11:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n  (define\
    \ (count-upper-even-indices s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_upper?\
    \ (first s))\n            (is_even? (length s)))\n       (+ 1 (count-upper-even-indices\
    \ (rest s)))]\n      [else (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (string->list s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihrp4u4h.rkt:32:4\n\
    actual:     0\nexpected:   1\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices s)\n    (cond\n    \
    \  [(empty? s) 0]\n      [(is-upper? (first s)) (+ 1 (count-upper-even-indices\
    \ (rest s)))]\n      [else (count-upper-even-indices (rest s))]))\n  (count-upper-even-indices\
    \ (rest (rest s))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphd7d591d.rkt:24:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphd7d591d.rkt:25:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphd7d591d.rkt:26:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphd7d591d.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphd7d591d.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphd7d591d.rkt:29:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphd7d591d.rkt:30:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([count 0])\n    (for ([i (in-range (string-length s))])\n      (when (and (even?\
    \ i)\n                 (member (string-ref s i) '(#\\A #\\E #\\I #\\O #\\U)))\n\
    \        (set! count (+ count 1))))\n    count))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(and (char-vowel? (string-ref s i)) (char-upper-case? (string-ref s i)))\n\
    \       (count_upper-helper s (+ i 1) (+ acc 1))]\n      [else (count_upper-helper\
    \ s (+ i 1) acc)]))\n  (count_upper-helper s 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpamdzqknp.rkt:12:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpamdzqknp.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcypqo08.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcypqo08.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcypqo08.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcypqo08.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcypqo08.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxcypqo08.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxcypqo08.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6lyktet3.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6lyktet3.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6lyktet3.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6lyktet3.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6lyktet3.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6lyktet3.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6lyktet3.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlioitv_.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqlioitv_.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlioitv_.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqlioitv_.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlioitv_.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqlioitv_.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqlioitv_.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_upper\
    \ c)\n    (and (char-upper-case? c)\n         (is_vowel c)))\n  (define (is_even\
    \ i)\n    (= (modulo i 2) 0))\n  (define (count_upper_helper s i)\n    (cond\n\
    \      [(empty? s) 0]\n      [(is_even i)\n       (+ (if (is_upper (first s))\
    \ 1 0)\n          (count_upper_helper (rest s) (+ i 1)))]\n      [else (count_upper_helper\
    \ (rest s) (+ i 1))]))\n  (count_upper_helper s 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyne5ia5.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyne5ia5.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyne5ia5.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyne5ia5.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyne5ia5.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyne5ia5.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyne5ia5.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (vowel? (first s))) (loop (rest s) (+ i 1) (+ count 1))]\n      [else\
    \ (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzqg6o_cs.rkt:12:23: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpzqg6o_cs.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (let loop ([i 0] [count 0])\n      (cond\n    \
    \    [(= i (string-length s)) count]\n        [(and (char-vowel? (string-ref s\
    \ i))\n              (even? i))\n         (loop (+ i 1) (+ count 1))]\n      \
    \  [else (loop (+ i 1) count)]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppvi6uelm.rkt:13:15: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmppvi6uelm.rkt:13:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp409m92op.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp409m92op.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E\
    \ #\\I #\\O #\\U))))\n  (define (count_upper_helper s i)\n    (if (or (null? s)\n\
    \            (odd? i))\n        0\n        (+ (if (is_upper (car s)) 1 0)\n  \
    \         (count_upper_helper (cdr s) (+ i 1)))))\n  (count_upper_helper (string->list\
    \ s) 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpec04dy8z.rkt:25:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpec04dy8z.rkt:31:4\nactual:     1\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_upper? (first s))\n       (+ 1 (count-upper-vowels (rest s)))]\n\
    \      [else (count-upper-vowels (rest s))]))\n  (count-upper-vowels (even-index-chars\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd2y24_oj.rkt:18:23: even-index-chars: unbound identifier\n  in:\
    \ even-index-chars\n  location...:\n   /tmp/tmpd2y24_oj.rkt:18:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qkq6ro0.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1qkq6ro0.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qkq6ro0.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1qkq6ro0.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qkq6ro0.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1qkq6ro0.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1qkq6ro0.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (even? i) (char-upper-case? (string-ref s i)))\n           (loop (+ i\
    \ 1) (+ count 1))]\n          [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk7z08vnz.rkt:20:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk7z08vnz.rkt:22:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpk7z08vnz.rkt:23:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw_79ecpi.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpw_79ecpi.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ln6a4d3.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp7ln6a4d3.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (count-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel (first s)) (+ 1 (count-vowels\
    \ (rest s)))]\n      [else (count-vowels (rest s))]))\n  (define (count-even-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel (first s)) (+ 1 (count-even-vowels\
    \ (rest s)))]\n      [else (count-even-vowels (rest s))]))\n  (define (count-even-upper\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-vowel (first s)) (char-upper-case?\
    \ (first s))) (+ 1 (count-even-upper (rest s)))]\n      [else (count-even-upper\
    \ (rest s))]))\n  (define (count-even-upper-vowels s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is-vowel (first s)) (char-upper-case? (first s))) (+ 1 (count-even-upper-vowels\
    \ (rest s)))]\n      [else (count-even-upper-vowels (rest s))]))\n  (count-even-upper-vowels\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzyzqmxx.rkt:42:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvzyzqmxx.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzyzqmxx.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvzyzqmxx.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzyzqmxx.rkt:46:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvzyzqmxx.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvzyzqmxx.rkt:48:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (let loop ([i 0] [count 0])\n      (cond\n    \
    \    [(= i (string-length s)) count]\n        [(and (char-vowel? (string-ref s\
    \ i))\n              (even? i))\n         (loop (+ i 1) (+ count 1))]\n      \
    \  [else (loop (+ i 1) count)]))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg8osasby.rkt:13:15: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpg8osasby.rkt:13:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (char-upper-case? c))\n  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n\
    \ 2) 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is_even? (length s))\n            (is_upper? (first s))\n\
    \            (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:30:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:31:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:32:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:33:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:34:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:35:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmaot_5hr.rkt:36:4\n\
    \nlength: contract violation\n  expected: list?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (char-vowel? (string-ref s i))\n                (char-upper-case? (string-ref\
    \ s i)))\n           (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2)\
    \ count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw2yo49ao.rkt:11:17: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpw2yo49ao.rkt:11:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2jhsd9cz.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp2jhsd9cz.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp42g5mali.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp42g5mali.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42g5mali.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp42g5mali.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42g5mali.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp42g5mali.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp42g5mali.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (= (modulo i 2) 0)\n                (member (string-ref s i) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n           (loop (+ i 1) (+ count 1))]\n          [else (loop\
    \ (+ i 1) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-vowel?\
    \ (first s))\n            (char-upper-case? (first s))\n            (even? (add1\
    \ i)))\n       (count_upper-helper (rest s) (add1 i))]\n      [else (count_upper-helper\
    \ (rest s) i)]))\n  (count_upper-helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp_ig1ey_.rkt:12:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpp_ig1ey_.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length\
    \ s)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpflyc0emo.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpflyc0emo.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0)\n            (member (string-ref s i) '(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (char-vowel? (first s))\n            (even? (length\
    \ s)))\n       (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp2v2tpdj.rkt:13:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpp2v2tpdj.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count-upper-helper s i)\n    (cond ((= i (string-length s)) 0)\n          ((and\
    \ (char-upper-case? (string-ref s i))\n                (vowel? (string-ref s i)))\n\
    \           (+ 1 (count-upper-helper s (+ i 2))))\n          (else (count-upper-helper\
    \ s (+ i 2)))))\n  (count-upper-helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj6cfxum4.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpj6cfxum4.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (char-vowel? (string-ref s i))\n                (char-upper-case? (string-ref\
    \ s i)))\n           (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2)\
    \ count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5qnc9uvk.rkt:11:17: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp5qnc9uvk.rkt:11:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length\
    \ s)))\n     (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc8h9wrw9.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpc8h9wrw9.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(= i 0) (count_upper_helper\
    \ (rest s) 1)]\n      [(vowel? (first s)) (+ 1 (count_upper_helper (rest s) 0))]\n\
    \      [else (count_upper_helper (rest s) 0)]))\n  (count_upper_helper s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp45rc4oej.rkt:13:8: vowel?: unbound identifier\n  in: vowel?\n \
    \ location...:\n   /tmp/tmp45rc4oej.rkt:13:8\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(= i (string-length s)) 0]\n   \
    \   [(and (char-upper-case? (string-ref s i))\n            (vowel? (string-ref\
    \ s i)))\n       (+ 1 (count_upper_helper s (+ i 2)))]\n      [else (count_upper_helper\
    \ s (+ i 2))]))\n  (count_upper_helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprrpb36iu.rkt:13:13: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmprrpb36iu.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(even?\
    \ i)\n           (cond [(char-upper-case? (first s))\n                  (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n                 [else (loop (rest s) (+ i 1)\
    \ count)])]\n          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsh8rnh2x.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsh8rnh2x.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsh8rnh2x.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsh8rnh2x.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsh8rnh2x.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsh8rnh2x.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsh8rnh2x.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnqfwdqxx.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnqfwdqxx.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnqfwdqxx.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnqfwdqxx.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnqfwdqxx.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnqfwdqxx.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnqfwdqxx.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n           (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpulktzswx.rkt:14:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpulktzswx.rkt:14:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppi3ljfcn.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi3ljfcn.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi3ljfcn.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi3ljfcn.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi3ljfcn.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppi3ljfcn.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppi3ljfcn.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (char-upper-case? (first s)))\n           (loop (rest s) (+ i 1) (+\
    \ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzmjo_48.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxzmjo_48.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzmjo_48.rkt:22:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxzmjo_48.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzmjo_48.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxzmjo_48.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxzmjo_48.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (is_even i)\n    (= (modulo i 2) 0))\n\
    \  (define (is_even_upper_vowel c i)\n    (and (is_even i) (is_upper c) (is_vowel\
    \ c)))\n  (define (count_even_upper_vowels s i)\n    (if (string-empty? s)\n \
    \       0\n        (if (is_even_upper_vowel (string-ref s 0) i)\n            (+\
    \ 1 (count_even_upper_vowels (string-tail s) (+ i 1)))\n            (count_even_upper_vowels\
    \ (string-tail s) (+ i 1)))))\n  (count_even_upper_vowels s 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp35luy5m8.rkt:18:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp35luy5m8.rkt:18:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (first s)) (even? (index s))) (+ 1 (count_upper\
    \ (rest s)))]\n    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxjcaa8hx.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpxjcaa8hx.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (vowel? (first s))\n            (even? (length s)))\n\
    \       (loop (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp79b4q2bp.rkt:13:13: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp79b4q2bp.rkt:13:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length\
    \ s))) (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6_a473ii.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp6_a473ii.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2) 0))\n\
    \  (define (count-upper-vowels-even-indices s)\n    (cond [(empty? s) 0]\n   \
    \       [(and (is_even? (string-length s)) (is_upper? (string-ref s 0)) (is_vowel?\
    \ (string-ref s 0)))\n           (+ 1 (count-upper-vowels-even-indices (substring\
    \ s 1)))]\n          [else (count-upper-vowels-even-indices (substring s 1))]))\n\
    \  (count-upper-vowels-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1942hw2_.rkt:27:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1942hw2_.rkt:28:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1942hw2_.rkt:29:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1942hw2_.rkt:30:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1942hw2_.rkt:31:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1942hw2_.rkt:32:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1942hw2_.rkt:33:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (vowel? (first s)))\n           (loop (rest s) (+ i 1) (+ count 1))]\n\
    \          [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpliad3kxg.rkt:11:27: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpliad3kxg.rkt:11:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (if (= i (string-length s))\n        count\n   \
    \     (if (and (char-upper-case? (string-ref s i))\n                 (vowel? (string-ref\
    \ s i)))\n            (loop (+ i 2) (+ count 1))\n            (loop (+ i 2) count)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl0feo714.rkt:13:18: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpl0feo714.rkt:13:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvknjgnmy.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvknjgnmy.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvknjgnmy.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvknjgnmy.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvknjgnmy.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvknjgnmy.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvknjgnmy.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (char-vowel? (first s))\n    \
    \            (even? i))\n           (loop (rest s) (+ i 1) (+ count 1))]\n   \
    \       [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4ieyd11g.rkt:12:17: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp4ieyd11g.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '#(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfeqhtsl.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvfeqhtsl.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfeqhtsl.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvfeqhtsl.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfeqhtsl.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvfeqhtsl.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvfeqhtsl.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_iter s i count)\n    (cond\n      [(= i (string-length s)) count]\n\
    \      [(and (char-vowel? (string-ref s i)) (char-upper-case? (string-ref s i)))\n\
    \       (count_upper_iter s (+ i 1) (+ count 1))]\n      [else (count_upper_iter\
    \ s (+ i 1) count)]))\n  (count_upper_iter s 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph5mc69hr.rkt:12:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmph5mc69hr.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper-vowel c)\n    (and (member c '(#\\A #\\E #\\I #\\O #\\U))\n      \
    \   (char-upcase c)))\n  (define (count-upper-vowels s i)\n    (if (zero? i)\n\
    \        0\n        (if (is_upper-vowel (string-ref s i))\n            (+ 1 (count-upper-vowels\
    \ s (- i 2)))\n            (count-upper-vowels s (- i 2)))))\n  (count-upper-vowels\
    \ s (- (string-length s) 1)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpet8oyabw.rkt:25:4\n\
    \nstring-ref: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n  argument position: 2nd\n  first argument...:\n   \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpet8oyabw.rkt:27:4\n\
    \nstring-ref: contract violation\n  expected: exact-nonnegative-integer?\n  given:\
    \ -1\n  argument position: 2nd\n  first argument...:\n   \"dBBE\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpet8oyabw.rkt:29:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpet8oyabw.rkt:30:4\n\nstring-ref:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n  argument\
    \ position: 2nd\n  first argument...:\n   \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpet8oyabw.rkt:31:4\n\nstring-ref:\
    \ contract violation\n  expected: exact-nonnegative-integer?\n  given: -1\n  argument\
    \ position: 2nd\n  first argument...:\n   \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (remainder i 2)))\n       (count_upper-helper\
    \ (rest s) (+ i 1))]\n      [else (count_upper-helper (rest s) (+ i 1))]))\n \
    \ (count_upper-helper s 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbw_phe82.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbw_phe82.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbw_phe82.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbw_phe82.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbw_phe82.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbw_phe82.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbw_phe82.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (char-vowel? (string-ref s i))\n                (char-upper-case? (string-ref\
    \ s i)))\n           (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2)\
    \ count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpml4fc_jv.rkt:11:17: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpml4fc_jv.rkt:11:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgb32xdhf.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpgb32xdhf.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count-upper-even-indices s)\n    (cond ((null?\
    \ s) 0)\n          ((is-upper? (car s))\n           (+ 1 (count-upper-even-indices\
    \ (cddr s))))\n          (else (count-upper-even-indices (cdr s)))))\n  (count-upper-even-indices\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:24:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgkk_734v.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-upper-case? c)\n         (member c '#(#\\A #\\\
    E #\\I #\\O #\\U))))\n  (define (count_upper_even s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(is_upper (first s)) (+ 1 (count_upper_even (rest s)))]\n    \
    \  [else (count_upper_even (rest s))]))\n  (count_upper_even (evens s)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmkp8yja9.rkt:17:21: evens: unbound identifier\n  in: evens\n  location...:\n\
    \   /tmp/tmpmkp8yja9.rkt:17:21\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp75nxo_an.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp75nxo_an.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (count-upper-vowels\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is-upper? (first s)) (is-vowel?\
    \ (first s)))\n       (+ 1 (count-upper-vowels (rest s)))]\n      [else (count-upper-vowels\
    \ (rest s))]))\n  (count-upper-vowels (even-indices s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_y4if0tq.rkt:19:23: even-indices: unbound identifier\n  in: even-indices\n\
    \  location...:\n   /tmp/tmp_y4if0tq.rkt:19:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (add1 i) (add1 count))]\n          [else (loop (rest s) (add1 i) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z7432bt.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3z7432bt.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z7432bt.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3z7432bt.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z7432bt.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3z7432bt.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3z7432bt.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count-upper-vowels-in-even-indices\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(and (is_even? (length s)) (is_upper?\
    \ (first s)) (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices (string->list s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7c8sx_p.rkt:28:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq7c8sx_p.rkt:32:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpq7c8sx_p.rkt:34:4\nactual:     0\nexpected:\
    \   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0) (char-upper-case? (string-ref s i)))\n       (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn_ukaguk.rkt:21:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn_ukaguk.rkt:23:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpn_ukaguk.rkt:24:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf2eothk8.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpf2eothk8.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and (even?\
    \ i) (char-upper-case? (first s)))\n       (+ 1 (count_upper_helper (rest s) (+\
    \ i 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbkv6e4n.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzbkv6e4n.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbkv6e4n.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzbkv6e4n.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbkv6e4n.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzbkv6e4n.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzbkv6e4n.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwjgfwzsm.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpwjgfwzsm.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal?\
    \ c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_upper\
    \ c)\n    (and (char-upper-case? c)\n         (is_vowel c)))\n  (define (count_upper_helper\
    \ s i)\n    (if (equal? i (string-length s))\n        0\n        (if (and (is_upper\
    \ (string-ref s i))\n                 (even? i))\n            (+ 1 (count_upper_helper\
    \ s (+ i 1)))\n            (count_upper_helper s (+ i 1)))))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9p4ia0vz.rkt:32:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9p4ia0vz.rkt:36:4\nactual:     0\n\
    expected:   1\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp9p4ia0vz.rkt:38:4\nactual:     0\nexpected:\
    \   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (let loop ([i 0] [count 0])\n      (cond\n    \
    \    [(= i (string-length s)) count]\n        [(and (char-vowel? (string-ref s\
    \ i))\n              (even? i))\n         (loop (+ i 1) (+ count 1))]\n      \
    \  [else (loop (+ i 1) count)]))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv9bkvy1_.rkt:13:15: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpv9bkvy1_.rkt:13:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0))\n          (char-upper-case?\
    \ (string-ref s 0)))\n     (+ 1 (count_upper (substring s 2)))]\n    [else (count_upper\
    \ (substring s 2))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n\
    \    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"\
    dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpabarkbko.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpabarkbko.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (if (empty? s)\n        0\n        (if (and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n            (+ 1 (count-upper-vowels-in-even-indices (rest s)))\n\
    \            (count-upper-vowels-in-even-indices (rest s)))))\n  (count-upper-vowels-in-even-indices\
    \ (string-&gt;list s)))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpax7gfybh.rkt:19:38: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d7dnja6.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9d7dnja6.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d7dnja6.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9d7dnja6.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d7dnja6.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9d7dnja6.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9d7dnja6.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2vx4ukwj.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp2vx4ukwj.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (string-index s (first s))))\n       (loop (rest\
    \ s) (+ count 1))]\n      [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoe52ohj0.rkt:13:20: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmpoe52ohj0.rkt:13:20\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E\
    \ #\\I #\\O #\\U))))\n  (define (count_upper_helper s i acc)\n    (cond ((string-empty?\
    \ s) acc)\n          ((is_upper (string-ref s i))\n           (count_upper_helper\
    \ (string-drop s 1) (+ i 1) (+ acc 1)))\n          (else (count_upper_helper (string-drop\
    \ s 1) (+ i 1) acc))))\n  (count_upper_helper s 0 0))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeegpkur7.rkt:13:12: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpeegpkur7.rkt:13:12\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i acc)\n    (cond\n      [(empty? s) acc]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (count_upper_helper (rest s)\
    \ (+ i 1) (+ acc 1))]\n      [else (count_upper_helper (rest s) (+ i 1) acc)]))\n\
    \  (count_upper_helper s 0 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpclf85d4u.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpclf85d4u.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpclf85d4u.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpclf85d4u.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpclf85d4u.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpclf85d4u.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpclf85d4u.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (char-upcase c))\n  (define (is_vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2)\
    \ 0))\n  (define (count-upper-vowels-in-even-indices s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(and (is_even? (length s))\n            (is_upper? (first s))\n\
    \            (is_vowel? (first s)))\n       (+ 1 (count-upper-vowels-in-even-indices\
    \ (rest s)))]\n      [else (count-upper-vowels-in-even-indices (rest s))]))\n\
    \  (count-upper-vowels-in-even-indices (string->list s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgas9rtuy.rkt:34:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgas9rtuy.rkt:36:4\nactual:     0\n\
    expected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbc0j4_r3.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbc0j4_r3.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbc0j4_r3.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbc0j4_r3.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbc0j4_r3.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbc0j4_r3.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbc0j4_r3.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (let loop ([i 0] [count 0])\n      (cond\n    \
    \    [(= i (string-length s)) count]\n        [(char-vowel? (string-ref s i))\n\
    \         (loop (+ i 2) (+ count 1))]\n        [else (loop (+ i 1) count)]))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf0sldbei.rkt:13:10: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpf0sldbei.rkt:13:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (vowel? (string-ref s i)))\n       (loop (+ i 1) (+ count\
    \ 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp73o0ckos.rkt:12:23: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp73o0ckos.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '#\\A #\\E #\\I #\\O #\\U))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9c94osil.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9c94osil.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9c94osil.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9c94osil.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9c94osil.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9c94osil.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9c94osil.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-upper-case? c)\n         (member c '#\\a #\\e\
    \ #\\i #\\o #\\u)))\n  (define (count_upper-helper s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(is_upper? (first s)) (count_upper-helper (rest s) (+ i 1))]\n\
    \      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eevyrzv.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8eevyrzv.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eevyrzv.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8eevyrzv.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eevyrzv.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8eevyrzv.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8eevyrzv.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? i))\n       (+ 1 (count_upper_helper (rest s)\
    \ (+ i 1)))]\n      [else (count_upper_helper (rest s) (+ i 1))]))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpphlfkef5.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpphlfkef5.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpphlfkef5.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpphlfkef5.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpphlfkef5.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpphlfkef5.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpphlfkef5.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper_even s i)\n    (if (= i (string-length\
    \ s))\n        0\n        (+ (if (and (is_upper? (string-ref s i)) (is_vowel?\
    \ (string-ref s i))) 1 0)\n           (count_upper_even s (+ i 2)))))\n  (count_upper_even\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc5ya4ibq.rkt:25:4\n\
    actual:     0\nexpected:   1\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpc5ya4ibq.rkt:26:4\n\nstring-ref:\
    \ index is out of range\n  index: 8\n  valid range: [0, 6]\n  string: \"abcdefg\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpc5ya4ibq.rkt:28:4\n\nstring-ref: index is out of range\n \
    \ index: 2\n  valid range: [0, 0]\n  string: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpc5ya4ibq.rkt:29:4\n\nstring-ref:\
    \ index is out of range\n  index: 2\n  valid range: [0, 0]\n  string: \"U\"\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc5ya4ibq.rkt:31:4\nactual:     0\nexpected:   2\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph52ogsxi.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph52ogsxi.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph52ogsxi.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph52ogsxi.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph52ogsxi.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph52ogsxi.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph52ogsxi.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2l547e3m.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp2l547e3m.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n           (loop\
    \ (rest s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lvnz5am.rkt:20:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1lvnz5am.rkt:21:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lvnz5am.rkt:22:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1lvnz5am.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lvnz5am.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1lvnz5am.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1lvnz5am.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9on9cw_i.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9on9cw_i.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9on9cw_i.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9on9cw_i.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9on9cw_i.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9on9cw_i.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9on9cw_i.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (char-upcase c))\n  (define (is_vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even? n)\n    (= (remainder n 2)\
    \ 0))\n  (define (count_upper-helper s n)\n    (cond ((null? s) n)\n         \
    \ ((and (is_even? n) (is_upper? (car s)) (is_vowel? (car s)))\n           (count_upper-helper\
    \ (cdr s) (+ n 1)))\n          (else (count_upper-helper (cdr s) n))))\n  (count_upper-helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5nm3_u0h.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper c)\n    (and (char-upper-case? c)\n         (member c '(#\\A #\\E\
    \ #\\I #\\O #\\U))))\n  (define (count-upper-vowels s i)\n    (cond\n      [(empty?\
    \ s) i]\n      [(is_upper (first s)) (count-upper-vowels (rest s) (+ i 1))]\n\
    \      [else (count-upper-vowels (rest s) i)]))\n  (count-upper-vowels s 0))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw03ct9nj.rkt:24:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw03ct9nj.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw03ct9nj.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw03ct9nj.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw03ct9nj.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw03ct9nj.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw03ct9nj.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7azh9o.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsi7azh9o.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7azh9o.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsi7azh9o.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7azh9o.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsi7azh9o.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsi7azh9o.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (vowel? (string-ref s 0)) (even? (string-length\
    \ s))) (+ 1 (count_upper (substring s 1)))]\n    [else (count_upper (substring\
    \ s 1))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcc61q9rq.rkt:11:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpcc61q9rq.rkt:11:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphxp5li2c.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphxp5li2c.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphxp5li2c.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphxp5li2c.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphxp5li2c.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphxp5li2c.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphxp5li2c.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0o633g38.rkt:21:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0o633g38.rkt:23:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp0o633g38.rkt:24:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is_even?\
    \ n)\n    (= (remainder n 2) 0))\n  (define (count_upper-helper s n)\n    (cond\n\
    \      [(empty? s) n]\n      [(and (is_even? n) (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n       (count_upper-helper (rest s) (+ n 1))]\n      [else (count_upper-helper\
    \ (rest s) n)]))\n  (count_upper-helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp53hn1cgm.rkt:28:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp53hn1cgm.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp53hn1cgm.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp53hn1cgm.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp53hn1cgm.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp53hn1cgm.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp53hn1cgm.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (if (= i (string-length s))\n        count\n   \
    \     (if (and (char-upper-case? (string-ref s i))\n                 (member (string-ref\
    \ s i) \"AEIOU\"))\n            (loop (+ i 2) (+ count 1))\n            (loop\
    \ (+ i 2) count)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcn289d4v.rkt:22:4\n\
    \nmember: not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcn289d4v.rkt:23:4\n\nstring-ref:\
    \ index is out of range\n  index: 8\n  valid range: [0, 6]\n  string: \"abcdefg\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcn289d4v.rkt:24:4\n\nmember: not a proper list\n  in: \"AEIOU\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcn289d4v.rkt:25:4\n\nmember: not a proper list\n  in: \"AEIOU\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcn289d4v.rkt:26:4\n\nmember: not a proper list\n  in: \"AEIOU\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcn289d4v.rkt:28:4\n\nmember: not a proper list\n  in: \"AEIOU\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) 0]\n      [(= i 0) (+\
    \ (count_upper_helper (rest s) (+ i 1))\n                  (if (member (first\
    \ s) '(#\\A #\\E #\\I #\\O #\\U)) 1 0))]\n      [else (count_upper_helper (rest\
    \ s) (+ i 1))]))\n  (count_upper_helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp19u141w4.rkt:22:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp19u141w4.rkt:23:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp19u141w4.rkt:24:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp19u141w4.rkt:25:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp19u141w4.rkt:26:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp19u141w4.rkt:27:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp19u141w4.rkt:28:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (vowel?\
    \ (first s)))\n     (+ 1 (count_upper (rest s)))]\n    [else (count_upper (rest\
    \ s))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpghw94sa5.rkt:12:11: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpghw94sa5.rkt:12:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices s count)\n\
    \    (if (string-empty? s)\n        count\n        (if (and (is_upper? (string-ref\
    \ s 0)) (is_vowel? (string-ref s 0)))\n            (count-upper-vowels-in-even-indices\
    \ (substring s 2) (+ count 1))\n            (count-upper-vowels-in-even-indices\
    \ (substring s 2) count))))\n  (count-upper-vowels-in-even-indices s 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7lcvym43.rkt:14:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp7lcvym43.rkt:14:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0)\n            (member (string-ref s i) '#(#\\A #\\\
    E #\\I #\\O #\\U)))\n       (loop (+ i 1) (+ count 1))]\n      [else (loop (+\
    \ i 1) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n  \
    \  (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\"\
    ) 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate \"\
    U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate \"\
    EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:22:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:23:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:24:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:25:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:26:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph46w0vu3.rkt:28:4\n\
    \nmember: not a proper list\n  in: '#(#\\A #\\E #\\I #\\O #\\U)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is-upper? c)\n    (and (char-upper-case? c)\n         (member c '#\\a #\\e\
    \ #\\i #\\o #\\u)))\n  (define (count-upper-vowels s)\n    (cond ((null? s) 0)\n\
    \          ((is-upper? (car s))\n           (+ 1 (count-upper-vowels (cdr s))))\n\
    \          (else (count-upper-vowels (cdr s)))))\n  (define (even-indices s)\n\
    \    (cond ((null? s) '())\n          (else (cons (car s) (odd-indices (cdr s))))))\n\
    \  (define (odd-indices s)\n    (cond ((null? s) '())\n          (else (even-indices\
    \ (cdr s)))))\n  (count-upper-vowels (even-indices s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkol0t3sz.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (cond\n\
    \    [(empty? s) 0]\n    [(and (char-upper-case? (first s))\n          (member\
    \ (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n     (+ 1 (count_upper (rest s)))]\n\
    \    [else (count_upper (rest s))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbp02kcp.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbbp02kcp.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbp02kcp.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbbp02kcp.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbp02kcp.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpbbp02kcp.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpbbp02kcp.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (char-upper-case? (first s)))\n       (loop (rest s) (+ i 1) (+ count\
    \ 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdf8odx_.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzdf8odx_.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdf8odx_.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzdf8odx_.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdf8odx_.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpzdf8odx_.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpzdf8odx_.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0) (char-upper-case? (string-ref s i)))\n       (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbxf1_f4b.rkt:21:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbxf1_f4b.rkt:23:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmpbxf1_f4b.rkt:24:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (char-upper-case? (first s))\n            (even? i))\n       (loop (rest s)\
    \ (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2vrtgy3.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe2vrtgy3.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2vrtgy3.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe2vrtgy3.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2vrtgy3.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpe2vrtgy3.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe2vrtgy3.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and\
    \ (even? i) (member (first s) '(#\\A #\\E #\\I #\\O #\\U)))\n       (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n      [else (loop (rest s) (+ i 1) count)])))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkkahi7t.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkkahi7t.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkkahi7t.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkkahi7t.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkkahi7t.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkkkahi7t.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkkahi7t.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (remainder (string-length s) 2)))\n       (loop\
    \ (rest s) (+ count 1))]\n      [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rj8fc5b.rkt:22:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4rj8fc5b.rkt:23:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rj8fc5b.rkt:24:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4rj8fc5b.rkt:25:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rj8fc5b.rkt:26:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4rj8fc5b.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4rj8fc5b.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (add1 (remainder i 2))))\n       (count_upper-helper\
    \ (rest s) (add1 i))]\n      [else (count_upper-helper (rest s) i)]))\n  (count_upper-helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdvythzj.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvdvythzj.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdvythzj.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvdvythzj.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdvythzj.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvdvythzj.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvdvythzj.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcz7r6vhf.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpcz7r6vhf.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (for/sum ([i (in-range (string-length s))]\n  \
    \            #:when (even? i)\n              #:when (member (string-ref s i) '(#\\\
    A #\\E #\\I #\\O #\\U)))\n      1)))\n</code>\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkn3dwkb2.rkt:14:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpkn3dwkb2.rkt:14:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (= (modulo i 2) 0) (char-upper-case? (string-ref s i)))\n       (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1woc9yvg.rkt:21:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1woc9yvg.rkt:23:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp1woc9yvg.rkt:24:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm6fvtas9.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpm6fvtas9.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (string-contains \"AEIOU\" (string-ref s i)))\n       (loop\
    \ (+ i 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpslzhey4b.rkt:12:23: string-contains: unbound identifier\n  in:\
    \ string-contains\n  location...:\n   /tmp/tmpslzhey4b.rkt:12:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper-iter s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(and (char-vowel? (string-ref s i)) (char-upper-case? (string-ref s i)))\n\
    \       (count_upper-iter s (+ i 1) (+ acc 1))]\n      [else (count_upper-iter\
    \ s (+ i 1) acc)]))\n  (count_upper-iter s 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp05ehpk63.rkt:12:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmp05ehpk63.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count_upper_vowels s)\n    (cond ((null?\
    \ s) 0)\n          ((and (is_upper? (car s)) (is_vowel? (car s))) (+ 1 (count_upper_vowels\
    \ (cdr s))))\n          (else (count_upper_vowels (cdr s)))))\n  (count_upper_vowels\
    \ (cddr s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv__lc4v.rkt:24:4\n\
    \ncddr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"aBCdEf\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjv__lc4v.rkt:25:4\n\ncddr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv__lc4v.rkt:26:4\n\ncddr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv__lc4v.rkt:27:4\n\
    \ncddr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"B\"\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpjv__lc4v.rkt:28:4\n\ncddr: contract violation\n  expected:\
    \ (cons/c any/c pair?)\n  given: \"U\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv__lc4v.rkt:29:4\n\ncddr:\
    \ contract violation\n  expected: (cons/c any/c pair?)\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpjv__lc4v.rkt:30:4\n\
    \ncddr: contract violation\n  expected: (cons/c any/c pair?)\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i acc)\n    (cond\n      [(= i (string-length s)) acc]\n\
    \      [(and (char-vowel? (string-ref s i)) (char-upper-case? (string-ref s i)))\n\
    \       (count_upper_helper s (+ i 1) (+ acc 1))]\n      [else (count_upper_helper\
    \ s (+ i 1) acc)]))\n  (count_upper_helper s 0 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi02mz3i_.rkt:12:13: char-vowel?: unbound identifier\n  in: char-vowel?\n\
    \  location...:\n   /tmp/tmpi02mz3i_.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond [(= i (string-length s)) count]\n        \
    \  [(and (char-upper-case? (string-ref s i))\n                (vowel? (string-ref\
    \ s i)))\n           (loop (+ i 2) (+ count 1))]\n          [else (loop (+ i 2)\
    \ count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvyqh2yio.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpvyqh2yio.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([vowels (list #\\a #\\e #\\i #\\o #\\u)])\n    (for/sum ([c (in-string s)])\n\
    \      (and (char-alphabetic? c)\n           (char-upper-case? c)\n          \
    \ (member c vowels)\n           (even? (string-index s c))))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7wgwu_81.rkt:14:19: string-index: unbound identifier\n  in: string-index\n\
    \  location...:\n   /tmp/tmp7wgwu_81.rkt:14:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond [(empty? s) count]\n          [(and (char-upper-case?\
    \ (first s))\n                (vowel? (first s)))\n           (loop (rest s) (+\
    \ count 1))]\n          [else (loop (rest s) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpplw7594u.rkt:12:17: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmpplw7594u.rkt:12:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (if (empty? s)\n        0\n        (if (even? (string-length s))\n      \
    \      (if (and (is_upper? (string-ref s 0)) (is_vowel? (string-ref s 0)))\n \
    \               (+ 1 (count-upper-vowels-in-even-indices (substring s 1)))\n \
    \               (count-upper-vowels-in-even-indices (substring s 1)))\n      \
    \      (count-upper-vowels-in-even-indices (substring s 1)))))\n  (count-upper-vowels-in-even-indices\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuruac7vz.rkt:28:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuruac7vz.rkt:29:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuruac7vz.rkt:30:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuruac7vz.rkt:31:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuruac7vz.rkt:32:4\n\nstring-ref: index is out of range for\
    \ empty string\n  index: 0\n  string: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuruac7vz.rkt:33:4\n\nstring-ref:\
    \ index is out of range for empty string\n  index: 0\n  string: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuruac7vz.rkt:34:4\n\
    \nstring-ref: index is out of range for empty string\n  index: 0\n  string: \"\
    \"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upcase?\
    \ (first s))\n            (char-vowel? (first s))\n            (even? (add1 i)))\n\
    \       (count_upper_helper (rest s) (add1 i))]\n      [else (count_upper_helper\
    \ (rest s) i)]))\n  (count_upper_helper s 0))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate\
    \ \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal?\
    \ (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal?\
    \ (candidate \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal?\
    \ (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkc30r_8w.rkt:12:13: char-upcase?: unbound identifier\n  in: char-upcase?\n\
    \  location...:\n   /tmp/tmpkc30r_8w.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-in-even-indices s)\n\
    \    (if (empty? s)\n        0\n        (if (and (is_upper? (first s)) (is_vowel?\
    \ (first s)))\n            (+ 1 (count-upper-vowels-in-even-indices (rest (rest\
    \ s))))\n            (count-upper-vowels-in-even-indices (rest (rest s))))))\n\
    \  (count-upper-vowels-in-even-indices s))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\"\
    ) 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate\
    \ \"dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwl6jjvoy.rkt:26:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwl6jjvoy.rkt:27:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwl6jjvoy.rkt:28:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwl6jjvoy.rkt:29:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwl6jjvoy.rkt:30:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpwl6jjvoy.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwl6jjvoy.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (is_upper? c)\n    (and (char-alphabetic? c) (char-upper-case? c)))\n  (define\
    \ (is_vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=?\
    \ c #\\o) (char=? c #\\u)))\n  (define (count-upper-vowels-even-indices s)\n \
    \   (cond ((null? s) 0)\n          ((and (is_upper? (car s)) (is_vowel? (car s)))\n\
    \           (+ 1 (count-upper-vowels-even-indices (cddr s))))\n          (else\
    \ (count-upper-vowels-even-indices (cddr s)))))\n  (count-upper-vowels-even-indices\
    \ s))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:25:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"aBCdEf\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:26:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"abcdefg\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:27:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"dBBE\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:28:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"B\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:29:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"U\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbm8d57lw.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"EEEE\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [i 0] [count 0])\n    (cond [(empty? s) count]\n          [(and\
    \ (char-upper-case? (first s))\n                (even? i))\n           (loop (rest\
    \ s) (+ i 1) (+ count 1))]\n          [else (loop (rest s) (+ i 1) count)])))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n\
    \    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"\
    abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate\
    \ \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate\
    \ \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprv440rtr.rkt:21:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprv440rtr.rkt:22:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprv440rtr.rkt:23:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprv440rtr.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprv440rtr.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprv440rtr.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprv440rtr.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([s s] [count 0])\n    (cond\n      [(empty? s) count]\n      [(and (vowel?\
    \ (first s)) (even? (length s))) (loop (rest s) (+ count 1))]\n      [else (loop\
    \ (rest s) count)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n\
    \    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"\
    dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1xrwvzrs.rkt:12:13: vowel?: unbound identifier\n  in: vowel?\n\
    \  location...:\n   /tmp/tmp1xrwvzrs.rkt:12:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ ([s (string-upcase s)])\n    (for/sum ([i (in-range (string-length s))]\n  \
    \            #:when (even? i)\n              #:when (member (string-ref s i) \"\
    AEIOU\"))\n      1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n\
    \    (check-equal? (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"\
    dBBE\") 0)\n    (check-equal? (candidate \"B\") 0)\n    (check-equal? (candidate\
    \ \"U\") 1)\n    (check-equal? (candidate \"\") 0)\n    (check-equal? (candidate\
    \ \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:20:4\n\
    \nmember: not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:21:4\n\nmember:\
    \ not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:22:4\n\nmember:\
    \ not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:23:4\n\nmember:\
    \ not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:24:4\n\nmember:\
    \ not a proper list\n  in: \"AEIOU\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppku9kh5a.rkt:26:4\n\nmember:\
    \ not a proper list\n  in: \"AEIOU\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (define\
    \ (count_upper_helper s i)\n    (cond\n      [(empty? s) i]\n      [(and (char-upper-case?\
    \ (first s))\n            (even? (add1 (remainder i 2))))\n       (count_upper_helper\
    \ (rest s) (add1 i))]\n      [else (count_upper_helper (rest s) i)]))\n  (count_upper_helper\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ count_upper))\n    (check-equal? (candidate \"aBCdEf\") 1)\n    (check-equal?\
    \ (candidate \"abcdefg\") 0)\n    (check-equal? (candidate \"dBBE\") 0)\n    (check-equal?\
    \ (candidate \"B\") 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal?\
    \ (candidate \"\") 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphsg9kysr.rkt:23:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"aBCdEf\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphsg9kysr.rkt:24:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"abcdefg\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphsg9kysr.rkt:25:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"dBBE\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphsg9kysr.rkt:26:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"B\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphsg9kysr.rkt:27:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"U\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphsg9kysr.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphsg9kysr.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"EEEE\"\
    \n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s, count the number of uppercase vowels\
    \ in even indices.\n;; For example:\n;; count_upper('aBCdEf') returns 1\n;; count_upper('abcdefg')\
    \ returns 0\n;; count_upper('dBBE') returns 0\n(define (count_upper s)\n  (let\
    \ loop ([i 0] [count 0])\n    (cond\n      [(= i (string-length s)) count]\n \
    \     [(and (even? i) (char-upper-case? (string-ref s i)))\n       (loop (+ i\
    \ 1) (+ count 1))]\n      [else (loop (+ i 1) count)])))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate count_upper))\n    (check-equal?\
    \ (candidate \"aBCdEf\") 1)\n    (check-equal? (candidate \"abcdefg\") 0)\n  \
    \  (check-equal? (candidate \"dBBE\") 0)\n    (check-equal? (candidate \"B\")\
    \ 0)\n    (check-equal? (candidate \"U\") 1)\n    (check-equal? (candidate \"\"\
    ) 0)\n    (check-equal? (candidate \"EEEE\") 2)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6bkpov7g.rkt:21:4\n\
    actual:     2\nexpected:   1\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6bkpov7g.rkt:23:4\nactual:     1\n\
    expected:   0\n--------------------\n--------------------\nFAILURE\nname:    \
    \   check-equal?\nlocation:   /tmp/tmp6bkpov7g.rkt:24:4\nactual:     1\nexpected:\
    \   0\n--------------------\n"
  exit_code: 0
  status: Exception
