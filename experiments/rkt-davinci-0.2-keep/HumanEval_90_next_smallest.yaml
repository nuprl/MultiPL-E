name: HumanEval_90_next_smallest
language: racket
prompt: "#lang racket\n\n;; You are given a list of integers.\n;; Write a function\
  \ next_smallest() that returns the 2nd smallest element of the list.\n;; Return\
  \ None if there is no such element.\n;; next_smallest([1, 2, 3, 4, 5]) == 2\n;;\
  \ next_smallest([5, 1, 4, 3, 2]) == 2\n;; next_smallest([]) == None\n;; next_smallest([1,\
  \ 1]) == None\n(define (next_smallest lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate next_smallest))\n\
  \    (check-equal? (candidate (list 1 2 3 4 5)) 2)\n    (check-equal? (candidate\
  \ (list 5 1 4 3 2)) 2)\n    (check-equal? (candidate (list )) #f)\n    (check-equal?\
  \ (candidate (list 1 1)) #f)\n    (check-equal? (candidate (list 1 1 1 1 0)) 1)\n\
  \    (check-equal? (candidate (list 1 1)) #f)\n    (check-equal? (candidate (list\
  \ -35 34 12 -45)) -35)\n))\n\n(test-humaneval)"
completions: ["  (if (null? lst)\n      '()\n      (if (= (length lst) 1)\n      \
    \    '()\n          (let ([sorted (sort lst <)])\n            (if (= (car sorted)\
    \ (cadr sorted))\n                '()\n                (cadr sorted))))))\n",
  "  (cond\n    [(empty? lst) (error \"Empty list\")]\n    [(empty? (rest lst)) (error\
    \ \"List has only one element\")]\n    [else (apply min (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) (error \"Empty list!\")]\n    [(empty? (rest lst))\
    \ (error \"List has only one element!\")]\n    [else (second (sort lst))]))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr\
    \ sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (empty?\
    \ lst)\n      (error \"Empty list\")\n      (let ([sorted (sort lst <)])\n   \
    \     (if (equal? (length sorted) 1)\n            (error \"Only one element\"\
    )\n            (list-ref sorted 1)))))\n", "  (cond\n    [(empty? lst) (error\
    \ \"Empty list\")]\n    [(= (length lst) 1) (error \"Only one element\")]\n  \
    \  [(= (length lst) 2) (if (= (car lst) (cadr lst)) (error \"Only one unique element\"\
    ) (cadr lst))]\n    [else (let loop ([lst lst] [min (car lst)] [next-min (cadr\
    \ lst)])\n            (cond\n              [(empty? lst) next-min]\n         \
    \     [(= min next-min) (loop (cdr lst) min (cadr lst))]\n              [(< (car\
    \ lst) min) (loop (cdr lst) (car lst) min)]\n              [(< (car lst) next-min)\
    \ (loop (cdr lst) min (car lst))]\n              [else (loop (cdr lst) min next-min)]))]))\n",
  "  (if (empty? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (first sorted) (second sorted))\n            'None\n            (second\
    \ sorted)))))\n", "  (define (next_smallest-helper lst smallest next-smallest)\n\
    \    (cond [(empty? lst) next-smallest]\n          [(= (first lst) smallest) (next_smallest-helper\
    \ (rest lst) smallest next-smallest)]\n          [(= (first lst) next-smallest)\
    \ (next_smallest-helper (rest lst) smallest next-smallest)]\n          [(< (first\
    \ lst) smallest) (next_smallest-helper (rest lst) (first lst) smallest)]\n   \
    \       [(< (first lst) next-smallest) (next_smallest-helper (rest lst) smallest\
    \ (first lst))]\n          [else (next_smallest-helper (rest lst) smallest next-smallest)]))\n\
    \  (if (empty? lst)\n      'None\n      (next_smallest-helper (rest lst) (first\
    \ lst) (first lst))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest\
    \ lst)) 'None]\n    [else (second (sort lst))]))\n", "  (if (null? lst)\n    \
    \  '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (car (cdr sorted))))))\n", "  (cond [(empty? lst)\
    \ 'None]\n        [(empty? (rest lst)) 'None]\n        [else (apply min (rest\
    \ lst))]))\n", "  (let ([sorted (sort lst <)])\n    (if (null? (cdr sorted))\n\
    \        #f\n        (car (cdr sorted)))))\n", "  (if (empty? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n\
    \            '()\n            (if (equal? (length sorted) 2)\n               \
    \ (if (equal? (first sorted) (second sorted))\n                    '()\n     \
    \               (second sorted))\n                (if (equal? (first sorted) (second\
    \ sorted))\n                    (next_smallest (rest sorted))\n              \
    \      (second sorted)))))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            '()\n        \
    \    (cadr sorted)))))\n", "  (if (null? lst)\n      #f\n      (let ([sorted (sort\
    \ lst <)])\n        (if (null? (cdr sorted))\n            #f\n            (cadr\
    \ sorted)))))\n", "  (if (null? lst)\n      'None\n      (let ([sorted (sort lst\
    \ <)])\n        (if (null? (cdr sorted))\n            'None\n            (cadr\
    \ sorted)))))\n", "  (if (empty? lst)\n      #f\n      (let ([sorted (sort lst\
    \ <)])\n        (if (equal? (length sorted) 1)\n            #f\n            (list-ref\
    \ sorted 1)))))\n", "  (if (empty? lst)\n      '()\n      (let ([sorted (sort\
    \ lst <)])\n        (if (equal? (length sorted) 1)\n            '()\n        \
    \    (list-ref sorted 1)))))\n", "  (if (null? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            'None\n      \
    \      (cadr sorted)))))\n", "  (if (empty? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (equal? (length sorted) 1)\n            '()\n  \
    \          (if (equal? (length sorted) 2)\n                (if (equal? (first\
    \ sorted) (second sorted))\n                    '()\n                    (second\
    \ sorted))\n                (if (equal? (first sorted) (second sorted))\n    \
    \                (next_smallest (rest sorted))\n                    (second sorted)))))))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (cond [(empty?\
    \ lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else (apply min (rest\
    \ lst))]))\n", "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n\
    \        (if (null? (cdr sorted))\n            '()\n            (cadr sorted)))))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (null?\
    \ lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if (and (not\
    \ (null? (cdr sorted)))\n                 (equal? (car sorted) (cadr sorted)))\n\
    \            'None\n            (cadr sorted)))))\n", "  (if (null? lst)\n   \
    \   '()\n      (let* ([sorted (sort lst <)]\n             [first (car sorted)]\n\
    \             [second (cadr sorted)])\n        (if (equal? first second)\n   \
    \         '()\n            second))))\n", "  (cond\n    [(empty? lst) 'None]\n\
    \    [(empty? (rest lst)) 'None]\n    [else (second (sort lst))]))\n", "  (cond\n\
    \    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else (second\
    \ (sort lst <))]))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest\
    \ lst)) 'None]\n    [(= (first lst) (second lst)) (next_smallest (rest lst))]\n\
    \    [else (second lst)]))\n", "  (if (empty? lst)\n      '()\n      (let* ([sorted\
    \ (sort lst <)]\n             [min (car sorted)]\n             [second-min (car\
    \ (cdr sorted))])\n        (if (equal? min second-min)\n            '()\n    \
    \        second-min))))\n", "  (if (null? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            'None\n      \
    \      (cadr sorted)))))\n", "  (if (empty? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (and (not (empty? (rest sorted)))\n            \
    \     (equal? (first sorted) (second sorted)))\n            'None\n          \
    \  (second sorted)))))\n", "  (if (null? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            'None\n      \
    \      (cadr sorted)))))\n", "  (if (empty? lst)\n      '()\n      (if (empty?\
    \ (rest lst))\n          '()\n          (if (empty? (rest (rest lst)))\n     \
    \         '()\n              (if (empty? (rest (rest (rest lst))))\n         \
    \         '()\n                  (if (empty? (rest (rest (rest (rest lst)))))\n\
    \                      '()\n                      (if (empty? (rest (rest (rest\
    \ (rest (rest lst))))))\n                          '()\n                     \
    \     (if (empty? (rest (rest (rest (rest (rest (rest lst)))))))\n           \
    \                   '()\n                              (if (empty? (rest (rest\
    \ (rest (rest (rest (rest (rest lst))))))))\n                                \
    \  '()\n                                  (if (empty? (rest (rest (rest (rest\
    \ (rest (rest (rest (rest lst)))))))))\n                                     \
    \ '()\n                                      (if (empty? (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest lst))))))))))\n                              \
    \            '()\n                                          (if (empty? (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))\n     \
    \                                         '()\n                              \
    \                (if (empty? (rest (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest lst))))))))))))\n                                              \
    \    '()\n                                                  (if (empty? (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))))\n\
    \                                                      '()\n                 \
    \                                     (if (empty? (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest lst))))))))))))))\n        \
    \                                                  '()\n                     \
    \                                     (if (empty? (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))))))\n \
    \                                                             '()\n          \
    \                                                    (if (empty? (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest", "  (if (empty?\
    \ lst)\n      '()\n      (if (empty? (rest lst))\n          '()\n          (if\
    \ (empty? (rest (rest lst)))\n              '()\n              (if (and (equal?\
    \ (first lst) (second lst))\n                       (equal? (second lst) (third\
    \ lst)))\n                  '()\n                  (if (and (equal? (first lst)\
    \ (second lst))\n                           (equal? (second lst) (third lst))\n\
    \                           (equal? (third lst) (fourth lst)))\n             \
    \         '()\n                      (if (and (equal? (first lst) (second lst))\n\
    \                               (equal? (second lst) (third lst))\n          \
    \                     (equal? (third lst) (fourth lst))\n                    \
    \           (equal? (fourth lst) (fifth lst)))\n                          '()\n\
    \                          (if (and (equal? (first lst) (second lst))\n      \
    \                             (equal? (second lst) (third lst))\n            \
    \                       (equal? (third lst) (fourth lst))\n                  \
    \                 (equal? (fourth lst) (fifth lst))\n                        \
    \           (equal? (fifth lst) (sixth lst)))\n                              '()\n\
    \                              (if (and (equal? (first lst) (second lst))\n  \
    \                                     (equal? (second lst) (third lst))\n    \
    \                                   (equal? (third lst) (fourth lst))\n      \
    \                                 (equal? (fourth lst) (fifth lst))\n        \
    \                               (equal? (fifth lst) (sixth lst))\n           \
    \                            (equal? (sixth lst) (seventh lst)))\n           \
    \                       '()\n                                  (if (and (equal?\
    \ (first lst) (second lst))\n                                           (equal?\
    \ (second lst) (third lst))\n                                           (equal?\
    \ (third lst) (fourth lst))\n                                           (equal?\
    \ (fourth lst) (fifth lst))\n                                           (equal?\
    \ (fifth lst) (sixth lst))\n                                           (equal?\
    \ (sixth lst", "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n\
    \    [else (second (sort lst))]))\n", "  (if (null? lst)\n      '()\n      (let\
    \ ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n          \
    \  '()\n            (list-ref sorted 1)))))\n", "  (cond [(empty? lst) 'None]\n\
    \        [(empty? (rest lst)) 'None]\n        [else (apply min (rest lst))]))\n",
  "  (if (null? lst)\n      '()\n      (let* ([sorted (sort lst <)]\n            \
    \ [min (car sorted)]\n             [min2 (cadr sorted)])\n        (if (equal?\
    \ min min2)\n            '()\n            min2))))\n", "  (if (null? lst)\n  \
    \    'None\n      (let ([sorted (sort lst <)])\n        (if (equal? (car sorted)\
    \ (cadr sorted))\n            'None\n            (cadr sorted)))))\n", "  (cond\
    \ [(empty? lst) 'None]\n        [(< (length lst) 2) 'None]\n        [else (apply\
    \ min (cdr (sort lst <)))]))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty?\
    \ (rest lst)) 'None]\n    [else\n     (let ([min (apply min lst)])\n       (cond\n\
    \         [(= min (first lst)) (next_smallest (rest lst))]\n         [else (apply\
    \ min (remove min lst))]))]))\n", "  (if (empty? lst)\n      'None\n      (let\
    \ ([sorted (sort lst <)])\n        (if (equal? (first sorted) (second sorted))\n\
    \            'None\n            (second sorted)))))\n", "  (cond\n    [(empty?\
    \ lst) 'None]\n    [(= (length lst) 1) 'None]\n    [(= (length lst) 2) (if (=\
    \ (first lst) (second lst)) 'None (second lst))]\n    [else (let ([sorted (sort\
    \ lst <)])\n            (if (= (first sorted) (second sorted)) 'None (second sorted)))]))\n",
  "  (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else\
    \ (second (sort lst))]))\n", "  (if (empty? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (equal? (length sorted) 1)\n            'None\n\
    \            (second sorted)))))\n", "  (cond [(empty? lst) 'None]\n        [(=\
    \ (length lst) 1) 'None]\n        [else (apply min (cdr (sort lst <)))]))\n",
  "  (if (null? lst)\n      '()\n      (let ((sorted (sort lst <)))\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (null?\
    \ lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr\
    \ sorted))\n            'None\n            (cadr sorted)))))\n", "  (if (null?\
    \ lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (equal? (car\
    \ sorted) (cadr sorted))\n            '()\n            (cadr sorted)))))\n", " \
    \ (cond\n    [(empty? lst) (error \"empty list\")]\n    [(empty? (rest lst)) (error\
    \ \"only one element\")]\n    [else (apply min (rest lst))]))\n", "  (cond [(empty?\
    \ lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else (apply min (rest\
    \ lst))]))\n", "  (cond [(empty? lst) 'None]\n        [(= (length lst) 1) 'None]\n\
    \        [else (second (sort lst))]))\n", "  (if (empty? lst)\n      '()\n   \
    \   (let ([sorted (sort lst <)])\n        (if (empty? (cdr sorted))\n        \
    \    '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n      '()\n  \
    \    (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n        \
    \    '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n      '()\n \
    \     (let* ([sorted (sort lst <)]\n             [smallest (first sorted)]\n \
    \            [second-smallest (first (filter (lambda (x) (not (= x smallest)))\
    \ sorted))])\n        (if (not second-smallest)\n            '()\n           \
    \ second-smallest))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted (sort\
    \ lst <)])\n        (if (equal? (length sorted) 1)\n            '()\n        \
    \    (if (equal? (length sorted) 2)\n                (if (equal? (car sorted)\
    \ (cadr sorted))\n                    '()\n                    (cadr sorted))\n\
    \                (if (equal? (car sorted) (cadr sorted))\n                   \
    \ (next_smallest (cdr sorted))\n                    (cadr sorted)))))))\n", " \
    \ (if (null? lst)\n      '()\n      (let* ([sorted (sort lst <)]\n           \
    \  [first (car sorted)]\n             [second (cadr sorted)])\n        (if (equal?\
    \ first second)\n            '()\n            second))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (car (cdr sorted))))))\n", "  (if (empty? lst)\n\
    \      '()\n      (let ([sorted (sort lst <)])\n        (if (equal? (first sorted)\
    \ (second sorted))\n            '()\n            (second sorted)))))\n", "  (if\
    \ (null? lst)\n      '()\n      (if (null? (cdr lst))\n          '()\n       \
    \   (let ([sorted (sort lst <)])\n            (if (equal? (car sorted) (cadr sorted))\n\
    \                '()\n                (cadr sorted))))))\n", "  (cond\n    [(empty?\
    \ lst) (error \"empty list\")]\n    [(empty? (rest lst)) (error \"list has only\
    \ one element\")]\n    [else (second (sort lst <))]))\n", "  (let ([sorted (sort\
    \ lst <)])\n    (if (null? (cdr sorted))\n        #f\n        (car (cdr sorted)))))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (cond\n\
    \    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else\n     (let\
    \ ([sorted (sort lst <)])\n       (if (equal? (first sorted) (second sorted))\n\
    \           'None\n           (second sorted)))]))\n", "  (if (null? lst)\n  \
    \    '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n    \
    \  '()\n      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted)\
    \ 1)\n            '()\n            (second sorted)))))\n", "  (cond\n    [(empty?\
    \ lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else (second (sort lst))]))\n",
  "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else\n\
    \     (let ([sorted (sort lst <)])\n       (list-ref sorted 1))]))\n", "  (cond\n\
    \    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else\n     (let\
    \ ([sorted (sort lst <)])\n       (list-ref sorted 1))]))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n     \
    \ '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n    \
    \  '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n    \
    \  '()\n      (let ([sorted (sort lst <)])\n        (if (empty? (cdr sorted))\n\
    \            '()\n            (car (cdr sorted))))))\n", "  (cond [(null? lst)\
    \ 'None]\n        [(null? (cdr lst)) 'None]\n        [(null? (cddr lst)) 'None]\n\
    \        [else (second (sort lst <))]))\n", "  (cond\n    [(empty? lst) 'None]\n\
    \    [(= (length lst) 1) 'None]\n    [(= (length lst) 2) (if (= (first lst) (second\
    \ lst)) 'None (second lst))]\n    [else (next_smallest (sort lst))]))\n", "  (if\
    \ (null? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            'None\n            (cadr sorted)))))\n", "  (cond\
    \ [(empty? lst) (error \"Empty list\")]\n        [(empty? (rest lst)) (error \"\
    List has only one element\")]\n        [(= (first lst) (second lst)) (next_smallest\
    \ (rest lst))]\n        [else (second lst)]))\n", "  (if (null? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n\
    \            '()\n            (second sorted)))))\n", "  (if (empty? lst)\n  \
    \    '()\n      (let ([sorted (sort lst <)])\n        (if (and (not (empty? (cdr\
    \ sorted)))\n                 (equal? (car sorted) (cadr sorted)))\n         \
    \   '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n      'None\n \
    \     (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n       \
    \     'None\n            (cadr sorted)))))\n", "  (cond\n    [(empty? lst) 'None]\n\
    \    [(empty? (rest lst)) 'None]\n    [(= (first lst) (second lst)) (next_smallest\
    \ (rest lst))]\n    [else (second lst)]))\n", "  (cond [(empty? lst) 'None]\n\
    \        [(empty? (rest lst)) 'None]\n        [else (apply min (rest lst))]))\n",
  "  (if (empty? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            'None\n            (if (equal? (length\
    \ sorted) 2)\n                (if (equal? (first sorted) (second sorted))\n  \
    \                  'None\n                    (second sorted))\n             \
    \   (second sorted))))))\n", "  (cond [(empty? lst) (error \"empty list\")]\n\
    \        [(empty? (rest lst)) (error \"list has only one element\")]\n       \
    \ [else (apply min (rest lst))]))\n", "  (cond\n    [(empty? lst) 'None]\n   \
    \ [(= (length lst) 1) 'None]\n    [(= (length lst) 2) (if (= (first lst) (second\
    \ lst)) 'None (second lst))]\n    [else\n     (let ([sorted (sort lst <)])\n \
    \      (if (= (first sorted) (second sorted))\n           (next_smallest (rest\
    \ sorted))\n           (second sorted)))]))\n", "  (if (empty? lst)\n      '()\n\
    \      (if (empty? (rest lst))\n          '()\n          (if (empty? (rest (rest\
    \ lst)))\n              '()\n              (if (= (first lst) (second lst))\n\
    \                  (next_smallest (rest lst))\n                  (if (< (first\
    \ lst) (second lst))\n                      (next_smallest (rest lst))\n     \
    \                 (if (= (first lst) (third lst))\n                          (next_smallest\
    \ (rest lst))\n                          (if (< (first lst) (third lst))\n   \
    \                           (next_smallest (rest lst))\n                     \
    \         (first lst)))))))))\n", "  (if (empty? lst)\n      'None\n      (let\
    \ ([sorted (sort lst <)])\n        (if (empty? (rest sorted))\n            'None\n\
    \            (second sorted)))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty?\
    \ (rest lst)) 'None]\n    [(= (first lst) (second lst)) (next_smallest (rest lst))]\n\
    \    [else (second lst)]))\n", "  (if (empty? lst)\n      'None\n      (let ([min\
    \ (apply min lst)])\n        (if (null? (remove min lst))\n            'None\n\
    \            (apply min (remove min lst))))))\n", "  (cond\n    [(empty? lst)\
    \ (error \"Empty list\")]\n    [(empty? (rest lst)) (error \"Only one element\"\
    )]\n    [else (apply min (rest lst))]))\n", "  (if (null? lst)\n      '()\n  \
    \    (let* ([sorted (sort lst <)]\n             [min (car sorted)]\n         \
    \    [min2 (car (cdr sorted))])\n        (if (equal? min min2)\n            '()\n\
    \            min2))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest\
    \ lst)) 'None]\n    [else (apply min (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 'None]\n    [(= (length lst) 1) 'None]\n    [(= (length lst) 2)\n     (if\
    \ (= (first lst) (second lst))\n         'None\n         (second lst))]\n    [else\n\
    \     (let ([sorted (sort lst <)])\n       (if (= (first sorted) (second sorted))\n\
    \           (next_smallest (rest sorted))\n           (second sorted)))]))\n",
  "  (if (null? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            'None\n            (second sorted)))))\n",
  "  (if (empty? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            '()\n            (if (equal? (length\
    \ sorted) 2)\n                (if (equal? (car sorted) (cadr sorted))\n      \
    \              '()\n                    (cadr sorted))\n                (if (equal?\
    \ (car sorted) (cadr sorted))\n                    (next_smallest (cdr sorted))\n\
    \                    (cadr sorted)))))))\n", "  (if (empty? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n\
    \            '()\n            (second sorted)))))\n", "  (cond\n    [(empty? lst)\
    \ 'None]\n    [(= (length lst) 1) 'None]\n    [(= (length lst) 2) (if (= (first\
    \ lst) (second lst)) 'None (second lst))]\n    [else (let ([sorted (sort lst <)])\n\
    \            (if (= (first sorted) (second sorted))\n                (next_smallest\
    \ (rest sorted))\n                (second sorted)))]))\n", "  (define (next-smallest-helper\
    \ lst smallest second-smallest)\n    (cond\n      [(empty? lst) second-smallest]\n\
    \      [(< (first lst) smallest) (next-smallest-helper (rest lst) (first lst)\
    \ smallest)]\n      [(< (first lst) second-smallest) (next-smallest-helper (rest\
    \ lst) smallest (first lst))]\n      [else (next-smallest-helper (rest lst) smallest\
    \ second-smallest)]))\n  (if (empty? lst)\n      'None\n      (next-smallest-helper\
    \ (rest lst) (first lst) (first lst))))\n", "  (if (empty? lst)\n      '()\n \
    \     (if (empty? (rest lst))\n          '()\n          (if (empty? (rest (rest\
    \ lst)))\n              '()\n              (if (empty? (rest (rest (rest lst))))\n\
    \                  '()\n                  (if (empty? (rest (rest (rest (rest\
    \ lst)))))\n                      '()\n                      (if (empty? (rest\
    \ (rest (rest (rest (rest lst))))))\n                          '()\n         \
    \                 (if (empty? (rest (rest (rest (rest (rest (rest lst)))))))\n\
    \                              '()\n                              (if (empty?\
    \ (rest (rest (rest (rest (rest (rest (rest lst))))))))\n                    \
    \              '()\n                                  (if (empty? (rest (rest\
    \ (rest (rest (rest (rest (rest (rest lst)))))))))\n                         \
    \             '()\n                                      (if (empty? (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest lst))))))))))\n                  \
    \                        '()\n                                          (if (empty?\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))\n\
    \                                              '()\n                         \
    \                     (if (empty? (rest (rest (rest (rest (rest (rest (rest (rest\
    \ (rest (rest (rest lst))))))))))))\n                                        \
    \          '()\n                                                  (if (empty?\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))))\n\
    \                                                      '()\n                 \
    \                                     (if (empty? (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest lst))))))))))))))\n        \
    \                                                  '()\n                     \
    \                                     (if (empty? (rest (rest (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest lst)))))))))))))))\n \
    \                                                             '()\n          \
    \                                                    (if (empty? (rest (rest (rest\
    \ (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest (rest", "  (if (null?\
    \ lst)\n      '()\n      (let* ([sorted (sort lst <)]\n             [first (car\
    \ sorted)]\n             [second (cadr sorted)])\n        (if (equal? first second)\n\
    \            '()\n            second))))\n", "  (if (null? lst)\n      '()\n \
    \     (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n       \
    \     '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      'None\n            (cadr sorted)))))\n", "  (if (null? lst)\n      '()\n\
    \      (let* ([sorted (sort lst <)]\n             [min (car sorted)]\n       \
    \      [min2 (cadr sorted)])\n        (if (= min min2)\n            '()\n    \
    \        min2))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted (sort\
    \ lst <)])\n        (if (null? (cdr sorted))\n            '()\n            (cadr\
    \ sorted)))))\n", "  (if (null? lst)\n      '()\n      (let* ([sorted (sort lst\
    \ <)]\n             [min (car sorted)]\n             [second-min (car (cdr sorted))])\n\
    \        (if (eq? min second-min)\n            '()\n            second-min))))\n",
  "  (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else\
    \ (apply min (rest lst))]))\n", "  (if (null? lst)\n      '()\n      (let* ([sorted\
    \ (sort lst <)]\n             [smallest (car sorted)]\n             [second-smallest\
    \ (car (cdr sorted))])\n        (if (equal? smallest second-smallest)\n      \
    \      '()\n            second-smallest))))\n", "  (if (null? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      'None\n            (cadr sorted)))))\n", "  (cond\n    [(empty? lst) (error\
    \ \"Empty list\")]\n    [(empty? (rest lst)) (error \"List has only one element\"\
    )]\n    [else (apply min (rest lst))]))\n", "  (if (empty? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n\
    \            'None\n            (if (equal? (length sorted) 2)\n             \
    \   (if (equal? (first sorted) (second sorted))\n                    'None\n \
    \                   (second sorted))\n                (second sorted))))))\n",
  "  (cond\n    [(empty? lst) 'None]\n    [(= (length lst) 1) 'None]\n    [(= (length\
    \ lst) 2)\n     (if (= (first lst) (second lst))\n         'None\n         (second\
    \ lst))]\n    [else\n     (let ([sorted (sort lst <)])\n       (if (= (first sorted)\
    \ (second sorted))\n           (next_smallest (rest sorted))\n           (second\
    \ sorted)))]))\n", "  (cond [(empty? lst) \"None\"]\n        [(empty? (rest lst))\
    \ \"None\"]\n        [else (apply min (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [(empty? (rest (rest lst)))\
    \ 'None]\n    [else\n     (let ([sorted (sort lst <)])\n       (second sorted))]))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (car (cdr sorted))))))\n", "  (if\
    \ (null? lst)\n      '()\n      (let* ([sorted (sort lst <)]\n             [min\
    \ (car sorted)]\n             [min2 (cadr sorted)])\n        (if (equal? min min2)\n\
    \            '()\n            min2))))\n", "  (cond\n    [(empty? lst) #f]\n \
    \   [(empty? (rest lst)) #f]\n    [else\n     (let ([smallest (apply min lst)])\n\
    \       (cond\n         [(= smallest (apply min (rest lst))) (next_smallest (rest\
    \ lst))]\n         [else (apply min (rest lst))]))]))\n", "  (cond\n    [(empty?\
    \ lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [(empty? (rest (rest lst)))\
    \ 'None]\n    [else (second (sort lst))]))\n", "  (if (empty? lst)\n      '()\n\
    \      (let ((sorted (sort lst <)))\n        (if (equal? (length sorted) 1)\n\
    \            '()\n            (list-ref sorted 1)))))\n", "  (if (empty? lst)\n\
    \      'None\n      (let ([min (apply min lst)])\n        (if (equal? (count min\
    \ lst) (length lst))\n            'None\n            (apply min (filter (lambda\
    \ (x) (not (equal? x min))) lst))))))\n", "  (if (null? lst)\n      '()\n    \
    \  (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n          \
    \  '()\n            (cadr sorted)))))\n", "  (cond [(empty? lst) 'None]\n    \
    \    [(empty? (rest lst)) 'None]\n        [else (apply min (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else (second\
    \ (sort lst))]))\n", "  (if (null? lst)\n      'None\n      (let ([sorted (sort\
    \ lst <)])\n        (if (null? (cdr sorted))\n            'None\n            (cadr\
    \ sorted)))))\n", "  (if (empty? lst)\n      'None\n      (let ([sorted (sort\
    \ lst <)])\n        (if (equal? (length sorted) 1)\n            'None\n      \
    \      (list-ref sorted 1)))))\n", "  (if (null? lst)\n      '()\n      (if (null?\
    \ (cdr lst))\n          '()\n          (let* ([sorted (sort lst <)]\n        \
    \         [first (car sorted)]\n                 [second (cadr sorted)])\n   \
    \         (if (equal? first second)\n                '()\n                second)))))\n",
  "  (let ([sorted (sort lst <)])\n    (if (null? (cdr sorted))\n        #f\n    \
    \    (car (cdr sorted)))))\n", "  (if (empty? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (equal? (first sorted) (second sorted))\n      \
    \      'None\n            (second sorted)))))\n", "  (if (null? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n      'None\n\
    \      (if (empty? (rest lst))\n          'None\n          (if (= (length lst)\
    \ 2)\n              (if (= (first lst) (second lst))\n                  'None\n\
    \                  (second lst))\n              (if (< (first lst) (second lst))\n\
    \                  (next_smallest (cons (first lst) (rest (rest lst))))\n    \
    \              (next_smallest (cons (second lst) (rest (rest lst)))))))))\n",
  "  (if (empty? lst)\n      '()\n      (let* ([sorted (sort lst <)]\n           \
    \  [first (first sorted)]\n             [rest (rest sorted)])\n        (if (equal?\
    \ first (first rest))\n            '()\n            (first rest)))))\n", "  (if\
    \ (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (empty?\
    \ lst)\n      'None\n      (let* ([sorted (sort lst <)]\n             [min (first\
    \ sorted)]\n             [min2 (first (filter (lambda (x) (not (= x min))) sorted))])\n\
    \        (if (null? min2)\n            'None\n            min2))))\n", "  (if\
    \ (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null?\
    \ (cdr sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (empty?\
    \ lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (empty? (cdr\
    \ sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n\
    \      '()\n      (let* ([sorted (sort lst <)]\n             [first (car sorted)]\n\
    \             [second (cadr sorted)])\n        (if (equal? first second)\n   \
    \         '()\n            second))))\n", "  (cond [(empty? lst) 'None]\n    \
    \    [(= (length lst) 1) 'None]\n        [(= (length lst) 2) (if (= (car lst)\
    \ (cadr lst)) 'None (cadr lst))]\n        [else (next_smallest (sort lst <))]))\n",
  "  (cond\n    [(null? lst) 'None]\n    [(null? (cdr lst)) 'None]\n    [(= (car lst)\
    \ (cadr lst)) (next_smallest (cdr lst))]\n    [else (cadr lst)]))\n", "  (if (null?\
    \ lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr\
    \ sorted))\n            'None\n            (cadr sorted)))))\n", "  (cond [(empty?\
    \ lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else (apply min (rest\
    \ lst))]))\n", "  (if (null? lst)\n      '()\n      (let* ([sorted (sort lst <)]\n\
    \             [first (car sorted)]\n             [second (cadr sorted)])\n   \
    \     (if (equal? first second)\n            '()\n            second))))\n", " \
    \ (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if\
    \ (null? (cdr sorted))\n            '()\n            (cadr sorted)))))\n", " \
    \ (if (empty? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            '()\n            (list-ref sorted 1)))))\n",
  "  (if (empty? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            'None\n            (second sorted)))))\n",
  "  (cond [(empty? lst) #f]\n        [(= (length lst) 1) #f]\n        [(= (length\
    \ lst) 2)\n         (if (= (first lst) (second lst))\n             #f\n      \
    \       (second lst))]\n        [else\n         (let* ([sorted (sort lst <)]\n\
    \                [first (first sorted)]\n                [second (second sorted)])\n\
    \           (if (= first second)\n               (next_smallest (rest sorted))\n\
    \               second))]))\n", "  (cond [(empty? lst) 'None]\n        [(empty?\
    \ (rest lst)) 'None]\n        [else (apply min (rest lst))]))\n", "  (if (null?\
    \ lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr\
    \ sorted))\n            '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n\
    \      'None\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            'None\n            (cadr sorted)))))\n", "  (cond\n    [(empty? lst)\
    \ 'None]\n    [(empty? (rest lst)) 'None]\n    [(= (first lst) (second lst)) (next_smallest\
    \ (rest lst))]\n    [else (second lst)]))\n", "  (cond\n    [(empty? lst) 'None]\n\
    \    [(empty? (rest lst)) 'None]\n    [(= (first lst) (second lst)) (next_smallest\
    \ (rest lst))]\n    [else (second lst)]))\n", "  (cond\n    [(empty? lst) 'None]\n\
    \    [(empty? (rest lst)) 'None]\n    [(< (first lst) (second lst)) (second lst)]\n\
    \    [else (next_smallest (rest lst))]))\n", "  (if (null? lst)\n      '()\n \
    \     (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n       \
    \     '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      'None\n            (cadr sorted)))))\n", "  (if (empty? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      'None\n            (cadr sorted)))))\n", "  (if (null? lst)\n      #f\n\
    \      (let ([min (apply min lst)])\n        (if (null? (cdr lst))\n         \
    \   #f\n            (let ([min2 (apply min (filter (lambda (x) (not (= x min)))\
    \ lst))])\n              (if (= min min2)\n                  #f\n            \
    \      min2))))))\n", "  (if (null? lst)\n      #f\n      (let ([sorted (sort\
    \ lst <)])\n        (if (null? (cdr sorted))\n            #f\n            (cadr\
    \ sorted)))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty? (rest lst))\
    \ 'None]\n    [else\n     (let ([min (apply min lst)])\n       (if (equal? min\
    \ (first lst))\n           (next_smallest (rest lst))\n           (apply min (remove\
    \ min lst))))]))\n", "  (if (null? lst)\n      '()\n      (let ([sorted (sort\
    \ lst <)])\n        (if (null? (cdr sorted))\n            '()\n            (cadr\
    \ sorted)))))\n", "  (if (empty? lst)\n      'None\n      (let ([sorted (sort\
    \ lst <)])\n        (if (equal? (length sorted) 1)\n            'None\n      \
    \      (second sorted)))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            '()\n        \
    \    (cadr sorted)))))\n", "  (cond\n    [(empty? lst) (error \"empty list\")]\n\
    \    [(empty? (rest lst)) (error \"only one element\")]\n    [else (define sorted\
    \ (sort lst <))\n          (define (next-smallest-helper lst)\n            (cond\n\
    \              [(empty? (rest lst)) (error \"only one element\")]\n          \
    \    [(equal? (first lst) (second lst)) (next-smallest-helper (rest lst))]\n \
    \             [else (second lst)]))\n          (next-smallest-helper sorted)]))\n",
  "  (if (empty? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            'None\n            (if (equal? (length\
    \ sorted) 2)\n                (if (equal? (first sorted) (second sorted))\n  \
    \                  'None\n                    (second sorted))\n             \
    \   (second sorted))))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(= (length\
    \ lst) 1) 'None]\n    [(= (length lst) 2) (if (= (first lst) (second lst)) 'None\
    \ (second lst))]\n    [else (next_smallest (sort lst <))]))\n", "  (cond\n   \
    \ [(empty? lst) 'None]\n    [(empty? (rest lst)) 'None]\n    [else\n     (let*\
    \ ([sorted (sort lst <)]\n            [first (first sorted)]\n            [second\
    \ (first (rest sorted))])\n       (if (equal? first second)\n           'None\n\
    \           second))]))\n", "  (cond [(empty? lst) (error \"empty list\")]\n \
    \       [(= (length lst) 1) (error \"only one element\")]\n        [(= (length\
    \ lst) 2) (cond [(= (car lst) (cadr lst)) (error \"only one element\")]\n    \
    \                              [else (cadr lst)])]\n        [else (let ([smallest\
    \ (apply min lst)])\n                (cond [(= smallest (car lst)) (next_smallest\
    \ (cdr lst))]\n                      [else (next_smallest (cons smallest (cdr\
    \ lst)))])\n                )]))\n", "  (cond [(empty? lst) 'None]\n        [(empty?\
    \ (rest lst)) 'None]\n        [else (apply min (rest lst))]))\n", "  (if (empty?\
    \ lst)\n      #f\n      (let ([sorted (sort lst <)])\n        (if (equal? (length\
    \ sorted) 1)\n            #f\n            (if (equal? (length sorted) 2)\n   \
    \             (if (equal? (first sorted) (second sorted))\n                  \
    \  #f\n                    (second sorted))\n                (if (equal? (first\
    \ sorted) (second sorted))\n                    (next_smallest (rest sorted))\n\
    \                    (second sorted)))))))\n", "  (if (null? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n      \
    \      '()\n            (cadr sorted)))))\n", "  (if (null? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (equal? (length sorted) 1)\n\
    \            '()\n            (if (equal? (length sorted) 2)\n               \
    \ (if (equal? (car sorted) (cadr sorted))\n                    '()\n         \
    \           (cadr sorted))\n                (if (equal? (car sorted) (cadr sorted))\n\
    \                    (next_smallest (cdr sorted))\n                    (cadr sorted)))))))\n",
  "  (if (null? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (equal? (length sorted) 1)\n            'None\n            (list-ref sorted\
    \ 1)))))\n", "  (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n\
    \        [else (apply min (rest lst))]))\n", "  (if (empty? lst)\n      '()\n\
    \      (let ([sorted (sort lst <)])\n        (if (empty? (cdr sorted))\n     \
    \       '()\n            (cadr sorted)))))\n", "  (if (empty? lst)\n      'None\n\
    \      (let ([sorted (sort lst <)])\n        (if (or (empty? (rest sorted))\n\
    \                (equal? (first sorted) (second sorted)))\n            'None\n\
    \            (second sorted)))))\n", "  (cond\n    [(empty? lst) (error \"empty\
    \ list\")]\n    [(empty? (rest lst)) (error \"list too short\")]\n    [(= (first\
    \ lst) (second lst)) (next_smallest (rest lst))]\n    [else (second lst)]))\n",
  "  (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else\
    \ (second (sort lst))]))\n", "  (if (null? lst)\n      '()\n      (if (null? (cdr\
    \ lst))\n          '()\n          (let ([sorted (sort lst <)])\n            (if\
    \ (equal? (car sorted) (cadr sorted))\n                '()\n                (cadr\
    \ sorted))))))\n", "  (if (null? lst)\n      'None\n      (let ([sorted (sort\
    \ lst <)])\n        (if (equal? (length sorted) 1)\n            'None\n      \
    \      (second sorted)))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (equal? (length sorted) 1)\n            '()\n  \
    \          (if (equal? (length sorted) 2)\n                (if (equal? (car sorted)\
    \ (cadr sorted))\n                    '()\n                    (cadr sorted))\n\
    \                (if (equal? (car sorted) (cadr sorted))\n                   \
    \ (next_smallest (cdr sorted))\n                    (cadr sorted)))))))\n", " \
    \ (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else\
    \ (second (sort lst))]))\n", "  (if (null? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (equal? (length sorted) 1)\n            '()\n  \
    \          (list-ref sorted 1)))))\n", "  (if (null? lst)\n      'None\n     \
    \ (let* ([min (apply min lst)]\n             [min-index (index-of min lst)]\n\
    \             [lst-without-min (remove-at min-index lst)])\n        (if (null?\
    \ lst-without-min)\n            'None\n            (apply min lst-without-min)))))\n",
  "  (cond\n    [(empty? lst) (error \"Empty list\")]\n    [(empty? (rest lst)) (error\
    \ \"List has only one element\")]\n    [else (second (sort lst <))]))\n", "  (cond\
    \ [(empty? lst) (error \"empty list\")]\n        [(= (length lst) 1) (error \"\
    list has only one element\")]\n        [(= (length lst) 2)\n         (if (= (car\
    \ lst) (cadr lst))\n             (error \"list has only one unique element\")\n\
    \             (cadr lst))]\n        [else\n         (let ([sorted (sort lst <)])\n\
    \           (if (= (car sorted) (cadr sorted))\n               (next_smallest\
    \ (cdr sorted))\n               (cadr sorted)))]))\n", "  (if (null? lst)\n  \
    \    'None\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            'None\n            (car (cdr sorted))))))\n", "  (if (null? lst)\n\
    \      '()\n      (let ([sorted (sort lst <)])\n        (if (null? (cdr sorted))\n\
    \            '()\n            (cadr sorted)))))\n", "  (cond\n    [(empty? lst)\
    \ 'None]\n    [(empty? (rest lst)) 'None]\n    [else (second (sort lst))]))\n",
  "  (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if (equal?\
    \ (length sorted) 1)\n            '()\n            (second sorted)))))\n", " \
    \ (if (empty? lst)\n      'None\n      (let ([sorted (sort lst <)])\n        (if\
    \ (null? (cdr sorted))\n            'None\n            (cadr sorted)))))\n", " \
    \ (if (null? lst)\n      '()\n      (let ([sorted (sort lst <)])\n        (if\
    \ (null? (cdr sorted))\n            '()\n            (cadr sorted)))))\n", " \
    \ (cond [(empty? lst) 'None]\n        [(empty? (rest lst)) 'None]\n        [else\
    \ (second (sort lst))]))\n", "  (if (null? lst)\n      'None\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            'None\n      \
    \      (cadr sorted)))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted\
    \ (sort lst <)])\n        (if (null? (cdr sorted))\n            '()\n        \
    \    (cadr sorted)))))\n", "  (if (empty? lst)\n      '()\n      (let ([min (apply\
    \ min lst)])\n        (if (null? (remove min lst))\n            '()\n        \
    \    (apply min (remove min lst))))))\n", "  (if (null? lst)\n      '()\n    \
    \  (let* ([sorted (sort lst <)]\n             [min (car sorted)]\n           \
    \  [min2 (car (cdr sorted))])\n        (if (equal? min min2)\n            '()\n\
    \            min2))))\n", "  (if (null? lst)\n      '()\n      (let ([sorted-lst\
    \ (sort lst <)])\n        (if (null? (cdr sorted-lst))\n            '()\n    \
    \        (cadr sorted-lst)))))\n", "  (cond\n    [(empty? lst) 'None]\n    [(empty?\
    \ (rest lst)) 'None]\n    [(empty? (rest (rest lst))) 'None]\n    [else (second\
    \ (sort lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
