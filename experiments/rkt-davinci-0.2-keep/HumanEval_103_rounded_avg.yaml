name: HumanEval_103_rounded_avg
language: racket
prompt: "#lang racket\n\n;; You are given two positive integers n and m, and your\
  \ task is to compute the\n;; average of the integers from n through m (including\
  \ n and m). \n;; Round the answer to the nearest integer and convert that to binary.\n\
  ;; If n is greater than m, return -1.\n;; Example:\n;; rounded_avg(1, 5) => \"0b11\"\
  \n;; rounded_avg(7, 5) => -1\n;; rounded_avg(10, 20) => \"0b1111\"\n;; rounded_avg(20,\
  \ 33) => \"0b11010\"\n(define (rounded_avg n m)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rounded_avg))\n\
  \    (check-equal? (candidate 1 5) \"0b11\")\n    (check-equal? (candidate 7 13)\
  \ \"0b1010\")\n    (check-equal? (candidate 964 977) \"0b1111001010\")\n    (check-equal?\
  \ (candidate 996 997) \"0b1111100100\")\n    (check-equal? (candidate 560 851) \"\
  0b1011000010\")\n    (check-equal? (candidate 185 546) \"0b101101110\")\n    (check-equal?\
  \ (candidate 362 496) \"0b110101101\")\n    (check-equal? (candidate 350 902) \"\
  0b1001110010\")\n    (check-equal? (candidate 197 233) \"0b11010111\")\n    (check-equal?\
  \ (candidate 7 5) -1)\n    (check-equal? (candidate 5 1) -1)\n    (check-equal?\
  \ (candidate 5 5) \"0b101\")\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n\
    \ m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round\
    \ (/ (+ n m) 2)))))\n</code>\n", "  (if (&gt; n m)\n      -1\n      (let ([avg\
    \ (/ (+ n m) 2)])\n        (string-append \"0b\" (number-&gt;string (integer-&gt;binary\
    \ avg))))))\n</code>\n", "  (if (> n m)\n      -1\n      (define (sum n m)\n \
    \       (if (= n m)\n            n\n            (+ n (sum (+ n 1) m))))\n    \
    \  (define (avg n m)\n        (round (/ (sum n m) (- m n))))\n      (define (bin\
    \ n)\n        (if (= n 0)\n            \"\"\n            (string-append (bin (quotient\
    \ n 2)) (number->string (remainder n 2)))))\n      (string-append \"0b\" (bin\
    \ (avg n m)))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round\
    \ (/ (+ n m) 2)))))\n</code>\n", "  (cond [(> n m) -1]\n        [else (integer->binary\
    \ (round (/ (+ n m) 2)))]))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond [(> n m) -1]\n        [else (integer->binary\
    \ (round (/ (+ n m) 2)))]))\n", "  (if (> n m)\n      -1\n      (define (avg n\
    \ m)\n        (/ (+ n m) 2))\n      (define (round n)\n        (if (< n 0)\n \
    \           (round (- n))\n            (if (< n 2)\n                n\n      \
    \          (+ (round (/ n 2)) (modulo n 2)))))\n      (define (to-binary n)\n\
    \        (if (< n 2)\n            (number->string n)\n            (string-append\
    \ (to-binary (/ n 2)) (number->string (modulo n 2)))))\n      (string-append \"\
    0b\" (to-binary (round (avg n m))))))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n      (let ([sum (+ n\
    \ m)])\n        (if (odd? sum)\n            (string-append \"0b\" (number->string\
    \ (bitwise-arithmetic-shift-right sum 1)))\n            (string-append \"0b\"\
    \ (number->string (bitwise-arithmetic-shift-right sum 2)))))))\n", "  (if (> n\
    \ m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->symbol (string-append\
    \ \"0b\" (number->string (inexact->exact (round avg))))))))\n", "  (if (> n m)\n\
    \      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n            (string-append\
    \ \"0b\" (number->string (round (/ sum 2.0))))\n            (string-append \"\
    0b\" (number->string (/ sum 2)))))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond [(> n m) -1]\n        [else (integer->binary\
    \ (round (/ (+ n m) 2)))]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n      (let ([sum (+ n\
    \ m)])\n        (if (odd? sum)\n            (number->string (quotient sum 2) 2)\n\
    \            (number->string (quotient (+ sum 1) 2) 2)))))\n", "  (cond\n    [(>\
    \ n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt;\
    \ n m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (inexact->exact (round (/ (+ n m)\
    \ 2))) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (let ([avg (round (/ (+ n\
    \ m) 2))])\n        (string-append \"0b\" (number-&gt;string (integer-&gt;binary\
    \ avg))))))\n</code>\n", "  (cond [(> n m) -1]\n        [else (binary-string (round\
    \ (/ (+ n m) 2)))]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (define (avg\
    \ n m)\n        (/ (+ n m) 2))\n      (define (round n)\n        (if (> n 0)\n\
    \            (if (>= n 0.5)\n                1\n                0)\n         \
    \   (if (<= n -0.5)\n                -1\n                0)))\n      (define (to-binary\
    \ n)\n        (if (= n 0)\n            \"\"\n            (string-append (to-binary\
    \ (quotient n 2))\n                           (number->string (remainder n 2)))))\n\
    \      (string-append \"0b\" (to-binary (round (avg n m))))))\n", "  (cond\n \
    \   [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n\
    </code>\n", "  (if (&gt; n m)\n      -1\n      (define sum (+ n m))\n      (define\
    \ avg (round (/ sum 2)))\n      (number-&gt;string (inexact-&gt;exact (round (/\
    \ sum 2))) 2)))\n</code>\nI'm getting the following error:\n<code>number-&gt;string:\
    \ expects argument of type &lt;exact integer&gt;; given 0\n</code>\nI'm not sure\
    \ what's wrong with my code.\n\n\nA:\n\nThe problem is that <code>avg</code> is\
    \ not an exact integer, but a real number. You can fix this by changing the definition\
    \ of <code>avg</code> to:\n<code>(define avg (inexact-&gt;exact (round (/ sum\
    \ 2))))\n</code>\n", "  (cond\n    [(> n m) -1]\n    [else (number->string (round\
    \ (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond ((> n m) -1)\n        (else (integer->binary\
    \ (round (/ (+ n m) 2))))))\n", "  (if (> n m)\n      -1\n      (let ([avg (round\
    \ (/ (+ n m) 2))])\n        (string-append \"0b\" (number->string (integer->binary\
    \ avg))))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string (round (/\
    \ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (integer->binary (round\
    \ (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n      (number->string (round\
    \ (/ (+ n m) 2)) 2)))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2.0)) 2)]))\n", "  (cond ((> n m) -1)\n        (else (integer->binary\
    \ (round (/ (+ n m) 2))))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2.0)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (cond\n    [(> n m) -1]\n    [else\
    \ (number->string (inexact->exact (round (/ (+ n m) 2.0))) 2)]))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m) -1\n      (let ([avg (round (/ (+ n m) 2.0))])\n        (string-append\
    \ \"0b\" (number->string (integer->binary avg))))))\n", "  (cond\n    [(> n m)\
    \ -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n\
    \      -1\n      (define (avg n m)\n        (/ (+ n m) 2))\n      (define (round\
    \ n)\n        (if (and (not (zero? (remainder n 2)))\n                 (not (zero?\
    \ (remainder (- n 1) 2))))\n            (round (- n 1))\n            n))\n   \
    \   (define (to-binary n)\n        (if (zero? n)\n            \"\"\n         \
    \   (string-append (to-binary (quotient n 2))\n                           (number->string\
    \ (remainder n 2)))))\n      (string-append \"0b\" (to-binary (round (avg n m))))))\n",
  "  (if (> n m)\n      -1\n      (define (avg n m)\n        (/ (+ n m) 2))\n    \
    \  (define (to-binary n)\n        (if (= n 0)\n            \"\"\n            (string-append\
    \ (to-binary (quotient n 2))\n                           (number->string (remainder\
    \ n 2)))))\n      (string-append \"0b\" (to-binary (round (avg n m))))))\n", " \
    \ (if (> n m)\n      -1\n      (let* ([sum (+ n m)]\n             [avg (/ sum\
    \ 2)]\n             [rounded (round avg)])\n        (number->string rounded 2))))\n",
  "  (cond [(> n m) -1]\n        [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n\
    </code>\n", "  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n     \
    \   (string->symbol (string-append \"0b\" (number->string (inexact->exact (round\
    \ avg))))))))\n", "  (if (> n m)\n      -1\n      (define (average n m)\n    \
    \    (round (/ (+ n m) 2)))\n      (define (to-binary n)\n        (if (= n 0)\n\
    \            \"\"\n            (string-append (to-binary (quotient n 2))\n   \
    \                        (number->string (remainder n 2)))))\n      (string-append\
    \ \"0b\" (to-binary (average n m)))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (string->number\
    \ (number->string (round (/ (+ n m) 2))) 2)))\n", "  (if (> n m)\n      -1\n \
    \     (integer->binary (round (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n\
    \      (let ([avg (round (/ (+ n m) 2))])\n        (string-append \"0b\" (number->string\
    \ (integer->binary avg))))))\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else\n     (let*\
    \ ([avg (/ (+ n m) 2)]\n            [bin (number->string (inexact->exact (round\
    \ avg)) 2)])\n       (string-append \"0b\" bin))]))\n", "  (if (&gt; n m)\n  \
    \    -1\n      (let ([sum (for/sum ([i (in-range n (+ m 1))]) i)])\n        (let\
    \ ([avg (/ sum (- (+ m 1) n))])\n          (let ([rounded (round avg)])\n    \
    \        (string-append \"0b\" (integer-&gt;binary rounded)))))))\n", "  (if (>\
    \ n m)\n      -1\n      (define sum (+ n m))\n      (define avg (/ sum 2))\n \
    \     (define rounded (round avg))\n      (define binary (number->string rounded\
    \ 2))\n      (string-append \"0b\" binary)))\n", "  (cond [(> n m) -1]\n     \
    \   [else (integer->binary (round (/ (+ n m) 2)))]))\n", "  (cond\n    [(> n m)\
    \ -1]\n    [else (number->string (round (/ (+ n m) 2.0)) 2)]))\n", "  (cond [(>\
    \ n m) -1]\n        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (&gt; n m)\n      -1\n      (string-&gt;number (number-&gt;string (round\
    \ (/ (+ n m) 2))) 2)))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2.0)) 2)]))\n", "  (if (> n m)\n      -1\n      (let* ([avg\
    \ (/ (+ n m) 2)]\n             [rounded (round avg)]\n             [binary (number->string\
    \ rounded 2)])\n        (string-append \"0b\" binary))))\n", "  (if (> n m)\n\
    \      -1\n      (define (sum n m)\n        (if (> n m)\n            0\n     \
    \       (+ n (sum (+ n 1) m))))\n      (define (avg n m)\n        (round (/ (sum\
    \ n m) (- m n))))\n      (number->string (avg n m) 2)))\n", "  (cond [(> n m)\
    \ -1]\n        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (if (&gt; n m)\n      -1\n      (binary-&gt;string (round (/ (+ n m) 2)) 2)))\n\
    </code>\n", "  (if (< n m)\n      (let* ([sum (+ n m)]\n             [avg (quotient\
    \ sum 2)]\n             [rounded (round avg)])\n        (string->symbol (string-append\
    \ \"0b\" (number->string (integer->binary rounded)))))\n      -1))\n", "  (cond\
    \ [(> n m) -1]\n        [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (cond [(> n m) -1]\n        [else (integer->binary (round (/ (+ n m) 2)))]))\n",
  "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n\
    </code>\n", "  (cond [(> n m) -1]\n        [else (integer->binary (round (/ (+\
    \ n m) 2)))]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string (round\
    \ (/ (+ n m) 2)) 2)]))\n", "  (define (avg n m)\n    (define (sum n m)\n     \
    \ (if (= n m)\n          n\n          (+ n (sum (+ n 1) m))))\n    (define (count\
    \ n m)\n      (if (= n m)\n          1\n          (+ 1 (count (+ n 1) m))))\n\
    \    (round (/ (sum n m) (count n m))))\n  (if (> n m)\n      -1\n      (number->string\
    \ (avg n m) 2)))\n", "  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n\
    \        (string->symbol (string-append \"0b\" (number->string (inexact->exact\
    \ (round avg))))))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (> n m)\n      -1\n      (let* ([sum (+\
    \ n m)]\n             [avg (/ sum 2)]\n             [rounded (round avg)])\n \
    \       (number->string rounded 2))))\n", "  (cond\n    [(> n m) -1]\n    [else\
    \ (integer->binary (round (/ (+ n m) 2)))]))\n", "  (cond\n    [(> n m) -1]\n\
    \    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n\
    \        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n\
    \ m)\n      -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (integer->binary (round (/ (+ n m) 2)))]))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (&gt; n m)\n      -1\n      (let ([sum (for/sum ([i (in-range n (+ m 1))])\
    \ i)])\n        (string-append \"0b\" (integer-&gt;binary (round (/ sum (- m n))))))))\n\
    </code>\n", "  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n     \
    \   (string->symbol (string-append \"0b\" (number->string (inexact->exact (round\
    \ avg))))))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string (round\
    \ (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n        [else (binary-string\
    \ (round (/ (+ n m) 2)))]))\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (string-&gt;number\
    \ (number-&gt;string (round (/ (+ n m) 2))) 2)))\n</code>\nI have a feeling that\
    \ this is not the most elegant solution, but I'm not sure how to improve it.\n\
    \n\nA:\n\nI would use <code>integer-&gt;binary</code> instead of <code>number-&gt;string</code>\
    \ and <code>string-&gt;number</code>.\nI would also use <code>cond</code> instead\
    \ of <code>if</code>.\n<code>(define (rounded_avg n m)\n  (cond\n    [(&gt; n\
    \ m) -1]\n    [else (integer-&gt;binary (round (/ (+ n m) 2)))]))\n</code>\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n\
    \            (string-append \"0b\" (number->string (bitwise-arithmetic-shift-right\
    \ sum 1)))\n            (string-append \"0b\" (number->string (bitwise-arithmetic-shift-right\
    \ (bitwise-arithmetic-shift-right sum 1) 1)))))))\n", "  (if (> n m)\n      -1\n\
    \      (let ([sum (+ n m)])\n        (if (odd? sum)\n            (string-append\
    \ \"0b\" (number->string (quotient sum 2)))\n            (string-append \"0b\"\
    \ (number->string (quotient sum 2)))))))\n", "  (if (> n m)\n      -1\n      (let\
    \ ((avg (/ (+ n m) 2)))\n        (string-append \"0b\" (number->string (integer->binary\
    \ avg))))))\n", "  (if (> n m)\n      -1\n      (let ([avg (round (/ (+ n m) 2))])\n\
    \        (string-append \"0b\" (number->string (integer->binary avg))))))\n",
  "  (cond\n    [(> n m) -1]\n    [else (number->string (inexact->exact (round (/\
    \ (+ n m) 2))) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2.0)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (define (sum\
    \ n m)\n        (if (> n m)\n            0\n            (+ n (sum (+ n 1) m))))\n\
    \      (define (avg n m)\n        (round (/ (sum n m) (- m n))))\n      (number->string\
    \ (avg n m) 2)))\n", "  (if (> n m)\n      -1\n      (let* ([avg (/ (+ n m) 2)]\n\
    \             [rounded (round avg)]\n             [binary (number->string (inexact->exact\
    \ (string->number (number->string rounded) 2)) 2)])\n        (string-append \"\
    0b\" binary))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary (round\
    \ (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (cond\n    [(> n m) -1]\n    [else\
    \ (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n\
    \    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n\
    \ m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2.0)) 2)]))\n",
  "  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (string->number (number->string\
    \ (round (/ sum 2))) 2))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (inexact->exact (round (/ (+ n m) 2.0))) 2)]))\n", "  (cond [(> n m) -1]\n \
    \       [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(>\
    \ n m) -1]\n    [else (number->string (inexact->exact (round (/ (+ n m) 2.0)))\
    \ 2)]))\n", "  (cond [(> n m) -1]\n        [else (define sum 0)\n            \
    \  (define count 0)\n              (for ([i (in-range n (+ m 1))])\n         \
    \       (set! sum (+ sum i))\n                (set! count (+ count 1)))\n    \
    \          (define avg (/ sum count))\n              (define rounded (round avg))\n\
    \              (string->number (number->string rounded) 2)]))\n", "  (if (> n\
    \ m)\n      -1\n      (let* ([avg (/ (+ n m) 2)]\n             [bin (number->string\
    \ (inexact->exact (round avg)) 2)])\n        (string-append \"0b\" bin))))\n",
  "  (if (&gt; n m)\n      -1\n      (number-&gt;string (round (/ (+ n m) 2)) 2)))\n\
    </code>\n", "  (cond [(> n m) -1]\n        [else (number->string (round (/ (+\
    \ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (let* ([sum (+ n m)]\n\
    \             [avg (quotient sum 2)]\n             [rounded (round avg)])\n  \
    \      (number-&gt;string rounded 2))))\n", "  (cond\n    [(> n m) -1]\n    [else\
    \ (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n\
    \    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n\
    \        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(>\
    \ n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (>\
    \ n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n \
    \           (string-append \"0b\" (number->string (round (/ sum 2))))\n      \
    \      (string-append \"0b\" (number->string (round (/ sum 2))))))))\n", "  (if\
    \ (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n    \
    \        (string-append \"0b\" (number->string (round (/ sum 2))))\n         \
    \   (string-append \"0b\" (number->string (round (/ sum 2))))))))\n", "  (if (>\
    \ n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if (&gt;\
    \ n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string-append \"\
    0b\" (number-&gt;string (integer-&gt;binary avg))))))\n</code>\n", "  (if (> n\
    \ m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->symbol (string-append\
    \ \"0b\" (number->string (inexact->exact (round avg))))))))\n", "  (cond\n   \
    \ [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if\
    \ (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if\
    \ (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n    \
    \        (string-append \"0b\" (number->string (bitwise-arithmetic-shift-right\
    \ sum 1)))\n            (string-append \"0b\" (number->string (quotient sum 2)))))))\n",
  "  (if (> n m)\n      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n \
    \           (string-append \"0b\" (number->string (bitwise-arithmetic-shift-right\
    \ sum 1)))\n            (string-append \"0b\" (number->string (bitwise-arithmetic-shift-right\
    \ (quotient sum 2) 1)))))))\n", "  (if (> n m)\n      -1\n      (let* ([avg (/\
    \ (+ n m) 2)]\n             [bin (number->string (inexact->exact (round avg))\
    \ 2)])\n        (string-append \"0b\" bin))))\n", "  (cond [(> n m) -1]\n    \
    \    [else (bitwise-and (round (/ (+ n m) 2)) #b11111111)]))\n", "  (if (> n m)\n\
    \      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", "  (cond [(> n\
    \ m) -1]\n        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if\
    \ (> n m)\n      -1\n      (binary-string (round (/ (+ n m) 2)))))\n", "  (if\
    \ (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->symbol\
    \ (string-append \"0b\" (number->string (inexact->exact (round avg))))))))\n",
  "  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->symbol\
    \ (string-append \"0b\" (number->string (round avg)))))))\n", "  (if (> n m)\n\
    \      -1\n      (define sum (+ n m))\n      (define avg (/ sum 2))\n      (define\
    \ rounded (round avg))\n      (define binary (number->string rounded 2))\n   \
    \   (string-append \"0b\" binary)))\n", "  (cond [(> n m) -1]\n        [else (binary-string\
    \ (round (/ (+ n m) 2)))]))\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n        [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (let ([avg (/\
    \ (+ n m) 2)])\n        (string->symbol (string-append \"0b\" (number->string\
    \ (inexact->exact (round avg))))))))\n", "  (cond\n    [(> n m) -1]\n    [else\
    \ (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(> n m) -1]\n\
    \    [else (number->string (inexact->exact (round (/ (+ n m) 2.0))) 2)]))\n",
  "  (if (> n m)\n      -1\n      (integer->binary (round (/ (+ n m) 2)))))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (cond\n    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n",
  "  (if (> n m)\n      -1\n      (let ([avg (/ (+ n m) 2)])\n        (string->symbol\
    \ (string-append \"0b\" (number->string (round avg)))))))\n", "  (if (> n m)\n\
    \      -1\n      (let ([avg (round (/ (+ n m) 2))])\n        (string-append \"\
    0b\" (number->string (integer->binary avg))))))\n", "  (if (> n m)\n      -1\n\
    \      (integer->binary (round (/ (+ n m) 2)))))\n", "  (if (&gt; n m)\n     \
    \ -1\n      (integer-&gt;binary (round (/ (+ n m) 2)))))\n</code>\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (inexact->exact (round (/ (+ n m)\
    \ 2.0))) 2)]))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string (round\
    \ (/ (+ n m) 2)) 2)]))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (if (> n m)\n      -1\n      (integer->binary\
    \ (round (/ (+ n m) 2)))))\n", "  (cond\n    [(> n m) -1]\n    [else (number->string\
    \ (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n      -1\n      (let ([avg (/\
    \ (+ n m) 2)])\n        (string->symbol (string-append \"0b\" (number->string\
    \ (round avg)))))))\n", "  (if (&gt; n m)\n      -1\n      (integer-&gt;binary\
    \ (round (/ (+ n m) 2)))))\n</code>\n", "  (if (> n m)\n      -1\n      (define\
    \ (average lst)\n        (define (sum lst)\n          (if (null? lst)\n      \
    \        0\n              (+ (car lst) (sum (cdr lst)))))\n        (define (length\
    \ lst)\n          (if (null? lst)\n              0\n              (+ 1 (length\
    \ (cdr lst)))))\n        (round (/ (sum lst) (length lst))))\n      (number->string\
    \ (average (build-list (+ (- m n) 1) (lambda (x) (+ n x)))) 2)))\n", "  (cond\n\
    \    [(> n m) -1]\n    [else (number->string (round (/ (+ n m) 2)) 2)]))\n", " \
    \ (if (> n m)\n      -1\n      (define (avg n m)\n        (define (sum n m)\n\
    \          (if (= n m)\n              n\n              (+ n (sum (+ n 1) m))))\n\
    \        (define (count n m)\n          (if (= n m)\n              1\n       \
    \       (+ 1 (count (+ n 1) m))))\n        (/ (sum n m) (count n m)))\n      (define\
    \ (round n)\n        (if (= n 0)\n            0\n            (+ 1 (round (quotient\
    \ n 2)))))\n      (define (to-binary n)\n        (if (= n 0)\n            \"\"\
    \n            (string-append (to-binary (quotient n 2)) (number->string (remainder\
    \ n 2)))))\n      (string-append \"0b\" (to-binary (round (avg n m))))))\n", " \
    \ (cond\n    [(> n m) -1]\n    [else\n     (define sum (+ n m))\n     (define\
    \ avg (/ sum 2))\n     (define rounded (round avg))\n     (define binary (number->string\
    \ rounded 2))\n     (string-append \"0b\" binary)]))\n", "  (cond [(> n m) -1]\n\
    \        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (if (> n m)\n\
    \      -1\n      (let ([sum (+ n m)])\n        (if (odd? sum)\n            (string-append\
    \ \"0b\" (number->string (round (/ sum 2))))\n            (string-append \"0b\"\
    \ (number->string (round (/ sum 2))))))))\n", "  (cond\n    [(> n m) -1]\n   \
    \ [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond [(> n m) -1]\n\
    \        [else (number->string (round (/ (+ n m) 2)) 2)]))\n", "  (cond\n    [(>\
    \ n m) -1]\n    [else (number->string (inexact->exact (round (/ (+ n m) 2.0)))\
    \ 2)]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
