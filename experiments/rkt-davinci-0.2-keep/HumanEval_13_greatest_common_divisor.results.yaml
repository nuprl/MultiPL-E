name: HumanEval_13_greatest_common_divisor
language: racket
results:
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= a 0)\n      b\n \
    \     (greatest_common_divisor (modulo b a) a)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= b 0) a]\n\
    \    [else (greatest_common_divisor b (modulo a b))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (define (gcd a b)\n    (if\
    \ (= b 0)\n        a\n        (gcd b (remainder a b))))\n  (gcd (abs a) (abs b)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= b 0) a]\n\
    \    [else (greatest_common_divisor b (modulo a b))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(= a b) a]\n    [(> a b) (greatest_common_divisor (- a\
    \ b) b)]\n    [else (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= b 0) a]\n\
    \    [else (greatest_common_divisor b (modulo a b))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n\
    \    (check-equal? (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n\
    \    (check-equal? (candidate 49 14) 7)\n    (check-equal? (candidate 144 60)\
    \ 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(> a b) (greatest_common_divisor (- a b) b)]\n    [else\
    \ (greatest_common_divisor a (- b a))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (cond\n    [(= a 0) b]\n\
    \    [(= b 0) a]\n    [(< a b) (greatest_common_divisor a (- b a))]\n    [else\
    \ (greatest_common_divisor (- a b) b)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal? (candidate\
    \ 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal? (candidate\
    \ 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return a greatest common divisor of two integers a\
    \ and b\n;; >>> greatest_common_divisor(3, 5)\n;; 1\n;; >>> greatest_common_divisor(25,\
    \ 15)\n;; 5\n(define (greatest_common_divisor a b)\n  (if (= b 0)\n      a\n \
    \     (greatest_common_divisor b (modulo a b))))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate greatest_common_divisor))\n    (check-equal?\
    \ (candidate 3 7) 1)\n    (check-equal? (candidate 10 15) 5)\n    (check-equal?\
    \ (candidate 49 14) 7)\n    (check-equal? (candidate 144 60) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
