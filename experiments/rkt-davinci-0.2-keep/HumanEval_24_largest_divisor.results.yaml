language: racket
name: HumanEval_24_largest_divisor
results:
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplm7gfat0.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplm7gfat0.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplm7gfat0.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9chvv3f.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9chvv3f.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9chvv3f.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67u6c433.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67u6c433.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp67u6c433.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4gb_1sip.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4gb_1sip.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4gb_1sip.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter\
    \ (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphveol3_q.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphveol3_q.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphveol3_q.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnb7vs5en.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnb7vs5en.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnb7vs5en.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ 0 (modulo n divisor))\n        divisor\n        (largest-divisor-iter n (- divisor\
    \ 1))))\n  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (zero? (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zvhrry6.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zvhrry6.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp5zvhrry6.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfvifzm82.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfvifzm82.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfvifzm82.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc4e1cnw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc4e1cnw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqc4e1cnw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        (largest-divisor-iter n (- d 1))\n        d))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl980fc_a.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpl980fc_a.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl980fc_a.rkt:20:4\n\
    actual:     4\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpl980fc_a.rkt:21:4\nactual:     49\n\
    expected:   50\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpl980fc_a.rkt:22:4\n\nremainder: contract\
    \ violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (or (= i\
    \ 1) (= (modulo n i) 0))\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnd1nsl3i.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnd1nsl3i.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnd1nsl3i.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (- i 1))\n            (largest-divisor-iter n (- i 1)))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb6n3ogm4.rkt:20:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb6n3ogm4.rkt:21:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb6n3ogm4.rkt:22:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb6n3ogm4.rkt:23:4


    modulo: division by zero

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpb6n3ogm4.rkt:24:4


    modulo: division by zero

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n \
    \       i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph4m2znqu.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph4m2znqu.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph4m2znqu.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph4m2znqu.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6dwl0ku.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6dwl0ku.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo6dwl0ku.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n \
    \       i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4w34sjhx.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4w34sjhx.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4w34sjhx.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4w34sjhx.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (+ i 1))\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprdey5612.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprdey5612.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprdey5612.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprdey5612.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprdey5612.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpead2n0tq.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpead2n0tq.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpead2n0tq.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpibd5c8k_.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpibd5c8k_.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpibd5c8k_.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpac0g0_4x.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpac0g0_4x.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpac0g0_4x.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzh438abj.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzh438abj.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzh438abj.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppk6qpvaz.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppk6qpvaz.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppk6qpvaz.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1qik68b.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1qik68b.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw1qik68b.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfyymcpww.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfyymcpww.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfyymcpww.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxffle6ek.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxffle6ek.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxffle6ek.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5zcr8gy.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5zcr8gy.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt5zcr8gy.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjt0ruc5k.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjt0ruc5k.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjt0ruc5k.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n \
    \       i\n        (divisor n (- i 1))))\n  (divisor n (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m16jgu2.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m16jgu2.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1m16jgu2.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpvxg93ec2.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmpvxg93ec2.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1z9vbw5t.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1z9vbw5t.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1z9vbw5t.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lhgkgbp.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lhgkgbp.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8lhgkgbp.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (ld n div)\n    (if (= (modulo n div) 0)\n  \
    \      (ld n (- div 1))\n        div))\n  (ld n (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1c73uv2.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1c73uv2.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1c73uv2.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1c73uv2.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1c73uv2.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n \
    \       i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv0_z7avt.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv0_z7avt.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv0_z7avt.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv0_z7avt.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= n i)\n        n\n \
    \       (if (= (modulo n i) 0)\n            i\n            (divisor n (+ i 1)))))\n\
    \  (divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3a00nc20.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3a00nc20.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3a00nc20.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3a00nc20.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_bmd5i4i.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_bmd5i4i.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_bmd5i4i.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvhtqfzn.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvhtqfzn.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvhtqfzn.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvhtqfzn.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbr8oesw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbr8oesw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbbr8oesw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (and (integer?\
    \ (/ n i)) (= (remainder n i) 0))\n        i\n        (largest-divisor-iter n\
    \ (+ i 1))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2ujsqqw.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2ujsqqw.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2ujsqqw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi2ujsqqw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (+ i 1))\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_7a1_ga9.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_7a1_ga9.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_7a1_ga9.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_7a1_ga9.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_7a1_ga9.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjalcvcoa.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjalcvcoa.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjalcvcoa.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (if (= n 1)\n      1\n      (let loop ([i (- n 1)])\n\
    \        (if (= (modulo n i) 0)\n            i\n            (loop (- i 1))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= n i)\n\
    \        (error \"No divisors found\")\n        (if (= (modulo n i) 0)\n     \
    \       i\n            (largest_divisor_iter n (+ i 1)))))\n  (largest_divisor_iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpknuwreyq.rkt:20:4


    No divisors found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpknuwreyq.rkt:21:4


    No divisors found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknuwreyq.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpknuwreyq.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        1\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_qa8vml1.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_qa8vml1.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcccrlfrl.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcccrlfrl.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcccrlfrl.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (ld n i)\n    (if (= 0 (modulo n i))\n      \
    \  i\n        (ld n (- i 1))))\n  (ld n (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rk6ptpf.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rk6ptpf.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_rk6ptpf.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6txt5oyz.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6txt5oyz.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6txt5oyz.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (let loop ([i n])\n    (if (zero? (modulo n i))\n   \
    \     i\n        (loop (- i 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquti_zuv.rkt:17:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquti_zuv.rkt:18:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquti_zuv.rkt:19:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquti_zuv.rkt:20:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpquti_zuv.rkt:21:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd4lzy7bd.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd4lzy7bd.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd4lzy7bd.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptflt9uul.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptflt9uul.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptflt9uul.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2kcfdwfw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2kcfdwfw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2kcfdwfw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (+ divisor 1))\n    \
    \    (- divisor 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz86p0xpq.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz86p0xpq.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz86p0xpq.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor-iter test-divisor)\n    (if (= (remainder\
    \ n test-divisor) 0)\n        test-divisor\n        (divisor-iter (- test-divisor\
    \ 1))))\n  (divisor-iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckapj1gi.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckapj1gi.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpckapj1gi.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxmq1m59.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxmq1m59.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzxmq1m59.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (- divisor 1))\n    \
    \    divisor))\n  (largest-divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w6uizy5.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3w6uizy5.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3w6uizy5.rkt:20:4\n\
    actual:     4\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3w6uizy5.rkt:21:4\nactual:     49\n\
    expected:   50\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp3w6uizy5.rkt:22:4\n\nmodulo: contract violation\n\
    \  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpznqr7b8e.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpznqr7b8e.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpznqr7b8e.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpkfk5hm.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpkfk5hm.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpkfk5hm.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n test-divisor)\n    (if\
    \ (= (remainder n test-divisor) 0)\n        (largest-divisor-iter n (- test-divisor\
    \ 1))\n        test-divisor))\n  (largest-divisor-iter n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgjqo1bur.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgjqo1bur.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgjqo1bur.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgjqo1bur.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgjqo1bur.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n      \
    \  i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdn90f7vl.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdn90f7vl.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdn90f7vl.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ow5m4bw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ow5m4bw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_ow5m4bw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmjw51gu.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmjw51gu.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmjw51gu.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqvvn77m2.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqvvn77m2.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqvvn77m2.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc9ss3hmk.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc9ss3hmk.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc9ss3hmk.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmusmsiw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmusmsiw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkmusmsiw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf7c0k9q.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf7c0k9q.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaf7c0k9q.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w5eyx8x.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w5eyx8x.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5w5eyx8x.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5raozza_.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5raozza_.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5raozza_.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwjkaap2.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwjkaap2.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzwjkaap2.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n      \
    \  i\n        (iter (- i 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppw5t6h0w.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppw5t6h0w.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppw5t6h0w.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8iwhg44h.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8iwhg44h.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8iwhg44h.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk25gdni.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk25gdni.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmptk25gdni.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (+ divisor 1))\n    \
    \    (- divisor 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuh_ie1m.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuh_ie1m.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuh_ie1m.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8krvvssk.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8krvvssk.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8krvvssk.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpciq5zeta.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpciq5zeta.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpciq5zeta.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3251r_80.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3251r_80.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3251r_80.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqpvztbt7.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqpvztbt7.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqpvztbt7.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqd36tuio.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqd36tuio.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqd36tuio.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzx5s5fcd.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzx5s5fcd.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzx5s5fcd.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6y88z0wf.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6y88z0wf.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6y88z0wf.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n test-divisor)\n    (if\
    \ (= (remainder n test-divisor) 0)\n        (largest-divisor-iter n (- test-divisor\
    \ 1))\n        test-divisor))\n  (largest-divisor-iter n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv94fqsjn.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv94fqsjn.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv94fqsjn.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv94fqsjn.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv94fqsjn.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n i)\n    (if (= (modulo n i) 0)\n \
    \       i\n        (divisor n (+ i 1))))\n  (divisor n 2))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphhigdb6a.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphhigdb6a.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphhigdb6a.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphhigdb6a.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppp9jrar2.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppp9jrar2.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppp9jrar2.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n i)\n    (if (= i n)\n        (error\
    \ \"no divisor found\")\n        (if (= (modulo n i) 0)\n            i\n     \
    \       (helper n (+ i 1)))))\n  (helper n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpmw7edws7.rkt:20:4


    no divisor found

    --------------------

    --------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpmw7edws7.rkt:21:4


    no divisor found

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmw7edws7.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmw7edws7.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor-iter test-divisor)\n    (if (= (remainder\
    \ n test-divisor) 0)\n        test-divisor\n        (divisor-iter (- test-divisor\
    \ 1))))\n  (divisor-iter (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmeqt1lz.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmeqt1lz.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxmeqt1lz.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest_divisor-iter n (- divisor 1))\n    \
    \    divisor))\n  (largest_divisor-iter n (- n 1)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpku_gxuqx.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpku_gxuqx.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpku_gxuqx.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpku_gxuqx.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpku_gxuqx.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sqg8buh.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sqg8buh.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3sqg8buh.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzab31q3t.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzab31q3t.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzab31q3t.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n)\n        \
    \   (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor\
    \ 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj57uskv4.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmpj57uskv4.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsm_7ushk.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsm_7ushk.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsm_7ushk.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_t9q8tk.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_t9q8tk.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz_t9q8tk.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckoo15lx.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckoo15lx.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpckoo15lx.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((&gt;\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpfz84ugp2.rkt:7:2: read-syntax: expected a `)` to close `(`\n  possible\
    \ cause: indentation suggests a missing `)` before line 13\n  context...:\n  \
    \ /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyma3s2kw.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyma3s2kw.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyma3s2kw.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n)\n        \
    \   (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor\
    \ 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpqrhny634.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmpqrhny634.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5m9no6y5.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5m9no6y5.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5m9no6y5.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (- divisor 1))\n    \
    \    divisor))\n  (largest-divisor-iter n (- n 1)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4fd5gmxf.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4fd5gmxf.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4fd5gmxf.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4fd5gmxf.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4fd5gmxf.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzywi320q.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzywi320q.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzywi320q.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (or (= n\
    \ i) (= 0 (modulo n i)))\n        i\n        (largest-divisor-iter n (- i 1))))\n\
    \  (largest-divisor-iter n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfg34xff0.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfg34xff0.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpfg34xff0.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (helper n (- divisor 1))\n        (+ divisor 1)))\n  (helper n (/\
    \ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eppbfv9.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eppbfv9.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6eppbfv9.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n i)\n    (if (= n i)\n        n\n  \
    \      (if (= (modulo n i) 0)\n            i\n            (helper n (+ i 1)))))\n\
    \  (helper n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9hg77pw.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9hg77pw.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9hg77pw.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9hg77pw.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf7h87_i_.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf7h87_i_.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf7h87_i_.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpmk8kb9.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpmk8kb9.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcpmk8kb9.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwmfkrwp1.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwmfkrwp1.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwmfkrwp1.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (+ i 1))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqscuiy60.rkt:18:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqscuiy60.rkt:19:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqscuiy60.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqscuiy60.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        1\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2o_9d5es.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2o_9d5es.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        (largest-divisor-iter n (- i 1))\n        i))\n  (largest-divisor-iter\
    \ n (quotient n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    ERROR

    name:       check-equal?

    location:   /tmp/tmpc41vou0k.rkt:18:4


    modulo: division by zero

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc41vou0k.rkt:19:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc41vou0k.rkt:20:4

    actual:     4

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc41vou0k.rkt:21:4

    actual:     49

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc41vou0k.rkt:22:4

    actual:     24

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (iter i)\n    (if (= (modulo n i) 0)\n      \
    \  (if (= i 1)\n            1\n            (iter (- i 1)))\n        (iter (- i\
    \ 1))))\n  (iter (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp34tvame.rkt:22:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp34tvame.rkt:23:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp34tvame.rkt:24:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6z532hq.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6z532hq.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz6z532hq.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2hktc4j.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2hktc4j.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa2hktc4j.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (- i 1))\n        i))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp06rw917k.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp06rw917k.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp06rw917k.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp06rw917k.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp06rw917k.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (for/fold ([divisor n]) ([i (in-range 1 n)])\n    (if\
    \ (zero? (modulo n i))\n        (min divisor i)\n        divisor)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj63sw2k8.rkt:19:4

    actual:     1

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj63sw2k8.rkt:20:4

    actual:     1

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj63sw2k8.rkt:21:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdxoqwq8.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdxoqwq8.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppdxoqwq8.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9w6on40v.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9w6on40v.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9w6on40v.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzcl3wib.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzcl3wib.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvzcl3wib.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpub6_j7_0.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpub6_j7_0.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpub6_j7_0.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        1\n        (if (= (modulo n i) 0)\n            i\n            (largest-divisor-iter\
    \ n (+ i 1)))))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8qmsko_.rkt:22:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr8qmsko_.rkt:23:4

    actual:     2

    expected:   50

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor (- d 1))))\n  (divisor (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (+ i 1))\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphsn0ps5z.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphsn0ps5z.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphsn0ps5z.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphsn0ps5z.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphsn0ps5z.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6eplx73o.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6eplx73o.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6eplx73o.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdfn8z1w.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdfn8z1w.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfdfn8z1w.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n i)\n    (if (= 0 (modulo n i))\n  \
    \      i\n        (helper n (- i 1))))\n  (helper n (- n 1)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (next test-divisor)))\n          (else (find-divisor n (next test-divisor)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmppimno0cx.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmppimno0cx.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-iter\
    \ n (+ i 1))\n            (largest-divisor-iter n (+ i 1)))))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdmnu866.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdmnu866.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdmnu866.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdmnu866.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjdmnu866.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t5g5zth.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t5g5zth.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0t5g5zth.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqu3lwief.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqu3lwief.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqu3lwief.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge6jxx6.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge6jxx6.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpoge6jxx6.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (- i 1))\n        i))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrdxi7cn.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrdxi7cn.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrdxi7cn.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrdxi7cn.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprrdxi7cn.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest_divisor-iter\
    \ n (+ i 1))\n            (largest_divisor-iter n (+ i 1)))))\n  (largest_divisor-iter\
    \ n 1))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuokvusv3.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuokvusv3.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuokvusv3.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuokvusv3.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuokvusv3.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8raapgk.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8raapgk.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk8raapgk.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (+ divisor 1))\n    \
    \    (- divisor 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvcxbkq4i.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvcxbkq4i.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvcxbkq4i.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest-divisor-iter n (+ divisor 1))\n    \
    \    (- divisor 1)))\n  (largest-divisor-iter n 2))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0v7rl5e8.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0v7rl5e8.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0v7rl5e8.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31dyd3e3.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31dyd3e3.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp31dyd3e3.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64jxyprp.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64jxyprp.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp64jxyprp.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4t2nq3fn.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4t2nq3fn.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4t2nq3fn.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (helper n divisor)\n    (if (= (modulo n divisor)\
    \ 0)\n        (helper n (- divisor 1))\n        divisor))\n  (helper n (/ n 2)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohoja325.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpohoja325.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpohoja325.rkt:20:4\n\
    actual:     4\nexpected:   5\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpohoja325.rkt:21:4\nactual:     49\n\
    expected:   50\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpohoja325.rkt:22:4\n\nmodulo: contract violation\n\
    \  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_epykf1.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_epykf1.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5_epykf1.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzcjss1te.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzcjss1te.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzcjss1te.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjr6d5e4o.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjr6d5e4o.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjr6d5e4o.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhyizlmv.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhyizlmv.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuhyizlmv.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp1fpw6290.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmp1fpw6290.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (for/fold ([divisor n]) ([i (in-range 1 (add1 (quotient\
    \ n 2)))])\n    (if (zero? (modulo n i))\n        i\n        divisor)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (divisor n d)\n    (if (= (remainder n d) 0)\n\
    \        d\n        (divisor n (- d 1))))\n  (divisor n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatvyf3mm.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatvyf3mm.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpatvyf3mm.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n divisor)\n    (if (=\
    \ (modulo n divisor) 0)\n        (largest_divisor-iter n (+ divisor 1))\n    \
    \    (- divisor 1)))\n  (largest_divisor-iter n 2))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n    (check-equal?\
    \ (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate\
    \ 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
    \ 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmodgki8i.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmodgki8i.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmodgki8i.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp83fsijnh.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp83fsijnh.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp83fsijnh.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor_iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ttztyf9.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ttztyf9.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7ttztyf9.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt49n30oz.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt49n30oz.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpt49n30oz.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n)\n        \
    \   (find-divisor n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor\
    \ 1)))))\n  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n\
    \    (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n   \
    \ (check-equal? (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\
    \n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6mm2yshb.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmp6mm2yshb.rkt:8:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpi4a5fdf7.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmpi4a5fdf7.rkt:8:15\n"
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (find-divisor n test-divisor)\n    (cond ((>\
    \ (square test-divisor) n) n)\n          ((divides? test-divisor n) (find-divisor\
    \ n (+ test-divisor 1)))\n          (else (find-divisor n (+ test-divisor 1)))))\n\
    \  (find-divisor n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n \
    \   (check-equal? (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal?\
    \ (candidate 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp6kf5cwcp.rkt:8:15: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmp6kf5cwcp.rkt:8:15\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (zero? (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp14b4d37t.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp14b4d37t.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp14b4d37t.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest-divisor-iter n (- i 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1w06y35.rkt:18:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1w06y35.rkt:19:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo1w06y35.rkt:22:4\n\
    \nmodulo: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n d)\n    (if (= (remainder\
    \ n d) 0)\n        d\n        (largest-divisor-iter n (- d 1))))\n  (largest-divisor-iter\
    \ n (/ n 2)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp73grmxa5.rkt:18:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 3/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp73grmxa5.rkt:19:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 7/2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp73grmxa5.rkt:22:4\n\
    \nremainder: contract violation\n  expected: integer?\n  given: 49/2\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest_divisor-iter n i)\n    (if (= 0 (modulo\
    \ n i))\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal?\
    \ (candidate 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate\
    \ 100) 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-helper n i)\n    (if (= n i)\n\
    \        n\n        (if (= (modulo n i) 0)\n            (largest-divisor-helper\
    \ n (+ i 1))\n            (largest-divisor-helper n (+ i 1)))))\n  (largest-divisor-helper\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1d5wbka5.rkt:20:4

    actual:     3

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1d5wbka5.rkt:21:4

    actual:     7

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1d5wbka5.rkt:22:4

    actual:     10

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1d5wbka5.rkt:23:4

    actual:     100

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1d5wbka5.rkt:24:4

    actual:     49

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwip_2hyp.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwip_2hyp.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwip_2hyp.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpritpoz6z.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpritpoz6z.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpritpoz6z.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n test-divisor)\n    (if\
    \ (= (remainder n test-divisor) 0)\n        (largest-divisor-iter n (- test-divisor\
    \ 1))\n        test-divisor))\n  (largest-divisor-iter n (- n 1)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
    \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
    \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal?\
    \ (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1j9utwrn.rkt:18:4

    actual:     2

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1j9utwrn.rkt:19:4

    actual:     6

    expected:   1

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1j9utwrn.rkt:20:4

    actual:     9

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1j9utwrn.rkt:21:4

    actual:     99

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1j9utwrn.rkt:22:4

    actual:     48

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxp4tw7o.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxp4tw7o.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcxp4tw7o.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkzylfgm.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkzylfgm.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplkzylfgm.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxnsq6mwn.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxnsq6mwn.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxnsq6mwn.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; For a given number n, find the largest number that\
    \ divides n evenly, smaller than n\n;; >>> largest_divisor(15)\n;; 5\n(define\
    \ (largest_divisor n)\n  (define (largest-divisor-iter n i)\n    (if (= (modulo\
    \ n i) 0)\n        (largest-divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest-divisor-iter\
    \ n 2))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ largest_divisor))\n    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate\
    \ 7) 1)\n    (check-equal? (candidate 10) 5)\n    (check-equal? (candidate 100)\
    \ 50)\n    (check-equal? (candidate 49) 7)\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflsbhmdk.rkt:20:4

    actual:     2

    expected:   5

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflsbhmdk.rkt:21:4

    actual:     2

    expected:   50

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflsbhmdk.rkt:22:4

    actual:     1

    expected:   7

    --------------------

    '
  stdout: ''
