name: HumanEval_71_triangle_area
language: racket
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; triangle_area(3, 4, 5) == 6.00\n;; triangle_area(1, 2, 10) == -1\n(define (triangle_area\
  \ a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(and (>= a b) (>= a c)) (sqrt (- (* a a) (* b b) (* c\
    \ c)))]\n    [(and (>= b a) (>= b c)) (sqrt (- (* b b) (* a a) (* c c)))]\n  \
    \  [(and (>= c a) (>= c b)) (sqrt (- (* c c) (* a a) (* b b)))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b) (- a c)) (* (* b b) (*\
    \ c c))))]\n    [(and (>= b a) (>= b c)) (sqrt (+ (* (- b a) (- b c)) (* (* a\
    \ a) (* c c))))]\n    [(and (>= c a) (>= c b)) (sqrt (+ (* (- c a) (- c b)) (*\
    \ (* a a) (* b b))))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b\
    \ 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (number? area)\n           (round (*\
    \ area 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (<=\
    \ a 0) (<= b 0) (<= c 0)) -1]\n    [(or (<= (+ a b) c) (<= (+ a c) b) (<= (+ b\
    \ c) a)) -1]\n    [else (round (* 0.5 (* a b c) 2))]))\n", "  (cond\n    [(and\
    \ (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/\
    \ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n  \
    \     (cond\n         [(> area 0) (round (* area 100))]\n         [else -1]))]\n\
    \    [else -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b)\
    \ c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n\
    \    (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond ((is-valid-triangle\
    \ a b c)\n         (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (define s (/ (+ a b c) 2))\n    \
    \ (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number? area)\
    \ (not (nan? area)))\n         (round (* area 100))\n         -1)]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if\
    \ (and (number? area) (not (nan? area)))\n         (round (* area 100))\n    \
    \     -1)]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n\
    \       [(>= (+ b c) a)\n        (round (* 0.5 (* a (- b c))))]\n       [else\
    \ -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>= (+ a c) b)\n  \
    \      (round (* 0.5 (* b (- a c))))]\n       [else -1])]\n    [(and (>= c a)\
    \ (>= c b))\n     (cond\n       [(>= (+ a b) c)\n        (round (* 0.5 (* c (-\
    \ a b))))]\n       [else -1])]))\n", "  (cond\n    [(and (< a 0) (< b 0) (< c\
    \ 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (<\
    \ c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0)\
    \ (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b\
    \ 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (<\
    \ b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0)\
    \ (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a\
    \ 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (<\
    \ a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c", "  (if (and (>= a 0) (>= b 0) (>= c 0))\n      (if (and\
    \ (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (* (+ a\
    \ b) c)))\n          -1)\n      -1))\n", "  (define (is-valid-triangle a b c)\n\
    \    (and (&gt;= a b c)\n         (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n\
    \         (&gt; (+ b c) a)))\n  (cond [(is-valid-triangle a b c)\n         (define\
    \ (s (/ (+ a b c) 2))\n           (sqrt (* s (- s a) (- s b) (- s c))))\n    \
    \     (round (* 100 s))]\n        [else -1]))\n", "  (cond [(and (> a 0) (> b\
    \ 0) (> c 0))\n         (let* ([s (/ (+ a b c) 2)]\n                [area (sqrt\
    \ (- (* s (- s a)) (* s (- s b)) (* s (- s c))))])\n           (if (and (>= area\
    \ 0) (not (nan? area)))\n               (round (* area 100) 2)\n             \
    \  -1))]\n        [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (> area 0)\n           (round (* area 100) 2)\n    \
    \       -1))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c\
    \ 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (-\
    \ s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n      \
    \     (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n   \
    \      (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt\
    \ (* (- (* a a) (* b b) (* c c)) (* (- a b) (- a c) (- b c)))))\n  (cond ((is-valid-triangle\
    \ a b c)\n         (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c)\
    \ (>= (+ a c) b) (>= (+ b c) a))\n        (round (* 0.5 (- (+ a b c) a b c)) 2)]\n\
    \       [else -1])]\n    [else -1]))\n", "  (define (is-valid-triangle a b c)\n\
    \    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define\
    \ (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond\
    \ ((is-valid-triangle a b c)\n         (round (* 100 (area a b c))))\n       \
    \ (else -1)))\n", "  (cond\n    [(and (<= a 0) (<= b 0) (<= c 0)) -1]\n    [(and\
    \ (<= (+ a b) c) (<= (+ a c) b) (<= (+ b c) a)) -1]\n    [else (round (* 0.5 (*\
    \ a b c)) 2)]))\n", "  (cond\n    [(> (+ a b) c)\n     (round (* 0.5 (* a b (sin\
    \ (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n    \
    \        [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (cond\n        \
    \ [(> area 0) (round (* area 100))]\n         [else -1]))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+\
    \ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5 (- (+ a b c) (-\
    \ a b c)) 2))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a))\n        (round (* (/ (sqrt (+ (* (- a (/ a 2)) (- a (/ a 2)))\
    \ (* (- b (/ b 2)) (- b (/ b 2))) (* (- c (/ c 2)) (- c (/ c 2))))) 2) 2))]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s (- s a)\
    \ (- s b) (- s c))))\n     (if (number? area)\n         (round (* area 100))\n\
    \         -1)]\n    [else -1]))\n", "  (cond [(and (> (+ a b) c) (> (+ a c) b)\
    \ (> (+ b c) a)) (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c))\
    \ (* 2 a b)))))) 2)]\n        [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n\
    \    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n     (let ([s (/ (+ a b\
    \ c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n    \
    \   (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n   \
    \ [(and (>= a b) (>= a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s a)\
    \ (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b c)\
    \ 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n \
    \    (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else\
    \ -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n   \
    \      (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt\
    \ (+ (* (- (* a a) (* b b)) (* c c))\n            (* (* 2 a b) (* 2 a c))\n  \
    \          (* (* 2 b c) (* 2 b a)))))\n  (cond ((is-valid-triangle a b c)\n  \
    \       (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n    [(>=\
    \ (+ a b) c) (* 0.5 (+ a b c))]\n    [(>= (+ a c) b) (* 0.5 (+ a b c))]\n    [(>=\
    \ (+ b c) a) (* 0.5 (+ a b c))]\n    [else -1]))\n", "  (if (and (>= a 0) (>=\
    \ b 0) (>= c 0))\n      (if (and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a))\n\
    \          (round (* 0.5 (* (+ a b) c)) 2)\n          -1)\n      -1))\n", "  (define\
    \ (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (+ (* (- (* a a)\
    \ (* b b)) (* c c))\n            (* (* 2 a b) (* 2 a c))\n            (* (* 2\
    \ b c) (* 2 a b)))))\n  (cond ((is-valid-triangle a b c)\n         (round (* 100\
    \ (area a b c))))\n        (else -1)))\n", "  (cond\n    [(and (> a 0) (> b 0)\
    \ (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s\
    \ a) (- s b) (- s c)))])\n       (if (number? area)\n           (round (* area\
    \ 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (> area 0) (not (infinite? area)))\n\
    \           (round (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (- (+\
    \ a b c) a b c)) 2)]\n    [else -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n\
    \      (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n          (round (*\
    \ 0.5 (sqrt (- (* (+ a b c) (* a b c)) (* a a) (* b b) (* c c)))) 2)\n       \
    \   -1)\n      -1))\n", "  (cond\n    [(or (> (+ a b) c) (> (+ a c) b) (> (+ b\
    \ c) a))\n     (round (* (/ (+ a b c) 2) (sqrt (- (* (+ a b c) (* (+ a b c)) (*\
    \ (- a b c) (- a b c)))))) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> (+\
    \ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* (sqrt (- (* (- (+ a b)\
    \ c) (- (+ a b) c)) (* 4 (* a a) (* b b)))) 2) 2)]\n    [else -1]))\n", "  (if\
    \ (and (>= a b c)\n           (>= b c a)\n           (>= c a b))\n      (round\
    \ (* 0.5 (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c)) 2)\n      -1))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area 0)\
    \ (not (infinite? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n         (define\
    \ s (/ (+ a b c) 2))\n         (sqrt (* s (- s a) (- s b) (- s c)))]\n       \
    \ [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s\
    \ (/ (+ a b c) 2)])\n       (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond ((and (<= a 0) (<= b 0) (<= c 0)) -1)\n        ((or (<= (+ a b) c) (<=\
    \ (+ a c) b) (<= (+ b c) a)) -1)\n        (else (round (* 0.5 (* a (sqrt (- (*\
    \ b b) (* (* c c) (/ (- b c) a)))))) 2))))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s\
    \ (- s a) (- s b) (- s c))))\n     (if (and (number? area) (> area 0))\n     \
    \    (round (* area 100) 2)\n         -1)]\n    [else -1]))\n", "  (cond\n   \
    \ [(>= (+ a b) c) (* 0.5 (- (+ a b) c) (sqrt (- (* (- (+ a b) c) (- (+ a b) c))\
    \ (* (- a c) (- a c)) (* (- b c) (- b c)))))]\n    [else -1]))\n", "  (define\
    \ (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (*\
    \ b b) (* c c)) (* a b c))))\n  (cond ((is-valid-triangle a b c) (round (* 100\
    \ (area a b c))))\n        (else -1)))\n", "  (cond\n    [(and (>= a 0) (>= b\
    \ 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(or (< a 0) (< b 0) (< c 0)) -1]\n    [(or (> a (+ b c)) (> b (+ a c)) (>\
    \ c (+ a b))) -1]\n    [else (round (* 0.5 (* a b c)) 2)]))\n", "  (if (and (>\
    \ (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n      (round\
    \ (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (-\
    \ s c))))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (>= area 0) (not (nan? area)))\n           (round\
    \ (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan?\
    \ area)))\n           (round (* area 100))\n           -1))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number?\
    \ area) (> area 0))\n         (round (* area 100) 2)\n         -1)]\n    [else\
    \ -1]))\n", "  (define (is-triangle a b c)\n    (and (&gt; a 0) (&gt; b 0) (&gt;\
    \ c 0)\n         (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n         (&gt; (+\
    \ b c) a)))\n  (cond ((is-triangle a b c)\n         (define p (/ (+ a b c) 2))\n\
    \         (sqrt (* p (- p a) (- p b) (- p c))))\n        (else -1)))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (number? area)\n      \
    \   (round (* area 100))\n         -1)]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area\
    \ (sqrt (* s (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round\
    \ (* area 100))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a)\
    \ (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n   \
    \        (round (* area 100))\n           -1))]\n    [else -1]))\n```\n\n```racket\n\
    #lang racket\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n\
    \       [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a))\n        (round (*\
    \ (/ 1 2) (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n\
    \     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n    \
    \ (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* b b))))]\n       [else -1])]\n    [(and (>= c a) (>= c b))\n    \
    \ (cond\n       [(>= (+ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* c c))))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100) 2)\n           -1))]\n    [else\
    \ -1]))\n", "  (define (is-triangle? a b c)\n    (and (&gt; a 0) (&gt; b 0) (&gt;\
    \ c 0)\n         (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a)))\n  (define\
    \ (area a b c)\n    (sqrt (+ (* (- a b) (- a b))\n             (* (- b c) (- b\
    \ c))\n             (* (- c a) (- c a)))))\n  (if (is-triangle? a b c)\n     \
    \ (round (* 100 (area a b c)))\n      -1))\n</code>\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (number? area)\n           (round\
    \ (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round\
    \ (* area 100))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c\
    \ 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s (- s a) (-\
    \ s b) (- s c))))\n     (if (number? area)\n         (round (* area 100) 2)\n\
    \         -1)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>\
    \ a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt\
    \ (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan?\
    \ area)))\n           (round (* area 100))\n           -1))]\n    [else -1]))\n",
  "  (cond\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c\
    \ 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (<\
    \ c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0)\
    \ (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b\
    \ 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (<\
    \ b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0)\
    \ (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a\
    \ 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (<\
    \ a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c", "  (cond\n  \
    \  [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n         \
    \   [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (cond\n         [(> area\
    \ 0) (round (* area 100))]\n         [else -1]))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (number? area)\n      \
    \   (round (* area 100) 2)\n         -1)]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100) 2)\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if\
    \ (and (number? area) (not (nan? area)))\n         (round (* area 100))\n    \
    \     -1)]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (cond\n\
    \       [(>= (+ b c) a)\n        (round (* 0.5 (- (* a a) (- (* b b) (* c c))))\
    \ 2)]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n     (cond\n       [(>=\
    \ (+ a c) b)\n        (round (* 0.5 (- (* b b) (- (* a a) (* c c)))) 2)]\n   \
    \    [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+ a b)\
    \ c)\n        (round (* 0.5 (- (* c c) (- (* a a) (* b b)))) 2)]\n       [else\
    \ -1])]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n  \
    \   (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (-\
    \ s c)))])\n       (cond\n         [(> area 0) (round (* area 100) 2)]\n     \
    \    [else -1]))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (>\
    \ c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt (* s (- s a)\
    \ (- s b) (- s c))))\n     (cond\n       [(> area 0) (round (* area 100) 2)]\n\
    \       [else -1])]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n\
    \         (let* ([s (/ (+ a b c) 2)]\n                [area (sqrt (- (* s (- s\
    \ a)) (* s (- s b)) (* s (- s c))))])\n           (if (and (number? area) (not\
    \ (nan? area)))\n               (round (* area 100))\n               -1))]\n \
    \       [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n    \
    \ (cond\n       [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round\
    \ (* 0.5 (- (+ a b c) a b c)) 2)]\n       [else -1])]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define p (/ (+ a b c) 2))\n\
    \     (define s (sqrt (- (* p (- p a)) (* p (- p b)) (* p (- p c)))))\n     (define\
    \ (round x)\n       (define (round-helper x)\n         (if (< x 10)\n        \
    \     x\n             (round-helper (quotient x 10))))\n       (define (round-helper2\
    \ x)\n         (if (< x 100)\n             x\n             (round-helper2 (quotient\
    \ x 10))))\n       (define (round-helper3 x)\n         (if (< x 1000)\n      \
    \       x\n             (round-helper3 (quotient x 10))))\n       (define (round-helper4\
    \ x)\n         (if (< x 10000)\n             x\n             (round-helper4 (quotient\
    \ x 10))))\n       (define (round-helper5 x)\n         (if (< x 100000)\n    \
    \         x\n             (round-helper5 (quotient x 10))))\n       (define (round-helper6\
    \ x)\n         (if (< x 1000000)\n             x\n             (round-helper6\
    \ (quotient x 10))))\n       (define (round-helper7 x)\n         (if (< x 10000000)\n\
    \             x\n             (round-helper7 (quotient x 10))))\n       (define\
    \ (round-helper8 x)\n         (if (< x 100000000)\n             x\n          \
    \   (round-helper8 (quotient x 10))))\n       (define (round-helper9 x)\n    \
    \     (if (< x 1000000000)\n             x\n             (round-helper9 (quotient\
    \ x 10))))\n       (define (round-helper10 x)\n         (if (< x 10000000000)\n\
    \             x\n             (round-helper10 (quotient x 10))))\n       (define\
    \ (round-helper11 x)\n         (if (< x 100000000000)\n             x\n      \
    \       (round-helper11 (quotient x 10))))\n       (define (round-helper12 x)\n\
    \         (if (< x 100", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n\
    \           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n",
  "  (cond [(and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n         (cond [(and (&gt;=\
    \ (+ a b) c) (&gt;= (+ a c) b) (&gt;= (+ b c) a))\n                (round (* 0.5\
    \ (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)]\n      \
    \         [else -1])]\n        [else -1]))\n</code>\n", "  (define (is-triangle\
    \ a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c)\
    \ a)))\n  (define (area a b c)\n    (sqrt (+ (* (- (* a a) (* b b)) (* c c))\n\
    \            (* (- (* a a) (* c c)) (* b b))\n            (* (- (* b b) (* c c))\
    \ (* a a)))))\n  (cond ((is-triangle a b c)\n         (round (* 100 (area a b\
    \ c))))\n        (else -1)))\n", "  (cond\n    [(and (>= a b) (>= a c))\n    \
    \ (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (-\
    \ s c)))])\n       (cond\n         [(>= area 0) (round (* area 100))]\n      \
    \   [else -1]))]\n    [(and (>= b a) (>= b c))\n     (triangle_area b a c)]\n\
    \    [(and (>= c a) (>= c b))\n     (triangle_area c a b)]))\n", "  (cond\n  \
    \  [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (*\
    \ (/ s (- s a)) (/ s (- s b)) (/ s (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area 0)\
    \ (not (infinite? area)))\n           (round (* area 100) 2)\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define p (/\
    \ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b) (- p c)))]\n    [(and (>= b a)\
    \ (>= b c))\n     (define p (/ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b)\
    \ (- p c)))]\n    [(and (>= c a) (>= c b))\n     (define p (/ (+ a b c) 2))\n\
    \     (sqrt (* p (- p a) (- p b) (- p c)))]\n    [else -1]))\n", "  (if (and (>\
    \ a 0) (> b 0) (> c 0))\n      (let* ([s (/ (+ a b c) 2)]\n             [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n        (if (and (> area 0) (not (infinite?\
    \ area)))\n            (round (* area 100) 2)\n            -1))\n      -1))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b)\
    \ (- a c)) (* (* b b) (* c c))))]\n    [(and (>= b a) (>= b c)) (sqrt (+ (* (-\
    \ b a) (- b c)) (* (* a a) (* c c))))]\n    [(and (>= c a) (>= c b)) (sqrt (+\
    \ (* (- c a) (- c b)) (* (* a a) (* b b))))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round (* area 100))]\n   \
    \ [else -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n\
    \         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n  \
    \  (sqrt (+ (* (- a b) (- a b))\n             (* (- b c) (- b c))\n          \
    \   (* (- c a) (- c a)))))\n  (cond ((is-valid-triangle a b c)\n         (round\
    \ (* 100 (area a b c))))\n        (else -1)))\n", "  (cond [(and (&gt;= a 0) (&gt;=\
    \ b 0) (&gt;= c 0))\n         (define s (/ (+ a b c) 2))\n         (sqrt (* s\
    \ (- s a) (- s b) (- s c)))]\n        [else -1]))\n", "  (cond\n    [(and (> a\
    \ 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n     (define area (sqrt\
    \ (* s (- s a) (- s b) (- s c))))\n     (round (* 100 area))]\n    [else -1]))\n",
  "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n         (> (+ a c)\
    \ b)\n         (> (+ b c) a)))\n  (define (area a b c)\n    (* (/ (+ a b c) 2)\n\
    \       (- (/ (+ a b c) 2) a)\n       (- (/ (+ a b c) 2) b)\n       (- (/ (+ a\
    \ b c) 2) c)))\n  (cond ((is-valid-triangle a b c)\n         (round (* 100 (sqrt\
    \ (area a b c)))))\n        (else -1)))\n", "  (cond\n    [(or (> (+ a b) c) (>\
    \ (+ a c) b) (> (+ b c) a))\n     (round (* 0.5 (* a b c)) 2)]\n    [else -1]))\n",
  "  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     (round (* 0.5\
    \ (- (+ a b c) a b c)) 2)]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (define p (/ (+ a b c) 2))\n     (define\
    \ s (sqrt (- (* p (- p a)) (* p (- p b)) (* p (- p c)))))\n     (define r (round\
    \ (* s 100)))\n     (/ r 100)]\n    [else -1]))\n", "  (define (is-valid-triangle\
    \ a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c)\
    \ a)))\n  (cond\n    [(is-valid-triangle a b c)\n     (round (* 0.5 (* a b c))\
    \ 2)]\n    [else -1]))\n", "  (cond\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n\
    \    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b\
    \ c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else\
    \ -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (sqrt (- (* (- a b) (-\
    \ a b)) (* (- a c) (- b c)))) 2))\n          -1)\n      -1))\n", "  (cond [(and\
    \ (> a 0) (> b 0) (> c 0))\n         (define p (/ (+ a b c) 2))\n         (define\
    \ area (sqrt (* p (- p a) (- p b) (- p c))))\n         (round (* area 100))]\n\
    \        [else -1]))\n", "  (cond\n    [(>= (+ a b) c) (* 0.5 (expt (- a (* 0.5\
    \ (- (+ a b) c))) 2))]\n    [(>= (+ a c) b) (* 0.5 (expt (- b (* 0.5 (- (+ a c)\
    \ b))) 2))]\n    [(>= (+ b c) a) (* 0.5 (expt (- c (* 0.5 (- (+ b c) a))) 2))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (> area 0) (not (infinite? area)))\n           (round (* area\
    \ 100) 2)\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b)\
    \ (>= a c)) (sqrt (* (- a b) (- a c) (- (+ a b) c) (- (+ a c) b))) ]\n    [(and\
    \ (>= b a) (>= b c)) (sqrt (* (- b a) (- b c) (- (+ b a) c) (- (+ b c) a))) ]\n\
    \    [(and (>= c a) (>= c b)) (sqrt (* (- c a) (- c b) (- (+ c a) b) (- (+ c b)\
    \ a))) ]\n    [else -1]))\n", "  (define (is-valid-triangle? a b c)\n    (and\
    \ (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area\
    \ a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond ((is-valid-triangle?\
    \ a b c)\n         (round (* 100 (area a b c))))\n        (else -1)))\n", "  (define\
    \ (is-valid-triangle? a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (*\
    \ b b) (* c c)) (* a b c))))\n  (cond [(is-valid-triangle? a b c) (round (* 100\
    \ (area a b c)))]\n        [else -1]))\n", "  (define (is-valid-triangle a b c)\n\
    \    (and (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n         (&gt; (+ b c)\
    \ a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a\
    \ b c))))\n  (cond ((is-valid-triangle a b c)\n         (round (* 100 (area a\
    \ b c))))\n        (else -1)))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c\
    \ 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (-\
    \ s b) (- s c)))])\n       (if (and (number? area) (> area 0))\n           (round\
    \ (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (define (is-valid-triangle?\
    \ a b c)\n    (and (&gt; a 0) (&gt; b 0) (&gt; c 0)\n         (&gt; (+ a b) c)\n\
    \         (&gt; (+ a c) b)\n         (&gt; (+ b c) a)))\n  (define (area a b c)\n\
    \    (define (semi-perimeter a b c)\n      (/ (+ a b c) 2))\n    (define (heron-formula\
    \ a b c)\n      (sqrt (* (- (semi-perimeter a b c) a)\n               (- (semi-perimeter\
    \ a b c) b)\n               (- (semi-perimeter a b c) c))))\n    (heron-formula\
    \ a b c))\n  (cond ((is-valid-triangle? a b c) (area a b c))\n        (else -1)))\n\
    </code>\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n    \
    \   [(and (>= (+ a b) c) (>= (+ a c) b) (>= (+ b c) a))\n        (round (* 0.5\
    \ (- (+ a b c) a) (- (+ a b c) b) (- (+ a b c) c)) 2)]\n       [else -1])]\n \
    \   [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s\
    \ (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>=\
    \ b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (* s (- s a) (- s b)\
    \ (- s c)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c)) (sqrt (* (- a b c) (- a b c) (* (- a b c) (- a b c) (+ (* a a) (* b b)\
    \ (* c c)))))]\n    [(and (>= b a) (>= b c)) (sqrt (* (- b a c) (- b a c) (* (-\
    \ b a c) (- b a c) (+ (* a a) (* b b) (* c c)))))]\n    [(and (>= c a) (>= c b))\
    \ (sqrt (* (- c a b) (- c a b) (* (- c a b) (- c a b) (+ (* a a) (* b b) (* c\
    \ c)))))]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n     \
    \    (define p (/ (+ a b c) 2))\n         (define area (sqrt (* p (- p a) (- p\
    \ b) (- p c))))\n         (if (and (number? area) (not (nan? area)))\n       \
    \      (round (* area 100))\n             -1)]\n        [else -1]))\n", "  (if\
    \ (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b\
    \ (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)\n      -1))\n",
  "  (cond\n    [(>= (+ a b) c) (* 0.5 (+ a b) c)]\n    [(>= (+ a c) b) (* 0.5 (+\
    \ a c) b)]\n    [(>= (+ b c) a) (* 0.5 (+ b c) a)]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (define p (/ (+ a b c) 2))\n     (sqrt (*\
    \ p (- p a) (- p b) (- p c)))]\n    [(and (>= b a) (>= b c))\n     (define p (/\
    \ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b) (- p c)))]\n    [(and (>= c a)\
    \ (>= c b))\n     (define p (/ (+ a b c) 2))\n     (sqrt (* p (- p a) (- p b)\
    \ (- p c)))]\n    [else -1]))\n", "  (cond\n    [(and (>= a 1) (>= b 1) (>= c\
    \ 1))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (-\
    \ s b) (- s c)))])\n       (if (and (not (nan? area)) (> area 0))\n          \
    \ (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (define (is-valid-triangle\
    \ a b c)\n    (and (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n         (&gt;\
    \ (+ b c) a)))\n  (cond ((is-valid-triangle a b c)\n         (define s (/ (+ a\
    \ b c) 2))\n         (define area (sqrt (* s (- s a) (- s b) (- s c))))\n    \
    \     (round (* area 100) 2))\n        (else -1)))\n", "  (if (and (> (+ a b)\
    \ c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b (sin (acos (/ (-\
    \ (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)\n      -1))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (> area\
    \ 0))\n           (round (* area 100) 2)\n           -1))]\n    [else -1]))\n",
  "  (cond [(and (>= a 0) (>= b 0) (>= c 0))\n         (cond [(and (> (+ a b) c) (>\
    \ (+ a c) b) (> (+ b c) a))\n                (round (* 0.5 (* (+ a b) (- c (sqrt\
    \ (/ (- (* a a) (* b b)) (* 2 a b)))))) 2)]\n               [else -1])]\n    \
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n\
    \     (define area-string (number->string area))\n     (define area-string-length\
    \ (string-length area-string))\n     (cond\n       [(> area-string-length 4) (substring\
    \ area-string 0 4)]\n       [else (string-append area-string \".00\")])]\n   \
    \ [else -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> a 0) (> b\
    \ 0) (> c 0)\n         (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b\
    \ c) a)))\n  (define (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c))\n\
    \             (* (+ a b c) (- (+ a b c) a)\n                (- (+ a b c) b) (-\
    \ (+ a b c) c)))))\n  (cond ((is-valid-triangle a b c)\n         (round (* 100\
    \ (area a b c))))\n        (else -1)))\n", "  (cond [(and (>= a 0) (>= b 0) (>=\
    \ c 0))\n         (cond [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n   \
    \             (* (/ (+ a b c) 2)\n                   (sqrt (- (* (+ a b c) (*\
    \ (+ a b c) (/ 2 (+ a b c))))\n                           (* a (* a a))\n    \
    \                       (* b (* b b))\n                           (* c (* c c)))))\n\
    \                ]\n               [else -1])]\n        [else -1]))\n", "  (define\
    \ (is-valid-triangle? a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n\
    \         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (+ (* (- (* a a)\
    \ (* b b)) (* c c))\n            (* (- (* b b) (* c c)) (* a a))\n           \
    \ (* (- (* c c) (* a a)) (* b b)))))\n  (cond ((is-valid-triangle? a b c)\n  \
    \       (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n    [(and\
    \ (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0)\
    \ (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a\
    \ 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and (<\
    \ a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c 0)) -1]\n    [(and\
    \ (< a 0) (< b 0) (< c 0)) -1]\n    [(and (< a 0) (< b 0) (< c", "  (define (is-valid-triangle\
    \ a b c)\n    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c)\
    \ a)))\n  (define (area a b c)\n    (sqrt (+ (* (- a b) (- a b))\n           \
    \  (* (- b c) (- b c))\n             (* (- c a) (- c a)))))\n  (if (is-valid-triangle\
    \ a b c)\n      (round (* (area a b c) 2) 2)\n      -1))\n", "  (cond\n    [(and\
    \ (>= a b) (>= a c))\n     (define s (/ (+ b c) 2.0))\n     (sqrt (* s (- s a)\
    \ (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (define s (/ (+ a c)\
    \ 2.0))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c\
    \ b))\n     (define s (/ (+ a b) 2.0))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n\
    \    [else -1]))\n", "  (cond\n    [(or (> (+ a b) c) (> (+ a c) b) (> (+ b c)\
    \ a))\n     (round (* 0.5 (* a b c)) 2)]\n    [else -1]))\n", "  (cond\n    [(and\
    \ (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt (*\
    \ s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>= a\
    \ 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c) (>= (+ a c) b)\
    \ (>= (+ b c) a))\n        (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b\
    \ b) (* c c)) (* 2 a b)))))) 2)]\n       [else -1])]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/ (+ a b c) 2)])\n    \
    \   (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n          \
    \  [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area 0) (not\
    \ (infinite? area)))\n           (round (* area 100) 2)\n           -1))]\n  \
    \  [else -1]))\n", "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (- (* a a) (/\
    \ (+ (* b b) (* c c)) 4)))]\n    [(and (>= b a) (>= b c)) (sqrt (- (* b b) (/\
    \ (+ (* a a) (* c c)) 4)))]\n    [(and (>= c a) (>= c b)) (sqrt (- (* c c) (/\
    \ (+ (* a a) (* b b)) 4)))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (> area 0))\n  \
    \         (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (> area 0)\
    \ (not (infinite? area)))\n           (round (* area 100) 2)\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (define (is-triangle? a b c)\n\
    \    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define\
    \ (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c)) (* a b c))))\n  (cond\
    \ ((is-triangle? a b c) (round (* (area a b c) 100) 2))\n        (else -1)))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number?\
    \ area) (> area 0))\n         (round (* area 100) 2)\n         -1)]\n    [else\
    \ -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round\
    \ (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b)))))) 2)\n\
    \      -1))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n     \
    \ (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b))))))\
    \ 2)\n      -1))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (cond\n         [(> area 0) (round (* area 100))]\n         [else -1]))]\n\
    \    [else -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b)\
    \ c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n\
    \    (sqrt (+ (* (- a b) (- a b))\n             (* (- b c) (- b c))\n        \
    \     (* (- c a) (- c a)))))\n  (cond ((is-valid-triangle a b c)\n         (round\
    \ (* 100 (area a b c))))\n        (else -1)))\n", "  (cond [(and (> a 0) (> b\
    \ 0) (> c 0))\n         (define s (/ (+ a b c) 2))\n         (define area (sqrt\
    \ (* s (- s a) (- s b) (- s c))))\n         (round (* 100 area))]\n        [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+\
    \ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n     \
    \  (if (and (number? area) (> area 0))\n           (round (* area 100) 2)\n  \
    \         -1))]\n    [else -1]))\n", "  (define (is-valid-triangle a b c)\n  \
    \  (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define\
    \ (area a b c)\n    (define (s a b c)\n      (/ (+ a b c) 2))\n    (sqrt (* (s\
    \ a b c) (- (s a b c) a) (- (s a b c) b) (- (s a b c) c))))\n  (cond ((is-valid-triangle\
    \ a b c) (round (* 100 (area a b c))))\n        (else -1)))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (define p (/ (+ a b c) 2))\n     (define\
    \ area (sqrt (- (* p (- p a)) (* p (- p b)) (* p (- p c)))))\n     (if (and (number?\
    \ area) (not (nan? area)))\n         (round (* area 100))\n         -1)]\n   \
    \ [else -1]))\n", "  (if (and (&gt; (+ a b) c)\n           (&gt; (+ a c) b)\n\
    \           (&gt; (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n",
  "  (cond\n    [(and (>= a b) (>= a c)) (sqrt (* (- a b c) (- a b c) (* (- a b c)\
    \ (- a b c) (- a b c))))]\n    [(and (>= b a) (>= b c)) (sqrt (* (- b a c) (-\
    \ b a c) (* (- b a c) (- b a c) (- b a c))))]\n    [(and (>= c a) (>= c b)) (sqrt\
    \ (* (- c a b) (- c a b) (* (- c a b) (- c a b) (- c a b))))]\n    [else -1]))\n",
  "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\
    \ ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 100) 2)\n           -1))]\n    [else -1]))\n", "  (if\
    \ (and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n      (if (and (&gt; (+ a b) c) (&gt;\
    \ (+ a c) b) (&gt; (+ b c) a))\n          (round (* 0.5 (- (+ a b) c) (- (+ a\
    \ c) b) (- (+ b c) a)))\n          -1)\n      -1))\n</code>\nI get the following\
    \ error:\n<code>application: not a procedure;\n expected a procedure that can\
    \ be applied to arguments\n  given: -1\n  arguments...:\n   -1\n</code>\nI am\
    \ not sure what I am doing wrong.\n\n\nA:\n\nYou're using the wrong function to\
    \ round the result, use <code>round</code> instead:\n<code>(define (triangle_area\
    \ a b c)\n  (if (and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n      (if (and (&gt;\
    \ (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n          (round (* 0.5 (- (+\
    \ a b) c) (- (+ a c) b) (- (+ b c) a)))\n          -1)\n      -1))\n</code>\n",
  "  (if (and (&gt; (+ a b) c)\n           (&gt; (+ a c) b)\n           (&gt; (+ b\
    \ c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n</code>\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area)\
    \ (not (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond [(and (>= a 0) (>= b 0) (>= c 0))\n         (let* ([s (/\
    \ (+ a b c) 2)]\n                [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \           (if (and (number? area) (not (nan? area)))\n               (round\
    \ (* area 100))\n               -1))]\n        [else -1]))\n", "  (cond\n    [(>=\
    \ (+ a b) c) (* 0.5 (- (+ a b) c) (sqrt (- (* (- (+ a b) c) (- (+ a b) c)) (*\
    \ (- a c) (- a c)) (* (- b c) (- b c)))))]\n    [else -1]))\n", "  (cond\n   \
    \ [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n       (sqrt\
    \ (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n    [(and (>=\
    \ a 0) (>= b 0) (>= c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area\
    \ (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not\
    \ (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\n    \
    \     ([s (/ (+ a b c) 2)]\n          [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (cond\n    [(and (>= a b) (>=\
    \ a c))\n     (sqrt (* (- (* a a) (* b b) (* c c)) (* (- a b) (- a c) (- b c))))]\n\
    \    [(and (>= b a) (>= b c))\n     (sqrt (* (- (* b b) (* a a) (* c c)) (* (-\
    \ b a) (- b c) (- a c))))]\n    [(and (>= c a) (>= c b))\n     (sqrt (* (- (*\
    \ c c) (* a a) (* b b)) (* (- c a) (- c b) (- a b))))]\n    [else -1]))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n", "  (cond [(and (>= a 0) (>= b 0) (>= c 0))\n         (let*\
    \ ([s (/ (+ a b c) 2)]\n                [area (sqrt (* s (- s a) (- s b) (- s\
    \ c)))])\n           (if (and (> a 0) (> b 0) (> c 0))\n               (round\
    \ (* area 100) 2)\n               -1))]\n        [else -1]))\n", "  (cond\n  \
    \  [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n         \
    \   [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area)\
    \ (not (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+\
    \ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (round\
    \ (* area 100))]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n\
    \         (let* ([s (/ (+ a b c) 2)]\n                [area (sqrt (- (* s (- s\
    \ a)) (* s (- s b)) (* s (- s c))))])\n           (if (and (number? area) (not\
    \ (nan? area)))\n               (round (* area 100))\n               -1))]\n \
    \       [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let\
    \ ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else\
    \ -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (>\
    \ (+ b c) a))\n      (round (* 0.5 (* (+ a b c) (- (+ a b c) a) (- (+ a b c) b)\
    \ (- (+ a b c) c))) 2)\n      -1))\n", "  (cond [(and (> a 0) (> b 0) (> c 0))\n\
    \         (define (sides-sum a b c)\n           (+ a b c))\n         (define (area\
    \ a b c)\n           (/ (* (sides-sum a b c) (- (sides-sum a b c) a) (- (sides-sum\
    \ a b c) b) (- (sides-sum a b c) c)) 2))\n         (define (round-to-2-decimal-places\
    \ n)\n           (round (* n 100)))\n         (define (is-valid-triangle a b c)\n\
    \           (and (<= a (+ b c))\n                (<= b (+ a c))\n            \
    \    (<= c (+ a b))))\n         (cond [(is-valid-triangle a b c)\n           \
    \     (/ (round-to-2-decimal-places (area a b c)) 100)]\n               [else\
    \ -1])]\n        [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let* ([s (/ (+ a b c) 2.0)]\n            [area (sqrt (* s (- s a) (- s\
    \ b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n        \
    \   (round (* area 100.0))\n           -1))]\n    [else -1]))\n", "  (cond\n \
    \   [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n        \
    \    [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area)\
    \ (not (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (* (/ (+ b c) 2.0) (sqrt\
    \ (- (* a a) (/ (+ (* b b) (* c c)) 4.0))))]\n    [(and (>= b a) (>= b c))\n \
    \    (* (/ (+ a c) 2.0) (sqrt (- (* b b) (/ (+ (* a a) (* c c)) 4.0))))]\n   \
    \ [(and (>= c a) (>= c b))\n     (* (/ (+ a b) 2.0) (sqrt (- (* c c) (/ (+ (*\
    \ a a) (* b b)) 4.0))))]\n    [else -1]))\n", "  (cond\n    [(and (<= a 0) (<=\
    \ b 0) (<= c 0)) -1]\n    [(or (<= (+ a b) c) (<= (+ a c) b) (<= (+ b c) a)) -1]\n\
    \    [else (round (* 0.5 (* a b c) 2))]))\n", "  (define (is-triangle? a b c)\n\
    \    (and (> (+ a b) c)\n         (> (+ a c) b)\n         (> (+ b c) a)))\n  (define\
    \ (area a b c)\n    (sqrt (* (- (* a a) (* b b) (* c c))\n            (* (+ (*\
    \ a a) (* b b) (* c c))\n               2))))\n  (if (is-triangle? a b c)\n  \
    \    (round (* (area a b c) 100) 2)\n      -1))\n", "  (cond\n    [(and (>= a\
    \ 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c) (>= (+ a c) b)\
    \ (>= (+ b c) a))\n        (round (* 0.5 (- (+ a b) c) (- (+ a c) b) (- (+ b c)\
    \ a)) 2)]\n       [else -1])]\n    [else -1]))\n", "  (cond [(and (> a 0) (> b\
    \ 0) (> c 0))\n         (define s (/ (+ a b c) 2))\n         (define area (sqrt\
    \ (* s (- s a) (- s b) (- s c))))\n         (round (* area 100))]\n        [else\
    \ -1]))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let ([s (/\
    \ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n",
  "  (if (and (> a 0) (> b 0) (> c 0))\n      (let* ([s (/ (+ a b c) 2)]\n       \
    \      [area (sqrt (* s (- s a) (- s b) (- s c)))])\n        (if (and (> (+ a\
    \ b) c) (> (+ a c) b) (> (+ b c) a))\n            (round (* area 100) 2)\n   \
    \         -1))\n      -1))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (sqrt (* s (- s a) (- s b) (- s c))))]\n\
    \    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define\
    \ s (/ (+ a b c) 2))\n     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n\
    \     (if (number? area)\n         (round (* area 100))\n         -1)]\n    [else\
    \ -1]))\n", "  (define (is-valid-triangle a b c)\n    (and (> (+ a b) c)\n   \
    \      (> (+ a c) b)\n         (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt\
    \ (* (- (* a a) (* b b) (* c c)) (* (+ a b c) (- a b c)))))\n  (cond ((is-valid-triangle\
    \ a b c) (round (* 100 (area a b c))))\n        (else -1)))\n", "  (if (and (>\
    \ (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n\
    \      -1))\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n\
    \       [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n        (round (* 0.5\
    \ (- (+ a b c) a b c)) 2)]\n       [else -1])]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area)\
    \ (> area 0))\n           (round (* area 100) 2)\n           -1))]\n    [else\
    \ -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (>\
    \ (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (if (and (&gt;=\
    \ a 0) (&gt;= b 0) (&gt;= c 0))\n      (if (and (&gt; (+ a b) c) (&gt; (+ a c)\
    \ b) (&gt; (+ b c) a))\n          (round (* 0.5 (- (+ a b) c) (- (+ a c) b) (-\
    \ (+ b c) a)) 2)\n          -1)\n      -1))\n</code>\nBut I get an error:\n<code>application:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: -1\n  arguments...:\n   -1\n</code>\nI am not sure what I am doing wrong.\n\
    \n\nA:\n\nThe problem is that you're calling <code>round</code> with four arguments,\
    \ but it only accepts two.\nAlso, the <code>*</code> operator is not a function,\
    \ so you can't use it as a function.\nYou can fix it by using <code>*</code> as\
    \ an infix operator and by calling <code>round</code> with two arguments:\n<code>(define\
    \ (triangle_area a b c)\n  (if (and (&gt;= a 0) (&gt;= b 0) (&gt;= c 0))\n   \
    \   (if (and (&gt; (+ a b) c) (&gt; (+ a c) b) (&gt; (+ b c) a))\n          (round\
    \ (* 0.5 (- (+ a b) c) (- (+ a c) b) (- (+ b c) a)) 2)\n          -1)\n      -1))\n\
    </code>\n", "  (cond\n    [(and (>= a 0) (>= b 0) (>= c 0))\n     (let*\n    \
    \     ([s (/ (+ a b c) 2)]\n          [area (sqrt (* s (- s a) (- s b) (- s c)))])\n\
    \       (if (and (number? area) (not (nan? area)))\n           (round (* area\
    \ 100))\n           -1))]\n    [else -1]))\n", "  (define (is_valid a b c)\n \
    \   (and (>= a b c)\n         (> (+ a b) c)\n         (> (+ a c) b)\n        \
    \ (> (+ b c) a)))\n  (define (area a b c)\n    (sqrt (+ (* (- a b) (- a b))\n\
    \             (* (- b c) (- b c))\n             (* (- c a) (- c a)))))\n  (if\
    \ (is_valid a b c)\n      (round (* (area a b c) 2) 2)\n      -1))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c))\n     (let ([s (/ (+ a b c) 2)])\n       (* (- s\
    \ a) (- s b) (- s c)))]\n    [(and (>= b a) (>= b c))\n     (let ([s (/ (+ a b\
    \ c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [(and (>= c a) (>= c b))\n\
    \     (let ([s (/ (+ a b c) 2)])\n       (* (- s a) (- s b) (- s c)))]\n    [else\
    \ -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
