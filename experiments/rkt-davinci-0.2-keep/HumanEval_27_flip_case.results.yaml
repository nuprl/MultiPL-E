name: HumanEval_27_flip_case
language: racket
results:
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprak0o9tp.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprak0o9tp.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaukyiwep.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpaukyiwep.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd5b75oym.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpd5b75oym.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1lvue_6l.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1lvue_6l.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_ajap669.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_ajap669.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprz4bd2wc.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprz4bd2wc.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv5jcbv3a.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv5jcbv3a.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwkrtxcz3.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwkrtxcz3.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3arhvj4s.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp3arhvj4s.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1o3bedmt.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1o3bedmt.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqhtce65_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqhtce65_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprlkbm6tz.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprlkbm6tz.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgrkuha10.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgrkuha10.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptfoz5cc4.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmptfoz5cc4.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase\
    \ x) (char-downcase x))) string))\n```\n\n```racket\n#lang racket\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_nv7ha7x.rkt:11:0: read-syntax: `#lang` not enabled\n  possible\
    \ reason: not allowed again inside a module that already starts `#lang`, or not\
    \ enabled for interactive evaluation\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq3l600dk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpq3l600dk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp19as52lw.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp19as52lw.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1n5qfc70.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1n5qfc70.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmestb4ho.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmestb4ho.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf7_wilbv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpf7_wilbv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd56a0taa.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpd56a0taa.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzbb1s755.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzbb1s755.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgzlb6nva.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgzlb6nva.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (for/list ([c (in-string string)])\n    (if (char-lower-case?\
    \ c)\n        (char-upcase c)\n        (char-downcase c))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal?\
    \ (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\"\
    )\n    (check-equal? (candidate \"These violent delights have violent ends\")\
    \ \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfnktfr6.rkt:17:4\n\
    actual:     '()\nexpected:   \"\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfnktfr6.rkt:18:4\nactual:\
    \     '(#\\h #\\E #\\L #\\L #\\O #\\!)\nexpected:   \"hELLO!\"\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphfnktfr6.rkt:19:4\n\
    actual:\n  '(#\\t\n  #\\H\n  #\\E\n  #\\S\n  #\\E\n  #\\space\n  #\\V\n  #\\I\n\
    \  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n  #\\space\n  #\\D\n  #\\E\n  #\\L\n\
    \  #\\I\n  #\\G\n  #\\H\n  #\\T\n  #\\S\n  #\\space\n  #\\H\n  #\\A\n  #\\V\n\
    \  #\\E\n  #\\space\n  #\\V\n  #\\I\n  #\\O\n  #\\L\n  #\\E\n  #\\N\n  #\\T\n\
    \  #\\space\n  #\\E\n  #\\N\n  #\\D\n  #\\S)\nexpected:   \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkr6ip7_b.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkr6ip7_b.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9vv6yz81.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9vv6yz81.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3rw77e7j.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp3rw77e7j.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5aebrt2u.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp5aebrt2u.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp72rhr9me.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp72rhr9me.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb3m9khz1.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpb3m9khz1.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjcd2gkkv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjcd2gkkv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwvqpm6oc.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwvqpm6oc.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg_gnrywy.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpg_gnrywy.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptftngn4t.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmptftngn4t.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpj74i3r_x.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpj74i3r_x.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn15218jy.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpn15218jy.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt0afl01b.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt0afl01b.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4p0emzpc.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4p0emzpc.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1j3yst46.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1j3yst46.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgb3eveli.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgb3eveli.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_6soqz0p.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_6soqz0p.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwno11w2v.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwno11w2v.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_gq2hq7t.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_gq2hq7t.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplw1sv216.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmplw1sv216.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg7fv3o3m.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpg7fv3o3m.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt2dbspuq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt2dbspuq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (char)\n         (if (char-lower-case? char)\n\
    \             (char-upcase char)\n             (char-downcase char)))\n      \
    \ string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0wbcft9.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0wbcft9.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpg0wbcft9.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpeql9y2u6.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpeql9y2u6.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp39_2umr1.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp39_2umr1.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7dhis6ha.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7dhis6ha.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu8yz8ppp.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpu8yz8ppp.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp3_p7jn_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp3_p7jn_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi7vqs9mr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpi7vqs9mr.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe1k5rdn2.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpe1k5rdn2.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6ane6497.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6ane6497.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpy1k3psy9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpy1k3psy9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm53p7wwn.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpm53p7wwn.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpix2kegsa.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpix2kegsa.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdqrsexc0.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdqrsexc0.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp97ps4pws.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp97ps4pws.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpst56dvqn.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpst56dvqn.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-upcase (string-downcase string)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc6off6x2.rkt:15:4\n\
    actual:     \"HELLO!\"\nexpected:   \"hELLO!\"\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc6off6x2.rkt:16:4\nactual:\
    \     \"THESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\"\nexpected:   \"tHESE VIOLENT\
    \ DELIGHTS HAVE VIOLENT ENDS\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase\
    \ x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt6x9g10u.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt6x9g10u.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4psrtv5_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4psrtv5_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkspodvle.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkspodvle.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7ipaxl18.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7ipaxl18.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw199e2he.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpw199e2he.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp04uu3_vn.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp04uu3_vn.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0h44855s.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp0h44855s.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi2smrkkr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpi2smrkkr.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpafylv_ux.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpafylv_ux.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpctscl9m5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpctscl9m5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcusdvbm8.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcusdvbm8.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp91ayo30g.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp91ayo30g.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6vp_fe_5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6vp_fe_5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyl2v0yta.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpyl2v0yta.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpltovay3u.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpltovay3u.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwfsm24xq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwfsm24xq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptl8dmuuv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmptl8dmuuv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkrxmj47n.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkrxmj47n.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpndjb8eva.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpndjb8eva.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuy7zb1nf.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuy7zb1nf.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkksajs9t.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkksajs9t.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvjq2l4sl.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpvjq2l4sl.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphwf1vjic.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphwf1vjic.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (cond\n  \
    \                [(char-lower-case? char) (char-upcase char)]\n              \
    \    [(char-upper-case? char) (char-downcase char)]\n                  [else char]))\n\
    \              string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\")\n \
    \   (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcyqp1ms9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpcyqp1ms9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpakpd2mnv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpakpd2mnv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphjfzfsyb.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmphjfzfsyb.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzmbbbvj9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzmbbbvj9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8mflyluz.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8mflyluz.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzcgjjw5y.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzcgjjw5y.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph24rtajs.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmph24rtajs.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxrse9gvk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpxrse9gvk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpurij3ot4.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpurij3ot4.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt58_9xtq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt58_9xtq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpd38vkm_5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpd38vkm_5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmuz5660q.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmuz5660q.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp909suvor.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp909suvor.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf0789lns.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpf0789lns.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv0t9vtec.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpv0t9vtec.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase\
    \ x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuosa2vz6.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuosa2vz6.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe3_nd83c.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpe3_nd83c.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppa82j1qu.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppa82j1qu.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxo3u0dhu.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpxo3u0dhu.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq5aydkv8.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpq5aydkv8.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnonyq9wh.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpnonyq9wh.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyi_p9zsd.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpyi_p9zsd.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz79mb_15.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpz79mb_15.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxp8zlvmt.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpxp8zlvmt.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwedizaqi.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpwedizaqi.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn6pppuv5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpn6pppuv5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4b62_lzf.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4b62_lzf.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdkpseqij.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdkpseqij.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (ch)\n                (if (char-lower-case?\
    \ ch)\n                    (char-upcase ch)\n                    (char-downcase\
    \ ch)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3slcnpq4.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp3slcnpq4.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp83ilyx9c.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp83ilyx9c.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp63zlva9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpp63zlva9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx7u4gly5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpx7u4gly5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbbu342s2.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbbu342s2.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_n079lee.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_n079lee.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjgf_0mvi.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjgf_0mvi.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmporn32b2q.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmporn32b2q.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt1abipt4.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpt1abipt4.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzhu2taio.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpzhu2taio.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6g11necn.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6g11necn.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4t928lqk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4t928lqk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4y3pt8s3.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4y3pt8s3.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1tyaid7x.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1tyaid7x.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqj7g6c3h.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpqj7g6c3h.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (cond\n       [(char-lower-case?\
    \ char) (char-upcase char)]\n       [(char-upper-case? char) (char-downcase char)]\n\
    \       [else char]))\n   string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpg5yl7fca.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpg5yl7fca.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8ims0l30.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8ims0l30.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpa48hxcsm.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpa48hxcsm.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuc1ta5pq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuc1ta5pq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2g3vm_wf.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2g3vm_wf.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpl5ijswbp.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpl5ijswbp.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8lgxo73_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8lgxo73_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9w0dvqpq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp9w0dvqpq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp04jfdv3z.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp04jfdv3z.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp04h_oznk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp04h_oznk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpngkqu09r.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpngkqu09r.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiyfu3tvf.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpiyfu3tvf.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiogjktwv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpiogjktwv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp38cuid_s.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp38cuid_s.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp365_ijyy.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp365_ijyy.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdoxxi50e.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdoxxi50e.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps2xhyqkw.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmps2xhyqkw.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfm5gc6x0.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpfm5gc6x0.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu21_waae.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpu21_waae.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmf5i6h3e.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmf5i6h3e.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps_8gs3jj.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmps_8gs3jj.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplf1t0mzq.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmplf1t0mzq.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp84ougzjl.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp84ougzjl.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq5ww06p6.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpq5ww06p6.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjono2s92.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjono2s92.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprvtj7y8_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprvtj7y8_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptbbzlzqv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmptbbzlzqv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x) (if (char-lower-case? x) (char-upcase\
    \ x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3wfrz28z.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp3wfrz28z.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4sro2qrt.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp4sro2qrt.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpuv5ey7ht.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpuv5ey7ht.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpql13_mer.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpql13_mer.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe7fy1915.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpe7fy1915.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (x) (if (char-lower-case? x) (char-upcase\
    \ x) (char-downcase x))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxsvgyuh8.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpxsvgyuh8.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvuxyspbv.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpvuxyspbv.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-alphabetic?\
    \ char)\n                    (if (char-lower-case? char)\n                   \
    \     (char-upcase char)\n                        (char-downcase char))\n    \
    \                char))\n              string))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate\
    \ \"\") \"\")\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal?\
    \ (candidate \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS\
    \ HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmhi4p2o1.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmhi4p2o1.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6iardvnx.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6iardvnx.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprwco5kyi.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprwco5kyi.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprsizxr6v.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprsizxr6v.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6a0178ug.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6a0178ug.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps9wmcrop.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmps9wmcrop.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpixdm4or_.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpixdm4or_.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpid_h4jrk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpid_h4jrk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (map (lambda (char)\n         (if (char-lower-case? char)\n\
    \             (char-upcase char)\n             (char-downcase char)))\n      \
    \ string))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ flip_case))\n    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate\
    \ \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate \"These violent delights\
    \ have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz7zc34b3.rkt:18:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz7zc34b3.rkt:19:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello!\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpz7zc34b3.rkt:20:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"These violent delights\
    \ have violent ends\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6odh26_2.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp6odh26_2.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprerfye33.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmprerfye33.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp962zm9zw.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp962zm9zw.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (char)\n     (if (char-lower-case?\
    \ char)\n         (char-upcase char)\n         (char-downcase char)))\n   string))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2a4euwqf.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp2a4euwqf.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkjjfv_jy.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpkjjfv_jy.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjj6cs_ua.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpjj6cs_ua.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgtogjbz1.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgtogjbz1.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpox_74l6u.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpox_74l6u.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmhcie426.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpmhcie426.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8_1tkakt.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8_1tkakt.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (x)\n                (if (char-lower-case?\
    \ x)\n                    (char-upcase x)\n                    (char-downcase\
    \ x)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpro98x7z0.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpro98x7z0.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppa7xuljg.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmppa7xuljg.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp67n6sslw.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp67n6sslw.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7186__sr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp7186__sr.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbwdecku5.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpbwdecku5.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpujhbtamn.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpujhbtamn.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgd83p1p9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpgd83p1p9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc1irv5jr.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpc1irv5jr.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn3z4j4ih.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpn3z4j4ih.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpm6ojfrqc.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpm6ojfrqc.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (char)\n                (if (char-lower-case?\
    \ char)\n                    (char-upcase char)\n                    (char-downcase\
    \ char)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdtqxh0hm.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdtqxh0hm.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_55fsi0d.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp_55fsi0d.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map\n   (lambda (c)\n     (if (char-lower-case?\
    \ c)\n         (char-upcase c)\n         (char-downcase c)))\n   string))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate flip_case))\n\
    \    (check-equal? (candidate \"\") \"\")\n    (check-equal? (candidate \"Hello!\"\
    ) \"hELLO!\")\n    (check-equal? (candidate \"These violent delights have violent\
    \ ends\") \"tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpdv09eri6.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpdv09eri6.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8_zxi1m9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp8_zxi1m9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1maiue3a.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmp1maiue3a.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (\u03BB (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf52ehph9.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpf52ehph9.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpc7t6eizo.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpc7t6eizo.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c)\n                (if (char-lower-case?\
    \ c)\n                    (char-upcase c)\n                    (char-downcase\
    \ c)))\n              string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaslrellk.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpaslrellk.rkt:7:3\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; For a given string, flip lowercase characters to uppercase\
    \ and uppercase to lowercase.\n;; >>> flip_case('Hello')\n;; 'hELLO'\n(define\
    \ (flip_case string)\n  (string-map (lambda (c) (if (char-lower-case? c) (char-upcase\
    \ c) (char-downcase c))) string))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate flip_case))\n    (check-equal? (candidate \"\") \"\"\
    )\n    (check-equal? (candidate \"Hello!\") \"hELLO!\")\n    (check-equal? (candidate\
    \ \"These violent delights have violent ends\") \"tHESE VIOLENT DELIGHTS HAVE\
    \ VIOLENT ENDS\")\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpi19wyjep.rkt:7:3: string-map: unbound identifier\n  in: string-map\n\
    \  location...:\n   /tmp/tmpi19wyjep.rkt:7:3\n"
  exit_code: 1
  status: OK
