name: HumanEval_89_encrypt
language: racket
prompt: "#lang racket\n\n;; Create a function encrypt that takes a string as an argument\
  \ and\n;; returns a string encrypted with the alphabet being rotated. \n;; The alphabet\
  \ should be rotated in a manner such that the letters \n;; shift down by two multiplied\
  \ to two places.\n;; For example:\n;; encrypt('hi') returns 'lm'\n;; encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n;; encrypt('gf') returns 'kj'\n;; encrypt('et') returns 'ix'\n\
  (define (encrypt s)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate encrypt))\n\
  \    (check-equal? (candidate \"hi\") \"lm\")\n    (check-equal? (candidate \"asdfghjkl\"\
  ) \"ewhjklnop\")\n    (check-equal? (candidate \"gf\") \"kj\")\n    (check-equal?\
  \ (candidate \"et\") \"ix\")\n    (check-equal? (candidate \"faewfawefaewg\") \"\
  jeiajeaijeiak\")\n    (check-equal? (candidate \"hellomyfriend\") \"lippsqcjvmirh\"\
  )\n    (check-equal? (candidate \"dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"\
  ) \"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\")\n    (check-equal? (candidate\
  \ \"a\") \"e\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-char c)\n    (if (char=? c #\\z)\n        #\\b\n \
    \       (if (char=? c #\\y)\n            #\\a\n            (integer->char (+ (char->integer\
    \ c) 2)))))\n  (string-map shift-char s))\n", "  (define (shift-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (string-map shift-char s))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\\
    a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n      \
    \        (if (char=? c #\\c)\n                  #\\e\n                  (if (char=?\
    \ c #\\d)\n                      #\\f\n                      (if (char=? c #\\\
    e)\n                          #\\g\n                          (if (char=? c #\\\
    f)\n                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (encrypt-helper (rest s)))]))\n  (encrypt-helper s))\n", "  (define (rotate\
    \ n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (modulo (+ n 2) 26) (rotate\
    \ (- n 1)))]))\n  (define (shift n)\n    (cond\n      [(= n 0) '()]\n      [else\
    \ (cons (modulo (+ n 2) 26) (shift (- n 1)))]))\n  (define (encrypt-helper s n)\n\
    \    (cond\n      [(empty? s) '()]\n      [else (cons (list-ref (rotate (char->integer\
    \ (string-ref s n))) 0) (encrypt-helper s (+ n 1)))]))\n  (list->string (encrypt-helper\
    \ s 0)))\n", "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n  \
    \    (cond [(char=? c #\\a) #\\c]\n            [(char=? c #\\b) #\\d]\n      \
    \      [(char=? c #\\c) #\\e]\n            [(char=? c #\\d) #\\f]\n          \
    \  [(char=? c #\\e) #\\g]\n            [(char=? c #\\f) #\\h]\n            [(char=?\
    \ c #\\g) #\\i]\n            [(char=? c #\\h) #\\j]\n            [(char=? c #\\\
    i) #\\k]\n            [(char=? c #\\j) #\\l]\n            [(char=? c #\\k) #\\\
    m]\n            [(char=? c #\\l) #\\n]\n            [(char=? c #\\m) #\\o]\n \
    \           [(char=? c #\\n) #\\p]\n            [(char=? c #\\o) #\\q]\n     \
    \       [(char=? c #\\p) #\\r]\n            [(char=? c #\\q) #\\s]\n         \
    \   [(char=? c #\\r) #\\t]\n            [(char=? c #\\s) #\\u]\n            [(char=?\
    \ c #\\t) #\\v]\n            [(char=? c #\\u) #\\w]\n            [(char=? c #\\\
    v) #\\x]\n            [(char=? c #\\w) #\\y]\n            [(char=? c #\\x) #\\\
    z]\n            [(char=? c #\\y) #\\a]\n            [(char=? c #\\z) #\\b]\n \
    \           [else c])))\n  (string-join (map rotate-char (string->list s))))\n",
  "  (define (shift c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=?\
    \ c #\\y)\n            #\\a\n            (char-downcase (integer->char (+ (char->integer\
    \ c) 2))))))\n  (string-map shift s))\n", "  (define (rotate-char c)\n    (if\
    \ (char=? c #\\z)\n        #\\b\n        (if (char=? c #\\y)\n            #\\\
    a\n            (integer->char (+ (char->integer c) 2)))))\n  (string-map rotate-char\
    \ s))\n", "  (define (shift c)\n    (if (char-alphabetic? c)\n        (let ([c\
    \ (char-downcase c)])\n          (if (char-between? c #\\a #\\m)\n           \
    \   (char+ c 2)\n              (char-between? c #\\n #\\z\n               (char-between?\
    \ c #\\n #\\z\n                (char-between? c #\\n #\\z\n                 (char-between?\
    \ c #\\n #\\z\n                  (char-between? c #\\n #\\z\n                \
    \   (char-between? c #\\n #\\z\n                    (char-between? c #\\n #\\\
    z\n                     (char-between? c #\\n #\\z\n                      (char-between?\
    \ c #\\n #\\z\n                       (char-between? c #\\n #\\z\n           \
    \             (char-between? c #\\n #\\z\n                         (char-between?\
    \ c #\\n #\\z\n                          (char-between? c #\\n #\\z\n        \
    \                   (char-between? c #\\n #\\z\n                            (char-between?\
    \ c #\\n #\\z\n                             (char-between? c #\\n #\\z\n     \
    \                         (char-between? c #\\n #\\z\n                       \
    \        (char-between? c #\\n #\\z\n                                (char-between?\
    \ c #\\n #\\z\n                                 (char-between? c #\\n #\\z\n \
    \                                 (char-between? c #\\n #\\z\n               \
    \                    (char-between? c #\\n #\\z\n                            \
    \        (char-between? c #\\n #\\z\n                                     (char-between?\
    \ c #\\n #\\z\n                                      (char-between? c #\\n #\\\
    z\n                                       (char-between? c #\\n #\\z\n       \
    \                                 (char-between? c #\\n #\\z\n               \
    \                          (char-between? c #\\n #\\z\n                      \
    \                    (char-between? c #\\n #\\z\n                            \
    \               (char-between? c #\\n #\\z\n                                 \
    \           (char-between? c #\\n", "  (define (rotate-char c)\n    (let ((n (string->number\
    \ (string c) 16)))\n      (number->string (+ n (* 2 2)) 16)))\n  (string-join\
    \ (map rotate-char (string->list s))))\n", "  (define (shift-char c)\n    (define\
    \ (shift-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n       \
    \ [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\\
    d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n   \
    \     [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (shift-char-helper (shift-char-helper c)))\n  (define\
    \ (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (shift-char\
    \ (first s)) (encrypt-helper (rest s)))]))\n  (encrypt-helper s))\n", "  (define\
    \ (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n        (string-append\
    \ (rotate (string-ref s 0)) (encrypt-helper (substring s 1)))))\n  (encrypt-helper\
    \ s))\n", "  (define (rotate n)\n    (cond\n      [(= n 0) '()]\n      [else (cons\
    \ (modulo (+ n 2) 26) (rotate (- n 1)))]))\n  (define (encrypt-helper s)\n   \
    \ (cond\n      [(empty? s) '()]\n      [else (cons (list-ref (rotate (char->integer\
    \ (car s))) 0) (encrypt-helper (cdr s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate-letter n)\n    (integer->char (+ n (* 2 2))))\n\
    \  (define (rotate-string s)\n    (map rotate-letter (string->list s)))\n  (list->string\
    \ (rotate-string s)))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (char-&gt;string (+ c (* 2 2)))))\n  (string-join (map rotate-char\
    \ (string-&gt;list s)) \"\"))\n</code>\n", "  (let ([alphabet (string->list \"\
    abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda (c)\n\
    \        (list-ref alphabet\n                  (modulo (+ (string-index c alphabet)\
    \ (* 2 2))\n                          (length alphabet))))\n      (string->list\
    \ s)))))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n \
    \       (string-append (rotate (string-ref s 0)) (encrypt-helper (substring s\
    \ 1)))))\n  (encrypt-helper s))\n", "  (define (rotate n s)\n    (if (= n 0)\n\
    \        s\n        (rotate (- n 1) (string-append (substring s -1) (substring\
    \ s 0 -1)))))\n  (rotate (* 2 2) s))\n", "  (define (shift c)\n    (if (char=?\
    \ c #\\a) #\\c\n        (if (char=? c #\\b) #\\d\n            (if (char=? c #\\\
    c) #\\e\n                (if (char=? c #\\d) #\\f\n                    (if (char=?\
    \ c #\\e) #\\g\n                        (if (char=? c #\\f) #\\h\n           \
    \                 (if (char=? c #\\g) #\\i\n                                (if\
    \ (char=? c #\\h) #\\j\n                                    (if (char=? c #\\\
    i) #\\k\n                                        (if (char=? c #\\j) #\\l\n  \
    \                                          (if (char=? c #\\k) #\\m\n        \
    \                                        (if (char=? c #\\l) #\\n\n          \
    \                                          (if (char=? c #\\m) #\\o\n        \
    \                                                (if (char=? c #\\n) #\\p\n  \
    \                                                          (if (char=? c #\\o)\
    \ #\\q\n                                                                (if (char=?\
    \ c #\\p) #\\r\n                                                             \
    \       (if (char=? c #\\q) #\\s\n                                           \
    \                             (if (char=? c #\\r) #\\t\n                     \
    \                                                       (if (char=? c #\\s) #\\\
    u\n                                                                          \
    \      (if (char=? c #\\t) #\\v\n                                            \
    \                                        (if (char=? c #\\u) #\\w\n          \
    \                                                                            \
    \  (if (char=? c #\\v) #\\x\n                                                \
    \                                            (if (char=? c #\\w) #\\y\n      \
    \                                                                            \
    \              (if (char=? c #\\x) #\\z\n                                    \
    \                                                                (if (char=? c\
    \ #\\y) #\\a\n                                                               \
    \                                         (if (char=? c #\\z) #\\b\n         \
    \                                                                            \
    \                       c)))))))))))))))))))))))))))))))\n  (string-map shift\
    \ s))\n\n", "  (define (encrypt-helper s i)\n    (if (= i (string-length s))\n\
    \        \"\"\n        (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2))) (encrypt-helper s (+ i 1)))))\n  (encrypt-helper s 0))\n",
  "  (define (encrypt-helper s i)\n    (if (= i (string-length s))\n        \"\"\n\
    \        (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string-append (string-append (string-append (string-append (string-append\
    \ (string-append (string", "  (define (rotate s)\n    (define (rotate-helper s\
    \ i)\n      (if (eq? i (string-length s))\n          \"\"\n          (string-append\
    \ (string (modulo (+ (string-ref s i) 2) 26))\n                         (rotate-helper\
    \ s (+ i 1)))))\n    (rotate-helper s 0))\n  (rotate s))\n", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-downcase c)])\n      \
    \       (if (char-alphabetic? c)\n                 (let ([c (+ c (* 2 2))])\n\
    \                   (if (> c #\\z)\n                       (char-downcase (+ c\
    \ (- #\\a 1)))\n                       (char-downcase c)))\n                 c)))\n\
    \         s)))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n \
    \       (string-append (rotate (string-ref s 0))\n                       (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))\n", "  (define (encrypt-helper s\
    \ i)\n    (cond\n      [(= i (string-length s)) \"\"]\n      [else (string-append\
    \ (string (modulo (+ (string-ref s i) (* 2 2)) 26) (+ (char->integer #\\a) 26)))\n\
    \             (encrypt-helper s (+ i 1))]))\n  (encrypt-helper s 0))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\\
    a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n      \
    \        (if (char=? c #\\c)\n                  #\\e\n                  (if (char=?\
    \ c #\\d)\n                      #\\f\n                      (if (char=? c #\\\
    e)\n                          #\\g\n                          (if (char=? c #\\\
    f)\n                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (encrypt-helper\
    \ s i)\n    (cond\n      ((= i (string-length s)) \"\")\n      (else (string-append\
    \ (string (char-downcase (+ (char-downcase (string-ref s i)) 2)))\n          \
    \                 (encrypt-helper s (+ i 1))))))\n  (encrypt-helper s 0))\n",
  "  (define (rotate n s)\n    (if (empty? s)\n        empty\n        (cons (integer->char\
    \ (+ n (char->integer (car s))))\n              (rotate n (cdr s)))))\n  (rotate\
    \ (* 2 2) s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (define (rotate-char-aux\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-aux\
    \ c))\n  (define (rotate-char-list l)\n    (cond\n      [(null? l) '()]\n    \
    \  [else (cons (rotate-char (car l)) (rotate-char-list (cdr l)))]))\n  (list->string\
    \ (rotate-char-list (string->list s))))\n", "  (define (encrypt-helper s i)\n\
    \    (if (= i (string-length s))\n        \"\"\n        (string-append (string\
    \ (char-downcase (+ (char-downcase (string-ref s i)) 2)))\n                  \
    \     (encrypt-helper s (+ i 1)))))\n  (encrypt-helper s 0))\n", "  (define (rotate-char\
    \ c)\n    (let ((c (string-&gt;char c)))\n      (if (char=? c #\\z)\n        \
    \  #\\b\n          (if (char=? c #\\y)\n              #\\a\n              (char-&gt;string\
    \ (+ c 2))))))\n  (string-join (map rotate-char (string-&gt;list s))))\n", " \
    \ (let ([s (string->list s)])\n    (map (lambda (c)\n           (let ([c (char-downcase\
    \ c)])\n             (if (char-alphabetic? c)\n                 (let ([c (+ c\
    \ (* 2 2))])\n                   (if (> c #\\z)\n                       (char-downcase\
    \ (+ c (- #\\a 1)))\n                       (char-downcase c)))\n            \
    \     c)))\n         s)))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join\n     (map\n      (lambda (c)\n        (list-ref alphabet\
    \ (+ (list-index (lambda (x) (char=? x c)) alphabet) (* 2 2))))\n      (string->list\
    \ s)))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n  \
    \            #\\d\n              (if (char=? c #\\c)\n                  #\\e\n\
    \                  (if (char=? c #\\d)\n                      #\\f\n         \
    \             (if (char=? c #\\e)\n                          #\\g\n          \
    \                (if (char=? c #\\f)\n                              #\\h\n   \
    \                           (if (char=? c #\\g)\n                            \
    \      #\\i\n                                  (if (char=? c #\\h)\n         \
    \                             #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (let ([s (string->list s)])\n    (map\
    \ (lambda (x)\n           (let ([x (string->number (string x) 36)])\n        \
    \     (number->string (+ x (* 2 2)) 36)))\n         s)))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\z)\n                  #\\a\n                  (if (char=? c #\\\
    y)\n                      #\\z\n                      (if (char=? c #\\x)\n  \
    \                        #\\y\n                          (if (char=? c #\\w)\n\
    \                              #\\x\n                              (if (char=?\
    \ c #\\v)\n                                  #\\w\n                          \
    \        (if (char=? c #\\u)\n                                      #\\v\n   \
    \                                   (if (char=? c #\\t)\n                    \
    \                      #\\u\n                                          (if (char=?\
    \ c #\\s)\n                                              #\\t\n              \
    \                                (if (char=? c #\\r)\n                       \
    \                           #\\s\n                                           \
    \       (if (char=? c #\\q)\n                                                \
    \      #\\r\n                                                      (if (char=?\
    \ c #\\p)\n                                                          #\\q\n  \
    \                                                        (if (char=? c #\\o)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\n)\n \
    \                                                                 #\\o\n     \
    \                                                             (if (char=? c #\\\
    m)\n                                                                      #\\\
    n\n                                                                      (if (char=?\
    \ c #\\l)\n                                                                  \
    \        #\\m\n                                                              \
    \            (if (char=? c #\\k)\n                                           \
    \                                   #\\l\n                                   \
    \                                           (if (char=? c #\\j)\n            \
    \                                                                      #\\k\n\
    \                                                                            \
    \      (if (char=? c #\\i)\n                                                 \
    \                                     #\\j\n                                 \
    \                                                     (if (char=? c #\\h)\n  \
    \                                                                            \
    \            #\\i\n                                                          \
    \                                (if (char=? c #\\g)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-downcase c)])\n      \
    \       (if (char-alphabetic? c)\n                 (let ([c (+ c (* 2 2))])\n\
    \                   (if (> c #\\z)\n                       (char-downcase (+ c\
    \ (- #\\a 1)))\n                       (char-downcase c)))\n                 c)))\n\
    \         s)))\n", "  (string-append (string-append (substring s 2) (substring\
    \ s 0 2))\n                 (string-append (substring s 4) (substring s 2 4))\n\
    \                 (string-append (substring s 6) (substring s 4 6))\n        \
    \         (string-append (substring s 8) (substring s 6 8))\n                \
    \ (string-append (substring s 10) (substring s 8 10))\n                 (string-append\
    \ (substring s 12) (substring s 10 12))\n                 (string-append (substring\
    \ s 14) (substring s 12 14))\n                 (string-append (substring s 16)\
    \ (substring s 14 16))\n                 (string-append (substring s 18) (substring\
    \ s 16 18))\n                 (string-append (substring s 20) (substring s 18\
    \ 20))\n                 (string-append (substring s 22) (substring s 20 22))\n\
    \                 (string-append (substring s 24) (substring s 22 24))\n     \
    \            (string-append (substring s 26) (substring s 24 26))\n          \
    \       (string-append (substring s 28) (substring s 26 28))\n               \
    \  (string-append (substring s 30) (substring s 28 30))\n                 (string-append\
    \ (substring s 32) (substring s 30 32))\n                 (string-append (substring\
    \ s 34) (substring s 32 34))\n                 (string-append (substring s 36)\
    \ (substring s 34 36))\n                 (string-append (substring s 38) (substring\
    \ s 36 38))\n                 (string-append (substring s 40) (substring s 38\
    \ 40))\n                 (string-append (substring s 42) (substring s 40 42))\n\
    \                 (string-append (substring s 44) (substring s 42 44))\n     \
    \            (string-append (substring s 46) (substring s 44 46))\n          \
    \       (string-append (substring s 48) (substring s 46 48))\n               \
    \  (string-append (substring s 50) (substring s 48 50))\n                 (string-append\
    \ (substring s 52) (substring s 50 52))\n                 (string-append (substring\
    \ s 54) (sub", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (if (char=? c #\\a) #\\c\n          (if (char=? c #\\b) #\\d\n        \
    \      (if (char=? c #\\c) #\\e\n                  (if (char=? c #\\d) #\\f\n\
    \                      (if (char=? c #\\e) #\\g\n                          (if\
    \ (char=? c #\\f) #\\h\n                              (if (char=? c #\\g) #\\\
    i\n                                  (if (char=? c #\\h) #\\j\n              \
    \                        (if (char=? c #\\i) #\\k\n                          \
    \                (if (char=? c #\\j) #\\l\n                                  \
    \            (if (char=? c #\\k) #\\m\n                                      \
    \            (if (char=? c #\\l) #\\n\n                                      \
    \                (if (char=? c #\\m) #\\o\n                                  \
    \                        (if (char=? c #\\n) #\\p\n                          \
    \                                    (if (char=? c #\\o) #\\q\n              \
    \                                                    (if (char=? c #\\p) #\\r\n\
    \                                                                      (if (char=?\
    \ c #\\q) #\\s\n                                                             \
    \             (if (char=? c #\\r) #\\t\n                                     \
    \                                         (if (char=? c #\\s) #\\u\n         \
    \                                                                         (if\
    \ (char=? c #\\t) #\\v\n                                                     \
    \                                 (if (char=? c #\\u) #\\w\n                 \
    \                                                                         (if\
    \ (char=? c #\\v) #\\x\n                                                     \
    \                                         (if (char=? c #\\w) #\\y\n         \
    \                                                                            \
    \             (if (char=? c #\\x) #\\z\n                                     \
    \                                                                 (if (char=?\
    \ c #\\y) #\\a\n                                                             \
    \                                             (if (char=? c #\\z) #\\b\n     \
    \                                                           ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c)\n           (char-downcase (char (+ c (* 2 2)))))\n\
    \         s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond ((= c #\\a) #\\c)\n            ((= c #\\b) #\\d)\n         \
    \   ((= c #\\c) #\\e)\n            ((= c #\\d) #\\f)\n            ((= c #\\e)\
    \ #\\g)\n            ((= c #\\f) #\\h)\n            ((= c #\\g) #\\i)\n      \
    \      ((= c #\\h) #\\j)\n            ((= c #\\i) #\\k)\n            ((= c #\\\
    j) #\\l)\n            ((= c #\\k) #\\m)\n            ((= c #\\l) #\\n)\n     \
    \       ((= c #\\m) #\\o)\n            ((= c #\\n) #\\p)\n            ((= c #\\\
    o) #\\q)\n            ((= c #\\p) #\\r)\n            ((= c #\\q) #\\s)\n     \
    \       ((= c #\\r) #\\t)\n            ((= c #\\s) #\\u)\n            ((= c #\\\
    t) #\\v)\n            ((= c #\\u) #\\w)\n            ((= c #\\v) #\\x)\n     \
    \       ((= c #\\w) #\\y)\n            ((= c #\\x) #\\z)\n            ((= c #\\\
    y) #\\a)\n            ((= c #\\z) #\\b)))\n    (rotate-char-helper c))\n  (define\
    \ (rotate-string s)\n    (cond ((null? s) '())\n          (else (cons (rotate-char\
    \ (car s)) (rotate-string (cdr s))))))\n  (rotate-string s))\n", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c)\n           (let ([c (char-downcase c)])\n      \
    \       (if (or (char=? c #\\a) (char=? c #\\b))\n                 (char-upcase\
    \ c)\n                 (char-upcase (char+ c 2)))))\n         s)))\n", "  (string-append\
    \ (string-append (substring s 0 2) (substring s 4 6)) (substring s 2 4)))\n",
  "  (let ([a (string->list s)])\n    (list->string (map (lambda (x) (if (char=? x\
    \ #\\z) #\\b (if (char=? x #\\y) #\\a (if (char=? x #\\x) #\\@ (char-downcase\
    \ (char-upcase x))))) a))))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join (map (lambda (c) (list-ref alphabet (+ c 2)))\n        \
    \              (map char->integer (string->list s)))\n                \"\")))\n",
  "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map\n      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2))))\n      (string->list s)))))\n", "  (define (shift-char c)\n    (integer->char\
    \ (+ (char->integer c) 2)))\n  (string-map shift-char s))\n", "  (define (shift-char\
    \ c)\n    (define (shift-char-helper c)\n      (cond\n        [(char=? c #\\a)\
    \ #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n    \
    \    [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (shift-char-helper (shift-char-helper\
    \ c)))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n  \
    \    [else (cons (shift-char (first s)) (encrypt-helper (rest s)))]))\n  (list->string\
    \ (encrypt-helper (string->list s))))\n", "  (define (rotate-char c)\n    (let\
    \ ([c (char-downcase c)])\n      (if (char=? c #\\z)\n          #\\b\n       \
    \   (if (char=? c #\\y)\n              #\\a\n              (char+ c 2)))))\n \
    \ (string-map rotate-char s))\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (rotate (string-ref s 0))\n            \
    \           (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", " \
    \ (define (rotate-char c)\n    (integer->char (+ (char->integer c) (* 2 2))))\n\
    \  (string-map rotate-char s))\n", "  (define (rotate n)\n    (cond ((= n 0) '())\n\
    \          ((= n 1) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\\
    l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n  \
    \        ((= n 2) '(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b))\n  \
    \        ((= n 3) '(#\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d))\n  \
    \        ((= n 4) '(#\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\f))\n  \
    \        ((= n 5) '(#\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h))\n  \
    \        ((= n 6) '(#\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\\
    v #\\w #\\x #\\y #\\z #", "  (define (encrypt-helper s)\n    (if (empty? s)\n\
    \        empty\n        (cons (rotate-char (first s)) (encrypt-helper (rest s)))))\n\
    \  (list->string (encrypt-helper (string->list s))))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(= c #\\a) #\\\
    c]\n        [(= c #\\b) #\\d]\n        [(= c #\\c) #\\e]\n        [(= c #\\d)\
    \ #\\f]\n        [(= c #\\e) #\\g]\n        [(= c #\\f) #\\h]\n        [(= c #\\\
    g) #\\i]\n        [(= c #\\h) #\\j]\n        [(= c #\\i) #\\k]\n        [(= c\
    \ #\\j) #\\l]\n        [(= c #\\k) #\\m]\n        [(= c #\\l) #\\n]\n        [(=\
    \ c #\\m) #\\o]\n        [(= c #\\n) #\\p]\n        [(= c #\\o) #\\q]\n      \
    \  [(= c #\\p) #\\r]\n        [(= c #\\q) #\\s]\n        [(= c #\\r) #\\t]\n \
    \       [(= c #\\s) #\\u]\n        [(= c #\\t) #\\v]\n        [(= c #\\u) #\\\
    w]\n        [(= c #\\v) #\\x]\n        [(= c #\\w) #\\y]\n        [(= c #\\x)\
    \ #\\z]\n        [(= c #\\y) #\\a]\n        [(= c #\\z) #\\b]\n        [else c]))\n\
    \    (rotate-char-helper c))\n  (define (encrypt-helper s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (rotate-char (first s)) (encrypt-helper (rest s)))]))\n\
    \  (encrypt-helper s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n\
    \            ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n    \
    \        ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n        \
    \    ((char=? c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=?\
    \ c #\\i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\\
    k) #\\m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\\
    o)\n            ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n \
    \           ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n     \
    \       ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n         \
    \   ((char=? c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=?\
    \ c #\\v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\\
    x) #\\z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\\
    b)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n    (cond ((string=?\
    \ s \"\") \"\")\n          (else (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                               (rotate-string (substring s 1))))))\n\
    \  (rotate-string s))\n", "  (define (char-&gt;int c)\n    (- (char-&gt;integer\
    \ c) (char-&gt;integer #\\a)))\n  (define (int-&gt;char i)\n    (integer-&gt;char\
    \ (+ (char-&gt;integer #\\a) i)))\n  (define (rotate i)\n    (modulo (+ i (* 2\
    \ 2)) 26))\n  (define (encrypt-char c)\n    (int-&gt;char (rotate (char-&gt;int\
    \ c))))\n  (string-&gt;list s))\n</code>\nI'm not sure how to get the <code>string-&gt;list</code>\
    \ to work. I'm trying to get it to return a list of the encrypted characters.\n\
    \n\nA:\n\nYou're almost there, you just need to apply the <code>encrypt-char</code>\
    \ function to each character in the string, and then convert the resulting list\
    \ of characters back to a string:\n<code>(define (encrypt s)\n  (define (char-&gt;int\
    \ c)\n    (- (char-&gt;integer c) (char-&gt;integer #\\a)))\n  (define (int-&gt;char\
    \ i)\n    (integer-&gt;char (+ (char-&gt;integer #\\a) i)))\n  (define (rotate\
    \ i)\n    (modulo (+ i (* 2 2)) 26))\n  (define (encrypt-char c)\n    (int-&gt;char\
    \ (rotate (char-&gt;int c))))\n  (list-&gt;string (map encrypt-char (string-&gt;list\
    \ s))))\n</code>\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-char c)\n    (string-append\
    \ (string-append (rotate \"abcdefghijklmnopqrstuvwxyz\")\n                   \
    \               (rotate \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"))\n                   \
    \ (rotate \"0123456789\")))\n  (define (encrypt-string s)\n    (if (empty? s)\n\
    \        \"\"\n        (string-append (list-ref (encrypt-char (string-ref s 0))\n\
    \                                 (string-index \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    \n                                               (string-ref s 0)))\n        \
    \              (encrypt-string (substring s 1)))))\n  (encrypt-string s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (let ([s (string->list\
    \ s)])\n    (map (lambda (c) (string-ref \"abcdefghijklmnopqrstuvwxyz\" (+ 2 (*\
    \ 2 (string-index \"abcdefghijklmnopqrstuvwxyz\" c))))) s)))\n", "  (let ([alphabet\
    \ (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n\
    \      (lambda (c)\n        (list-ref alphabet (+ (list-index c alphabet) (* 2\
    \ 2))))\n      (string->list s)))))\n", "  (define (rotate n s)\n    (if (zero?\
    \ n)\n        s\n        (rotate (- n 1) (string-append (substring s -1) (substring\
    \ s 0 -1)))))\n  (rotate (* 2 2) s))\n", "  (define (rotate n s)\n    (if (zero?\
    \ n)\n        s\n        (rotate (- n 1) (string-append (substring s -1) (substring\
    \ s 0 -1)))))\n  (rotate (* 2 2) s))\n", "  (define (rotate s)\n    (string-append\
    \ (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty?\
    \ s)\n        \"\"\n        (string-append (rotate (string-append (substring s\
    \ 0 1) \"ab\"))\n                       (encrypt-helper (substring s 1)))))\n\
    \  (encrypt-helper s))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join\n     (map (lambda (x)\n            (list-ref alphabet (+\
    \ x 2)))\n          (map char->integer (string->list s)))\n     \"\")))\n", " \
    \ (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n \
    \       [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (string-map rotate-char s))\n  (rotate-string\
    \ s))\n", "  (string-append (string-append (substring s 0 2) (substring s 4 6))\
    \ (substring s 2 4)))\n", "  (define (rotate s)\n    (string-append (substring\
    \ s 2) (substring s 0 2)))\n  (define (encrypt-helper s)\n    (if (string=? s\
    \ \"\")\n        \"\"\n        (string-append (rotate s) (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n    (let ((n\
    \ (string->number (string c) 16)))\n      (number->string (+ n (* 2 2)) 16)))\n\
    \  (string-map rotate-char s))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (string-map rotate-char s))\n", "  (define\
    \ (rotate n)\n    (cond\n      [(= n 0) (string->list s)]\n      [else (rotate\
    \ (- n 1))]))\n  (define (shift n)\n    (cond\n      [(= n 0) (rotate 2)]\n  \
    \    [else (shift (- n 1))]))\n  (define (convert n)\n    (cond\n      [(= n 0)\
    \ (shift 2)]\n      [else (convert (- n 1))]))\n  (list->string (convert (string-length\
    \ s))))\n", "  (define (shift-char c)\n    (define (shift-char-helper c)\n   \
    \   (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n  \
    \      [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (shift-char-helper\
    \ (shift-char-helper c)))\n  (define (encrypt-helper s)\n    (cond\n      [(empty?\
    \ s) empty]\n      [else (cons (shift-char (first s)) (encrypt-helper (rest s)))]))\n\
    \  (encrypt-helper s))\n", "  (string-append (string-append (substring s 0 1)\
    \ (substring s 1 2)) (substring s 2 3)))\n", "  (define (rotate-char c)\n    (let\
    \ ((c (string-&gt;char c)))\n      (cond\n        [(char=? c #\\a) #\\c]\n   \
    \     [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=?\
    \ c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\\
    h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c])))\n  (string-join (map rotate-char (string-&gt;list s))))\n\
    </code>\nI'm not sure if this is the best way to do it, but it works. \n", " \
    \ (define (rotate n s)\n    (if (string=? s \"\")\n        \"\"\n        (let\
    \ ([c (string-ref s 0)])\n          (string-append (string (modulo (+ c n) 256))\n\
    \                         (rotate n (substring s 1))))))\n  (rotate (* 2 2) s))\n",
  "  (define (rotate n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (modulo\
    \ (+ n 2) 26) (rotate (- n 1)))]))\n  (define (encrypt-helper s)\n    (cond\n\
    \      [(empty? s) '()]\n      [else (cons (list-ref (rotate (char->integer (car\
    \ s))) 0) (encrypt-helper (cdr s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (shift c)\n    (let ([i (string-ci-&gt;integer c)])\n \
    \     (integer-&gt;char (+ i (* 2 2)))))\n  (string-&gt;list s))\n", "  (define\
    \ (rotate s)\n    (string-append (substring s 2) (substring s 0 2)))\n  (define\
    \ (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n        (string-append\
    \ (rotate (string-ref s 0))\n                       (encrypt-helper (substring\
    \ s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (char=? c #\\a)\n          #\\c\n        \
    \  (if (char=? c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n\
    \                  #\\e\n                  (if (char=? c #\\d)\n             \
    \         #\\f\n                      (if (char=? c #\\e)\n                  \
    \        #\\g\n                          (if (char=? c #\\f)\n               \
    \               #\\h\n                              (if (char=? c #\\g)\n    \
    \                              #\\i\n                                  (if (char=?\
    \ c #\\h)\n                                      #\\j\n                      \
    \                (if (char=? c #\\i)\n                                       \
    \   #\\k\n                                          (if (char=? c #\\j)\n    \
    \                                          #\\l\n                            \
    \                  (if (char=? c #\\k)\n                                     \
    \             #\\m\n                                                  (if (char=?\
    \ c #\\l)\n                                                      #\\n\n      \
    \                                                (if (char=? c #\\m)\n       \
    \                                                   #\\o\n                   \
    \                                       (if (char=? c #\\n)\n                \
    \                                              #\\p\n                        \
    \                                      (if (char=? c #\\o)\n                 \
    \                                                 #\\q\n                     \
    \                                             (if (char=? c #\\p)\n          \
    \                                                            #\\r\n          \
    \                                                            (if (char=? c #\\\
    q)\n                                                                         \
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r)\n                                                  \
    \                            #\\t\n                                          \
    \                                    (if (char=? c #\\s)\n                   \
    \                                                               #\\u\n       \
    \                                                                           (if\
    \ (char=? c #\\t)\n                                                          \
    \                            #\\v\n                                          \
    \                                            (if (char=? c #\\u)\n           \
    \                                                                            \
    \   #\\w\n                                                                   \
    \                       (if (char=? c #\\v)\n                                \
    \                                                ", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n    \
    \        ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n        \
    \    ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n            ((char=?\
    \ c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=? c #\\\
    h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\j) #\\\
    l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\n)\n \
    \           ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n     \
    \       ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n         \
    \   ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n            ((char=?\
    \ c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=? c #\\\
    u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\w) #\\\
    y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\a)\n \
    \           ((char=? c #\\z) #\\b)))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond ((string=? s \"\") \"\")\n          (else (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                               (rotate-string\
    \ (substring s 1))))))\n  (rotate-string s))\n", "  (define (shift-char c)\n \
    \   (define (shift-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n\
    \        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=?\
    \ c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\\
    h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (shift-char-helper (shift-char-helper c)))\n  (define\
    \ (encrypt-helper s)\n    (if (string-empty? s)\n        \"\"\n        (string-append\
    \ (string (shift-char (string-ref s 0)))\n                       (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))", "  (define (rotate-char c)\n  \
    \  (define (rotate-char-helper c)\n      (if (or (= c #\\a) (= c #\\b))\n    \
    \      (+ c 24)\n          (+ c 2)))\n    (integer->char (rotate-char-helper (char->integer\
    \ c))))\n  (map rotate-char (string->list s)))\n", "  (define (encrypt-helper\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (rotate-char (first s))\n\
    \              (encrypt-helper (rest s)))))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (encrypt-helper s i)\n    (cond\n      [(= i (string-length\
    \ s)) \"\"]\n      [else (string-append (string (char-downcase (+ (char-downcase\
    \ (string-ref s i)) 2)))\n                           (encrypt-helper s (+ i 1)))]))\n\
    \  (encrypt-helper s 0))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (rotate-char c)\n    (let ([c\
    \ (string-&gt;char c)])\n      (if (char=? c #\\z)\n          #\\b\n         \
    \ (if (char=? c #\\y)\n              #\\a\n              (char-&gt;string (+ c\
    \ 2))))))\n  (string-join (map rotate-char (string-&gt;list s))))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond ((char=? c\
    \ #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n            ((char=? c #\\\
    c) #\\e)\n            ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\\
    g)\n            ((char=? c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n \
    \           ((char=? c #\\h) #\\j)\n            ((char=? c #\\i) #\\k)\n     \
    \       ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\m)\n         \
    \   ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n            ((char=?\
    \ c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n            ((char=? c #\\\
    p) #\\r)\n            ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\\
    t)\n            ((char=? c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n \
    \           ((char=? c #\\u) #\\w)\n            ((char=? c #\\v) #\\x)\n     \
    \       ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\z)\n         \
    \   ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond ((string=? s \"\") \"\")\n     \
    \     (else (string-append (string (rotate-char (string-ref s 0)))\n         \
    \                      (rotate-string (substring s 1))))))\n  (rotate-string s))\n",
  "  (define (encrypt-helper s i)\n    (cond ((= i (string-length s)) \"\")\n    \
    \      (else (string-append (string (char-downcase (string-ref s i)))\n      \
    \                         (encrypt-helper s (+ i 1))))))\n  (encrypt-helper s\
    \ 0))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (if (empty? s)\n        \"\"\n \
    \       (string-append (rotate (string-ref s 0))\n                       (encrypt-helper\
    \ (substring s 1)))))\n  (encrypt-helper s))\n", "  (define (rotate-char c)\n\
    \    (let ((c (string-&gt;char c)))\n      (if (&lt;= #\\a c #\\z)\n         \
    \ (let ((c (+ c (* 2 2))))\n            (if (&gt; c #\\z)\n                (char-&gt;string\
    \ (- c 26))\n                (char-&gt;string c)))\n          c)))\n  (string-join\
    \ (map rotate-char (string-&gt;list s)) \"\"))\n", "  (define (rotate s)\n   \
    \ (string-append (substring s 2) (substring s 0 2)))\n  (define (encrypt-helper\
    \ s)\n    (if (string=? s \"\")\n        \"\"\n        (string-append (rotate\
    \ s) (encrypt-helper (substring s 1)))))\n  (encrypt-helper s))\n", "  (let ([alphabet\
    \ (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n\
    \      (lambda (c)\n        (list-ref alphabet\n                  (modulo (+ (string-index\
    \ c alphabet) (* 2 2))\n                          (length alphabet))))\n     \
    \ (string->list s)))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a) #\\c\n          (if (char=? c #\\b) #\\d\n   \
    \           (if (char=? c #\\c) #\\e\n                  (if (char=? c #\\d) #\\\
    f\n                      (if (char=? c #\\e) #\\g\n                          (if\
    \ (char=? c #\\f) #\\h\n                              (if (char=? c #\\g) #\\\
    i\n                                  (if (char=? c #\\h) #\\j\n              \
    \                        (if (char=? c #\\i) #\\k\n                          \
    \                (if (char=? c #\\j) #\\l\n                                  \
    \            (if (char=? c #\\k) #\\m\n                                      \
    \            (if (char=? c #\\l) #\\n\n                                      \
    \                (if (char=? c #\\m) #\\o\n                                  \
    \                        (if (char=? c #\\n) #\\p\n                          \
    \                                    (if (char=? c #\\o) #\\q\n              \
    \                                                    (if (char=? c #\\p) #\\r\n\
    \                                                                      (if (char=?\
    \ c #\\q) #\\s\n                                                             \
    \             (if (char=? c #\\r) #\\t\n                                     \
    \                                         (if (char=? c #\\s) #\\u\n         \
    \                                                                         (if\
    \ (char=? c #\\t) #\\v\n                                                     \
    \                                 (if (char=? c #\\u) #\\w\n                 \
    \                                                                         (if\
    \ (char=? c #\\v) #\\x\n                                                     \
    \                                         (if (char=? c #\\w) #\\y\n         \
    \                                                                            \
    \             (if (char=? c #\\x) #\\z\n                                     \
    \                                                                 (if (char=?\
    \ c #\\y) #\\a\n                                                             \
    \                                             (if (char=? c #\\z) #\\b\n     \
    \                                                           ", "  (define (shift\
    \ c)\n    (let ([n (string-&gt;number (string c) 16)])\n      (if (&lt; n #x61)\n\
    \          (number-&gt;string (+ n #x14) 16)\n          (number-&gt;string (+\
    \ n #x2) 16))))\n  (string-&gt;list s))\n</code>\nI'm getting the following error:\n\
    <code>string-&gt;list: expects argument of type &lt;string&gt;; given '#&lt;procedure:shift&gt;\n\
    </code>\nI'm not sure what I'm doing wrong.\n\n\nA:\n\nYou're not using the <code>shift</code>\
    \ function anywhere in your code.\nAlso, you're not returning anything from the\
    \ <code>encrypt</code> function.\nTry this:\n<code>(define (encrypt s)\n  (define\
    \ (shift c)\n    (let ([n (string-&gt;number (string c) 16)])\n      (if (&lt;\
    \ n #x61)\n          (number-&gt;string (+ n #x14) 16)\n          (number-&gt;string\
    \ (+ n #x2) 16))))\n  (list-&gt;string (map shift (string-&gt;list s))))\n</code>\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a) #\\c\n          (if (char=? c #\\b) #\\d\n              (if (char=?\
    \ c #\\c) #\\e\n                  (if (char=? c #\\d) #\\f\n                 \
    \     (if (char=? c #\\e) #\\g\n                          (if (char=? c #\\f)\
    \ #\\h\n                              (if (char=? c #\\g) #\\i\n             \
    \                     (if (char=? c #\\h) #\\j\n                             \
    \         (if (char=? c #\\i) #\\k\n                                         \
    \ (if (char=? c #\\j) #\\l\n                                              (if\
    \ (char=? c #\\k) #\\m\n                                                  (if\
    \ (char=? c #\\l) #\\n\n                                                     \
    \ (if (char=? c #\\m) #\\o\n                                                 \
    \         (if (char=? c #\\n) #\\p\n                                         \
    \                     (if (char=? c #\\o) #\\q\n                             \
    \                                     (if (char=? c #\\p) #\\r\n             \
    \                                                         (if (char=? c #\\q)\
    \ #\\s\n                                                                     \
    \     (if (char=? c #\\r) #\\t\n                                             \
    \                                 (if (char=? c #\\s) #\\u\n                 \
    \                                                                 (if (char=?\
    \ c #\\t) #\\v\n                                                             \
    \                         (if (char=? c #\\u) #\\w\n                         \
    \                                                                 (if (char=?\
    \ c #\\v) #\\x\n                                                             \
    \                                 (if (char=? c #\\w) #\\y\n                 \
    \                                                                            \
    \     (if (char=? c #\\x) #\\z\n                                             \
    \                                                         (if (char=? c #\\y)\
    \ #\\a\n                                                                     \
    \                                     (if (char=? c #\\z) #\\b\n             \
    \                                                   ", "  (define (rotate-char\
    \ c)\n    (let ((rotated-char (+ c (* 2 2))))\n      (if (&gt; rotated-char 122)\n\
    \          (- rotated-char 26)\n          rotated-char)))\n  (string-&gt;list\
    \ (string-map rotate-char s)))\n</code>\n", "  (let ([alphabet (string->list \"\
    abcdefghijklmnopqrstuvwxyz\")])\n    (string-join (map (lambda (c)\n         \
    \               (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n   \
    \                   (string->list s)))))\n", "  (string-map (lambda (c)\n    \
    \            (if (char-alphabetic? c)\n                    (let* ([a (char-downcase\
    \ c)]\n                           [n (char-&gt;integer a)]\n                 \
    \          [m (+ n (* 2 2))])\n                      (integer-&gt;char (modulo\
    \ m 26)))\n                    c))\n              s))\n</code>\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\\
    a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n      \
    \        (if (char=? c #\\c)\n                  #\\e\n                  (if (char=?\
    \ c #\\d)\n                      #\\f\n                      (if (char=? c #\\\
    e)\n                          #\\g\n                          (if (char=? c #\\\
    f)\n                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (rotate-string (rest s)))]))\n  (rotate-string s))\n", "  (map (lambda (c)\n\
    \         (if (char-alphabetic? c)\n             (let* ([a (char-downcase c)]\n\
    \                    [b (char-downcase (integer->char (+ (char->integer a) 2)))]\n\
    \                    [c (char-downcase (integer->char (+ (char->integer b) 2)))])\n\
    \               (if (char-alphabetic? c)\n                   c\n             \
    \      (integer->char (- (char->integer c) 26))))\n             c))\n       s))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (or (= c #\\a) (= c #\\A))\n\
    \          (if (or (= c #\\a) (= c #\\A))\n              #\\c\n              #\\\
    C)\n          (if (or (= c #\\b) (= c #\\B))\n              (if (or (= c #\\b)\
    \ (= c #\\B))\n                  #\\d\n                  #\\D)\n             \
    \ (if (or (= c #\\c) (= c #\\C))\n                  (if (or (= c #\\c) (= c #\\\
    C))\n                      #\\e\n                      #\\E)\n               \
    \   (if (or (= c #\\d) (= c #\\D))\n                      (if (or (= c #\\d) (=\
    \ c #\\D))\n                          #\\f\n                          #\\F)\n\
    \                      (if (or (= c #\\e) (= c #\\E))\n                      \
    \    (if (or (= c #\\e) (= c #\\E))\n                              #\\g\n    \
    \                          #\\G)\n                          (if (or (= c #\\f)\
    \ (= c #\\F))\n                              (if (or (= c #\\f) (= c #\\F))\n\
    \                                  #\\h\n                                  #\\\
    H)\n                              (if (or (= c #\\g) (= c #\\G))\n           \
    \                       (if (or (= c #\\g) (= c #\\G))\n                     \
    \                 #\\i\n                                      #\\I)\n        \
    \                          (if (or (= c #\\h) (= c #\\H))\n                  \
    \                    (if (or (= c #\\h) (= c #\\H))\n                        \
    \                  #\\j\n                                          #\\J)\n   \
    \                                   (if (or (= c #\\i) (= c #\\I))\n         \
    \                                 (if (or (= c #\\i) (= c #\\I))\n           \
    \                                   #\\k\n                                   \
    \           #\\K)\n                                          (if (or (= c #\\\
    j) (= c #\\J))\n                                              (if (or (= c #\\\
    j) (= c #\\", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (define (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n\
    \      [else (cons (rotate (first s)) (encrypt-helper (rest s)))]))\n  (string-join\
    \ (encrypt-helper (string->list s))))\n", "  (let ([alphabet (string->list \"\
    abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map (lambda (c)\n   \
    \         (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n         \
    \ (string->list s)))))\n", "  (string-map (lambda (c)\n                (if (char-alphabetic?\
    \ c)\n                    (let* ([a (char-upcase c)]\n                       \
    \    [n (char-&gt;integer a)]\n                           [n (+ n (* 2 2))])\n\
    \                      (integer-&gt;char (if (&gt; n 90) (- n 26) n)))\n     \
    \               c))\n              s))\n", "  (define (helper s)\n    (if (empty?\
    \ s)\n        '()\n        (cons (char-downcase (integer->char (+ (char->integer\
    \ (car s)) 2)))\n              (helper (cdr s)))))\n  (string-&gt;list (string-append\
    \ (list-&gt;string (helper (string-&gt;list s)))\n                           \
    \    (list-&gt;string (helper (string-&gt;list (string-downcase s)))))))\n", " \
    \ (define (rotate n)\n    (cond ((= n 0) '())\n          ((= n 1) '(#\\a #\\b\
    \ #\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\\
    r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z))\n          ((= n 2) '(#\\c #\\d #\\\
    e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\\
    u #\\v #\\w #\\x #\\y #\\z #\\a #\\b))\n          ((= n 3) '(#\\e #\\f #\\g #\\\
    h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\\
    x #\\y #\\z #\\a #\\b #\\c #\\d))\n          ((= n 4) '(#\\g #\\h #\\i #\\j #\\\
    k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\\
    a #\\b #\\c #\\d #\\e #\\f))\n          ((= n 5) '(#\\i #\\j #\\k #\\l #\\m #\\\
    n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h))\n          ((= n 6) '(#\\k #\\l #\\m #\\n #\\o #\\p #\\\
    q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (if (and (<= #\\a c) (<= c #\\z))\n\
    \          (if (> c #\\y)\n              (list->string (list #\\a (+ c 2)))\n\
    \              (list->string (list (+ c 2))))\n          (list->string (list c))))\n\
    \    (rotate-char-helper (string->list s)))\n  (define (encrypt-helper s)\n  \
    \  (if (empty? s)\n        \"\"\n        (string-append (rotate-char (first s))\
    \ (encrypt-helper (rest s)))))\n  (encrypt-helper s))\n", "  (define (rotate n)\n\
    \    (cond ((= n 0) '())\n          ((= n 1) '(#\\a #\\b #\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\\
    w #\\x #\\y #\\z))\n          ((= n 2) '(#\\c #\\d #\\e #\\f #\\g #\\h #\\i #\\\
    j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\\
    z #\\a #\\b))\n          ((= n 3) '(#\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\\
    c #\\d))\n          ((= n 4) '(#\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\\
    f))\n          ((= n 5) '(#\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\f #\\g #\\h))\n\
    \          ((= n 6) '(#\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\\
    v #\\w #\\x #\\y #\\z #", "  (let ((alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )))\n    (string-join (map (lambda (c) (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2)))) (string->list s)) \"\")))\n", "  (let ([alphabet (string->list \"\
    abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda (c)\n\
    \        (list-ref alphabet (+ (- (char->integer c) (char->integer #\\a)) 2)))\n\
    \      (string->list s)))))\n", "  (define (rotate-char c)\n    (integer->char\
    \ (+ (char->integer c) (* 2 2))))\n  (define (rotate-string s)\n    (if (empty?\
    \ s)\n        empty\n        (cons (rotate-char (first s))\n              (rotate-string\
    \ (rest s)))))\n  (rotate-string s))\n", "  (let ([s (string->list s)])\n    (map\
    \ (lambda (c)\n           (let ([c (char-downcase c)])\n             (if (char-alphabetic?\
    \ c)\n                 (let ([c (+ c (* 2 2))])\n                   (if (> c #\\\
    z)\n                       (char-downcase (char-add c (- #\\a #\\z -1)))\n   \
    \                    (char-downcase c)))\n                 c)))\n         s)))\n",
  "  (string-append (string-append (substring s 0 2) (substring s 2))\n          \
    \       (substring s 0 2)))\n", "  (let ([s (string->list s)])\n    (map (lambda\
    \ (c)\n           (let ([c (char-downcase c)])\n             (if (or (char=? c\
    \ #\\a) (char=? c #\\b))\n                 (char-upcase c)\n                 (char-upcase\
    \ (char+ c 2)))))\n         s)))\n", "  (define (shift c)\n    (if (char-alphabetic?\
    \ c)\n        (let ([c (char-downcase c)])\n          (if (>= c #\\c)\n      \
    \        (char (+ c 2))\n              (char (+ c 24))))\n        c))\n  (string-map\
    \ shift s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (let\
    \ ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n\
    \     (map (lambda (c)\n            (list-ref alphabet (+ (list-index c alphabet)\
    \ (* 2 2))))\n          (string->list s)))))\n", "  (string-append (substring\
    \ s 2) (substring s 0 2)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\\
    d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) empty]\n    \
    \  [else (cons (rotate-char (first s)) (rotate-string (rest s)))]))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n   \
    \   (cond ((char=? c #\\a) #\\c)\n            ((char=? c #\\b) #\\d)\n       \
    \     ((char=? c #\\c) #\\e)\n            ((char=? c #\\d) #\\f)\n           \
    \ ((char=? c #\\e) #\\g)\n            ((char=? c #\\f) #\\h)\n            ((char=?\
    \ c #\\g) #\\i)\n            ((char=? c #\\h) #\\j)\n            ((char=? c #\\\
    i) #\\k)\n            ((char=? c #\\j) #\\l)\n            ((char=? c #\\k) #\\\
    m)\n            ((char=? c #\\l) #\\n)\n            ((char=? c #\\m) #\\o)\n \
    \           ((char=? c #\\n) #\\p)\n            ((char=? c #\\o) #\\q)\n     \
    \       ((char=? c #\\p) #\\r)\n            ((char=? c #\\q) #\\s)\n         \
    \   ((char=? c #\\r) #\\t)\n            ((char=? c #\\s) #\\u)\n            ((char=?\
    \ c #\\t) #\\v)\n            ((char=? c #\\u) #\\w)\n            ((char=? c #\\\
    v) #\\x)\n            ((char=? c #\\w) #\\y)\n            ((char=? c #\\x) #\\\
    z)\n            ((char=? c #\\y) #\\a)\n            ((char=? c #\\z) #\\b)))\n\
    \    (rotate-char-helper c))\n  (define (rotate-string s)\n    (cond ((string=?\
    \ s \"\") \"\")\n          (else (string-append (string (rotate-char (string-ref\
    \ s 0)))\n                               (rotate-string (substring s 1))))))\n\
    \  (rotate-string s))\n", "  (string-append (string-append (substring s 0 2) (substring\
    \ s 4 6)) (substring s 2 4)))\n", "  (define (rotate n s)\n    (if (zero? n)\n\
    \        s\n        (rotate (- n 1) (string-append (substring s 1) (string (string-ref\
    \ s 0))))))\n  (rotate (* 2 2) s))\n", "  (let ([s (string->list s)])\n    (map\
    \ (lambda (c)\n           (let ([c (char-downcase c)])\n             (if (char-alphabetic?\
    \ c)\n                 (let ([c (+ c (* 2 2))])\n                   (if (> c 122)\n\
    \                       (char (+ (- c 122) 96))\n                       (char\
    \ c)))\n                 c)))\n         s)))\n", "  (define (shift c)\n    (if\
    \ (char-numeric? c)\n        (char-&gt;integer c)\n        (let ((n (char-&gt;integer\
    \ c)))\n          (if (&gt;= n (char-&gt;integer #\\a))\n              (integer-&gt;char\
    \ (+ n 2))\n              (integer-&gt;char (+ n 2))))))\n  (string-&gt;list s))\n\
    </code>\nI'm not sure how to get the function to return a string. I've tried using\
    \ <code>string-&gt;list</code> and <code>list-&gt;string</code> but I'm not sure\
    \ how to get the function to return a string.\n\n\nA:\n\nThe problem is that you're\
    \ not actually calling <code>shift</code> anywhere in your code. You're just passing\
    \ it as an argument to <code>string-&gt;list</code>, which is not what you want.\n\
    You can use <code>map</code> to apply a function to every element of a list, and\
    \ then use <code>list-&gt;string</code> to convert the resulting list to a string.\n\
    <code>(define (encrypt s)\n  (define (shift c)\n    (if (char-numeric? c)\n  \
    \      (char-&gt;integer c)\n        (let ((n (char-&gt;integer c)))\n       \
    \   (if (&gt;= n (char-&gt;integer #\\a))\n              (integer-&gt;char (+\
    \ n 2))\n              (integer-&gt;char (+ n 2))))))\n  (list-&gt;string (map\
    \ shift (string-&gt;list s))))\n</code>\n", "  (define (shift-char c)\n    (define\
    \ (shift-char-helper c)\n      (cond\n        [(char=? c #\\a) #\\c]\n       \
    \ [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n        [(char=? c #\\\
    d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n   \
    \     [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\j]\n        [(char=?\
    \ c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=? c #\\k) #\\\
    m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\o]\n        [(char=?\
    \ c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=? c #\\p) #\\\
    r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\t]\n        [(char=?\
    \ c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=? c #\\u) #\\\
    w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\y]\n        [(char=?\
    \ c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=? c #\\z) #\\\
    b]\n        [else c]))\n    (shift-char-helper (shift-char-helper c)))\n  (define\
    \ (encrypt-helper s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (shift-char\
    \ (first s)) (encrypt-helper (rest s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate-char c)\n    (let ([c (char-downcase c)])\n   \
    \   (if (char-alphabetic? c)\n          (let ([c (+ c (* 2 2))])\n           \
    \ (if (> c #\\z)\n                (char-downcase (- c 26))\n              (char-downcase\
    \ c)))\n        c)))\n  (string-map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n\
    \            ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n    \
    \        ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n        \
    \    ((char=? c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=?\
    \ c #\\h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\\
    j) #\\l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\\
    n)\n            ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n \
    \           ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n     \
    \       ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n         \
    \   ((char=? c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=?\
    \ c #\\u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\\
    w) #\\y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\\
    a)\n            ((char=? c #\\z) #\\b)))\n    (rotate-char-helper c))\n  (define\
    \ (rotate-string s)\n    (cond ((string=? s \"\") \"\")\n          (else (string-append\
    \ (string (rotate-char (string-ref s 0)))\n                               (rotate-string\
    \ (substring s 1))))))\n  (rotate-string s))\n", "  (define (rotate n)\n    (cond\n\
    \      [(= n 0) '()]\n      [else (cons (string-ref s (- n 1)) (rotate (- n 1)))]))\n\
    \  (define (rotate-2 n)\n    (cond\n      [(= n 0) '()]\n      [else (cons (string-ref\
    \ s (- n 2)) (rotate-2 (- n 2)))]))\n  (define (rotate-4 n)\n    (cond\n     \
    \ [(= n 0) '()]\n      [else (cons (string-ref s (- n 4)) (rotate-4 (- n 4)))]))\n\
    \  (string-append (rotate-2 (string-length s)) (rotate-4 (string-length s)) (rotate\
    \ (string-length s))))\n", "  (define (encrypt-helper s i)\n    (cond\n      [(=\
    \ i (string-length s)) \"\"]\n      [else (string-append (string (char-downcase\
    \ (+ (char-downcase (string-ref s i)) 2)))\n                           (encrypt-helper\
    \ s (+ i 1)))]))\n  (encrypt-helper s 0))\n", "  (let ([s (string->list s)])\n\
    \    (map (lambda (c)\n           (let ([c (char-downcase c)])\n             (if\
    \ (char-alphabetic? c)\n                 (let ([c (+ c (* 2 2))])\n          \
    \         (if (> c #\\z)\n                       (char-downcase (+ c (- #\\a 1)))\n\
    \                       (char-downcase c)))\n                 c)))\n         s)))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (or (=\
    \ c #\\a) (= c #\\b))\n          (char (+ c 24))\n          (char (- c 2))))\n\
    \    (if (char? c)\n        (rotate-char-helper c)\n        c))\n  (define (rotate-string\
    \ s)\n    (if (empty? s)\n        empty\n        (cons (rotate-char (first s))\
    \ (rotate-string (rest s)))))\n  (list->string (rotate-string (string->list s))))\n",
  "  (let ([s (string->list s)])\n    (map (lambda (x) (list->string (list (+ x 2))))\
    \ s)))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n  \
    \    (if (eq? c #\\a) #\\c\n          (if (eq? c #\\b) #\\d\n              (if\
    \ (eq? c #\\c) #\\e\n                  (if (eq? c #\\d) #\\f\n               \
    \       (if (eq? c #\\e) #\\g\n                          (if (eq? c #\\f) #\\\
    h\n                              (if (eq? c #\\g) #\\i\n                     \
    \             (if (eq? c #\\h) #\\j\n                                      (if\
    \ (eq? c #\\i) #\\k\n                                          (if (eq? c #\\\
    j) #\\l\n                                              (if (eq? c #\\k) #\\m\n\
    \                                                  (if (eq? c #\\l) #\\n\n   \
    \                                                   (if (eq? c #\\m) #\\o\n  \
    \                                                        (if (eq? c #\\n) #\\\
    p\n                                                              (if (eq? c #\\\
    o) #\\q\n                                                                  (if\
    \ (eq? c #\\p) #\\r\n                                                        \
    \              (if (eq? c #\\q) #\\s\n                                       \
    \                                   (if (eq? c #\\r) #\\t\n                  \
    \                                                            (if (eq? c #\\s)\
    \ #\\u\n                                                                     \
    \             (if (eq? c #\\t) #\\v\n                                        \
    \                                              (if (eq? c #\\u) #\\w\n       \
    \                                                                            \
    \       (if (eq? c #\\v) #\\x\n                                              \
    \                                                (if (eq? c #\\w) #\\y\n     \
    \                                                                            \
    \                 (if (eq? c #\\x) #\\z\n                                    \
    \                                                                  (if (eq? c\
    \ #\\y) #\\a\n                                                               \
    \                                           (if (eq? c #\\z) #\\b\n          \
    \                                                                            \
    \                        (error \"Invalid character\"))))))))))))))))))))))))))))))\n\
    \    (rotate-char-hel", "  (define (rotate-char c)\n    (let* ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")]\n           [c-index (list-index c alphabet)])\n\
    \      (list-ref alphabet (+ c-index (* 2 2)))))\n  (list->string (map rotate-char\
    \ (string->list s))))\n", "  (let ([s (string->list s)])\n    (map (lambda (c)\n\
    \           (let ([c (char-downcase c)])\n             (if (char-alphabetic? c)\n\
    \                 (let ([c (+ c (* 2 2))])\n                   (if (> c #\\z)\n\
    \                       (char-downcase (+ c (- #\\a 1)))\n                   \
    \    (char-downcase c)))\n                 c)))\n         s)))\n", "  (define\
    \ (rotate n)\n    (cond ((= n 0) '())\n          ((= n 1) '(#\\a #\\b #\\c #\\\
    d #\\e #\\f #\\g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\\
    t #\\u #\\v #\\w #\\x #\\y #\\z))\n          ((= n 2) '(#\\c #\\d #\\e #\\f #\\\
    g #\\h #\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\\
    w #\\x #\\y #\\z #\\a #\\b))\n          ((= n 3) '(#\\e #\\f #\\g #\\h #\\i #\\\
    j #\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\\
    z #\\a #\\b #\\c #\\d))\n          ((= n 4) '(#\\g #\\h #\\i #\\j #\\k #\\l #\\\
    m #\\n #\\o #\\p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\\
    c #\\d #\\e #\\f))\n          ((= n 5) '(#\\i #\\j #\\k #\\l #\\m #\\n #\\o #\\\
    p #\\q #\\r #\\s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #\\a #\\b #\\c #\\d #\\e #\\\
    f #\\g #\\h))\n          ((= n 6) '(#\\k #\\l #\\m #\\n #\\o #\\p #\\q #\\r #\\\
    s #\\t #\\u #\\v #\\w #\\x #\\y #\\z #", "  (define (rotate n)\n    (cond\n  \
    \    [(= n 0) 0]\n      [(= n 1) 2]\n      [(= n 2) 4]\n      [(= n 3) 6]\n  \
    \    [(= n 4) 8]\n      [(= n 5) 0]\n      [(= n 6) 2]\n      [(= n 7) 4]\n  \
    \    [(= n 8) 6]\n      [(= n 9) 8]\n      [(= n 10) 0]\n      [(= n 11) 2]\n\
    \      [(= n 12) 4]\n      [(= n 13) 6]\n      [(= n 14) 8]\n      [(= n 15) 0]\n\
    \      [(= n 16) 2]\n      [(= n 17) 4]\n      [(= n 18) 6]\n      [(= n 19) 8]\n\
    \      [(= n 20) 0]\n      [(= n 21) 2]\n      [(= n 22) 4]\n      [(= n 23) 6]\n\
    \      [(= n 24) 8]\n      [(= n 25) 0]))\n  (define (encrypt-char c)\n    (define\
    \ (char->int c)\n      (cond\n        [(= c #\\a) 0]\n        [(= c #\\b) 1]\n\
    \        [(= c #\\c) 2]\n        [(= c #\\d) 3]\n        [(= c #\\e) 4]\n    \
    \    [(= c #\\f) 5]\n        [(= c #\\g) 6]\n        [(= c #\\h) 7]\n        [(=\
    \ c #\\i) 8]\n        [(= c #\\j) 9]\n        [(= c #\\k) 10]\n        [(= c #\\\
    l) 11]\n        [(= c #\\m) 12]\n        [(= c #\\n) 13]\n        [(= c #\\o)\
    \ 14]\n        [(= c #\\p) 15]\n        [(= c #\\q) 16]\n        [(= c #\\r) 17]\n\
    \        [(= c #\\s) 18]\n        [(= c #\\t) 19]\n        [(= c #\\u) 20]\n \
    \       [(= c #\\v", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (and (&lt;= #\\a c) (&lt;= c #\\z))\n          (if (&gt;= c #\\\
    y)\n              (char (+ c (- #\\a #\\c)))\n              (char (+ c 2)))\n\
    \          c))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n   \
    \ (if (string-empty? s)\n        \"\"\n        (string-append (rotate-char (string-ref\
    \ s 0))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (define (rotate s)\n    (string-append (substring s 2) (substring\
    \ s 0 2)))\n  (string-join (map rotate (string-split s #\\space)) \" \"))\n",
  "  (define (rotate n)\n    (if (= n 0)\n        (lambda (c) c)\n        (lambda\
    \ (c)\n          (let ((d (char->integer c)))\n            (integer->char (+ d\
    \ (* n 2)))))))\n  (string-map (rotate 2) s))\n", "  (define (rotate-char c)\n\
    \    (define (rotate-char-helper c)\n      (cond ((= c #\\a) #\\c)\n         \
    \   ((= c #\\b) #\\d)\n            ((= c #\\c) #\\e)\n            ((= c #\\d)\
    \ #\\f)\n            ((= c #\\e) #\\g)\n            ((= c #\\f) #\\h)\n      \
    \      ((= c #\\g) #\\i)\n            ((= c #\\h) #\\j)\n            ((= c #\\\
    i) #\\k)\n            ((= c #\\j) #\\l)\n            ((= c #\\k) #\\m)\n     \
    \       ((= c #\\l) #\\n)\n            ((= c #\\m) #\\o)\n            ((= c #\\\
    n) #\\p)\n            ((= c #\\o) #\\q)\n            ((= c #\\p) #\\r)\n     \
    \       ((= c #\\q) #\\s)\n            ((= c #\\r) #\\t)\n            ((= c #\\\
    s) #\\u)\n            ((= c #\\t) #\\v)\n            ((= c #\\u) #\\w)\n     \
    \       ((= c #\\v) #\\x)\n            ((= c #\\w) #\\y)\n            ((= c #\\\
    x) #\\z)\n            ((= c #\\y) #\\a)\n            ((= c #\\z) #\\b)\n     \
    \       (else c)))\n    (rotate-char-helper c))\n  (define (rotate-string s)\n\
    \    (define (rotate-string-helper s)\n      (cond ((null? s) '())\n         \
    \   (else (cons (rotate-char (car s)) (rotate-string-helper (cdr s))))))\n   \
    \ (rotate-string-helper s))\n  (rotate-string s))\n", "  (define (rotate n)\n\
    \    (cond\n      [(= n 0) 'a]\n      [(= n 1) 'b]\n      [(= n 2) 'c]\n     \
    \ [(= n 3) 'd]\n      [(= n 4) 'e]\n      [(= n 5) 'f]\n      [(= n 6) 'g]\n \
    \     [(= n 7) 'h]\n      [(= n 8) 'i]\n      [(= n 9) 'j]\n      [(= n 10) 'k]\n\
    \      [(= n 11) 'l]\n      [(= n 12) 'm]\n      [(= n 13) 'n]\n      [(= n 14)\
    \ 'o]\n      [(= n 15) 'p]\n      [(= n 16) 'q]\n      [(= n 17) 'r]\n      [(=\
    \ n 18) 's]\n      [(= n 19) 't]\n      [(= n 20) 'u]\n      [(= n 21) 'v]\n \
    \     [(= n 22) 'w]\n      [(= n 23) 'x]\n      [(= n 24) 'y]\n      [(= n 25)\
    \ 'z]))\n  (define (char-to-num c)\n    (cond\n      [(= c 'a) 0]\n      [(= c\
    \ 'b) 1]\n      [(= c 'c) 2]\n      [(= c 'd) 3]\n      [(= c 'e) 4]\n      [(=\
    \ c 'f) 5]\n      [(= c 'g) 6]\n      [(= c 'h) 7]\n      [(= c 'i) 8]\n     \
    \ [(= c 'j) 9]\n      [(= c 'k) 10]\n      [(= c 'l) 11]\n      [(= c 'm) 12]\n\
    \      [(= c 'n) 13]\n      [(= c 'o) 14]\n      [(= c 'p) 15]\n      [(= c 'q)\
    \ 16]\n      [(= c 'r) 17]\n      [(= c 's) 18]\n      [(= c 't) 19]\n      [(=\
    \ c 'u) 20]\n      [(= c 'v) 21]\n     ", "  (cond\n    [(empty? s) empty]\n \
    \   [else\n     (string-append\n      (string-append\n       (string-append\n\
    \        (string-append\n         (string-append\n          (string-append\n \
    \          (string-append\n            (string-append\n             (string-append\n\
    \              (string-append\n               (string-append\n               \
    \ (string-append\n                 (string-append\n                  (string-append\n\
    \                   (string-append\n                    (string-append\n     \
    \                (string-append\n                      (string-append\n      \
    \                 (string-append\n                        (string-append\n   \
    \                      (string-append\n                          (string-append\n\
    \                           (string-append\n                            (string-append\n\
    \                             (string-append\n                              (string-append\n\
    \                               (string-append\n                             \
    \   (string-append\n                                 (string-append\n        \
    \                          (string-append\n                                  \
    \ (string-append\n                                    (string-append\n       \
    \                              (string-append\n                              \
    \        (string-append\n                                       (string-append\n\
    \                                        (string-append\n                    \
    \                     (string-append\n                                       \
    \   (string-append\n                                           (string-append\n\
    \                                            (string-append\n                \
    \                             (string-append\n                               \
    \               (string-append\n                                             \
    \  (string-append\n                                                (string-append\n\
    \                                                 (string-append\n           \
    \                                       (string-append\n                     \
    \                              (string-append\n                              \
    \                      (string-append\n                                      \
    \               (string-append\n                                             \
    \         (string-append\n                                                   \
    \    (string-append\n                                                        (string-append\n\
    \                                                         (string-append\n   \
    \                                                       (string-append\n     \
    \                                                      (string-append\n      \
    \                                                      (string-append\n      \
    \                                                       (string-append\n     \
    \                                                         (string-append\n   \
    \                                                            (string-append\n\
    \                                                                (string-append\n\
    \                                                                 (string-append\n\
    \                                                                  (string-append\n\
    \                                                                   (string-append\n\
    \                                                                    (string-append\n\
    \                                                                     (string-append\n\
    \                                                                      (string-append\n\
    \                                                                       (string-append\n\
    \                                ", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (let ((c-code (char->integer c)))\n        (cond ((= c-code 122) (integer->char\
    \ 97))\n              ((= c-code 121) (integer->char 98))\n              (else\
    \ (integer->char (+ c-code 2))))))\n    (cond ((char-alphabetic? c) (rotate-char-helper\
    \ c))\n          (else c)))\n  (define (rotate-string s)\n    (string-map rotate-char\
    \ s))\n  (rotate-string s))\n", "  (let ([alphabet (string->list \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n    (string-join (map (lambda (x) (list-ref alphabet (+ x (* 2 2))))\n  \
    \                    (map char->integer (string->list s)))\n                \"\
    \")))\n", "  (define (rotate-char c)\n    (if (char=? c #\\a)\n        #\\c\n\
    \        (if (char=? c #\\b)\n            #\\d\n            (if (char=? c #\\\
    c)\n                #\\e\n                (if (char=? c #\\d)\n              \
    \      #\\f\n                    (if (char=? c #\\e)\n                       \
    \ #\\g\n                        (if (char=? c #\\f)\n                        \
    \    #\\h\n                            (if (char=? c #\\g)\n                 \
    \               #\\i\n                                (if (char=? c #\\h)\n  \
    \                                  #\\j\n                                    (if\
    \ (char=? c #\\i)\n                                        #\\k\n            \
    \                            (if (char=? c #\\j)\n                           \
    \                 #\\l\n                                            (if (char=?\
    \ c #\\k)\n                                                #\\m\n            \
    \                                    (if (char=? c #\\l)\n                   \
    \                                 #\\n\n                                     \
    \               (if (char=? c #\\m)\n                                        \
    \                #\\o\n                                                      \
    \  (if (char=? c #\\n)\n                                                     \
    \       #\\p\n                                                            (if\
    \ (char=? c #\\o)\n                                                          \
    \      #\\q\n                                                                (if\
    \ (char=? c #\\p)\n                                                          \
    \          #\\r\n                                                            \
    \        (if (char=? c #\\q)\n                                               \
    \                         #\\s\n                                             \
    \                           (if (char=? c #\\r)\n                            \
    \                                                #\\t\n                      \
    \                                                      (if (char=? c #\\s)\n \
    \                                                                            \
    \   #\\u\n                                                                   \
    \             (if (char=? c #\\t)\n                                          \
    \                                          #\\v\n                            \
    \                                                        (if (char=? c #\\u)\n\
    \                                                                            \
    \            #\\w\n                                                          \
    \                              (if (char=? c #\\v)\n                         \
    \                                                                   #\\x\n   \
    \                                                                            \
    \             (if (char=? c #\\w)\n                ", "  (define (rotate-char\
    \ c)\n    (let ([c (char-downcase c)])\n      (if (char=? c #\\z)\n          #\\\
    b\n          (if (char=? c #\\y)\n              #\\a\n              (char+ c 2)))))\n\
    \  (string-map rotate-char s))\n", "  (let ([s (string->list s)])\n    (string-join\
    \ (map (lambda (c)\n                        (let ([c (char-downcase c)])\n   \
    \                       (if (char-alphabetic? c)\n                           \
    \   (let ([c (+ c (* 2 2))])\n                                (if (> c 122)\n\
    \                                    (char (+ c (- 122 97)))\n               \
    \                     (char c)))\n                              c)))\n       \
    \               s))))\n", "  (define (encrypt-helper s i)\n    (if (= i (string-length\
    \ s))\n        \"\"\n        (string-append (string (char-downcase (string-ref\
    \ s i)))\n                       (encrypt-helper s (+ i 1)))))\n  (encrypt-helper\
    \ s 0))\n", "  (string-append (substring s 2) (substring s 0 2)))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (define (rotate-char-helper-helper\
    \ c)\n        (if (char=? c #\\z)\n            #\\b\n            (if (char=? c\
    \ #\\y)\n                #\\a\n                (if (char=? c #\\x)\n         \
    \           #\\@\n                    (char-upcase (char+ c 2)))))\n      (if\
    \ (char-alphabetic? c)\n          (rotate-char-helper-helper c)\n          c))\n\
    \    (if (char-lower-case? c)\n        (char-downcase (rotate-char-helper c))\n\
    \        (rotate-char-helper c)))\n  (define (rotate-string s)\n    (if (string-empty?\
    \ s)\n        \"\"\n        (string-append (string (rotate-char (string-ref s\
    \ 0)))\n                       (rotate-string (substring s 1)))))\n  (rotate-string\
    \ s))\n", "  (define (rotate-char c)\n    (let ((c (string-&gt;char c)))\n   \
    \   (if (&lt; c #\\a)\n          (char-&gt;string c)\n          (char-&gt;string\
    \ (+ c (* 2 2))))))\n  (string-join (map rotate-char (string-&gt;list s))))\n",
  "  (for/list ([c (in-string s)])\n    (let ([c (string-ref s c)])\n      (cond\n\
    \        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=?\
    \ c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\\
    g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=?\
    \ c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\\
    l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=?\
    \ c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\\
    q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=?\
    \ c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\\
    v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=?\
    \ c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\\
    a]\n        [(char=? c #\\z) #\\b]\n        [else c]))))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (define (shift c)\n    (define (shift-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                               #\\x\n                ", "  (let\
    \ ([s (string->list s)])\n    (map (lambda (c) (list->string (list (+ c 2))))\
    \ s)))\n", "  (define (rotate n)\n    (cond ((= n 0) '())\n          ((= n 1)\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))\n          ((= n 2)\
    \ '(c d e f g h i j k l m n o p q r s t u v w x y z a b))\n          ((= n 3)\
    \ '(e f g h i j k l m n o p q r s t u v w x y z a b c d))\n          ((= n 4)\
    \ '(g h i j k l m n o p q r s t u v w x y z a b c d e f))\n          ((= n 5)\
    \ '(i j k l m n o p q r s t u v w x y z a b c d e f g h))\n          ((= n 6)\
    \ '(k l m n o p q r s t u v w x y z a b c d e f g h i j))\n          ((= n 7)\
    \ '(m n o p q r s t u v w x y z a b c d e f g h i j k l))\n          ((= n 8)\
    \ '(o p q r s t u v w x y z a b c d e f g h i j k l m n))\n          ((= n 9)\
    \ '(q r s t u v w x y z a b c d e f g h i j k l m n o p))\n          ((= n 10)\
    \ '(s t u v w x y z a b c d e f g h i j k l m n o p q r))\n          ((= n 11)\
    \ '(u v w x y z a b c d e f g h i j k l m n o p q r s t))\n          ((= n 12)\
    \ '(w x y z a b c d e f g h i j k l m n o p q r s t u v))\n          ((= n 13)\
    \ '(y z a b c d e f g h i j k l m n o p q r s t u v w x))\n          ((= n 14)\
    \ '(a b c d e f g h i j k l m n o p q r s t u v w x y z))\n         ", "  (define\
    \ (rotate-char c)\n    (if (char=? c #\\z)\n        #\\b\n        (if (char=?\
    \ c #\\y)\n            #\\a\n            (integer->char (+ 2 (char->integer c))))))\n\
    \  (define (rotate-string s)\n    (if (empty? s)\n        empty\n        (cons\
    \ (rotate-char (first s)) (rotate-string (rest s)))))\n  (list->string (rotate-string\
    \ (string->list s))))\n", "  (define (encrypt-helper s)\n    (if (empty? s)\n\
    \        empty\n        (cons (encrypt-char (first s))\n              (encrypt-helper\
    \ (rest s)))))\n  (encrypt-helper s))\n", "  (let ([l (string->list s)])\n   \
    \ (for/list ([c l])\n      (let ([i (string-ci-index c \"abcdefghijklmnopqrstuvwxyz\"\
    )])\n        (if (not i)\n            c\n            (string-ref \"cdefghijklmnopqrstuvwxyzab\"\
    \ (+ i 2)))))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (define (shift c)\n    (let ([n (string-&gt;number\
    \ (string c) 16)])\n      (number-&gt;string (+ n (* 2 2)) 16)))\n  (string-join\
    \ (map shift (string-&gt;list s))))\n", "  (define (rotate-char c)\n    (let ([c\
    \ (string-&gt;char c)])\n      (char-&gt;string (+ c (* 2 2)))))\n  (string-join\
    \ (map rotate-char (string-&gt;list s)) \"\"))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join\n     (map\n      (lambda\
    \ (c)\n        (list-ref alphabet\n                  (modulo (+ (string-ci-index\
    \ c alphabet) (* 2 2))\n                         (length alphabet))))\n      (string->list\
    \ s)))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n\
    \      (cond\n        [(char=? c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n\
    \        [(char=? c #\\c) #\\e]\n        [(char=? c #\\d) #\\f]\n        [(char=?\
    \ c #\\e) #\\g]\n        [(char=? c #\\f) #\\h]\n        [(char=? c #\\g) #\\\
    i]\n        [(char=? c #\\h) #\\j]\n        [(char=? c #\\i) #\\k]\n        [(char=?\
    \ c #\\j) #\\l]\n        [(char=? c #\\k) #\\m]\n        [(char=? c #\\l) #\\\
    n]\n        [(char=? c #\\m) #\\o]\n        [(char=? c #\\n) #\\p]\n        [(char=?\
    \ c #\\o) #\\q]\n        [(char=? c #\\p) #\\r]\n        [(char=? c #\\q) #\\\
    s]\n        [(char=? c #\\r) #\\t]\n        [(char=? c #\\s) #\\u]\n        [(char=?\
    \ c #\\t) #\\v]\n        [(char=? c #\\u) #\\w]\n        [(char=? c #\\v) #\\\
    x]\n        [(char=? c #\\w) #\\y]\n        [(char=? c #\\x) #\\z]\n        [(char=?\
    \ c #\\y) #\\a]\n        [(char=? c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper\
    \ c))\n  (define (rotate-string s)\n    (if (string-empty? s)\n        \"\"\n\
    \        (string-append (string (rotate-char (string-ref s 0)))\n            \
    \           (rotate-string (substring s 1)))))\n  (rotate-string s))\n", "  (define\
    \ (rotate-char c)\n    (if (char=? c #\\a) #\\c\n        (if (char=? c #\\b) #\\\
    d\n            (if (char=? c #\\c) #\\e\n                (if (char=? c #\\d) #\\\
    f\n                    (if (char=? c #\\e) #\\g\n                        (if (char=?\
    \ c #\\f) #\\h\n                            (if (char=? c #\\g) #\\i\n       \
    \                         (if (char=? c #\\h) #\\j\n                         \
    \           (if (char=? c #\\i) #\\k\n                                       \
    \ (if (char=? c #\\j) #\\l\n                                            (if (char=?\
    \ c #\\k) #\\m\n                                                (if (char=? c\
    \ #\\l) #\\n\n                                                    (if (char=?\
    \ c #\\m) #\\o\n                                                        (if (char=?\
    \ c #\\n) #\\p\n                                                            (if\
    \ (char=? c #\\o) #\\q\n                                                     \
    \           (if (char=? c #\\p) #\\r\n                                       \
    \                             (if (char=? c #\\q) #\\s\n                     \
    \                                                   (if (char=? c #\\r) #\\t\n\
    \                                                                            (if\
    \ (char=? c #\\s) #\\u\n                                                     \
    \                           (if (char=? c #\\t) #\\v\n                       \
    \                                                             (if (char=? c #\\\
    u) #\\w\n                                                                    \
    \                    (if (char=? c #\\v) #\\x\n                              \
    \                                                              (if (char=? c #\\\
    w) #\\y\n                                                                    \
    \                            (if (char=? c #\\x) #\\z\n                      \
    \                                                                            \
    \  (if (char=? c #\\y) #\\a\n                                                \
    \                                                        (if (char=? c #\\z) #\\\
    b\n                                                                          \
    \                                  c))))))))))))))))))))))))))))))\n  (define\
    \ (rotate-", "  (define (encrypt-helper s)\n    (cond [(empty? s) empty]\n   \
    \       [else (cons (rotate-letter (first s))\n                      (encrypt-helper\
    \ (rest s)))]))\n  (list->string (encrypt-helper (string->list s))))\n", "  (for/list\
    \ ([c (in-string s)])\n    (integer->char (+ (char->integer c) (* 2 2)))))\n",
  "  (define (rotate-char c)\n    (if (char=? c #\\a)\n        #\\c\n        (if (char=?\
    \ c #\\b)\n            #\\d\n            (if (char=? c #\\c)\n               \
    \ #\\e\n                (if (char=? c #\\d)\n                    #\\f\n      \
    \              (if (char=? c #\\e)\n                        #\\g\n           \
    \             (if (char=? c #\\f)\n                            #\\h\n        \
    \                    (if (char=? c #\\g)\n                                #\\\
    i\n                                (if (char=? c #\\h)\n                     \
    \               #\\j\n                                    (if (char=? c #\\i)\n\
    \                                        #\\k\n                              \
    \          (if (char=? c #\\j)\n                                            #\\\
    l\n                                            (if (char=? c #\\k)\n         \
    \                                       #\\m\n                               \
    \                 (if (char=? c #\\l)\n                                      \
    \              #\\n\n                                                    (if (char=?\
    \ c #\\m)\n                                                        #\\o\n    \
    \                                                    (if (char=? c #\\n)\n   \
    \                                                         #\\p\n             \
    \                                               (if (char=? c #\\o)\n        \
    \                                                        #\\q\n              \
    \                                                  (if (char=? c #\\p)\n     \
    \                                                               #\\r\n       \
    \                                                             (if (char=? c #\\\
    q)\n                                                                        #\\\
    s\n                                                                        (if\
    \ (char=? c #\\r)\n                                                          \
    \                  #\\t\n                                                    \
    \                        (if (char=? c #\\s)\n                               \
    \                                                 #\\u\n                     \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \           #\\v\n                                                           \
    \                         (if (char=? c #\\u)\n                              \
    \                                                          #\\w\n            \
    \                                                                            (if\
    \ (char=? c #\\v)\n                                                          \
    \                                  #\\x\n                                    \
    \                                                        (if (char=? c #\\w)\n\
    \                ", "  (let ([l (string->list s)])\n    (list->string (map (lambda\
    \ (c)\n                         (let ([n (char->integer c)])\n               \
    \            (integer->char (+ n (* 2 2)))))\n                       l))))\n",
  "  (define (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=?\
    \ c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n\
    \              (if (char=? c #\\c)\n                  #\\e\n                 \
    \ (if (char=? c #\\d)\n                      #\\f\n                      (if (char=?\
    \ c #\\e)\n                          #\\g\n                          (if (char=?\
    \ c #\\f)\n                              #\\h\n                              (if\
    \ (char=? c #\\g)\n                                  #\\i\n                  \
    \                (if (char=? c #\\h)\n                                      #\\\
    j\n                                      (if (char=? c #\\i)\n               \
    \                           #\\k\n                                          (if\
    \ (char=? c #\\j)\n                                              #\\l\n      \
    \                                        (if (char=? c #\\k)\n               \
    \                                   #\\m\n                                   \
    \               (if (char=? c #\\l)\n                                        \
    \              #\\n\n                                                      (if\
    \ (char=? c #\\m)\n                                                          #\\\
    o\n                                                          (if (char=? c #\\\
    n)\n                                                              #\\p\n     \
    \                                                         (if (char=? c #\\o)\n\
    \                                                                  #\\q\n    \
    \                                                              (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (let ([c (string-&gt;char c)])\n      (if (char&lt;=? #\\a c #\\z)\n\
    \          (let ([c (+ c (* 2 2))])\n            (if (char&gt;? c #\\z)\n    \
    \            (char-&gt;string (- c 26))\n                (char-&gt;string c)))\n\
    \          (char-&gt;string c))))\n  (apply string-append (map rotate-char (string-&gt;list\
    \ s))))\n</code>\n", "  (let ([l (string->list s)])\n    (map (lambda (c) (integer->char\
    \ (+ c 2))) l)))\n", "  (define (rotate-char c)\n    (let ([c (string-&gt;char\
    \ c)])\n      (if (char&lt;=? #\\a c #\\z)\n          (let ([c (+ c 2)])\n   \
    \         (if (char&lt;=? #\\z c)\n                (char-&gt;string (+ c (- #\\\
    a #\\z)))\n                (char-&gt;string c)))\n          c)))\n  (string-join\
    \ (map rotate-char (string-&gt;list s)) \"\"))\n</code>\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=? c #\\\
    a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\e]\n   \
    \     [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      [(empty? s) empty]\n      [else (cons (rotate-char (first\
    \ s)) (encrypt-helper (rest s)))]))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (string-append (substring s 2) (substring s 0 2)))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\\
    a)\n          #\\c\n          (if (char=? c #\\b)\n              #\\d\n      \
    \        (if (char=? c #\\c)\n                  #\\e\n                  (if (char=?\
    \ c #\\d)\n                      #\\f\n                      (if (char=? c #\\\
    e)\n                          #\\g\n                          (if (char=? c #\\\
    f)\n                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (for/list ([c\
    \ (in-string s)])\n    (integer->char (+ (char->integer c) 2))))\n", "  (define\
    \ (rotate-char c)\n    (define (rotate-char-helper c)\n      (cond\n        [(char=?\
    \ c #\\a) #\\c]\n        [(char=? c #\\b) #\\d]\n        [(char=? c #\\c) #\\\
    e]\n        [(char=? c #\\d) #\\f]\n        [(char=? c #\\e) #\\g]\n        [(char=?\
    \ c #\\f) #\\h]\n        [(char=? c #\\g) #\\i]\n        [(char=? c #\\h) #\\\
    j]\n        [(char=? c #\\i) #\\k]\n        [(char=? c #\\j) #\\l]\n        [(char=?\
    \ c #\\k) #\\m]\n        [(char=? c #\\l) #\\n]\n        [(char=? c #\\m) #\\\
    o]\n        [(char=? c #\\n) #\\p]\n        [(char=? c #\\o) #\\q]\n        [(char=?\
    \ c #\\p) #\\r]\n        [(char=? c #\\q) #\\s]\n        [(char=? c #\\r) #\\\
    t]\n        [(char=? c #\\s) #\\u]\n        [(char=? c #\\t) #\\v]\n        [(char=?\
    \ c #\\u) #\\w]\n        [(char=? c #\\v) #\\x]\n        [(char=? c #\\w) #\\\
    y]\n        [(char=? c #\\x) #\\z]\n        [(char=? c #\\y) #\\a]\n        [(char=?\
    \ c #\\z) #\\b]\n        [else c]))\n    (rotate-char-helper c))\n  (define (rotate-string\
    \ s)\n    (if (string-empty? s)\n        \"\"\n        (string-append (string\
    \ (rotate-char (string-ref s 0)))\n                       (rotate-string (substring\
    \ s 1)))))\n  (rotate-string s))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 ", "  (let ([l (string->list s)])\n    (map\
    \ (lambda (c)\n           (let ([n (char->integer c)])\n             (integer->char\
    \ (+ n (* 2 2)))))\n         l)))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (if (or (= c #\\a) (= c #\\b))\n          (+ c\
    \ 24)\n          (- c 2)))\n    (integer->char (rotate-char-helper (char->integer\
    \ c))))\n  (map rotate-char (string->list s)))\n", "  (define (rotate n)\n   \
    \ (cond\n      [(= n 0) '()]\n      [else (cons (modulo (+ n 2) 26) (rotate (-\
    \ n 1)))]))\n  (define (rotate-string s)\n    (cond\n      [(empty? s) '()]\n\
    \      [else (cons (rotate (char->integer (car s))) (rotate-string (cdr s)))]))\n\
    \  (integer->char (rotate (char->integer (car s)))))\n", "  (let ([alphabet (string->list\
    \ \"abcdefghijklmnopqrstuvwxyz\")])\n    (string-join (map (lambda (c)\n     \
    \                   (list-ref alphabet (+ (list-index c alphabet) (* 2 2))))\n\
    \                      (string->list s)))))\n", "  (define (encrypt-helper s)\n\
    \    (if (empty? s)\n        empty\n        (cons (encrypt-char (first s)) (encrypt-helper\
    \ (rest s)))))\n  (list->string (encrypt-helper (string->list s))))\n", "  (define\
    \ (rotate-char c)\n    (let ([c (char-downcase c)])\n      (if (char-alphabetic?\
    \ c)\n          (let ([c (+ c (* 2 2))])\n            (if (> c #\\z)\n       \
    \         (char-downcase (- c 26))\n              (char-downcase c)))\n      \
    \  c)))\n  (string-map rotate-char s))\n", "  (define (rotate-char c)\n    (define\
    \ (rotate-char-helper c)\n      (cond\n        ((char=? c #\\a) #\\c)\n      \
    \  ((char=? c #\\b) #\\d)\n        ((char=? c #\\c) #\\e)\n        ((char=? c\
    \ #\\d) #\\f)\n        ((char=? c #\\e) #\\g)\n        ((char=? c #\\f) #\\h)\n\
    \        ((char=? c #\\g) #\\i)\n        ((char=? c #\\h) #\\j)\n        ((char=?\
    \ c #\\i) #\\k)\n        ((char=? c #\\j) #\\l)\n        ((char=? c #\\k) #\\\
    m)\n        ((char=? c #\\l) #\\n)\n        ((char=? c #\\m) #\\o)\n        ((char=?\
    \ c #\\n) #\\p)\n        ((char=? c #\\o) #\\q)\n        ((char=? c #\\p) #\\\
    r)\n        ((char=? c #\\q) #\\s)\n        ((char=? c #\\r) #\\t)\n        ((char=?\
    \ c #\\s) #\\u)\n        ((char=? c #\\t) #\\v)\n        ((char=? c #\\u) #\\\
    w)\n        ((char=? c #\\v) #\\x)\n        ((char=? c #\\w) #\\y)\n        ((char=?\
    \ c #\\x) #\\z)\n        ((char=? c #\\y) #\\a)\n        ((char=? c #\\z) #\\\
    b)\n        (else c)))\n    (rotate-char-helper c))\n  (define (encrypt-helper\
    \ s)\n    (cond\n      ((null? s) '())\n      (else (cons (rotate-char (car s))\
    \ (encrypt-helper (cdr s))))))\n  (list->string (encrypt-helper (string->list\
    \ s))))\n", "  (define (rotate-char c)\n    (if (char=? c #\\z)\n        #\\b\n\
    \        (if (char=? c #\\y)\n            #\\a\n            (integer->char (+\
    \ (char->integer c) 2)))))\n  (string-map rotate-char s))\n", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (if (char=? c #\\a)\n        \
    \  #\\c\n          (if (char=? c #\\b)\n              #\\d\n              (if\
    \ (char=? c #\\c)\n                  #\\e\n                  (if (char=? c #\\\
    d)\n                      #\\f\n                      (if (char=? c #\\e)\n  \
    \                        #\\g\n                          (if (char=? c #\\f)\n\
    \                              #\\h\n                              (if (char=?\
    \ c #\\g)\n                                  #\\i\n                          \
    \        (if (char=? c #\\h)\n                                      #\\j\n   \
    \                                   (if (char=? c #\\i)\n                    \
    \                      #\\k\n                                          (if (char=?\
    \ c #\\j)\n                                              #\\l\n              \
    \                                (if (char=? c #\\k)\n                       \
    \                           #\\m\n                                           \
    \       (if (char=? c #\\l)\n                                                \
    \      #\\n\n                                                      (if (char=?\
    \ c #\\m)\n                                                          #\\o\n  \
    \                                                        (if (char=? c #\\n)\n\
    \                                                              #\\p\n        \
    \                                                      (if (char=? c #\\o)\n \
    \                                                                 #\\q\n     \
    \                                                             (if (char=? c #\\\
    p)\n                                                                      #\\\
    r\n                                                                      (if (char=?\
    \ c #\\q)\n                                                                  \
    \        #\\s\n                                                              \
    \            (if (char=? c #\\r)\n                                           \
    \                                   #\\t\n                                   \
    \                                           (if (char=? c #\\s)\n            \
    \                                                                      #\\u\n\
    \                                                                            \
    \      (if (char=? c #\\t)\n                                                 \
    \                                     #\\v\n                                 \
    \                                                     (if (char=? c #\\u)\n  \
    \                                                                            \
    \            #\\w\n                                                          \
    \                                (if (char=? c #\\v)\n                       \
    \                                                         ", "  (define (rotate-char\
    \ c)\n    (define (rotate-char-helper c)\n      (cond ((char=? c #\\a) #\\c)\n\
    \            ((char=? c #\\b) #\\d)\n            ((char=? c #\\c) #\\e)\n    \
    \        ((char=? c #\\d) #\\f)\n            ((char=? c #\\e) #\\g)\n        \
    \    ((char=? c #\\f) #\\h)\n            ((char=? c #\\g) #\\i)\n            ((char=?\
    \ c #\\h) #\\j)\n            ((char=? c #\\i) #\\k)\n            ((char=? c #\\\
    j) #\\l)\n            ((char=? c #\\k) #\\m)\n            ((char=? c #\\l) #\\\
    n)\n            ((char=? c #\\m) #\\o)\n            ((char=? c #\\n) #\\p)\n \
    \           ((char=? c #\\o) #\\q)\n            ((char=? c #\\p) #\\r)\n     \
    \       ((char=? c #\\q) #\\s)\n            ((char=? c #\\r) #\\t)\n         \
    \   ((char=? c #\\s) #\\u)\n            ((char=? c #\\t) #\\v)\n            ((char=?\
    \ c #\\u) #\\w)\n            ((char=? c #\\v) #\\x)\n            ((char=? c #\\\
    w) #\\y)\n            ((char=? c #\\x) #\\z)\n            ((char=? c #\\y) #\\\
    a)\n            ((char=? c #\\z) #\\b)))\n    (rotate-char-helper c))\n  (define\
    \ (rotate-string s)\n    (cond ((string=? s \"\") \"\")\n          (else (string-append\
    \ (string (rotate-char (string-ref s 0)))\n                               (rotate-string\
    \ (substring s 1))))))\n  (rotate-string s))\n", "  (define (shift c)\n    (define\
    \ (rotate c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=?\
    \ c #\\b)\n              #\\d\n              (if (char=? c #\\c)\n           \
    \       #\\e\n                  (if (char=? c #\\d)\n                      #\\\
    f\n                      (if (char=? c #\\e)\n                          #\\g\n\
    \                          (if (char=? c #\\f)\n                             \
    \ #\\h\n                              (if (char=? c #\\g)\n                  \
    \                #\\i\n                                  (if (char=? c #\\h)\n\
    \                                      #\\j\n                                \
    \      (if (char=? c #\\i)\n                                          #\\k\n \
    \                                         (if (char=? c #\\j)\n              \
    \                                #\\l\n                                      \
    \        (if (char=? c #\\k)\n                                               \
    \   #\\m\n                                                  (if (char=? c #\\\
    l)\n                                                      #\\n\n             \
    \                                         (if (char=? c #\\m)\n              \
    \                                            #\\o\n                          \
    \                                (if (char=? c #\\n)\n                       \
    \                                       #\\p\n                               \
    \                               (if (char=? c #\\o)\n                        \
    \                                          #\\q\n                            \
    \                                      (if (char=? c #\\p)\n                 \
    \                                                     #\\r\n                 \
    \                                                     (if (char=? c #\\q)\n  \
    \                                                                        #\\s\n\
    \                                                                          (if\
    \ (char=? c #\\r)\n                                                          \
    \                    #\\t\n                                                  \
    \                            (if (char=? c #\\s)\n                           \
    \                                                       #\\u\n               \
    \                                                                   (if (char=?\
    \ c #\\t)\n                                                                  \
    \                    #\\v\n                                                  \
    \                                    (if (char=? c #\\u)\n                   \
    \                                                                       #\\w\n\
    \                                                                            \
    \              (if (char=? c #\\v)\n                                         \
    \                                                     #\\x\n                 \
    \                               ", "  (define (rotate n)\n    (cond\n      [(=\
    \ n 0) '()]\n      [else (cons (modulo (+ n 2) 26) (rotate (- n 1)))]))\n  (define\
    \ (rotate-string s)\n    (cond\n      [(empty? s) '()]\n      [else (cons (rotate\
    \ (char->integer (car s))) (rotate-string (cdr s)))]))\n  (integer->char (rotate\
    \ (char->integer s))))\n", "  (define (rotate-char c)\n    (define (rotate-char-helper\
    \ c)\n      (if (char=? c #\\a)\n          #\\c\n          (if (char=? c #\\b)\n\
    \              #\\d\n              (if (char=? c #\\c)\n                  #\\\
    e\n                  (if (char=? c #\\d)\n                      #\\f\n       \
    \               (if (char=? c #\\e)\n                          #\\g\n        \
    \                  (if (char=? c #\\f)\n                              #\\h\n \
    \                             (if (char=? c #\\g)\n                          \
    \        #\\i\n                                  (if (char=? c #\\h)\n       \
    \                               #\\j\n                                      (if\
    \ (char=? c #\\i)\n                                          #\\k\n          \
    \                                (if (char=? c #\\j)\n                       \
    \                       #\\l\n                                              (if\
    \ (char=? c #\\k)\n                                                  #\\m\n  \
    \                                                (if (char=? c #\\l)\n       \
    \                                               #\\n\n                       \
    \                               (if (char=? c #\\m)\n                        \
    \                                  #\\o\n                                    \
    \                      (if (char=? c #\\n)\n                                 \
    \                             #\\p\n                                         \
    \                     (if (char=? c #\\o)\n                                  \
    \                                #\\q\n                                      \
    \                            (if (char=? c #\\p)\n                           \
    \                                           #\\r\n                           \
    \                                           (if (char=? c #\\q)\n            \
    \                                                              #\\s\n        \
    \                                                                  (if (char=?\
    \ c #\\r)\n                                                                  \
    \            #\\t\n                                                          \
    \                    (if (char=? c #\\s)\n                                   \
    \                                               #\\u\n                       \
    \                                                           (if (char=? c #\\\
    t)\n                                                                         \
    \             #\\v\n                                                         \
    \                             (if (char=? c #\\u)\n                          \
    \                                                                #\\w\n      \
    \                                                                            \
    \        (if (char=? c #\\v)\n                                               \
    \                                 "]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
