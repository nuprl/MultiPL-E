name: HumanEval_65_circular_shift
language: racket
prompt: "#lang racket\n\n;; Circular shift the digits of the integer x, shift the\
  \ digits right by shift\n;; and return the result as a string.\n;; If shift > number\
  \ of digits, return digits reversed.\n;; >>> circular_shift(12, 1)\n;; \"21\"\n\
  ;; >>> circular_shift(12, 2)\n;; \"12\"\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular_shift_helper x shift result)\n    (cond\n      [(= shift 0)\
    \ result]\n      [(= shift (string-length result)) (string-reverse result)]\n\
    \      [else (circular_shift_helper x (- shift 1) (string-append (substring result\
    \ 1) (substring result 0 1)))]))\n  (circular_shift_helper x shift (number->string\
    \ x)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero? x)\n\
    \        result\n        (circular_shift_helper (quotient x 10)\n            \
    \                   (modulo shift 10)\n                               (string-append\
    \ (number->string (modulo x 10))\n                                           \
    \   result))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (circular_shift-helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (let ([digit (modulo\
    \ x 10)])\n          (circular_shift-helper (quotient x 10)\n                \
    \                 (if (zero? shift)\n                                     (add1\
    \ shift)\n                                     (sub1 shift))\n               \
    \                  (if (zero? shift)\n                                     (string-append\
    \ (number->string digit) result)\n                                     (string-append\
    \ result (number->string digit)))))))\n  (circular_shift-helper x shift \"\"))\n",
  "  (define (reverse-digits n)\n    (define (reverse-digits-iter n acc)\n      (if\
    \ (zero? n)\n          acc\n          (reverse-digits-iter (quotient n 10) (+\
    \ (* acc 10) (remainder n 10)))))\n    (reverse-digits-iter n 0))\n  (define (shift-digits\
    \ n shift)\n    (define (shift-digits-iter n shift acc)\n      (if (zero? n)\n\
    \          acc\n          (shift-digits-iter (quotient n 10) (remainder (+ shift\
    \ 1) 10) (+ (* acc 10) (remainder n 10)))))\n    (shift-digits-iter n shift 0))\n\
    \  (define (num-digits n)\n    (define (num-digits-iter n acc)\n      (if (zero?\
    \ n)\n          acc\n          (num-digits-iter (quotient n 10) (+ acc 1))))\n\
    \    (num-digits-iter n 0))\n  (if (> shift (num-digits x))\n      (number->string\
    \ (reverse-digits x))\n      (number->string (shift-digits x shift))))\n", " \
    \ (define (shift-right x shift)\n    (define (shift-right-helper x shift)\n  \
    \    (if (= shift 0)\n          x\n          (shift-right-helper (quotient x 10)\
    \ (- shift 1))))\n    (define (shift-left x shift)\n      (define (shift-left-helper\
    \ x shift)\n        (if (= shift 0)\n            x\n            (shift-left-helper\
    \ (* x 10) (- shift 1))))\n      (if (= shift 0)\n          x\n          (shift-left-helper\
    \ (modulo x 10) (- shift 1))))\n    (if (= shift 0)\n        x\n        (if (>\
    \ shift (number-of-digits x))\n            (shift-left x (- shift (number-of-digits\
    \ x)))\n            (shift-right-helper x shift))))\n  (number->string (shift-right\
    \ x shift)))\n", "  (define (helper x shift acc)\n    (if (zero? x)\n        (number->string\
    \ acc)\n        (helper (quotient x 10)\n                (if (> shift 0)\n   \
    \                 (sub1 shift)\n                    shift)\n                (if\
    \ (> shift 0)\n                    (modulo (+ (* 10 acc) (remainder x 10))\n \
    \                           (expt 10 shift))\n                    (modulo (+ (*\
    \ 10 (remainder x 10)) acc)\n                            (expt 10 shift))))))\n\
    \  (helper x shift 0))\n", "  (define (shift-digits x shift)\n    (if (= x 0)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (= shift 0)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (circular_shift_helper x shift acc)\n    (if (zero?\
    \ x)\n        (number->string acc)\n        (circular_shift_helper (quotient x\
    \ 10)\n                               shift\n                               (+\
    \ (* acc 10) (remainder x 10)))))\n  (if (> shift (number-of-digits x))\n    \
    \  (number->string (reverse-digits x))\n      (circular_shift_helper x shift 0)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits (quotient x 10) (- shift 1))]))\n\
    \  (define (shift-string x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-string (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n\
    \  (define (reverse-string x)\n    (cond\n      [(zero? (string-length x)) \"\"\
    ]\n      [else (string-append (reverse-string (substring x 1)) (substring x 0\
    \ 1))]))\n  (define (num-digits x)\n    (cond\n      [(zero? x) 0]\n      [else\
    \ (+ 1 (num-digits (quotient x 10)))]))\n  (cond\n    [(> shift (num-digits x))\
    \ (reverse-string (number->string x))]\n    [else (shift-string (number->string\
    \ (shift-digits x shift)) shift)]))\n", "  (define (shift-digits x shift)\n  \
    \  (cond\n      [(zero? shift) x]\n      [else (shift-digits (modulo (quotient\
    \ x 10) (expt 10 shift)) (- shift 1))]))\n  (define (reverse-digits x)\n    (cond\n\
    \      [(zero? x) 0]\n      [else (+ (* (reverse-digits (quotient x 10)) 10) (modulo\
    \ x 10))]))\n  (define (digits x)\n    (cond\n      [(zero? x) 0]\n      [else\
    \ (+ 1 (digits (quotient x 10)))]))\n  (define (to-string x)\n    (cond\n    \
    \  [(zero? x) \"\"]\n      [else (string-append (to-string (quotient x 10)) (number->string\
    \ (modulo x 10)))]))\n  (to-string (if (> shift (digits x)) (reverse-digits x)\
    \ (shift-digits x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits (modulo x 10) (- shift 1))))\n  (define\
    \ (shift-string x shift)\n    (if (zero? shift)\n        x\n        (shift-string\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (define\
    \ (shift-string-reverse x shift)\n    (if (zero? shift)\n        x\n        (shift-string-reverse\
    \ (string-append (substring x -1) (substring x 0 -1)) (- shift 1))))\n  (define\
    \ (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient\
    \ x 10)))))\n  (define (reverse-string x)\n    (if (zero? (string-length x))\n\
    \        \"\"\n        (string-append (substring x -1) (reverse-string (substring\
    \ x 0 -1)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        0\n  \
    \      (+ (* (modulo x 10) (expt 10 (- (num-digits x) 1))) (reverse-digits (quotient\
    \ x 10)))))\n  (define (reverse-digits-string x)\n    (number->string (reverse-digits\
    \ x)))\n  (if (> shift (num-digits x))\n      (reverse-digits-string x)\n    \
    \  (shift-string-reverse (number->string (shift-digits x shift)) shift)))\n",
  "  (define (helper x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (if (< shift (string-length\
    \ (number->string x)))\n      (helper (number->string x) shift)\n      (string-reverse\
    \ (number->string x))))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n    \
    \    x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (define (reverse-helper x)\n    (if (zero? (string-length\
    \ x))\n        \"\"\n        (string-append (reverse-helper (substring x 1)) (substring\
    \ x 0 1))))\n  (if (> shift (string-length (number->string x)))\n      (reverse-helper\
    \ (number->string x))\n      (shift-helper (number->string x) shift)))\n", " \
    \ (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (modulo x 10) (sub1 shift))))\n  (define (reverse-digits x)\n    (if (zero?\
    \ x)\n        0\n        (+ (* (reverse-digits (quotient x 10)) 10) (modulo x\
    \ 10))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n        (add1\
    \ (num-digits (quotient x 10)))))\n  (define (shift-right x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-right (quotient x 10) (sub1 shift))))\n  (define\
    \ (shift-left x shift)\n    (if (zero? shift)\n        x\n        (shift-left\
    \ (* x 10) (sub1 shift))))\n  (define (shift-digits-right x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits-right (shift-right x 1) (sub1 shift))))\n\
    \  (define (shift-digits-left x shift)\n    (if (zero? shift)\n        x\n   \
    \     (shift-digits-left (shift-left x 1) (sub1 shift))))\n  (define (shift-digits-left-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-left-right\
    \ (shift-left-right x 1) (sub1 shift))))\n  (define (shift-left-right x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-left-right (quotient x 10) (sub1\
    \ shift))))\n  (define (shift-right-left x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-right-left (* x 10) (sub1 shift))))\n  (define (shift-digits-right-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right-left\
    \ (shift-right-left x 1) (sub1 shift))))\n  (define (shift-digits-left-right x\
    \ shift)", "  (define (circular_shift_helper x shift)\n    (if (= shift 0)\n \
    \       x\n        (circular_shift_helper (modulo (+ (* x 10) (quotient x 10))\
    \ 100) (- shift 1))))\n  (number->string (circular_shift_helper x shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular_shift_helper x shift\
    \ result)\n    (if (zero? shift)\n        result\n        (let* ([x-str (number->string\
    \ x)]\n               [x-str-len (string-length x-str)]\n               [shift-mod\
    \ (modulo shift x-str-len)])\n          (if (zero? shift-mod)\n              (string-reverse\
    \ x-str)\n              (circular_shift_helper x (- shift 1) (string-append (substring\
    \ x-str shift-mod) (substring x-str 0 shift-mod)))))))\n  (circular_shift_helper\
    \ x shift \"\"))\n", "  (define (helper x shift)\n    (if (zero? shift)\n    \
    \    x\n        (helper (string-append (substring x 1) (substring x 0 1)) (- shift\
    \ 1))))\n  (if (< shift (string-length (number->string x)))\n      (helper (number->string\
    \ x) shift)\n      (string-reverse (number->string x))))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? shift)\n        result\n        (circular_shift_helper\
    \ (quotient x 10) (- shift 1) (string-append (number->string (remainder x 10))\
    \ result))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (if (zero? shift)\n        \
    \                           (length (number->string x))\n                    \
    \               (- shift 1))\n                               (string-append (number->string\
    \ (remainder x 10))\n                                              result))))\n\
    \  (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n    (if\
    \ (null? digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (cond\
    \ ((= x 0) '())\n          (else (cons (modulo x 10) (shift-digits (quotient x\
    \ 10) shift)))))\n  (define (shift-digits-right digits shift)\n    (cond ((= shift\
    \ 0) digits)\n          (else (shift-digits-right (append (cdr digits) (list (car\
    \ digits))) (- shift 1)))))\n  (define (reverse-digits digits)\n    (cond ((null?\
    \ digits) '())\n          (else (append (reverse-digits (cdr digits)) (list (car\
    \ digits))))))\n  (define (digits-to-string digits)\n    (cond ((null? digits)\
    \ \"\")\n          (else (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits))))))\n  (define (digits-to-number digits)\n    (cond ((null? digits)\
    \ 0)\n          (else (+ (* (car digits) (expt 10 (length digits))) (digits-to-number\
    \ (cdr digits))))))\n  (digits-to-string (if (> shift (length (shift-digits x\
    \ shift)))\n                        (reverse-digits (shift-digits x shift))\n\
    \                        (shift-digits-right (shift-digits x shift) shift))))\n",
  "  (define (shift-right x shift)\n    (cond ((= shift 0) x)\n          ((= shift\
    \ 1) (modulo x 10))\n          (else (shift-right (modulo x 10) (- shift 1)))))\n\
    \  (define (shift-left x shift)\n    (cond ((= shift 0) x)\n          ((= shift\
    \ 1) (* x 10))\n          (else (shift-left (* x 10) (- shift 1)))))\n  (define\
    \ (shift-digits x shift)\n    (cond ((= shift 0) x)\n          ((< shift 0) (shift-right\
    \ x (- shift)))\n          (else (shift-left x shift))))\n  (number->string (shift-digits\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (define (shift-digit x\
    \ shift)\n      (cond\n        [(= shift 0) x]\n        [(= x 0) x]\n        [else\
    \ (modulo (+ (* 10 (modulo x 10)) shift) 10)]))\n    (if (= x 0)\n        0\n\
    \        (+ (* 10 (shift-digit x shift))\n           (shift-digits (quotient x\
    \ 10) shift))))\n  (define (num-digits x)\n    (if (= x 0)\n        0\n      \
    \  (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (define\
    \ (reverse-digit x)\n      (if (= x 0)\n          0\n          (+ (* 10 (modulo\
    \ x 10))\n             (reverse-digit (quotient x 10)))))\n  (reverse-digit x))\n\
    \  (if (> shift (num-digits x))\n      (number->string (reverse-digits x))\n \
    \     (number->string (shift-digits x shift))))\n", "  (define (shift-digits x\
    \ shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n\
    \  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (if (= x 0)\n   \
    \     0\n        (+ (* (remainder x 10) (expt 10 (- (number->string x) 1)))\n\
    \           (reverse-digits (quotient x 10)))))\n  (define (number->string x)\n\
    \    (if (= x 0)\n        0\n        (+ 1 (number->string (quotient x 10)))))\n\
    \  (define (digits->string x)\n    (if (= x 0)\n        \"\"\n        (string-append\
    \ (number->string (remainder x 10))\n                       (digits->string (quotient\
    \ x 10)))))\n  (digits->string\n   (if (> shift (number->string x))\n       (reverse-digits\
    \ x)\n       (+ (shift-left (shift-right x shift) shift)\n          (shift-right\
    \ x shift)))))\n", "  (define (reverse-string str)\n    (define (reverse-string-iter\
    \ str result)\n      (if (string-empty? str)\n          result\n          (reverse-string-iter\
    \ (substring str 1)\n                               (string-append (substring\
    \ str 0 1) result))))\n    (reverse-string-iter str \"\"))\n  (define (circular-shift-iter\
    \ x shift result)\n    (if (zero? shift)\n        result\n        (circular-shift-iter\
    \ (quotient x 10)\n                             (- shift 1)\n                \
    \             (string-append (number->string (remainder x 10))\n             \
    \                               result))))\n  (if (> shift (string-length (number->string\
    \ x)))\n      (reverse-string (number->string x))\n      (circular-shift-iter\
    \ x shift \"\")))\n", "  (define (circular_shift-helper x shift result)\n    (if\
    \ (zero? shift)\n        result\n        (let ([d (remainder x 10)])\n       \
    \   (circular_shift-helper (quotient x 10) (- shift 1) (string-append (number->string\
    \ d) result)))))\n  (circular_shift-helper x shift \"\"))\n", "  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits (quotient\
    \ x 10) (- shift 1))]))\n  (define (reverse-digits x)\n    (cond\n      [(zero?\
    \ x) 0]\n      [else (+ (* (remainder x 10) (expt 10 (- (number->string x) 1)))\n\
    \               (reverse-digits (quotient x 10)))]))\n  (define (shift-digits-right\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-left x shift)\n   \
    \ (cond\n      [(zero? shift) x]\n      [else (shift-digits-left (* x 10) (- shift\
    \ 1))]))\n  (define (shift-digits-left-and-right x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-left-and-right (shift-digits-left (shift-digits-right\
    \ x shift) shift) (- shift 1))]))\n  (define (shift-digits-right-and-left x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right-and-left\
    \ (shift-digits-right (shift-digits-left x shift) shift) (- shift 1))]))\n  (cond\n\
    \    [(> shift (number->string x)) (number->string (reverse-digits x))]\n    [(=\
    \ shift (number->string x)) (number->string x)]\n    [else (number->string (shift-digits-left-and-right\
    \ x shift))]))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n   \
    \     x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter x acc)\n\
    \      (if (= x 0)\n          acc\n          (reverse-digits-iter (quotient x\
    \ 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n  (define\
    \ (digits x)\n    (define (digits-iter x acc)\n      (if (= x 0)\n          acc\n\
    \          (digits-iter (quotient x 10) (+ 1 acc))))\n    (digits-iter x 0))\n\
    \  (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (= x\
    \ 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ 1 acc))))\n\
    \    (num-digits-iter x 0))\n  (define (digits-to-num x)\n    (define (digits-to-num-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (digits-to-num-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (digits-to-num-iter x 0))\n  (define\
    \ (digits-to-string x)\n    (define (digits-to-string-iter x acc)\n      (if (=\
    \ x 0)\n          acc\n          (digits-to-string-iter (quotient x 10) (string-append\
    \ (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"\
    ))\n  (digits-to-string (digits-to-num (shift-left (shift-right (reverse-digits\
    \ x) shift) (- (num-digits x) shift)))))\n", "  (define (reverse-string s)\n \
    \   (let loop ([s s] [accum \"\"])\n      (if (string-empty? s)\n          accum\n\
    \          (loop (substring s 1) (string-append (substring s 0 1) accum)))))\n\
    \  (define (shift-string s shift)\n    (if (> shift (string-length s))\n     \
    \   (reverse-string s)\n        (string-append (substring s shift) (substring\
    \ s 0 shift))))\n  (shift-string (number->string x) shift))\n", "  (define (digits\
    \ x)\n    (if (= x 0)\n        '()\n        (cons (remainder x 10) (digits (quotient\
    \ x 10)))))\n  (define (reverse-digits x)\n    (if (null? x)\n        '()\n  \
    \      (append (reverse-digits (cdr x)) (list (car x)))))\n  (define (shift-digits\
    \ x shift)\n    (if (= shift 0)\n        x\n        (append (cdr x) (list (car\
    \ x)))))\n  (define (digits-to-string x)\n    (if (null? x)\n        \"\"\n  \
    \      (string-append (number->string (car x)) (digits-to-string (cdr x)))))\n\
    \  (digits-to-string (shift-digits (reverse-digits (digits x)) shift)))\n", " \
    \ (define (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits (quotient x 10) (- shift 1))]))\n  (define (shift-digits-to-string\
    \ x shift)\n    (cond\n      [(zero? x) \"\"]\n      [else (string-append (shift-digits-to-string\
    \ (quotient x 10) shift)\n                           (number->string (remainder\
    \ x 10)))]))\n  (define (shift-digits-to-string-reversed x shift)\n    (cond\n\
    \      [(zero? x) \"\"]\n      [else (string-append (number->string (remainder\
    \ x 10))\n                           (shift-digits-to-string-reversed (quotient\
    \ x 10) shift))]))\n  (define (shift-digits-to-string-reversed-and-shift x shift)\n\
    \    (cond\n      [(zero? x) \"\"]\n      [else (string-append (number->string\
    \ (remainder (shift-digits x shift) 10))\n                           (shift-digits-to-string-reversed-and-shift\
    \ (quotient x 10) shift))]))\n  (define (number-of-digits x)\n    (cond\n    \
    \  [(zero? x) 0]\n      [else (+ 1 (number-of-digits (quotient x 10)))]))\n  (cond\n\
    \    [(< shift (number-of-digits x)) (shift-digits-to-string-and-shift x shift)]\n\
    \    [else (shift-digits-to-string-reversed x shift)]))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo\
    \ (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift)\n    (cond\n     \
    \ [(zero? shift) (number->string x)]\n      [(zero? x) (number->string x)]\n \
    \     [else (circular_shift_helper (modulo (quotient x 10) (expt 10 shift)) (-\
    \ shift 1))]))\n  (cond\n    [(zero? x) (number->string x)]\n    [(zero? shift)\
    \ (number->string x)]\n    [else (string-append (circular_shift_helper x shift)\
    \ (circular_shift_helper x (- (number->string x |> string-length) shift)))]))\n",
  "  (define (shift-helper x shift result)\n    (if (zero? x)\n        result\n  \
    \      (shift-helper (quotient x 10)\n                      (if (zero? shift)\n\
    \                          (length (number->string x))\n                     \
    \     (sub1 shift))\n                      (string-append (number->string (remainder\
    \ x 10))\n                                     result))))\n  (shift-helper x shift\
    \ \"\"))\n", "  (define (shift-digits x shift)\n    (if (= x 0)\n        \"\"\n\
    \        (string-append (shift-digits (quotient x 10) shift)\n               \
    \        (string (remainder x 10)))))\n  (define (reverse-digits x)\n    (if (=\
    \ x 0)\n        \"\"\n        (string-append (reverse-digits (quotient x 10))\n\
    \                       (string (remainder x 10)))))\n  (define (num-digits x)\n\
    \    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define\
    \ (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))))\n  (if (> shift\
    \ (num-digits x))\n      (reverse-digits x)\n      (shift-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper (modulo (quotient x 10) (expt\
    \ 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper x shift)))\n",
  "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift_helper (modulo (quotient x 10) (expt 10 shift)) (- shift\
    \ 1))))\n  (number->string (circular_shift_helper x shift)))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (if (> shift 0)\n          \
    \                         (sub1 shift)\n                                   (add1\
    \ shift))\n                               (string-append (number->string (remainder\
    \ x 10))\n                                              result))))\n  (circular_shift_helper\
    \ x shift \"\"))\n", "  (define (reverse-string s)\n    (define (reverse-string-helper\
    \ s r)\n      (if (string-empty? s)\n          r\n          (reverse-string-helper\
    \ (substring s 1) (string-append (substring s 0 1) r))))\n    (reverse-string-helper\
    \ s \"\"))\n  (define (shift-string s)\n    (string-append (substring s 1) (substring\
    \ s 0 1)))\n  (define (shift-string-n s n)\n    (if (= n 0)\n        s\n     \
    \   (shift-string-n (shift-string s) (- n 1))))\n  (define (num-digits x)\n  \
    \  (if (= x 0)\n        0\n        (+ 1 (num-digits (/ x 10)))))\n  (if (> shift\
    \ (num-digits x))\n      (reverse-string (number->string x))\n      (shift-string-n\
    \ (number->string x) shift)))\n", "  (define (shift-right x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define\
    \ (shift-left x shift)\n    (if (zero? shift)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse x)\n    (define (reverse-iter x\
    \ acc)\n      (if (zero? x)\n          acc\n          (reverse-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-iter x 0))\n  (define\
    \ (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (zero? x)\n \
    \         acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits x)\n    (define (digits-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (digits-iter (quotient x 10) (cons (remainder x\
    \ 10) acc))))\n    (digits-iter x '()))\n  (define (digits-to-num x)\n    (define\
    \ (digits-to-num-iter x acc)\n      (if (null? x)\n          acc\n          (digits-to-num-iter\
    \ (cdr x) (+ (* acc 10) (car x)))))\n    (digits-to-num-iter x 0))\n  (define\
    \ (digits-to-string x)\n    (define (digits-to-string-iter x acc)\n      (if (null?\
    \ x)\n          acc\n          (digits-to-string-iter (cdr x) (string-append (number->string\
    \ (car x)) acc))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string (digits\
    \ (if (> shift (num-digits x))\n                                (reverse x)\n\
    \                                (digits-to-num (+ (shift-left (shift-right x\
    \ shift) shift)\n                                                  (shift-right\
    \ x (- (", "  (string->number (string-append (substring (number->string x) shift)\n\
    \                                 (substring (number->string x) 0 shift))))\n",
  "  (define (reverse-string str)\n    (define (helper str result)\n      (if (string-empty?\
    \ str)\n          result\n          (helper (substring str 1) (string-append (substring\
    \ str 0 1) result))))\n    (helper str \"\"))\n  (define (shift-string str)\n\
    \    (string-append (substring str 1) (substring str 0 1)))\n  (define (num-digits\
    \ x)\n    (define (helper x count)\n      (if (= x 0)\n          count\n     \
    \     (helper (quotient x 10) (+ count 1))))\n    (helper x 0))\n  (define (shift-digits\
    \ x shift)\n    (define (helper x shift)\n      (if (= shift 0)\n          x\n\
    \          (helper (shift-string (number->string x)) (- shift 1))))\n    (helper\
    \ (number->string x) shift))\n  (define (reverse-digits x)\n    (string->number\
    \ (reverse-string (number->string x))))\n  (define (shift-or-reverse x shift)\n\
    \    (if (> shift (num-digits x))\n        (reverse-digits x)\n        (string->number\
    \ (shift-digits x shift))))\n  (shift-or-reverse x shift))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (circular_shift_helper x\
    \ shift \"\"))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n    \
    \    '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-right x shift)\n    (if (zero? shift)\n        x\n        (shift-right\
    \ (quotient x 10) (sub1 shift))))\n  (define (shift-left x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-left (quotient x 10) (sub1 shift))))\n  (define\
    \ (reverse-digits x)\n    (define (reverse-digits-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (reverse-digits-iter (quotient x 10) (+ (* (remainder\
    \ x 10) (expt 10 (sub1 (number->string x)))) acc))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (number->string x)\n    (define (number->string-iter x acc)\n\
    \      (if (zero? x)\n          acc\n          (number->string-iter (quotient\
    \ x 10) (add1 acc))))\n    (number->string-iter x 0))\n  (if (> shift (number->string\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-right\
    \ x shift))))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n    \
    \    x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (reverse x)\n    (if (= x 0)\n        0\n        (+ (* (remainder\
    \ x 10) (reverse (quotient x 10))) (remainder x 10))))\n  (define (num-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (define (digits x)\n    (if (= x 0)\n        '()\n        (cons (remainder\
    \ x 10) (digits (quotient x 10)))))\n  (define (digits-to-num x)\n    (if (null?\
    \ x)\n        0\n        (+ (* (car x) (expt 10 (length x))) (digits-to-num (cdr\
    \ x)))))\n  (define (shift-digits x shift)\n    (digits-to-num (append (cdr (digits\
    \ x)) (list (car (digits x))))))\n  (if (> shift (num-digits x))\n      (number->string\
    \ (reverse x))\n      (number->string (shift-digits x shift))))\n", "  (define\
    \ (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x rev)\n      (if (= x 0)\n          rev\n\
    \          (reverse-digits-iter (quotient x 10) (+ (* rev 10) (remainder x 10)))))\n\
    \    (reverse-digits-iter x 0))\n  (define (num-digits x)\n    (define (num-digits-iter\
    \ x count)\n      (if (= x 0)\n          count\n          (num-digits-iter (quotient\
    \ x 10) (+ count 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x str)\n      (if (= x 0)\n         \
    \ str\n          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) str))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (if (> shift (num-digits x))\n                        (reverse-digits x)\n \
    \                       (+ (shift-left (remainder x (shift-right x shift)) shift)\n\
    \                           (shift-right x shift)))))\n", "  (define (helper x\
    \ shift)\n    (if (= x 0)\n        \"\"\n        (string-append (helper (quotient\
    \ x 10) (- shift 1))\n                       (if (= shift 0)\n               \
    \            (string-append (number->string (remainder x 10))\n              \
    \                            (helper (quotient x 10) (- shift 1)))\n         \
    \                  (string-append (helper (quotient x 10) (- shift 1))\n     \
    \                                     (number->string (remainder x 10)))))))\n\
    \  (if (> shift (number-of-digits x))\n      (reverse-digits x)\n      (helper\
    \ x shift)))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n\
    \    (num-digits-iter x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (digits-to-string-iter\
    \ (quotient x 10) (string-append (number->string (remainder x 10)) acc))))\n \
    \   (digits-to-string-iter x \"\"))\n  (digits-to-string (shift-left (shift-right\
    \ x shift) (- (num-digits x) shift))))\n", "  (define (digits x)\n    (if (= x\
    \ 0)\n        '()\n        (cons (remainder x 10) (digits (quotient x 10)))))\n\
    \  (define (reverse-digits x)\n    (if (null? x)\n        '()\n        (append\
    \ (reverse-digits (cdr x)) (list (car x)))))\n  (define (shift-digits x shift)\n\
    \    (if (= shift 0)\n        x\n        (append (cdr x) (list (car x)))))\n \
    \ (define (digits-to-string x)\n    (if (null? x)\n        \"\"\n        (string-append\
    \ (number->string (car x)) (digits-to-string (cdr x)))))\n  (digits-to-string\
    \ (shift-digits (reverse-digits (digits x)) shift)))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (if (> shift (string-length\
    \ (number->string x)))\n      (string-reverse (number->string x))\n      (circular_shift_helper\
    \ x shift \"\")))\n", "  (define (shift-right x)\n    (define (shift-right-helper\
    \ x)\n      (if (zero? x)\n          #f\n          (cons (remainder x 10) (shift-right-helper\
    \ (quotient x 10)))))\n    (reverse (shift-right-helper x)))\n  (define (shift-left\
    \ x)\n    (define (shift-left-helper x)\n      (if (zero? x)\n          #f\n \
    \         (cons (remainder x 10) (shift-left-helper (quotient x 10)))))\n    (shift-left-helper\
    \ x))\n  (define (shift-helper x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-helper (shift-right x) (- shift 1))))\n  (define (shift-helper-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper-left (shift-left\
    \ x) (- shift 1))))\n  (if (> shift (length (shift-right x)))\n      (list->string\
    \ (reverse (shift-helper-left x shift)))\n      (list->string (shift-helper x\
    \ shift))))\n", "  (define (shift-digits x shift)\n    (if (= x 0)\n        '()\n\
    \        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (= shift 0)\n        digits\n   \
    \     (shift-digits-right (append (cdr digits) (list (car digits))) (- shift 1))))\n\
    \  (define (digits-to-string digits)\n    (if (null? digits)\n        \"\"\n \
    \       (string-append (number->string (car digits)) (digits-to-string (cdr digits)))))\n\
    \  (digits-to-string (shift-digits-right (shift-digits x shift) shift)))\n", " \
    \ (define (helper x shift)\n    (if (= shift 0)\n        x\n        (helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (helper (number->string\
    \ x) shift))\n", "  (define (shift-right x shift)\n    (if (= shift 0)\n     \
    \   x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-left (* x 10) (- shift\
    \ 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter x acc)\n\
    \      (if (= x 0)\n          acc\n          (reverse-digits-iter (quotient x\
    \ 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n  (define\
    \ (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (= x 0)\n   \
    \       acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ acc)\n      (if (= x 0)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n               \
    \         (reverse-digits x)\n                        (+ (shift-left (remainder\
    \ x (shift-right x shift)) shift)\n                           (shift-right x shift)))))\n",
  "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift_helper (quotient x 10) (- shift 1))))\n  (define (circular_shift_helper_2\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper_2\
    \ (remainder x 10) (- shift 1))))\n  (define (circular_shift_helper_3 x shift)\n\
    \    (if (zero? shift)\n        x\n        (circular_shift_helper_3 (quotient\
    \ x 10) (- shift 1))))\n  (define (circular_shift_helper_4 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper_4 (remainder x 10) (- shift\
    \ 1))))\n  (define (circular_shift_helper_5 x shift)\n    (if (zero? shift)\n\
    \        x\n        (circular_shift_helper_5 (quotient x 10) (- shift 1))))\n\
    \  (define (circular_shift_helper_6 x shift)\n    (if (zero? shift)\n        x\n\
    \        (circular_shift_helper_6 (remainder x 10) (- shift 1))))\n  (define (circular_shift_helper_7\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper_7\
    \ (quotient x 10) (- shift 1))))\n  (define (circular_shift_helper_8 x shift)\n\
    \    (if (zero? shift)\n        x\n        (circular_shift_helper_8 (remainder\
    \ x 10) (- shift 1))))\n  (define (circular_shift_helper_9 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper_9 (quotient x 10) (- shift\
    \ 1))))\n  (define (circular_shift_helper_10 x shift)\n    (if (zero? shift)\n\
    \        x\n        (circular_shift_helper_10 (remainder x 10)", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (reverse-digits x)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (shift-right lst shift)\n    (if (zero? shift)\n        lst\n     \
    \   (shift-right (append (cdr lst) (list (car lst))) (- shift 1))))\n  (define\
    \ (digits-to-string lst)\n    (if (null? lst)\n        \"\"\n        (string-append\
    \ (number->string (car lst)) (digits-to-string (cdr lst)))))\n  (if (< shift (length\
    \ (shift-digits x shift)))\n      (digits-to-string (shift-right (shift-digits\
    \ x shift) shift))\n      (digits-to-string (reverse-digits x))))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-digits-right x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits-right (/ x 10) (- shift 1))))\n\
    \  (define (shift-digits-left x shift)\n    (if (zero? shift)\n        x\n   \
    \     (shift-digits-left (* x 10) (- shift 1))))\n  (define (digits x)\n    (if\
    \ (zero? x)\n        0\n        (+ 1 (digits (/ x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ (* (modulo x 10) (expt 10 (- (digits\
    \ x) 1)))\n           (reverse-digits (/ x 10)))))\n  (define (shift-digits-right-by-n\
    \ x n)\n    (if (zero? n)\n        x\n        (shift-digits-right-by-n (/ x 10)\
    \ (- n 1))))\n  (define (shift-digits-left-by-n x n)\n    (if (zero? n)\n    \
    \    x\n        (shift-digits-left-by-n (* x 10) (- n 1))))\n  (define (shift-digits-left-by-n-and-reverse\
    \ x n)\n    (reverse-digits (shift-digits-left-by-n x n)))\n  (define (shift-digits-right-by-n-and-reverse\
    \ x n)\n    (reverse-digits (shift-digits-right-by-n x n)))\n  (define (shift-digits-right-by-n-and-reverse-and-shift-digits-left-by-n\
    \ x n)\n    (shift-digits-left-by-n-and-reverse (shift-digits-right-by-n-and-reverse\
    \ x n) n))\n  (define (shift-digits-left-by-n-and-reverse-and-shift-digits-right-by-n\
    \ x n)", "  (define (circular_shift_helper x shift result)\n    (if (zero? x)\n\
    \        result\n        (circular_shift_helper (quotient x 10)\n            \
    \                   (modulo shift 1)\n                               (string-append\
    \ (number->string (modulo x 10))\n                                           \
    \   result))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (= shift 0)\n        x\n        (circular_shift_helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))))\n  (if (> shift (string-length\
    \ x))\n      (reverse_string x)\n      (circular_shift_helper x shift)))\n", " \
    \ (define (shift-right x shift)\n    (if (zero? shift)\n        x\n        (shift-right\
    \ (modulo x 10) (sub1 shift))))\n  (define (shift-left x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-left (quotient x 10) (sub1 shift))))\n  (define\
    \ (reverse-digits x)\n    (define (reverse-digits-iter x rev)\n      (if (zero?\
    \ x)\n          rev\n          (reverse-digits-iter (quotient x 10) (add1 (multiply\
    \ 10 rev) (modulo x 10)))))\n    (reverse-digits-iter x 0))\n  (define (num-digits\
    \ x)\n    (define (num-digits-iter x count)\n      (if (zero? x)\n          count\n\
    \          (num-digits-iter (quotient x 10) (add1 count))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ str)\n      (if (zero? x)\n          str\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (modulo x 10)) str))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n               \
    \         (reverse-digits x)\n                        (add (shift-left x shift)\
    \ (shift-right x (subtract (num-digits x) shift))))))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo\
    \ (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (circular_shift_helper (string-append (substring x 1)\
    \ (substring x 0 1)) (- shift 1))))\n  (if (> shift (string-length x))\n     \
    \ (reverse x)\n      (circular_shift_helper x shift)))\n", "  (define (rotate\
    \ lst)\n    (append (rest lst) (list (first lst))))\n  (define (rotate-n lst n)\n\
    \    (if (= n 0)\n        lst\n        (rotate-n (rotate lst) (- n 1))))\n  (define\
    \ (digits n)\n    (if (= n 0)\n        '()\n        (cons (remainder n 10) (digits\
    \ (quotient n 10)))))\n  (define (reverse-digits n)\n    (if (= n 0)\n       \
    \ '()\n        (cons (remainder n 10) (reverse-digits (quotient n 10)))))\n  (define\
    \ (digits-to-number lst)\n    (if (null? lst)\n        0\n        (+ (* (first\
    \ lst) (expt 10 (length lst))) (digits-to-number (rest lst)))))\n  (define (reverse-digits-to-number\
    \ lst)\n    (if (null? lst)\n        0\n        (+ (* (first lst) (expt 10 (length\
    \ lst))) (reverse-digits-to-number (rest lst)))))\n  (number->string (if (> shift\
    \ (length (digits x)))\n                      (reverse-digits-to-number (rotate-n\
    \ (reverse-digits x) shift))\n                      (digits-to-number (rotate-n\
    \ (digits x) shift)))))\n", "  (define (reverse-digits x)\n    (cond\n      [(zero?\
    \ x) \"\"]\n      [else (string-append (reverse-digits (quotient x 10))\n    \
    \                       (number->string (remainder x 10)))]))\n  (define (shift-digits\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits (string-append\
    \ (substring x 1)\n                                         (substring x 0 1))\n\
    \                          (- shift 1))]))\n  (define (num-digits x)\n    (cond\n\
    \      [(zero? x) 0]\n      [else (+ 1 (num-digits (quotient x 10)))]))\n  (if\
    \ (> shift (num-digits x))\n      (reverse-digits x)\n      (shift-digits (number->string\
    \ x) shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ shift)\n        result\n        (circular_shift_helper (quotient x 10) (- shift\
    \ 1) (string-append (number->string (remainder x 10)) result))))\n  (circular_shift_helper\
    \ x shift \"\"))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n      \
    \  (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ acc)\n      (if (zero? x)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n               \
    \         (reverse-digits x)\n                        (shift-left (shift-right\
    \ x shift) (- (num-digits x) shift)))))\n", "  (define (helper x shift acc)\n\
    \    (if (zero? x)\n        (number->string acc)\n        (helper (quotient x\
    \ 10)\n                shift\n                (+ (* acc 10) (remainder x 10)))))\n\
    \  (if (> shift (number->string x |> string-length))\n      (helper x shift 0\
    \ |> number->string |> string-reverse)\n      (helper x shift 0)))\n", "  (define\
    \ (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper\
    \ (modulo (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift)\n    (if (= shift\
    \ 0)\n        x\n        (circular_shift_helper (string-append (substring x 1)\
    \ (substring x 0 1)) (- shift 1))))\n  (circular_shift_helper (number->string\
    \ x) shift))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n   \
    \     x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (reverse x)\n    (if (zero? x)\n        0\n        (+\
    \ (* (remainder x 10) (reverse (quotient x 10)))\n           (remainder x 10))))\n\
    \  (define (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits\
    \ (quotient x 10)))))\n  (define (digits x)\n    (if (zero? x)\n        '()\n\
    \        (cons (remainder x 10) (digits (quotient x 10)))))\n  (define (digits-to-num\
    \ x)\n    (if (null? x)\n        0\n        (+ (* (car x) (expt 10 (length x)))\n\
    \           (digits-to-num (cdr x)))))\n  (define (shift-digits x shift)\n   \
    \ (if (zero? shift)\n        x\n        (if (> shift (length x))\n           \
    \ (reverse x)\n            (append (cdr x) (list (car x))))))\n  (define (digits-to-string\
    \ x)\n    (if (null? x)\n        \"\"\n        (string-append (number->string\
    \ (car x))\n                       (digits-to-string (cdr x)))))\n  (digits-to-string\
    \ (shift-digits (digits x) shift)))\n", "  (define (circular_shift_helper x shift)\n\
    \    (if (= shift 0)\n        x\n        (circular_shift_helper (modulo (* 10\
    \ (modulo x 10)) x) (- shift 1))))\n  (number->string (circular_shift_helper x\
    \ shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo shift 1)\n                               (string-append\
    \ (number->string (modulo x 10))\n                                           \
    \   result))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (if (= shift 0)\n        x\n        (circular_shift_helper (modulo\
    \ x 10) (- shift 1))))\n  (define (reverse_digits x)\n    (if (= x 0)\n      \
    \  \"\"\n        (string-append (reverse_digits (quotient x 10)) (string (modulo\
    \ x 10)))))\n  (if (= x 0)\n      \"0\"\n      (string-append (reverse_digits\
    \ (circular_shift_helper x shift)) (reverse_digits (quotient x (expt 10 shift))))))\n",
  "  (define (reverse-string s)\n    (if (string-empty? s)\n        \"\"\n       \
    \ (string-append (reverse-string (substring s 1)) (substring s 0 1))))\n  (define\
    \ (shift-string s)\n    (if (string-empty? s)\n        \"\"\n        (string-append\
    \ (substring s 1) (substring s 0 1))))\n  (define (shift-string-n s n)\n    (if\
    \ (= n 0)\n        s\n        (shift-string-n (shift-string s) (- n 1))))\n  (define\
    \ (shift-string-n-reverse s n)\n    (if (= n 0)\n        s\n        (shift-string-n-reverse\
    \ (reverse-string s) (- n 1))))\n  (define (shift-string-n-reverse-string s n)\n\
    \    (string->number (shift-string-n-reverse (number->string s) n)))\n  (if (<\
    \ shift (string-length (number->string x)))\n      (number->string (shift-string-n-reverse-string\
    \ x shift))\n      (reverse-string (number->string x))))\n", "  (define (shift-digits\
    \ x shift)\n    (cond ((= shift 0) x)\n          ((= shift 1) (shift-digit x))\n\
    \          (else (shift-digits (shift-digit x) (- shift 1)))))\n  (define (shift-digit\
    \ x)\n    (define (shift-digit-helper x)\n      (cond ((= x 0) 0)\n          \
    \  (else (+ (* 10 (modulo x 10)) (shift-digit-helper (quotient x 10))))))\n  \
    \  (define (reverse-digits x)\n      (cond ((= x 0) 0)\n            (else (+ (*\
    \ 10 (modulo x 10)) (reverse-digits (quotient x 10))))))\n    (if (= (number->string\
    \ x) (number->string (shift-digit-helper x)))\n        (reverse-digits x)\n  \
    \      (shift-digit-helper x)))\n  (number->string (shift-digits x shift)))\n",
  "  (define (circular_shift_helper x shift digits)\n    (cond ((= shift 0) (number->string\
    \ x))\n          ((= shift digits) (number->string (reverse-digits x)))\n    \
    \      (else (number->string (reverse-digits (modulo (reverse-digits x) (expt\
    \ 10 shift)))))))\n  (circular_shift_helper x shift (number-of-digits x)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (rotate-digits\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (rotate-digits\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (rotate-digits\
    \ (shift-digits x shift) shift)))\n", "  (define (circular_shift_helper x shift)\n\
    \    (if (= shift 0)\n        x\n        (circular_shift_helper (modulo (* 10\
    \ (modulo x 10)) x) (- shift 1))))\n  (number->string (circular_shift_helper x\
    \ shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ shift)\n        result\n        (let ([x-str (number->string x)])\n        \
    \  (circular_shift_helper (string->number (string-append (substring x-str 1) (substring\
    \ x-str 0 1)))\n                                 (- shift 1)\n               \
    \                  (string-append (substring x-str 1) (substring x-str 0 1))))))\n\
    \  (circular_shift_helper x shift \"\"))\n", "  (define (shift-right x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n    \
    \    (shift-left (* x 10) (- shift 1))))\n  (define (reverse x)\n    (define (reverse-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (reverse-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-iter x 0))\n  (define\
    \ (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (= x 0)\n   \
    \       acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits x)\n    (define (digits-iter x acc)\n      (if (= x\
    \ 0)\n          acc\n          (digits-iter (quotient x 10) (cons (remainder x\
    \ 10) acc))))\n    (digits-iter x '()))\n  (define (digits-to-num x)\n    (define\
    \ (digits-to-num-iter x acc)\n      (if (null? x)\n          acc\n          (digits-to-num-iter\
    \ (cdr x) (+ (* acc 10) (car x)))))\n    (digits-to-num-iter x 0))\n  (define\
    \ (digits-to-string x)\n    (define (digits-to-string-iter x acc)\n      (if (null?\
    \ x)\n          acc\n          (digits-to-string-iter (cdr x) (string-append (number->string\
    \ (car x)) acc))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string (digits\
    \ (shift-left (shift-right x shift) (- (num-digits x) shift)))))\n", "  (define\
    \ (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits\
    \ (quotient x 10) (sub1 shift))]))\n  (define (shift-digits-rev x shift)\n   \
    \ (cond\n      [(zero? shift) x]\n      [else (shift-digits-rev (modulo x 10)\
    \ (sub1 shift))]))\n  (define (shift-digits-rev-str x shift)\n    (cond\n    \
    \  [(zero? shift) (number->string x)]\n      [else (string-append (shift-digits-rev-str\
    \ (modulo x 10) (sub1 shift))\n                           (number->string (quotient\
    \ x 10)))]))\n  (define (shift-digits-str x shift)\n    (cond\n      [(zero? shift)\
    \ (number->string x)]\n      [else (string-append (number->string (shift-digits\
    \ x shift))\n                           (shift-digits-rev-str x (sub1 shift)))]))\n\
    \  (shift-digits-str x shift))\n", "  (define (rotate lst)\n    (if (empty? lst)\n\
    \        '()\n        (append (cdr lst) (list (car lst)))))\n  (define (reverse\
    \ lst)\n    (if (empty? lst)\n        '()\n        (append (reverse (cdr lst))\
    \ (list (car lst)))))\n  (define (digits x)\n    (if (= x 0)\n        '()\n  \
    \      (append (digits (quotient x 10)) (list (remainder x 10)))))\n  (define\
    \ (undigits lst)\n    (if (empty? lst)\n        0\n        (+ (* (car lst) (expt\
    \ 10 (length lst))) (undigits (cdr lst)))))\n  (define (shift x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift (undigits (rotate (digits x))) (- shift\
    \ 1))))\n  (number->string (shift x shift)))\n", "  (define (shift-right x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n    \
    \    (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n     \
    \ (if (= x 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc\
    \ 1))))\n    (num-digits-iter x 0))\n  (define (digits-to-string x)\n    (define\
    \ (digits-to-string-iter x acc)\n      (if (= x 0)\n          acc\n          (digits-to-string-iter\
    \ (quotient x 10) (string-append (number->string (remainder x 10)) acc))))\n \
    \   (digits-to-string-iter x \"\"))\n  (digits-to-string (shift-left (shift-right\
    \ x shift) (- (num-digits x) shift))))\n", "  (define (shift-helper x shift)\n\
    \    (cond\n      [(zero? shift) x]\n      [else (shift-helper (modulo (quotient\
    \ x 10) (expt 10 shift)) (- shift 1))]))\n  (define (reverse-helper x)\n    (cond\n\
    \      [(zero? x) 0]\n      [else (+ (* (modulo x 10) (expt 10 (- (number->string\
    \ x) 1)))\n               (reverse-helper (quotient x 10)))]))\n  (if (> shift\
    \ (number->string x))\n      (number->string (reverse-helper x))\n      (number->string\
    \ (shift-helper x shift))))\n", "  (define (circular_shift_helper x shift result)\n\
    \    (if (zero? x)\n        result\n        (circular_shift_helper (quotient x\
    \ 10)\n                               (modulo (+ shift 1) (number->string x))\n\
    \                               (string-append (number->string (modulo x 10))\n\
    \                                              result))))\n  (circular_shift_helper\
    \ x shift \"\"))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift acc)\n      (if (zero? x)\n          acc\n          (shift-digits-iter\
    \ (quotient x 10)\n                             shift\n                      \
    \       (cons (modulo x 10) acc))))\n    (shift-digits-iter x shift '()))\n  (define\
    \ (shift-digits-right x shift)\n    (define (shift-digits-right-iter x shift acc)\n\
    \      (if (zero? shift)\n          acc\n          (shift-digits-right-iter (cdr\
    \ x)\n                                   (- shift 1)\n                       \
    \            (cons (car x) acc))))\n    (shift-digits-right-iter x shift '()))\n\
    \  (define (digits-to-string x)\n    (define (digits-to-string-iter x acc)\n \
    \     (if (null? x)\n          acc\n          (digits-to-string-iter (cdr x)\n\
    \                                 (string-append (number->string (car x)) acc))))\n\
    \    (digits-to-string-iter x \"\"))\n  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (null? x)\n          acc\n          (reverse-digits-iter\
    \ (cdr x)\n                               (cons (car x) acc))))\n    (reverse-digits-iter\
    \ x '()))\n  (define (digits-length x)\n    (define (digits-length-iter x acc)\n\
    \      (if (null? x)\n          acc\n          (digits-length-iter (cdr x) (+\
    \ acc 1))))\n    (digits-length-iter x 0))\n  (if (> shift (digits-length x))\n\
    \      (digits-to-string (reverse-digits x))\n      (digits-to-string (shift-digits-right\
    \ (shift-digits x shift)\n                                            shift))))\n",
  "  (define (circular_shift_helper x shift)\n    (if (= shift 0)\n        x\n   \
    \     (circular_shift_helper (modulo x 10) (- shift 1))))\n  (define (reverse_digits\
    \ x)\n    (define (reverse_digits_helper x acc)\n      (if (= x 0)\n         \
    \ acc\n          (reverse_digits_helper (quotient x 10) (+ (* acc 10) (modulo\
    \ x 10)))))\n    (reverse_digits_helper x 0))\n  (define (digits x)\n    (define\
    \ (digits_helper x acc)\n      (if (= x 0)\n          acc\n          (digits_helper\
    \ (quotient x 10) (+ 1 acc))))\n    (digits_helper x 0))\n  (define (shift_digits\
    \ x shift)\n    (if (> shift (digits x))\n        (reverse_digits x)\n       \
    \ (string-append (number->string (circular_shift_helper x shift))\n          \
    \             (number->string (quotient x (expt 10 shift))))))\n  (shift_digits\
    \ x shift))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n    \
    \    x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (digits x)\n    (if (zero? x)\n        0\n        (+\
    \ 1 (digits (quotient x 10)))))\n  (define (reverse x)\n    (define (reverse-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-iter x 0))\n  (define\
    \ (digits-to-string x)\n    (define (digits-to-string-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (digits-to-string-iter (quotient x 10) (string-append\
    \ (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"\
    ))\n  (if (> shift (digits x))\n      (digits-to-string (reverse x))\n      (digits-to-string\
    \ (shift-right (shift-left x shift) shift))))\n", "  (define (cs x shift)\n  \
    \  (if (= shift 0)\n        (number->string x)\n        (let ([x (modulo x 10)])\n\
    \          (string-append (cs (quotient x 10) (- shift 1)) (number->string x)))))\n\
    \  (let ([len (string-length (number->string x))])\n    (if (> shift len)\n  \
    \      (string-append (cs x (- shift len)) (number->string x))\n        (cs x\
    \ shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n       \
    \ '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n \
    \ (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define\
    \ (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n \
    \       (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-string x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-string (string-append (string-append (substring\
    \ x 1) (substring x 0 1)) \"\") (- shift 1))))\n  (define (num-digits x)\n   \
    \ (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define\
    \ (reverse-string x)\n    (if (zero? (string-length x))\n        \"\"\n      \
    \  (string-append (reverse-string (substring x 1)) (substring x 0 1))))\n  (if\
    \ (> shift (num-digits x))\n      (reverse-string (number->string x))\n      (shift-string\
    \ (number->string x) (shift-digits x shift))))\n", "  (define (shift-digits x\
    \ shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n\
    \  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (= x\
    \ 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n\
    \    (num-digits-iter x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (define (shift-digits x shift)\n    (if (> shift (num-digits x))\n\
    \        (digits-to-string (reverse-digits x))\n        (digits-to-string (+ (shift-left\
    \ (shift-right x shift) shift) (shift-right x (- (num-digits x) shift))))))\n\
    \  (shift-digits x shift))\n", "  (define (shift-digits x shift)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular_shift_iter x shift result)\n    (if (zero? shift)\n       \
    \ result\n        (let* ([x-str (number->string x)]\n               [x-len (string-length\
    \ x-str)]\n               [shift (modulo shift x-len)]\n               [result\
    \ (string-append (substring x-str shift x-len)\n                             \
    \         (substring x-str 0 shift))])\n          (circular_shift_iter x (- shift\
    \ 1) result))))\n  (circular_shift_iter x shift \"\"))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo (+ shift 1) (length\
    \ result))\n                               (string-append (substring result shift)\n\
    \                                              (substring result 0 shift)))))\n\
    \  (circular_shift_helper x shift (number->string x)))\n", "  (define (shift-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (shift-helper (number->string\
    \ x) shift))\n", "  (define (circular_shift_helper x shift result)\n    (cond\n\
    \      [(= shift 0) result]\n      [(= x 0) (circular_shift_helper x (- shift\
    \ 1) (string-append (number->string (modulo shift 10)) result))]\n      [else\
    \ (circular_shift_helper (quotient x 10) (- shift 1) (string-append (number->string\
    \ (modulo x 10)) result))]))\n  (circular_shift_helper x shift \"\"))\n", "  (define\
    \ (shift-digits x shift)\n    (define (shift-digits-iter x shift acc)\n      (cond\n\
    \        [(zero? x) acc]\n        [(zero? shift) (shift-digits-iter (quotient\
    \ x 10) shift (cons (remainder x 10) acc))]\n        [else (shift-digits-iter\
    \ (quotient x 10) (sub1 shift) (cons (remainder x 10) acc))]))\n    (shift-digits-iter\
    \ x shift '()))\n  (define (digits x)\n    (define (digits-iter x acc)\n     \
    \ (cond\n        [(zero? x) acc]\n        [else (digits-iter (quotient x 10) (cons\
    \ (remainder x 10) acc))]))\n    (digits-iter x '()))\n  (define (reverse x)\n\
    \    (define (reverse-iter x acc)\n      (cond\n        [(empty? x) acc]\n   \
    \     [else (reverse-iter (rest x) (cons (first x) acc))]))\n    (reverse-iter\
    \ x '()))\n  (define (number->string x)\n    (define (number->string-iter x acc)\n\
    \      (cond\n        [(zero? x) acc]\n        [else (number->string-iter (quotient\
    \ x 10) (string (remainder x 10) acc))]))\n    (number->string-iter x \"\"))\n\
    \  (number->string (reverse (shift-digits x shift))))\n", "  (define (shift-right\
    \ x shift)\n    (if (= shift 0)\n        x\n        (shift-right (modulo x 10)\
    \ (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-left (* x 10) (- shift 1))))\n  (define (shift-digits x shift)\n\
    \    (if (= shift 0)\n        x\n        (shift-digits (+ (shift-left (shift-right\
    \ x shift) shift)\n                         (shift-right x (- shift)))\n     \
    \                (- shift 1))))\n  (define (num-digits x)\n    (if (= x 0)\n \
    \       0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ (* (modulo x 10) (expt 10 (- (num-digits\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (if (> shift (num-digits\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-digits\
    \ x shift))))\n", "  (define (shift-helper x shift result)\n    (if (zero? x)\n\
    \        result\n        (shift-helper (quotient x 10)\n                     \
    \ (if (zero? shift)\n                          (length (number->string x))\n \
    \                         (sub1 shift))\n                      (string-append\
    \ (number->string (remainder x 10))\n                                     result))))\n\
    \  (shift-helper x shift \"\"))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits (quotient x 10) (- shift 1))))\n\
    \  (define (shift-digits-rev x shift)\n    (if (zero? shift)\n        x\n    \
    \    (shift-digits-rev (quotient x 10) (- shift 1))))\n  (define (shift-digits-rev-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-rev-helper\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-digits-rev-helper2 x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-digits-rev-helper2 (quotient\
    \ x 10) (- shift 1))))\n  (define (shift-digits-rev-helper3 x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits-rev-helper3 (quotient x 10)\
    \ (- shift 1))))\n  (define (shift-digits-rev-helper4 x shift)\n    (if (zero?\
    \ shift)\n        x\n        (shift-digits-rev-helper4 (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-digits-rev-helper5 x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-digits-rev-helper5 (quotient x 10) (- shift 1))))\n\
    \  (define (shift-digits-rev-helper6 x shift)\n    (if (zero? shift)\n       \
    \ x\n        (shift-digits-rev-helper6 (quotient x 10) (- shift 1))))\n  (define\
    \ (shift-digits-rev-helper7 x shift)\n    (if (zero? shift)\n        x\n     \
    \   (shift-digits-rev-helper7 (quotient x 10) (- shift 1))))\n  (define (shift-digits-rev-helper8\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-rev-helper8\
    \ (quotient x", "  (define (helper x shift result)\n    (if (zero? x)\n      \
    \  result\n        (helper (quotient x 10)\n                (modulo shift 1)\n\
    \                (string-append (number->string (modulo x 10)) result))))\n  (if\
    \ (zero? shift)\n      (number->string x)\n      (helper x shift \"\")))\n", " \
    \ (define (circular_shift_helper x shift)\n    (if (= shift 0)\n        x\n  \
    \      (circular_shift_helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (circular_shift_helper (number->string x) shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (reverse-digits\
    \ digits)\n    (if (null? digits)\n        '()\n        (append (reverse-digits\
    \ (cdr digits)) (list (car digits)))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (if (<\
    \ shift (length (shift-digits x shift)))\n                        (shift-digits-right\
    \ (shift-digits x shift) shift)\n                        (reverse-digits (shift-digits\
    \ x shift)))))\n", "  (define (shift-digit d)\n    (if (= d 0) 9 (sub1 d)))\n\
    \  (define (shift-digits x)\n    (if (= x 0)\n        0\n        (+ (* (shift-digit\
    \ (modulo x 10)) (expt 10 (sub1 (number->digits x))))\n           (shift-digits\
    \ (quotient x 10)))))\n  (number->string (shift-digits x)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-right lst shift)\n    (if (zero? shift)\n\
    \        lst\n        (shift-right (append (cdr lst) (list (car lst))) (- shift\
    \ 1))))\n  (define (reverse-digits lst)\n    (if (null? lst)\n        '()\n  \
    \      (append (reverse-digits (cdr lst)) (list (car lst)))))\n  (define (digits-to-string\
    \ lst)\n    (if (null? lst)\n        \"\"\n        (string-append (number->string\
    \ (car lst)) (digits-to-string (cdr lst)))))\n  (define (num-digits x)\n    (if\
    \ (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (if (>\
    \ shift (num-digits x))\n      (digits-to-string (reverse-digits (shift-digits\
    \ x shift)))\n      (digits-to-string (shift-right (shift-digits x shift) shift))))\n",
  "  (define (shift-digits x shift)\n    (if (= x 0)\n        '()\n        (cons (remainder\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (= shift 0)\n        digits\n        (append (cdr digits)\
    \ (list (car digits)))))\n  (define (reverse-digits digits)\n    (if (null? digits)\n\
    \        '()\n        (append (reverse-digits (cdr digits)) (list (car digits)))))\n\
    \  (define (digits-to-string digits)\n    (if (null? digits)\n        \"\"\n \
    \       (string-append (number->string (car digits)) (digits-to-string (cdr digits)))))\n\
    \  (digits-to-string (if (> shift (length (shift-digits x shift)))\n         \
    \               (reverse-digits (shift-digits x shift))\n                    \
    \    (shift-digits-right (shift-digits x shift) shift))))\n", "  (define (circular_shift_helper\
    \ x shift digits)\n    (if (zero? x)\n        (apply string (reverse digits))\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   shift\n                               (cons (modulo x 10) digits))))\n  (circular_shift_helper\
    \ x shift '()))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-helper (modulo x 10) (- shift 1))))\n  (define (reverse-helper\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (reverse-helper\
    \ (quotient x 10)) (number->string (modulo x 10)))))\n  (if (< shift (string-length\
    \ (number->string x)))\n      (string-append (reverse-helper (shift-helper x shift))\
    \ (number->string (quotient x (expt 10 shift))))\n      (reverse-helper x)))\n",
  "  (define (circular_shift-helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift-helper (modulo (quotient x 10) (expt 10 shift)) (- shift\
    \ 1))))\n  (number->string (circular_shift-helper x shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) (- shift 1)))))\n  (define (reverse-digits x)\n    (if (zero?\
    \ x)\n        '()\n        (cons (modulo x 10) (reverse-digits (quotient x 10)))))\n\
    \  (define (digits->string digits)\n    (if (null? digits)\n        \"\"\n   \
    \     (string-append (number->string (car digits)) (digits->string (cdr digits)))))\n\
    \  (if (> shift (length (number->string x)))\n      (digits->string (reverse-digits\
    \ x))\n      (digits->string (shift-digits x shift))))\n", "  (define (reverse-string\
    \ s)\n    (string-append (reverse (string->list s))))\n  (define (shift-string\
    \ s shift)\n    (string-append (reverse-string (substring s shift))\n        \
    \           (substring s 0 shift)))\n  (define (shift-string-right s shift)\n\
    \    (shift-string s (- (string-length s) shift)))\n  (define (shift-string-left\
    \ s shift)\n    (shift-string s shift))\n  (define (shift-string-circular s shift)\n\
    \    (if (> shift (string-length s))\n        (reverse-string s)\n        (shift-string-right\
    \ s shift)))\n  (shift-string-circular (number->string x) shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        x\n        (let* ([x-str\
    \ (number->string x)]\n               [x-len (string-length x-str)]\n        \
    \       [shift (modulo shift x-len)]\n               [x-str-reversed (string-reverse\
    \ x-str)]\n               [x-str-reversed-shifted (substring x-str-reversed shift\
    \ x-len)]\n               [x-str-reversed-shifted-reversed (string-reverse x-str-reversed-shifted)])\n\
    \          (string->number x-str-reversed-shifted-reversed))))\n  (number->string\
    \ (shift-digits x shift)))\n", "  (define (reverse-string s)\n    (string-append\
    \ (reverse (string->list s))))\n  (define (shift-string s)\n    (string-append\
    \ (reverse-string (substring s shift))\n                   (substring s 0 shift)))\n\
    \  (define (shift-string-right s)\n    (string-append (substring s (- (string-length\
    \ s) shift))\n                   (substring s 0 (- (string-length s) shift))))\n\
    \  (define (shift-string-left s)\n    (string-append (substring s shift)\n   \
    \                (substring s 0 shift)))\n  (define (shift-string-right-by-one\
    \ s)\n    (shift-string-right s))\n  (define (shift-string-left-by-one s)\n  \
    \  (shift-string-left s))\n  (define (shift-string-right-by-two s)\n    (shift-string-right-by-one\
    \ (shift-string-right-by-one s)))\n  (define (shift-string-left-by-two s)\n  \
    \  (shift-string-left-by-one (shift-string-left-by-one s)))\n  (define (shift-string-right-by-three\
    \ s)\n    (shift-string-right-by-one (shift-string-right-by-two s)))\n  (define\
    \ (shift-string-left-by-three s)\n    (shift-string-left-by-one (shift-string-left-by-two\
    \ s)))\n  (define (shift-string-right-by-four s)\n    (shift-string-right-by-two\
    \ (shift-string-right-by-two s)))\n  (define (shift-string-left-by-four s)\n \
    \   (shift-string-left-by-two (shift-string-left-by-two s)))\n  (define (shift-string-right-by-five\
    \ s)\n    (shift-string-right-by-one (shift-string-right-by-four s)))\n  (define\
    \ (shift-string-left-by-five s)\n    (shift-string-left-by-one (shift-string-left-by-four\
    \ s)))\n", "  (define (shift-helper x shift)\n    (cond\n      [(= shift 0) x]\n\
    \      [else (shift-helper (string-append (substring x 1) (substring x 0 1)) (-\
    \ shift 1))]))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-helper\
    \ x shift result)\n    (if (= x 0)\n        result\n        (shift-helper (quotient\
    \ x 10)\n                      (- shift 1)\n                      (string-append\
    \ (number->string (remainder x 10)) result))))\n  (shift-helper x shift \"\"))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        (list)\n        (append\
    \ (shift-digits (quotient x 10) shift)\n                (list (remainder x 10)))))\n\
    \  (define (reverse-digits x)\n    (if (zero? x)\n        (list)\n        (append\
    \ (reverse-digits (quotient x 10))\n                (list (remainder x 10)))))\n\
    \  (define (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits\
    \ (quotient x 10)))))\n  (define (digits->string digits)\n    (if (null? digits)\n\
    \        (string)\n        (string-append (digits->string (rest digits))\n   \
    \                    (number->string (first digits)))))\n  (if (> shift (num-digits\
    \ x))\n      (digits->string (reverse-digits x))\n      (digits->string (append\
    \ (reverse-digits (quotient x (expt 10 shift)))\n                            \
    \  (reverse-digits (remainder x (expt 10 shift)))))))\n", "  (define (helper x\
    \ shift result)\n    (if (zero? x)\n        result\n        (helper (quotient\
    \ x 10)\n                (if (zero? shift)\n                    (string-length\
    \ result)\n                    (sub1 shift))\n                (string-append (number->string\
    \ (remainder x 10))\n                               result))))\n  (helper x shift\
    \ \"\"))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (if (zero? shift)\n                                 \
    \  (length (number->string x))\n                                   (sub1 shift))\n\
    \                               (string-append result (number->string (remainder\
    \ x 10))))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits\
    \ x shift)\n    (if (= x 0)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (= shift 0)\n        digits\n        (shift-digits-right (append (cdr digits)\
    \ (list (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n \
    \   (if (null? digits)\n        \"\"\n        (string-append (number->string (car\
    \ digits)) (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (circular_shift_helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo (quotient\
    \ x 10) (expt 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? shift)\n  \
    \      x\n        (shift-digits (quotient x 10) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        0\n        (+ (* (remainder x 10) (expt 10 (number->string\
    \ x)))\n           (reverse-digits (quotient x 10)))))\n  (define (number->string\
    \ x)\n    (if (zero? x)\n        0\n        (+ 1 (number->string (quotient x 10)))))\n\
    \  (if (> shift (number->string x))\n      (reverse-digits x)\n      (shift-digits\
    \ x shift)))\n", "  (define (reverse-string str)\n    (define (reverse-string-helper\
    \ str result)\n      (if (string-empty? str)\n          result\n          (reverse-string-helper\
    \ (substring str 1)\n                                 (string-append (substring\
    \ str 0 1) result))))\n    (reverse-string-helper str \"\"))\n  (define (shift-string\
    \ str shift)\n    (if (string-empty? str)\n        \"\"\n        (string-append\
    \ (substring str shift)\n                       (substring str 0 shift))))\n \
    \ (define (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits\
    \ (quotient x 10)))))\n  (define (shift-digits x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-digits (quotient x 10) (- shift 1))))\n  (define (digits-to-string\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (number->string\
    \ (remainder x 10))\n                       (digits-to-string (quotient x 10)))))\n\
    \  (define (shift-digits-to-string x shift)\n    (digits-to-string (shift-digits\
    \ x shift)))\n  (define (shift-digits-to-string-helper x shift)\n    (if (< shift\
    \ (num-digits x))\n        (shift-digits-to-string x shift)\n        (reverse-string\
    \ (digits-to-string x))))\n  (shift-digits-to-string-helper x shift))\n", "  (define\
    \ (helper x shift result)\n    (cond\n      [(= shift 0) result]\n      [(= x\
    \ 0) (helper (quotient x 10) (- shift 1) (string-append result (number->string\
    \ (remainder x 10))))]\n      [else (helper (quotient x 10) (- shift 1) (string-append\
    \ (number->string (remainder x 10)) result))]))\n  (helper x shift \"\"))\n",
  "  (define (shift-right x shift)\n    (if (= shift 0)\n        x\n        (shift-right\
    \ (quotient x 10) (- shift 1))))\n  (define (shift-left x shift)\n    (if (= shift\
    \ 0)\n        x\n        (shift-left (* x 10) (- shift 1))))\n  (define (digits\
    \ x)\n    (if (= x 0)\n        0\n        (+ 1 (digits (quotient x 10)))))\n \
    \ (define (reverse x)\n    (define (reverse-iter x acc)\n      (if (= x 0)\n \
    \         acc\n          (reverse-iter (quotient x 10) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (reverse-iter x 0))\n  (define (shift-digits x shift)\n    (if\
    \ (> shift (digits x))\n        (reverse x)\n        (let ((right (shift-right\
    \ x shift))\n              (left (shift-left x shift)))\n          (+ left right))))\n\
    \  (number->string (shift-digits x shift)))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits-to-string digits)\n    (if\
    \ (null? digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits-to-string (cdr digits)))))\n  (digits-to-string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n\
    \  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (num-digits x)\n    (define (num-digits-iter x acc)\n      (if (= x\
    \ 0)\n          acc\n          (num-digits-iter (quotient x 10) (+ acc 1))))\n\
    \    (num-digits-iter x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (shift-left (shift-right x shift) (- (num-digits\
    \ x) shift))))\n", "  (define (shift-digit x shift)\n    (cond\n      [(= shift\
    \ 0) x]\n      [(= shift 1) (+ (* 10 x) 1)]\n      [(= shift 2) (+ (* 10 x) 2)]\n\
    \      [(= shift 3) (+ (* 10 x) 3)]\n      [(= shift 4) (+ (* 10 x) 4)]\n    \
    \  [(= shift 5) (+ (* 10 x) 5)]\n      [(= shift 6) (+ (* 10 x) 6)]\n      [(=\
    \ shift 7) (+ (* 10 x) 7)]\n      [(= shift 8) (+ (* 10 x) 8)]\n      [(= shift\
    \ 9) (+ (* 10 x) 9)]))\n  (cond\n    [(= x 0) \"0\"]\n    [(= x 1) \"1\"]\n  \
    \  [(= x 2) \"2\"]\n    [(= x 3) \"3\"]\n    [(= x 4) \"4\"]\n    [(= x 5) \"\
    5\"]\n    [(= x 6) \"6\"]\n    [(= x 7) \"7\"]\n    [(= x 8) \"8\"]\n    [(= x\
    \ 9) \"9\"]\n    [(= x 10) \"01\"]\n    [(= x 11) \"11\"]\n    [(= x 12) \"21\"\
    ]\n    [(= x 13) \"31\"]\n    [(= x 14) \"41\"]\n    [(= x 15) \"51\"]\n    [(=\
    \ x 16) \"61\"]\n    [(= x 17) \"71\"]\n    [(= x 18) \"81\"]\n    [(= x 19) \"\
    91\"]\n    [(= x 20) \"02\"]\n    [(= x 21) \"12\"]\n    [(= x 22) \"22\"]\n \
    \   [(= x 23) \"32\"]\n    [(= x 24) \"42\"]\n    [(= x 25) \"52\"]\n    [(= x\
    \ 26) \"62\"]\n    [(= x 27) \"72\"]\n    [(= x 28) \"82\"]\n    [(= x 29) \"\
    92\"]\n    [(= x 30) \"03\"]\n    [(= x 31) \"13\"]\n    [(= x 32) \"23\"]\n \
    \   [(= x 33) \"33\"]\n    [(= x 34) \"43\"]\n    [(= x 35)", "  (define (shift-digits\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits\
    \ (append (rest digits) (list (first digits))) (- shift 1))))\n  (define (reverse-digits\
    \ digits)\n    (if (null? digits)\n        '()\n        (append (reverse-digits\
    \ (rest digits)) (list (first digits)))))\n  (define (digits x)\n    (if (zero?\
    \ x)\n        '()\n        (append (digits (quotient x 10)) (list (remainder x\
    \ 10)))))\n  (number->string (apply + (map (lambda (x) (* x (expt 10 (- (length\
    \ digits) 1)))) (shift-digits (digits x) shift)))))\n", "  (define (circular_shift_helper\
    \ x shift)\n    (cond\n      [(= shift 0) x]\n      [else (circular_shift_helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (cond\n\
    \    [(< shift (string-length x)) (circular_shift_helper x shift)]\n    [else\
    \ (string-reverse x)]))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (number-of-digits x)\n    (define (number-of-digits-iter x acc)\n  \
    \    (if (zero? x)\n          acc\n          (number-of-digits-iter (quotient\
    \ x 10) (+ acc 1))))\n    (number-of-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x acc)\n      (if (zero? x)\n       \
    \   acc\n          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (shift-left (shift-right x (modulo shift (number-of-digits x))) (number-of-digits\
    \ x))))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo shift 1)\n                               (string-append\
    \ (number->string (modulo x 10))\n                                           \
    \   result))))\n  (if (zero? shift)\n      (number->string x)\n      (circular_shift_helper\
    \ x shift \"\")))\n", "  (define (circular_shift-helper x shift result)\n    (if\
    \ (zero? x)\n        result\n        (circular_shift-helper (quotient x 10)\n\
    \                               (modulo shift 1)\n                           \
    \    (string-append result (number->string (modulo x 10))))))\n  (circular_shift-helper\
    \ x shift \"\"))\n", "  (define (helper x shift)\n    (if (zero? shift)\n    \
    \    (number->string x)\n        (let* ([x-str (number->string x)]\n         \
    \      [x-len (string-length x-str)]\n               [x-str-rev (reverse x-str)]\n\
    \               [x-str-rev-shift (substring x-str-rev shift x-len)]\n        \
    \       [x-str-rev-shift-len (string-length x-str-rev-shift)]\n              \
    \ [x-str-rev-shift-rest (substring x-str-rev 0 shift)]\n               [x-str-rev-shift-rest-len\
    \ (string-length x-str-rev-shift-rest)]\n               [x-str-rev-shift-rest-rev\
    \ (reverse x-str-rev-shift-rest)]\n               [x-str-rev-shift-rest-rev-shift\
    \ (substring x-str-rev-shift-rest-rev 0 (- x-str-rev-shift-rest-len shift))])\n\
    \          (string-append x-str-rev-shift-rest-rev-shift x-str-rev-shift))))\n\
    \  (helper x shift))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n\
    \        x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (reverse x)\n    (define (reverse-iter x acc)\n     \
    \ (if (zero? x)\n          acc\n          (reverse-iter (quotient x 10) (+ (*\
    \ acc 10) (remainder x 10)))))\n    (reverse-iter x 0))\n  (define (num-digits\
    \ x)\n    (define (num-digits-iter x acc)\n      (if (zero? x)\n          acc\n\
    \          (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter\
    \ x 0))\n  (define (digits-to-string x)\n    (define (digits-to-string-iter x\
    \ acc)\n      (if (zero? x)\n          acc\n          (digits-to-string-iter (quotient\
    \ x 10) (string-append (number->string (remainder x 10)) acc))))\n    (digits-to-string-iter\
    \ x \"\"))\n  (digits-to-string (if (> shift (num-digits x))\n               \
    \         (reverse x)\n                        (shift-left (shift-right x shift)\
    \ (- shift)))))\n", "  (define (shift-helper x shift)\n    (cond\n      [(= shift\
    \ 0) x]\n      [else (shift-helper (string-append (substring x 1) (substring x\
    \ 0 1)) (- shift 1))]))\n  (shift-helper (number->string x) shift))\n", "  (define\
    \ (shift-helper x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-helper\
    \ (string-append (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (shift-helper\
    \ (number->string x) shift))\n", "  (define (shift-right x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-right (quotient x 10) (- shift 1))]))\n\
    \  (define (shift-left x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-left (* x 10) (- shift 1))]))\n  (define (reverse x)\n    (cond\n   \
    \   [(zero? x) 0]\n      [else (+ (* (reverse (quotient x 10)) 10) (remainder\
    \ x 10))]))\n  (define (num-digits x)\n    (cond\n      [(zero? x) 0]\n      [else\
    \ (+ 1 (num-digits (quotient x 10)))]))\n  (define (digits-to-string x)\n    (cond\n\
    \      [(zero? x) \"\"]\n      [else (string-append (digits-to-string (quotient\
    \ x 10))\n                           (number->string (remainder x 10)))]))\n \
    \ (define (shift-digits x shift)\n    (define (shift-digits-helper x shift)\n\
    \      (cond\n        [(zero? shift) x]\n        [else (shift-digits-helper (shift-right\
    \ x 1) (- shift 1))]))\n  (define (shift-digits-helper x shift)\n    (cond\n \
    \     [(zero? shift) x]\n      [else (shift-digits-helper (shift-right x 1) (-\
    \ shift 1))]))\n  (define (shift-digits-helper x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-helper (shift-right x 1) (- shift 1))]))\n\
    \  (define (shift-digits-helper x shift)\n    (cond\n      [(zero? shift) x]\n\
    \      [else (shift-digits-helper (shift-right x 1) (- shift 1))]))\n  (define\
    \ (shift-digits-helper x shift)\n    (cond\n      [(zero? shift) x]\n      [else\
    \ (shift-digits-helper (shift-right x 1", "  (define (shift-helper x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-helper (modulo (quotient x 10)\
    \ (expt 10 shift)) (- shift 1))))\n  (define (reverse-helper x)\n    (if (zero?\
    \ x)\n        \"\"\n        (string-append (reverse-helper (quotient x 10)) (string\
    \ (modulo x 10)))))\n  (if (< shift (number->string x).length)\n      (string-append\
    \ (substring (number->string x) shift) (substring (number->string x) 0 shift))\n\
    \      (reverse-helper (shift-helper x shift))))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits (modulo x\
    \ 10) (- shift 1))))\n  (define (digits x)\n    (if (zero? x)\n        0\n   \
    \     (+ 1 (digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (if\
    \ (zero? x)\n        0\n        (+ (* (modulo x 10) (expt 10 (digits x)))\n  \
    \         (reverse-digits (quotient x 10)))))\n  (define (shift-digits-right x\
    \ shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right (quotient\
    \ x 10) (- shift 1))))\n  (if (> shift (digits x))\n      (number->string (reverse-digits\
    \ x))\n      (number->string (shift-digits-right\n                       (shift-digits\
    \ x shift)\n                       (- (digits x) shift)))))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (circular_shift_helper x\
    \ shift \"\"))\n", "  (define (circular_shift_helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper (modulo (quotient x 10) (expt\
    \ 10 shift)) (- shift 1))))\n  (number->string (circular_shift_helper x shift)))\n",
  "  (define (reverse-string s)\n    (apply string (reverse (string->list s))))\n\
    \  (define (shift-string s)\n    (string-append (substring s shift) (substring\
    \ s 0 shift)))\n  (define (shift-string-reverse s)\n    (reverse-string (shift-string\
    \ (reverse-string s))))\n  (define (shift-string-reverse-if-needed s)\n    (if\
    \ (> shift (string-length s))\n        (shift-string-reverse s)\n        s))\n\
    \  (shift-string-reverse-if-needed (number->string x)))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (cond\n      [(zero? shift) (number->string result)]\n\
    \      [(zero? x) (number->string result)]\n      [else (circular_shift_helper\
    \ (quotient x 10) (- shift 1) (+ (* (remainder x 10) (expt 10 shift)) result))]))\n\
    \  (circular_shift_helper x shift 0))\n", "  (define (shift-digit d)\n    (if\
    \ (= d 0)\n        9\n        (- d 1)))\n  (define (shift-digits x shift)\n  \
    \  (if (= x 0)\n        0\n        (+ (* (shift-digits (quotient x 10) shift)\
    \ 10)\n           (shift-digit (remainder x 10)))))\n  (define (num-digits x)\n\
    \    (if (= x 0)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n  (define\
    \ (reverse-digits x)\n    (if (= x 0)\n        0\n        (+ (* (reverse-digits\
    \ (quotient x 10)) 10)\n           (remainder x 10))))\n  (if (> shift (num-digits\
    \ x))\n      (number->string (reverse-digits x))\n      (number->string (shift-digits\
    \ x shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n     \
    \   '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits-to-string digits)\n    (if (null? digits)\n       \
    \ \"\"\n        (string-append (number->string (car digits)) (digits-to-string\
    \ (cdr digits)))))\n  (digits-to-string (shift-digits-right (shift-digits x shift)\
    \ shift)))\n", "  (define (reverse-string s)\n    (define (reverse-string-iter\
    \ s acc)\n      (if (string-empty? s)\n          acc\n          (reverse-string-iter\
    \ (substring s 1) (string-append (substring s 0 1) acc))))\n    (reverse-string-iter\
    \ s \"\"))\n  (define (circular-shift-iter x shift acc)\n    (if (zero? shift)\n\
    \        acc\n        (circular-shift-iter (quotient x 10) (sub1 shift) (string-append\
    \ (number->string (remainder x 10)) acc))))\n  (define (num-digits x)\n    (define\
    \ (num-digits-iter x acc)\n      (if (zero? x)\n          acc\n          (num-digits-iter\
    \ (quotient x 10) (add1 acc))))\n    (num-digits-iter x 0))\n  (if (> shift (num-digits\
    \ x))\n      (reverse-string (number->string x))\n      (circular-shift-iter x\
    \ shift \"\")))\n", "  (define (circular_shift_helper x shift acc)\n    (if (zero?\
    \ x)\n        (number->string acc)\n        (circular_shift_helper (quotient x\
    \ 10)\n                               (quotient shift 10)\n                  \
    \             (+ (* (remainder x 10) shift) acc))))\n  (if (zero? shift)\n   \
    \   (number->string x)\n      (circular_shift_helper x shift 0)))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right (append\
    \ (cdr x) (list (car x))) (sub1 shift))))\n  (define (digits->string x)\n    (if\
    \ (zero? x)\n        \"\"\n        (string-append (number->string (car x)) (digits->string\
    \ (cdr x)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-right x shift)\n    (if (zero? shift)\n        x\n        (let\
    \ ([x (modulo x 10)])\n          (shift-right (quotient x 10) (- shift 1)))))\n\
    \  (define (shift-left x shift)\n    (if (zero? shift)\n        x\n        (let\
    \ ([x (modulo x 10)])\n          (shift-left (quotient x 10) (- shift 1)))))\n\
    \  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (let\
    \ ([x (modulo x 10)])\n          (shift-digits (quotient x 10) (- shift 1)))))\n\
    \  (define (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits\
    \ (quotient x 10)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n     \
    \   0\n        (+ (* (modulo x 10) (expt 10 (- (num-digits x) 1)))\n         \
    \  (reverse-digits (quotient x 10)))))\n  (define (shift-digits-right x shift)\n\
    \    (if (zero? shift)\n        x\n        (let ([x (modulo x 10)])\n        \
    \  (shift-digits-right (quotient x 10) (- shift 1)))))\n  (define (shift-digits-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (let ([x (modulo x 10)])\n\
    \          (shift-digits-left (quotient x 10) (- shift 1)))))\n  (define (shift-digits-right-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (let ([x (modulo x 10)])\n\
    \          (shift-digits-right-left (quotient x 10) (- shift 1)))))\n  (define\
    \ (shift-digits-left-right x shift)\n    (if (zero? shift)\n        x\n      \
    \  (let ([x (modulo x 10)])\n          (shift-digits-left-right (quotient x 10)\
    \ (- shift 1", "  (define (shift-helper x shift)\n    (if (= shift 0)\n      \
    \  x\n        (shift-helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-right digits shift)\n   \
    \ (if (zero? shift)\n        digits\n        (shift-digits-right (append (cdr\
    \ digits) (list (car digits))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (digits x)\n    (define (digits-iter x acc)\n      (if (zero?\
    \ x)\n          acc\n          (digits-iter (quotient x 10) (cons (remainder x\
    \ 10) acc))))\n    (digits-iter x '()))\n  (define (shift-digits x shift)\n  \
    \  (define (shift-digits-iter x shift acc)\n      (if (zero? shift)\n        \
    \  acc\n          (shift-digits-iter (cdr x) (- shift 1) (cons (car x) acc))))\n\
    \    (shift-digits-iter x shift '()))\n  (define (shift-digits-reverse x shift)\n\
    \    (define (shift-digits-reverse-iter x shift acc)\n      (if (zero? shift)\n\
    \          acc\n          (shift-digits-reverse-iter (cdr x) (- shift 1) (cons\
    \ (car x) acc))))\n    (shift-digits-reverse-iter x shift '()))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x acc)\n      (if (null? x)\n       \
    \   acc\n          (digits-to-string-iter (cdr x) (string-append (number->string\
    \ (car x)) acc))))\n    (digits-to-string-iter x \"\"))\n  (define (digits-to-integer\
    \ x)\n    (define (digits-to-integer-iter x acc)\n      (if (null? x)\n      \
    \    acc\n          (digits-to-integer-iter (cdr x) (+ (* acc 10) (car x)))))\n\
    \    (digits-to-integer-iter x 0))\n  (digits-to-string (shift-digits (digits\
    \ x) shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo (+ shift 1) (number->string x))\n           \
    \                    (string-append (number->string (modulo x 10))\n         \
    \                                     result))))\n  (circular_shift_helper x shift\
    \ \"\"))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n\
    \        (append (shift-digits (quotient x 10) shift)\n                (list (remainder\
    \ x 10)))))\n  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n  \
    \      (append (reverse-digits (quotient x 10))\n                (list (remainder\
    \ x 10)))))\n  (define (digits->string digits)\n    (if (null? digits)\n     \
    \   \"\"\n        (string-append (digits->string (cdr digits))\n             \
    \          (number->string (car digits)))))\n  (define (shift-digits-right digits\
    \ shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right (append\
    \ (cdr digits) (list (car digits))) (- shift 1))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (reverse-digits x)\n    (define\
    \ (reverse-digits-iter x acc)\n      (if (zero? x)\n          acc\n          (reverse-digits-iter\
    \ (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter\
    \ x 0))\n  (define (num-digits x)\n    (define (num-digits-iter x acc)\n     \
    \ (if (zero? x)\n          acc\n          (num-digits-iter (quotient x 10) (+\
    \ 1 acc))))\n    (num-digits-iter x 0))\n  (define (shift-digits x shift)\n  \
    \  (define (shift-digits-iter x shift acc)\n      (if (zero? x)\n          acc\n\
    \          (shift-digits-iter (quotient x 10) (remainder (+ shift 1) (num-digits\
    \ x)) (+ (* acc 10) (remainder x 10)))))\n    (shift-digits-iter x shift 0))\n\
    \  (number->string (shift-digits (reverse-digits x) shift)))\n", "  (define (shift-digits\
    \ x shift)\n    (define (shift-digits-iter x shift acc)\n      (if (zero? x)\n\
    \          acc\n          (shift-digits-iter (quotient x 10)\n               \
    \              shift\n                             (cons (remainder x 10) acc))))\n\
    \    (shift-digits-iter x shift '()))\n  (define (shift-digits-right x shift)\n\
    \    (define (shift-digits-right-iter x shift acc)\n      (if (zero? shift)\n\
    \          acc\n          (shift-digits-right-iter (cdr x)\n                 \
    \                  (- shift 1)\n                                   (cons (car\
    \ x) acc))))\n    (shift-digits-right-iter x shift '()))\n  (define (shift-digits-left\
    \ x shift)\n    (define (shift-digits-left-iter x shift acc)\n      (if (zero?\
    \ shift)\n          acc\n          (shift-digits-left-iter (cdr x)\n         \
    \                         (- shift 1)\n                                  (append\
    \ acc (list (car x))))))\n    (shift-digits-left-iter x shift '()))\n  (define\
    \ (digits-to-string digits)\n    (define (digits-to-string-iter digits acc)\n\
    \      (if (null? digits)\n          acc\n          (digits-to-string-iter (cdr\
    \ digits)\n                                 (string-append (number->string (car\
    \ digits)) acc))))\n    (digits-to-string-iter digits \"\"))\n  (define (reverse-digits\
    \ digits)\n    (define (reverse-digits-iter digits acc)\n      (if (null? digits)\n\
    \          acc\n          (reverse-digits-iter (cdr digits)\n                \
    \               (cons (car digits) acc))))\n    (reverse-digits-iter digits '()))\n\
    \  (define (count-digits x)\n    (define (count-digits-iter x acc)\n      (if\
    \ (zero? x)\n          acc\n          (count-digits-iter (quotient x 10)\n   \
    \                          (+ acc 1))))\n    (count-digits-iter x 0))\n ", " \
    \ (define (reverse-string str)\n    (if (string=? str \"\")\n        \"\"\n  \
    \      (string-append (reverse-string (substring str 1)) (substring str 0 1))))\n\
    \  (define (shift-string str)\n    (if (string=? str \"\")\n        \"\"\n   \
    \     (string-append (substring str 1) (substring str 0 1))))\n  (define (shift-string-n\
    \ str n)\n    (if (= n 0)\n        str\n        (shift-string-n (shift-string\
    \ str) (- n 1))))\n  (define (num-digits x)\n    (if (= x 0)\n        0\n    \
    \    (+ 1 (num-digits (/ x 10)))))\n  (define (digits x)\n    (if (= x 0)\n  \
    \      \"\"\n        (string-append (digits (/ x 10)) (number->string (remainder\
    \ x 10)))))\n  (if (= shift 0)\n      (digits x)\n      (let ((n (num-digits x)))\n\
    \        (if (> shift n)\n            (reverse-string (digits x))\n          \
    \  (shift-string-n (digits x) shift)))))\n", "  (define (shift-right x shift)\n\
    \    (if (zero? shift)\n        x\n        (shift-right (quotient x 10) (- shift\
    \ 1))))\n  (define (shift-left x shift)\n    (if (zero? shift)\n        x\n  \
    \      (shift-left (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n   \
    \ (define (reverse-digits-helper x acc)\n      (if (zero? x)\n          acc\n\
    \          (reverse-digits-helper (quotient x 10) (+ (* acc 10) (remainder x 10)))))\n\
    \    (reverse-digits-helper x 0))\n  (define (num-digits x)\n    (define (num-digits-helper\
    \ x acc)\n      (if (zero? x)\n          acc\n          (num-digits-helper (quotient\
    \ x 10) (+ acc 1))))\n    (num-digits-helper x 0))\n  (number->string (+ (shift-left\
    \ (shift-right x shift) (- (num-digits x) shift))\n                     (shift-left\
    \ (reverse-digits (shift-right x shift)) shift))))\n", "  (define (reverse-digits\
    \ x)\n    (define (reverse-digits-iter x acc)\n      (if (zero? x)\n         \
    \ acc\n          (reverse-digits-iter (quotient x 10) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (reverse-digits-iter x 0))\n  (define (shift-digits x shift)\n\
    \    (define (shift-digits-iter x shift acc)\n      (if (zero? x)\n          acc\n\
    \          (shift-digits-iter (quotient x 10) (- shift 1) (+ (* acc 10) (remainder\
    \ x 10)))))\n    (shift-digits-iter x shift 0))\n  (define (num-digits x)\n  \
    \  (define (num-digits-iter x acc)\n      (if (zero? x)\n          acc\n     \
    \     (num-digits-iter (quotient x 10) (+ acc 1))))\n    (num-digits-iter x 0))\n\
    \  (if (> shift (num-digits x))\n      (number->string (reverse-digits x))\n \
    \     (number->string (shift-digits x shift))))\n", "  (define (circular_shift_helper\
    \ x shift acc)\n    (if (zero? x)\n        (number->string acc)\n        (circular_shift_helper\
    \ (quotient x 10)\n                               shift\n                    \
    \           (+ (* acc 10) (remainder x 10)))))\n  (if (zero? shift)\n      (number->string\
    \ x)\n      (circular_shift_helper x shift 0)))\n", "  (define (circular_shift_helper\
    \ x shift result)\n    (if (zero? x)\n        result\n        (circular_shift_helper\
    \ (quotient x 10)\n                               (modulo shift 1)\n         \
    \                      (string-append (number->string (modulo x 10))\n       \
    \                                       result))))\n  (if (> shift (string-length\
    \ (number->string x)))\n      (string-reverse (number->string x))\n      (circular_shift_helper\
    \ x shift \"\")))\n", "  (define (reverse-string s)\n    (string-append (substring\
    \ s 1) (substring s 0 1)))\n  (define (shift-string s)\n    (string-append (substring\
    \ s 1) (substring s 0 1)))\n  (define (circular-shift-helper s shift)\n    (if\
    \ (= shift 0)\n        s\n        (circular-shift-helper (shift-string s) (- shift\
    \ 1))))\n  (if (< shift (string-length (number->string x)))\n      (circular-shift-helper\
    \ (number->string x) shift)\n      (reverse-string (number->string x))))\n", " \
    \ (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (modulo x 10) (- shift 1))))\n  (define (shift-string x shift)\n    (if (zero?\
    \ shift)\n        x\n        (string-append (shift-string (substring x 1) (- shift\
    \ 1))\n                       (substring x 0 1))))\n  (define (num-digits x)\n\
    \    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient x 10)))))\n\
    \  (if (> shift (num-digits x))\n      (shift-string (number->string x) 0)\n \
    \     (shift-string (number->string x) (shift-digits x shift))))\n", "  (define\
    \ (circular_shift_helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   (modulo (+ shift 1) (number->string x))\n                               (string-append\
    \ (number->string (modulo x 10))\n                                           \
    \   result))))\n  (circular_shift_helper x shift \"\"))\n", "  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (reverse-digits\
    \ (quotient x 10))\n                       (number->string (remainder x 10)))))\n\
    \  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (string-append (reverse-digits x)\n                                     (reverse-digits\
    \ x))\n                      (- shift 1))))\n  (shift-digits (number->string x)\
    \ shift))\n", "  (define (reverse-string s)\n    (apply string (reverse (string->list\
    \ s))))\n  (define (shift-string s shift)\n    (string-append (substring s shift)\
    \ (substring s 0 shift)))\n  (define (shift-string-right s shift)\n    (shift-string\
    \ (reverse-string s) shift))\n  (define (shift-string-left s shift)\n    (reverse-string\
    \ (shift-string (reverse-string s) shift)))\n  (define (shift-string-circular\
    \ s shift)\n    (if (> shift (string-length s))\n        (reverse-string s)\n\
    \        (shift-string-left s shift)))\n  (shift-string-circular (number->string\
    \ x) shift))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n      \
    \  '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (circular_shift_iter x shift acc)\n    (if (zero? x)\n        (number->string\
    \ acc)\n        (circular_shift_iter (quotient x 10)\n                       \
    \      (if (> shift 0) (sub1 shift) shift)\n                             (if (>\
    \ shift 0)\n                                 (modulo (+ (* acc 10) (remainder\
    \ x 10))\n                                         (expt 10 (number->string x)\
    \ (string-length (number->string x))))\n                                 (modulo\
    \ (+ (* acc 10) (remainder x 10))\n                                         (expt\
    \ 10 (number->string x) (string-length (number->string x))))))))\n  (circular_shift_iter\
    \ x shift 0))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n \
    \       x\n        (shift-helper (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define\
    \ (circular_shift_helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   (modulo shift 1)\n                               (string-append (number->string\
    \ (modulo x 10))\n                                              result))))\n \
    \ (circular_shift_helper x shift \"\"))\n", "  (define (shift-digits x shift)\n\
    \    (define (shift-digit x shift)\n      (modulo (+ x (* shift 10)) 10))\n  (define\
    \ (shift-digits-iter x shift)\n    (if (zero? x)\n        '()\n        (cons (shift-digit\
    \ x shift)\n              (shift-digits-iter (quotient x 10) shift))))\n  (string-join\
    \ (reverse (shift-digits-iter x shift)) \"\"))\n", "  (define (shift-helper x\
    \ shift)\n    (if (zero? shift)\n        x\n        (shift-helper (modulo (quotient\
    \ x 10) (expt 10 shift)) (- shift 1))))\n  (define (reverse-helper x)\n    (if\
    \ (zero? x)\n        \"\"\n        (string-append (reverse-helper (quotient x\
    \ 10)) (number->string (modulo x 10)))))\n  (if (< shift (number->string x))\n\
    \      (reverse-helper x)\n      (number->string (shift-helper x shift))))\n",
  "  (define (circular_shift-helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift-helper (quotient x 10)\n                            \
    \   (modulo shift 1)\n                               (string-append (number->string\
    \ (modulo x 10))\n                                              result))))\n \
    \ (circular_shift-helper x shift \"\"))\n", "  (define (reverse-string s)\n  \
    \  (define (reverse-string-helper s i)\n      (if (= i (string-length s))\n  \
    \        \"\"\n          (string-append (reverse-string-helper s (+ i 1)) (string\
    \ (string-ref s i)))))\n    (reverse-string-helper s 0))\n  (define (circular-shift-helper\
    \ x shift)\n    (if (= shift 0)\n        (number->string x)\n        (let* ([s\
    \ (number->string x)]\n               [l (string-length s)]\n               [r\
    \ (reverse-string s)]\n               [d (string-append (substring r 0 (- l shift))\
    \ (substring r (- l shift)))])\n          (circular-shift-helper (string->number\
    \ d) (- shift 1)))))\n  (circular-shift-helper x shift))\n", "  (define (shift-digits\
    \ x shift)\n    (if (zero? x)\n        '()\n        (cons (remainder x 10) (shift-digits\
    \ (quotient x 10) shift))))\n  (define (shift-digits-helper x shift)\n    (if\
    \ (zero? shift)\n        x\n        (shift-digits-helper (append (cdr x) (list\
    \ (car x))) (- shift 1))))\n  (define (digits-to-string x)\n    (if (zero? x)\n\
    \        \"\"\n        (string-append (number->string (car x)) (digits-to-string\
    \ (cdr x)))))\n  (digits-to-string (shift-digits-helper (shift-digits x shift)\
    \ shift)))\n", "  (define (shift-right x shift)\n    (if (zero? shift)\n     \
    \   x\n        (shift-right (quotient x 10) (- shift 1))))\n  (define (shift-left\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-left (* x 10) (-\
    \ shift 1))))\n  (define (num-digits x)\n    (if (zero? x)\n        0\n      \
    \  (+ 1 (num-digits (quotient x 10)))))\n  (define (reverse-digits x)\n    (if\
    \ (zero? x)\n        0\n        (+ (* (remainder x 10) (expt 10 (- (num-digits\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (define (digits-to-string\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (number->string\
    \ (remainder x 10))\n                       (digits-to-string (quotient x 10)))))\n\
    \  (digits-to-string\n   (if (> shift (num-digits x))\n       (reverse-digits\
    \ x)\n       (shift-left (shift-right x shift) (- (num-digits x) shift)))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (cond\n\
    \      [(zero? shift) x]\n      [else (shift-digits (modulo x 10) (- shift 1))]))\n\
    \  (define (shift-digits-str x shift)\n    (cond\n      [(zero? shift) (number->string\
    \ x)]\n      [else (string-append (shift-digits-str (modulo x 10) (- shift 1))\n\
    \                           (number->string (quotient x 10)))]))\n  (shift-digits-str\
    \ (shift-digits x shift) shift))\n", "  (define (shift-right x shift)\n    (define\
    \ (shift-right-helper x shift)\n      (if (zero? shift)\n          x\n       \
    \   (shift-right-helper (quotient x 10) (- shift 1))))\n    (define (shift-left\
    \ x shift)\n      (define (shift-left-helper x shift)\n        (if (zero? shift)\n\
    \            x\n            (shift-left-helper (* x 10) (- shift 1))))\n    (if\
    \ (zero? shift)\n        x\n        (shift-left (shift-right-helper x shift) shift)))\n\
    \  (define (num-digits x)\n    (define (num-digits-helper x count)\n      (if\
    \ (zero? x)\n          count\n          (num-digits-helper (quotient x 10) (+\
    \ count 1))))\n    (num-digits-helper x 0))\n  (define (reverse-digits x)\n  \
    \  (define (reverse-digits-helper x result)\n      (if (zero? x)\n          result\n\
    \          (reverse-digits-helper (quotient x 10) (+ (* result 10) (remainder\
    \ x 10)))))\n    (reverse-digits-helper x 0))\n  (define (digits-to-string x)\n\
    \    (define (digits-to-string-helper x result)\n      (if (zero? x)\n       \
    \   result\n          (digits-to-string-helper (quotient x 10) (string-append\
    \ (number->string (remainder x 10)) result))))\n    (digits-to-string-helper x\
    \ \"\"))\n  (if (> shift (num-digits x))\n      (digits-to-string (reverse-digits\
    \ x))\n      (digits-to-string (shift-right x shift))))\n", "  (define (shift-helper\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-helper (string-append\
    \ (substring x 1) (substring x 0 1)) (- shift 1))]))\n  (define (reverse-helper\
    \ x)\n    (cond\n      [(zero? (string-length x)) \"\"]\n      [else (string-append\
    \ (reverse-helper (substring x 1)) (substring x 0 1))]))\n  (cond\n    [(> shift\
    \ (string-length (number->string x))) (reverse-helper (number->string x))]\n \
    \   [else (shift-helper (number->string x) shift)]))\n", "  (define (shift-helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-helper (modulo x\
    \ 10) (- shift 1))))\n  (define (reverse-helper x)\n    (if (zero? x)\n      \
    \  \"\"\n        (string-append (reverse-helper (quotient x 10)) (number->string\
    \ (modulo x 10)))))\n  (if (< shift (number->string x) (string-length))\n    \
    \  (reverse-helper x)\n      (string-append (number->string (shift-helper x shift))\
    \ (reverse-helper (quotient x 10)))))\n", "  (define (circular_shift_helper x\
    \ shift)\n    (if (zero? shift)\n        x\n        (circular_shift_helper (modulo\
    \ (+ (* x 10) (quotient x 10)) 100) (- shift 1))))\n  (number->string (circular_shift_helper\
    \ x shift)))\n", "  (define (circular_shift_helper x shift result)\n    (if (zero?\
    \ x)\n        result\n        (circular_shift_helper (quotient x 10)\n       \
    \                        (modulo (+ shift 1) (number->string x))\n           \
    \                    (string-append (number->string (modulo x 10))\n         \
    \                                     result))))\n  (circular_shift_helper x shift\
    \ \"\"))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n      \
    \  x\n        (shift-helper (modulo (quotient x 10) (expt 10 shift)) (- shift\
    \ 1))))\n  (define (reverse-helper x)\n    (if (zero? x)\n        \"\"\n     \
    \   (string-append (reverse-helper (quotient x 10)) (number->string (modulo x\
    \ 10)))))\n  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n\
    \        (shift-digits (modulo (quotient x 10) (expt 10 shift)) (- shift 1))))\n\
    \  (define (reverse-digits x)\n    (if (zero? x)\n        \"\"\n        (string-append\
    \ (reverse-digits (quotient x 10)) (number->string (modulo x 10)))))\n  (define\
    \ (num-digits x)\n    (if (zero? x)\n        0\n        (+ 1 (num-digits (quotient\
    \ x 10)))))\n  (cond ((> shift (num-digits x)) (reverse-digits x))\n        ((=\
    \ shift (num-digits x)) (number->string x))\n        (else (number->string (shift-digits\
    \ x shift)))))\n", "  (define (circular_shift_helper x shift)\n    (if (zero?\
    \ shift)\n        x\n        (circular_shift_helper (quotient x 10) (- shift 1))))\n\
    \  (define (reverse_digits x)\n    (define (reverse_digits_helper x acc)\n   \
    \   (if (zero? x)\n          acc\n          (reverse_digits_helper (quotient x\
    \ 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse_digits_helper x 0))\n \
    \ (define (num_digits x)\n    (define (num_digits_helper x acc)\n      (if (zero?\
    \ x)\n          acc\n          (num_digits_helper (quotient x 10) (+ acc 1))))\n\
    \    (num_digits_helper x 0))\n  (define (digits_to_string x)\n    (define (digits_to_string_helper\
    \ x acc)\n      (if (zero? x)\n          acc\n          (digits_to_string_helper\
    \ (quotient x 10) (string-append (number->string (remainder x 10)) acc))))\n \
    \   (digits_to_string_helper x \"\"))\n  (if (> shift (num_digits x))\n      (digits_to_string\
    \ (reverse_digits x))\n      (digits_to_string (circular_shift_helper x shift))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? shift)\n        x\n        (shift-digits\
    \ (modulo (quotient x 10) (expt 10 shift)) (- shift 1))))\n  (define (reverse-digits\
    \ x)\n    (if (zero? x)\n        x\n        (+ (* (modulo x 10) (expt 10 (- (number->string\
    \ x) 1)))\n           (reverse-digits (quotient x 10)))))\n  (number->string (if\
    \ (> shift (number->string x))\n                      (reverse-digits x)\n   \
    \                   (shift-digits x shift))))\n", "  (define (shift-digit x shift)\n\
    \    (cond\n      [(= shift 0) x]\n      [(= shift 1) (modulo (+ x 1) 10)]\n \
    \     [(= shift 2) (modulo (+ x 2) 10)]\n      [(= shift 3) (modulo (+ x 3) 10)]\n\
    \      [(= shift 4) (modulo (+ x 4) 10)]\n      [(= shift 5) (modulo (+ x 5) 10)]\n\
    \      [(= shift 6) (modulo (+ x 6) 10)]\n      [(= shift 7) (modulo (+ x 7) 10)]\n\
    \      [(= shift 8) (modulo (+ x 8) 10)]\n      [(= shift 9) (modulo (+ x 9) 10)]))\n\
    \  (define (shift-digits x shift)\n    (cond\n      [(= x 0) \"\"]\n      [else\
    \ (string-append (shift-digits (quotient x 10) shift)\n                      \
    \     (string (shift-digit (modulo x 10) shift)))]))\n  (shift-digits x shift))\n",
  "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift_helper (modulo (quotient x 10) (expt 10 shift)) (- shift\
    \ 1))))\n  (number->string (circular_shift_helper x shift)))\n", "  (define (helper\
    \ x shift)\n    (if (zero? shift)\n        x\n        (helper (string-append (substring\
    \ x 1) (substring x 0 1)) (- shift 1))))\n  (if (> (string-length (number->string\
    \ x)) shift)\n      (helper (number->string x) shift)\n      (reverse (number->string\
    \ x))))\n", "  (define (shift-digits x shift)\n    (define (shift-digits-iter\
    \ x shift acc)\n      (if (zero? x)\n          acc\n          (shift-digits-iter\
    \ (quotient x 10)\n                             (if (zero? shift)\n          \
    \                       (if (zero? acc)\n                                    \
    \ 1\n                                     (quotient acc 10))\n               \
    \                  (quotient shift 10))\n                             (if (zero?\
    \ shift)\n                                 (modulo x 10)\n                   \
    \              (modulo shift 10)))))\n    (shift-digits-iter x shift 0))\n  (number->string\
    \ (shift-digits x shift)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
