language: racket
name: HumanEval_15_string_sequence
results:
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnupfikm_.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnupfikm_.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpev68pzg6.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpev68pzg6.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond ((=\
    \ n 0) \"0\")\n        (else (string-append (number->string n) \" \" (string_sequence\
    \ (- n 1))))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_9drr42.rkt:18:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_9drr42.rkt:19:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3nze6_0o.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3nze6_0o.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (range 0 (add1 n))) \" \"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbkepgd0s.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbkepgd0s.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwo3dtj1_.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpwo3dtj1_.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (local\
    \ [(define (string_sequence-iter n acc)\n            (if (= n 0)\n           \
    \     acc\n                (string_sequence-iter (- n 1) (string-append acc \"\
    \ \" (number->string n)))))\n          ]\n    (string_sequence-iter n \"0\")))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate string_sequence))\n\
    \    (check-equal? (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1\
    \ 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmzzl_vdj.rkt:22:4

    actual:     "0 3 2 1"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmzzl_vdj.rkt:23:4

    actual:     "0 10 9 8 7 6 5 4 3 2 1"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpggqmusm3.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpggqmusm3.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bydr7av.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bydr7av.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1kybc4o2.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1kybc4o2.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpepsb_1s8.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmpepsb_1s8.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklbmj109.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpklbmj109.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqvegfqb1.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqvegfqb1.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpiehhp8l4.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmpiehhp8l4.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplba13i0g.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplba13i0g.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp09ceeo2z.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmp09ceeo2z.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (range 0 (add1 n))) \" \"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4pcxjf0p.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4pcxjf0p.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ukemkhj.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ukemkhj.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyoso3n.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdyyoso3n.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnhep8si0.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnhep8si0.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnht06vqe.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnht06vqe.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07i5m9ld.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07i5m9ld.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptka0495y.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmptka0495y.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n 1))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpyabr7gs6.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmpyabr7gs6.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyh70oah1.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyh70oah1.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsmc541rs.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsmc541rs.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2ar4_s7c.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2ar4_s7c.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvpkni8zn.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvpkni8zn.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uhjtm3w.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_uhjtm3w.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnoh6k05a.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnoh6k05a.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9lir76j_.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9lir76j_.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2401u5ma.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2401u5ma.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpenylzg42.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpenylzg42.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnmxc4jov.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnmxc4jov.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7jn1juj.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph7jn1juj.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3w53t04g.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3w53t04g.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g3_4r60.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g3_4r60.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (string-append (number->string n) \" \")\n      (string-append (string_sequence\
    \ (- n 1)) (number->string n) \" \")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mmallix.rkt:18:4

    actual:     "0 "

    expected:   "0"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mmallix.rkt:19:4

    actual:     "0 1 2 3 "

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mmallix.rkt:20:4

    actual:     "0 1 2 3 4 5 6 7 8 9 10 "

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (string_sequence-iter n acc)\n    (if (= n 0)\n        (string-append acc \"\
    0\")\n        (string_sequence-iter (- n 1) (string-append acc (number->string\
    \ n) \" \"))))\n  (string_sequence-iter n \"\"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppg7001do.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppg7001do.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxpx5_ct3.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxpx5_ct3.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1w0v7uj.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn1w0v7uj.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprck4nd2w.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprck4nd2w.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ic0l2s6.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8ic0l2s6.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiqimd4nb.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiqimd4nb.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzpa_dcg.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzpa_dcg.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0)\n     \"0\"]\n    [else\n     (string-append (number->string n)\
    \ \" \" (string_sequence (- n 1)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9gtipbgz.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9gtipbgz.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvv95isj.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvv95isj.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp88qpxrdw.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp88qpxrdw.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkr8uwe87.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkr8uwe87.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond ((=\
    \ n 0) \"0\")\n        (else (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn5wb4hh1.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn5wb4hh1.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe5g4qh7t.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe5g4qh7t.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7md90v5g.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp7md90v5g.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (string-append (number->string n) \" \")\n      (string-append (string_sequence\
    \ (- n 1)) (number->string n) \" \")))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2sa_i8g.rkt:18:4

    actual:     "0 "

    expected:   "0"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2sa_i8g.rkt:19:4

    actual:     "0 1 2 3 "

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx2sa_i8g.rkt:20:4

    actual:     "0 1 2 3 4 5 6 7 8 9 10 "

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp8h3icjea.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmp8h3icjea.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpliqx844i.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpliqx844i.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_0aqx4md.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_0aqx4md.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_pusi911.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_pusi911.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp92tbiwq1.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp92tbiwq1.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7lemku2.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo7lemku2.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2lhxzoj.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_2lhxzoj.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (helper n acc)\n    (if (= n 0)\n        (string-append acc \"0\")\n       \
    \ (helper (- n 1) (string-append acc (number->string n) \" \"))))\n  (helper n\
    \ \"\"))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9jbmjpm.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9jbmjpm.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjtojc66.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjjtojc66.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp463p665g.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp463p665g.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvd1wl5c4.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvd1wl5c4.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyem9eycq.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyem9eycq.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb38j3i5f.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpb38j3i5f.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91lkiw2c.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp91lkiw2c.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (string_sequence_iter n acc)\n    (if (= n 0)\n        (string-append acc \"\
    0\")\n        (string_sequence_iter (- n 1) (string-append acc (number->string\
    \ n) \" \"))))\n  (string_sequence_iter n \"\"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_unz_ob.rkt:21:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpp_unz_ob.rkt:22:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07a5cb_i.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp07a5cb_i.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvy8kslv.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbvy8kslv.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpehqmkq2v.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpehqmkq2v.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjlv8yh1.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprjlv8yh1.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9x2rzw3.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpk9x2rzw3.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgyyp3qbb.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgyyp3qbb.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_osju64n.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_osju64n.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmproxw9xly.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmproxw9xly.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiruqjxtd.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpiruqjxtd.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpj_6k8it8.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmpj_6k8it8.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsfc8_2dp.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsfc8_2dp.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (string-join\
    \ (map number->string (iota n))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmpucs77n79.rkt:9:36: iota: unbound identifier\n  in: iota\n  location...:\n\
    \   /tmp/tmpucs77n79.rkt:9:36\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      (number->string n)\n      (string-append (number->string n) \" \"\
    \ (string_sequence (- n 1)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"\
    0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp859eq8uf.rkt:19:4

    actual:     "3 2 1 0"

    expected:   "0 1 2 3"

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp859eq8uf.rkt:20:4

    actual:     "10 9 8 7 6 5 4 3 2 1 0"

    expected:   "0 1 2 3 4 5 6 7 8 9 10"

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (cond\n\
    \    [(= n 0) \"0\"]\n    [else (string-append (string_sequence (- n 1)) \" \"\
    \ (number->string n))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate string_sequence))\n    (check-equal? (candidate 0) \"0\"\
    )\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate\
    \ 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (define\
    \ (string_sequence-iter n acc)\n    (if (= n 0)\n        (string-append (number->string\
    \ n) acc)\n        (string_sequence-iter (- n 1) (string-append \" \" (number->string\
    \ n) acc))))\n  (string_sequence-iter n \"\"))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate string_sequence))\n    (check-equal?\
    \ (candidate 0) \"0\")\n    (check-equal? (candidate 3) \"0 1 2 3\")\n    (check-equal?\
    \ (candidate 10) \"0 1 2 3 4 5 6 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Return a string containing space-delimited numbers\
    \ starting from 0 upto n inclusive.\n;; >>> string_sequence(0)\n;; '0'\n;; >>>\
    \ string_sequence(5)\n;; '0 1 2 3 4 5'\n(define (string_sequence n)\n  (if (=\
    \ n 0)\n      \"0\"\n      (string-append (string_sequence (- n 1)) \" \" (number->string\
    \ n))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ string_sequence))\n    (check-equal? (candidate 0) \"0\")\n    (check-equal?\
    \ (candidate 3) \"0 1 2 3\")\n    (check-equal? (candidate 10) \"0 1 2 3 4 5 6\
    \ 7 8 9 10\")\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
