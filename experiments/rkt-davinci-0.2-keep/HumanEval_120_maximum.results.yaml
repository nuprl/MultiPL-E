name: HumanEval_120_maximum
language: racket
results:
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7b6zdosl.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp14p88gcm.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (zero? k)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpglh6ooyj.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4pjsmrpi.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (let loop ((arr arr)\n             (k k)\n        \
    \     (res '()))\n    (if (zero? k)\n        res\n        (loop (remove (apply\
    \ max arr) arr)\n              (- k 1)\n              (cons (apply max arr) res)))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpia5_ya54.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst)\n    (if (or (null? lst) (= k 0))\n\
    \        '()\n        (cons (max lst) (max-k (remove (max lst) lst)))))\n  (max-k\
    \ arr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 -4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 2 1 2 -1 -2 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(123 -123 20 0 1 2 -3)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcg4z0xpf.rkt:34:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(-123 20 0 1 2 -3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:35:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(5 15 0 3 -13 -8 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-1 0 2 5 3 -10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 0 5 -7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcg4z0xpf.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoctqsx7w.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (insert x lst)\n    (cond ((null? lst) (list\
    \ x))\n          ((> x (car lst)) (cons x lst))\n          (else (cons (car lst)\
    \ (insert x (cdr lst))))))\n  (define (loop lst k)\n    (cond ((= k 0) lst)\n\
    \          ((null? lst) lst)\n          (else (loop (insert (car arr) lst) (-\
    \ k 1)))))\n  (loop '() k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:34:4\n\
    actual:     '()\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:35:4\nactual:\
    \     '()\nexpected:   '(4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:36:4\nactual:     '()\n\
    expected:   '(2)\n--------------------\n--------------------\nFAILURE\nname: \
    \      check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:37:4\nactual:     '()\n\
    expected:   '(2 20 123)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:38:4\nactual:     '()\n\
    expected:   '(0 1 2 20)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:39:4\nactual:     '()\n\
    expected:   '(-13 -8 0 0 3 5 15)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:40:4\nactual:\
    \     '()\nexpected:   '(3 5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:41:4\nactual:     '()\n\
    expected:   '(5)\n--------------------\n--------------------\nFAILURE\nname: \
    \      check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:42:4\nactual:     '()\n\
    expected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp60ca53th.rkt:43:4\nactual:     '()\n\
    expected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (or (null? arr) (=\
    \ k 0))\n        '()\n        (let ([max (apply max arr)])\n          (cons max\
    \ (helper (remove max arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6l3bi0yt.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k acc)\n    (if (zero? k)\n   \
    \     acc\n        (helper (remove (max arr) arr) (- k 1) (cons (max arr) acc))))\n\
    \  (helper arr k '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 -4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 2 1 2 -1 -2 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(123 -123 20 0 1 2 -3)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdifc_7g9.rkt:34:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(-123 20 0 1 2 -3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:35:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(5 15 0 3 -13 -8 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-1 0 2 5 3 -10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 0 5 -7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdifc_7g9.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond [(empty? arr) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (second\
    \ arr)))]\n          [else (cons (max (first arr) (second arr)) (helper (rest\
    \ arr) (- k 1)))]))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:31:4\n\
    \nsecond: list contains too few elements\n  list: '(5)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:34:4\n\
    actual:     '(123 20 20)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:35:4\nactual:\
    \     '(20 20 1 2)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:36:4\n\nsecond:\
    \ list contains too few elements\n  list: '(0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:37:4\nactual:\
    \     '(0 2)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:38:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:39:4\n\nsecond: list\
    \ contains too few elements\n  list: '(-4)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxhpsec7t.rkt:40:4\n\nsecond:\
    \ list contains too few elements\n  list: '(10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp16x7dzhe.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1q7rclo3.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphjbflt2h.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptt4nc99x.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (maximum-helper arr k)\n    (cond [(empty?\
    \ arr) empty]\n          [(= k 0) empty]\n          [(= k 1) (list (max (first\
    \ arr) (maximum-helper (rest arr) (- k 1))))]\n          [else (cons (max (first\
    \ arr) (maximum-helper (rest arr) (- k 1)))\n                      (maximum-helper\
    \ (rest arr) (- k 1)))]))\n  (maximum-helper arr k))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3qab7m9x.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxrtf8bi5.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (cond\n      [(empty? arr)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define max (max-k (rest\
    \ arr) (- k 1)))\n       (if (> (first arr) (first max))\n           (cons (first\
    \ arr) max)\n           (cons (first max) (rest max)))]))\n  (max-k arr k))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpoc8p_wg5.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoc8p_wg5.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoc8p_wg5.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoc8p_wg5.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoc8p_wg5.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoc8p_wg5.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoc8p_wg5.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoc8p_wg5.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpoc8p_wg5.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpoc8p_wg5.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort (take arr k) >))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:27:4\nactual:\
    \     '(4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:28:4\nactual:\
    \     '(-3)\nexpected:   '(2)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:29:4\nactual:     '(123\
    \ 20 -123)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:30:4\nactual:\
    \     '(20 1 0 -123)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:31:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:32:4\n\
    actual:     '(0 -1)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:33:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:34:4\nactual:     '(4\
    \ -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeq_tjx_3.rkt:35:4\nactual:     '(10\
    \ -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (cond [(empty? arr)\
    \ empty]\n          [(= k 0) empty]\n          [(= k 1) (list (apply max arr))]\n\
    \          [else (cons (apply max arr) (max-k-helper (remove (apply max arr) arr)\
    \ (- k 1)))]))\n  (max-k-helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4gkn1rvx.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpowjedfyw.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqblg62ag.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptgqcsf5u.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5x_efy5j.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max arr)\n    (if (null? (cdr arr))\n    \
    \    (car arr)\n        (if (> (car arr) (max (cdr arr)))\n            (car arr)\n\
    \            (max (cdr arr)))))\n  (define (remove-max arr)\n    (if (null? (cdr\
    \ arr))\n        '()\n        (if (= (max arr) (car arr))\n            (cdr arr)\n\
    \            (cons (car arr) (remove-max (cdr arr))))))\n  (define (max-k arr\
    \ k)\n    (if (= k 0)\n        '()\n        (cons (max arr) (max-k (remove-max\
    \ arr) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:42:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:45:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:46:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:47:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:48:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:50:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdz6s0gjq.rkt:51:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max arr)])\n          (cons max (helper (remove max\
    \ arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplu1qk90t.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxamw3tr_.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (zero? k)\n        '()\n\
    \        (cons (apply max arr)\n              (max-k (remove (apply max arr) arr)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8346w1kj.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1dqmo5xl.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputnigr7c.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-nums arr k)\n    (cond [(empty? arr) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (max-nums\
    \ (rest arr) 0)))]\n          [else (list (max (first arr) (max-nums (rest arr)\
    \ 0))\n                    (max-nums (rest arr) (- k 1)))]))\n  (max-nums arr\
    \ k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzvlqil3o.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (car (sort > lst))\n              (max-k (remove (car (sort > lst))\
    \ lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:35:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:36:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:37:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:38:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:39:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv0isf4hn.rkt:40:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:>>\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9cqkq1ul.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (define (max-k-nums-iter\
    \ arr k)\n      (if (zero? k)\n          '()\n          (let ([max (apply max\
    \ arr)])\n            (cons max (max-k-nums-iter (remove max arr) (- k 1))))))\n\
    \    (max-k-nums-iter arr k))\n  (sort (max-k-nums arr k) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define (max-k-helper lst\
    \ k)\n         (cond\n           [(empty? lst) empty]\n           [(= k 0) empty]\n\
    \           [else\n            (define (max-k-helper-helper lst k)\n         \
    \     (cond\n                [(empty? lst) empty]\n                [(= k 0) empty]\n\
    \                [else\n                 (define (max-k-helper-helper-helper lst\
    \ k)\n                   (cond\n                     [(empty? lst) empty]\n  \
    \                   [(= k 0) empty]\n                     [else\n            \
    \          (define (max-k-helper-helper-helper-helper lst k)\n               \
    \         (cond\n                          [(empty? lst) empty]\n            \
    \              [(= k 0) empty]\n                          [else\n            \
    \               (define (max-k-helper-helper-helper-helper-helper lst k)\n   \
    \                          (cond\n                               [(empty? lst)\
    \ empty]\n                               [(= k 0) empty]\n                   \
    \            [else\n                                (define (max-k-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                  (cond\n                          \
    \          [(empty? lst) empty]\n                                    [(= k 0)\
    \ empty]\n                                    [else\n                        \
    \             (define (max-k-helper-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                       (cond\n                     \
    \                    [(empty? lst) empty]\n                                  \
    \       [(= k 0) empty]\n                                         [else\n    \
    \                                      (define (max-k-helper-helper-helper-helper-helper-helper-helper-helper\
    \ lst k)\n                                            (cond\n                \
    \                              [(empty? lst) empty]\n                        \
    \                      [(= k 0) empty]\n                                     \
    \         [else\n                                               (define (max-k-helper-helper-helper-helper-helper\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnpdtgn00.rkt:64:55: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 65\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (\u03BB (x y) (&gt; x y))))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpln6zkz91.rkt:19:21: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond [(empty? lst) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first lst) (max-k (rest\
    \ lst) (- k 1))))]\n          [else (cons (max (first lst) (max-k (rest lst) (-\
    \ k 1)))\n                      (max-k (rest lst) (- k 1)))]))\n  (sort (max-k\
    \ arr k) >))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsgg37vwu.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph6c_rb33.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwalxdo1e.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp61qexi3k.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm3nxadys.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp91pmfp2e.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define max-val (max (first\
    \ lst) (max-k (rest lst) (- k 1))))\n       (cons max-val (max-k (remove max-val\
    \ lst) (- k 1)))]))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0flmyd4j.rkt:42:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (let ([len (length arr)])\n    (if (< k len)\n    \
    \    (let ([max-arr (make-vector k)])\n          (for ([i (in-range k)])\n   \
    \         (vector-set! max-arr i (vector-ref arr i)))\n          (for ([i (in-range\
    \ k len)])\n            (let ([val (vector-ref arr i)])\n              (for ([j\
    \ (in-range k)])\n                (if (< val (vector-ref max-arr j))\n       \
    \             (begin\n                      (vector-set! max-arr j val)\n    \
    \                  (break))\n                    (void)))))\n          (for ([i\
    \ (in-range k)])\n            (vector-set! max-arr i (vector-ref max-arr i)))\n\
    \          max-arr)\n        arr)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5kbpp34c.rkt:30:23: break: unbound identifier\n  in: break\n  location...:\n\
    \   /tmp/tmp5kbpp34c.rkt:30:23\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfzkn94f3.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy1j_1ydq.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc95c8mxg.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (= k 0)\n        '()\n\
    \        (cons (max-k-helper arr)\n              (max-k (remove (max-k-helper\
    \ arr) arr) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiq9m62lh.rkt:22:15: max-k-helper: unbound identifier\n  in: max-k-helper\n\
    \  location...:\n   /tmp/tmpiq9m62lh.rkt:22:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (max (car lst) (max-k (cdr lst) (- k 1)))\n\
    \              (max-k (cdr lst) (- k 1)))))\n  (sort (max-k arr k) >))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n  \
    \  (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpbfjqv5om.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-helper arr k)\n    (if (zero? k)\n   \
    \     '()\n        (let ([max-val (apply max arr)])\n          (cons max-val (max-helper\
    \ (remove max-val arr) (- k 1))))))\n  (max-helper arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpihgw0lxk.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp64nz0uep.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (if (zero? k)\n \
    \       '()\n        (let ([max-val (apply max arr)])\n          (cons max-val\
    \ (max-k-helper (filter (lambda (x) (not (= x max-val))) arr) (- k 1))))))\n \
    \ (max-k-helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:32:4\nactual:\
    \     '(4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:36:4\n\nmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:37:4\nactual:\
    \     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkpwwik1.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (let ([max (apply max lst)])\n\
    \         (cons max (max-k (filter (lambda (x) (not (= x max))) lst) (- k 1))))]))\n\
    \  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:33:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:36:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:37:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:38:4\nactual:\
    \     '(15 5 3 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:39:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:41:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt7lfb5t8.rkt:42:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define (max-k-helper lst\
    \ k max-lst)\n         (cond\n           [(empty? lst) max-lst]\n           [(=\
    \ k 0) max-lst]\n           [else\n            (define (max-lst-helper lst max-lst)\n\
    \              (cond\n                [(empty? lst) max-lst]\n               \
    \ [(< (first lst) (first max-lst)) (cons (first lst) (rest max-lst))]\n      \
    \          [else (cons (first max-lst) (max-lst-helper (rest lst) (rest max-lst)))]))\n\
    \            (max-k-helper (rest lst) (- k 1) (max-lst-helper lst max-lst))]))\n\
    \       (max-k-helper (rest lst) (- k 1) (cons (first lst) empty))]))\n  (max-k\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:43:4\n\
    actual:     '(-4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:44:4\nactual:\
    \     '(-4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:45:4\nactual:\
    \     '(-3)\nexpected:   '(2)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:46:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:47:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0_7w_ub4.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:49:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0_7w_ub4.rkt:50:4\nactual:     '(1)\nexpected:   '(5)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:51:4\n\
    actual:     '(-4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_7w_ub4.rkt:52:4\nactual:\
    \     '(-10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (let ([len (vector-length arr)])\n    (define (swap\
    \ i j)\n      (let ([temp (vector-ref arr i)])\n        (vector-set! arr i (vector-ref\
    \ arr j))\n        (vector-set! arr j temp)))\n    (define (partition lt rt)\n\
    \      (let ([pivot (vector-ref arr rt)])\n        (let loop ([i lt] [j rt])\n\
    \          (if (&lt; i j)\n              (if (&lt; (vector-ref arr i) pivot)\n\
    \                  (loop (+ i 1) j)\n                  (swap i j)\n          \
    \        (loop lt (- j 1)))\n              (swap i rt)\n              i))))\n\
    \    (define (quick-sort lt rt)\n      (if (&lt; lt rt)\n          (let ([p (partition\
    \ lt rt)])\n            (quick-sort lt (- p 1))\n            (quick-sort (+ p\
    \ 1) rt))))\n    (quick-sort 0 (- len 1))\n    (vector-copy arr 0 k)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp38wdo0o0.rkt:24:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 41\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyjrxnshf.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7mmu7536.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let* ([max (apply max lst)]\n               [new-lst\
    \ (remove max lst)])\n          (cons max (max-k new-lst (- k 1))))))\n  (max-k\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:32:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:35:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:36:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:37:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:38:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:40:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb3lfn5.rkt:41:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (if (= k 0)\n   \
    \     (list)\n        (let* ([max (apply max arr)]\n               [max-index\
    \ (find-max-index arr max)])\n          (cons max (max-k-helper (remove-at arr\
    \ max-index) (- k 1))))))\n  (max-k-helper arr k))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8xx4_6s0.rkt:23:27: find-max-index: unbound identifier\n  in: find-max-index\n\
    \  location...:\n   /tmp/tmp8xx4_6s0.rkt:23:27\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (= k 0) '()\n     \
    \   (let ([max (apply max arr)])\n          (cons max (helper (remove max arr)\
    \ (- k 1))))))\n  (helper arr k))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpet1nnusg.rkt:24:0: </code>: unbound identifier\n  in: </code>\n\
    \  location...:\n   /tmp/tmpet1nnusg.rkt:24:0\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpywohn6ov.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (zero? k)\n       \
    \ '()\n        (let* ([max (apply max arr)]\n               [index (index-of max\
    \ arr)]\n               [arr (remove-at index arr)])\n          (cons max (helper\
    \ arr (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2s_5ibcz.rkt:24:21: remove-at: unbound identifier\n  in: remove-at\n\
    \  location...:\n   /tmp/tmp2s_5ibcz.rkt:24:21\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (= k 1)\n     \
    \   (list (apply max arr))\n        (let ([max-num (apply max arr)])\n       \
    \   (cons max-num (max-k-nums (remove max-num arr) (- k 1))))))\n  (max-k-nums\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmputfzk4sg.rkt:41:4\n\nmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (let ([n (length arr)])\n    (define (swap! i j)\n\
    \      (let ([tmp (vector-ref arr i)])\n        (vector-set! arr i (vector-ref\
    \ arr j))\n        (vector-set! arr j tmp)))\n    (define (partition! l h)\n \
    \     (let ([pivot (vector-ref arr h)])\n        (let loop ([i l] [j h])\n   \
    \       (if (&lt; i j)\n              (if (&lt;= (vector-ref arr i) pivot)\n \
    \                 (loop (+ i 1) j)\n                  (swap! i j)\n          \
    \        (loop i (- j 1)))\n              (swap! i h)\n              i))))\n \
    \   (define (quick-sort! l h)\n      (if (&lt; l h)\n          (let ([p (partition!\
    \ l h)])\n            (quick-sort! l (- p 1))\n            (quick-sort! (+ p 1)\
    \ h))))\n    (quick-sort! 0 (- n 1))\n    (vector-&gt;list (vector-copy arr 0\
    \ k))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbwf5pjmw.rkt:40:4: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 41\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define max-val (apply max\
    \ lst))\n       (cons max-val (max-k (remove max-val lst) (- k 1)))]))\n  (max-k\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:33:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:36:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:37:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:38:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:39:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:41:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6paryuo4.rkt:42:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (= k 1)\n     \
    \   (list (apply max arr))\n        (let ([max-num (apply max arr)])\n       \
    \   (cons max-num (max-k-nums (remove max-num arr) (- k 1))))))\n  (max-k-nums\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe3mmayfv.rkt:41:4\n\nmax:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: at least 1\n  given: 0\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp66z4ucur.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyl71n1kr.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ghpvcin.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt8eia3n4.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (null? lst)\n      \
    \  '()\n        (let ([max (apply max lst)])\n          (cons max (max-k (remove\
    \ max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:32:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:33:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:34:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:35:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:36:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:37:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:38:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl4rc3alk.rkt:41:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr #:key (lambda (x) (- x)) #:count k))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:26:4\n\
    \napplication: procedure does not expect an argument with given keyword\n  procedure:\
    \ sort\n  given keyword: #:count\n  arguments...:\n   '(-3 -4 5)\n   #:count 3\n\
    \   #:key #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:27:4\n\napplication:\
    \ procedure does not expect an argument with given keyword\n  procedure: sort\n\
    \  given keyword: #:count\n  arguments...:\n   '(4 -4 4)\n   #:count 2\n   #:key\
    \ #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:28:4\n\napplication:\
    \ procedure does not expect an argument with given keyword\n  procedure: sort\n\
    \  given keyword: #:count\n  arguments...:\n   '(-3 2 1 2 -1 -2 1)\n   #:count\
    \ 1\n   #:key #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:29:4\n\
    \napplication: procedure does not expect an argument with given keyword\n  procedure:\
    \ sort\n  given keyword: #:count\n  arguments...:\n   '(123 -123 20 0 1 2 -3)\n\
    \   #:count 3\n   #:key #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:30:4\n\
    \napplication: procedure does not expect an argument with given keyword\n  procedure:\
    \ sort\n  given keyword: #:count\n  arguments...:\n   '(-123 20 0 1 2 -3)\n  \
    \ #:count 4\n   #:key #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:31:4\n\
    \napplication: procedure does not expect an argument with given keyword\n  procedure:\
    \ sort\n  given keyword: #:count\n  arguments...:\n   '(5 15 0 3 -13 -8 0)\n \
    \  #:count 7\n   #:key #<procedure:...tmp/tmpr9dtftag.rkt:19:18>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr9dtftag.rkt:32:4\n\
    \napp"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpygo332wc.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyblrq5yu.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (apply max lst)\n              (max-k (remove\
    \ (apply max lst) lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq6pqplov.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (zero? k)\n       \
    \ empty\n        (let ([max (apply max arr)])\n          (cons max (helper (remove\
    \ max arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdnnee623.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (max-k-helper lst)\n              (max-k (remove\
    \ (max-k-helper lst) lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf88zbftu.rkt:22:15: max-k-helper: unbound identifier\n  in: max-k-helper\n\
    \  location...:\n   /tmp/tmpf88zbftu.rkt:22:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define max (apply max lst))\n\
    \       (cons max (max-k (remove max lst) (- k 1)))]))\n  (max-k arr k))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n  \
    \  (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:33:4\n\
    \nmax: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:34:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:35:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:36:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:37:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:38:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:39:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:40:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:41:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvi0fvhn5.rkt:42:4\n\nmax:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max lst)])\n          (cons max (max-k (remove max\
    \ lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71w8nsu3.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort (take arr k) >))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:27:4\nactual:\
    \     '(4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:28:4\nactual:\
    \     '(-3)\nexpected:   '(2)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:29:4\nactual:     '(123\
    \ 20 -123)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:30:4\nactual:\
    \     '(20 1 0 -123)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:31:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:32:4\n\
    actual:     '(0 -1)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:33:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:34:4\nactual:     '(4\
    \ -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc9toiug7.rkt:35:4\nactual:     '(10\
    \ -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp52ki6hm.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond [(empty? arr) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (last arr)))]\n\
    \          [else (cons (max (first arr) (last arr)) (helper (rest arr) (- k 1)))]))\n\
    \  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:31:4\n\
    actual:     '(5 5 5)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:33:4\nactual:\
    \     '(1)\nexpected:   '(2)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:34:4\nactual:     '(123\
    \ -3 20)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:35:4\nactual:\
    \     '(-3 20 0 1)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:36:4\nactual:\
    \     '(5 15 0 3 0 0 0)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:37:4\n\
    actual:     '(-1 0)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:38:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:39:4\nactual:     '(4\
    \ -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph_w36vwb.rkt:40:4\nactual:     '(10\
    \ 10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm6tuskiy.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (= k 0) (null? lst))\n\
    \        '()\n        (cons (max-k-helper lst)\n              (max-k (remove (max-k-helper\
    \ lst) lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmfk86vm1.rkt:22:15: max-k-helper: unbound identifier\n  in: max-k-helper\n\
    \  location...:\n   /tmp/tmpmfk86vm1.rkt:22:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9xo4qifr.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7ppo9fwn.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnw208tym.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvs_7wdro.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5sw1w5yp.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k result)\n    (if (zero? k)\n\
    \        result\n        (helper (remove-max arr) (- k 1) (cons (max arr) result))))\n\
    \  (helper arr k '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmm_y7y0y.rkt:22:17: remove-max: unbound identifier\n  in: remove-max\n\
    \  location...:\n   /tmp/tmpmm_y7y0y.rkt:22:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ptq2lk7.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max arr)])\n          (cons max (helper (remove max\
    \ arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxgoa4t51.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph3vy1cgb.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (max lst) (max-k (remove (max lst) lst) (- k\
    \ 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:30:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 -4 5)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4 4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-3 2 1 2 -1 -2 1)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(123 -123 20 0 1 2 -3)\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj8_y_omz.rkt:34:4\n\nmax: contract violation\n  expected:\
    \ real?\n  given: '(-123 20 0 1 2 -3)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:35:4\n\nmax:\
    \ contract violation\n  expected: real?\n  given: '(5 15 0 3 -13 -8 0)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-1 0 2 5 3 -10)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(1 0 5 -7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(4 -4)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj8_y_omz.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< b a))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplrirtzfm.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max lst)])\n          (cons max (max-k (remove max\
    \ lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpg9v_dlu2.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeq91mi3_.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (car (max-k (cdr lst) (- k 1)))\n          \
    \    (max-k (cdr lst) k))))\n  (max-k (sort arr <) k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpne2nd9oj.rkt:40:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwn_ewu1c.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmprrcbf3fc.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa6ua30nm.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (null? arr)\n     \
    \   '()\n        (let* ([max (apply max arr)]\n               [index (index-of\
    \ arr max)])\n          (cons max (helper (remove-at arr index) (- k 1))))))\n\
    \  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6dmv4d51.rkt:24:29: remove-at: unbound identifier\n  in: remove-at\n\
    \  location...:\n   /tmp/tmp6dmv4d51.rkt:24:29\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (zero? k)\n        '()\n\
    \        (cons (max (car arr) (car (cdr arr)))\n              (max-k (cdr arr)\
    \ (- k 1)))))\n  (define (max-arr arr)\n    (if (null? (cdr arr))\n        (car\
    \ arr)\n        (max (car arr) (max-arr (cdr arr)))))\n  (define (max a b)\n \
    \   (if (> a b)\n        a\n        b))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:42:4\n\
    actual:     '(123 20 20)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:43:4\nactual:\
    \     '(20 20 1 2)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:44:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:45:4\n\
    actual:     '(0 2)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:46:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:47:4\n\ncar: contract\
    \ violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpwb47llw1.rkt:48:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvnb326hb.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphj82khvi.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k acc)\n    (if (zero? k)\n   \
    \     acc\n        (helper (remove-max arr) (- k 1) (cons (max arr) acc))))\n\
    \  (helper arr k '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2m7g8v6u.rkt:22:17: remove-max: unbound identifier\n  in: remove-max\n\
    \  location...:\n   /tmp/tmp2m7g8v6u.rkt:22:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpynh5egqc.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (= k 0) (null? lst))\n\
    \        '()\n        (let ([max (apply max lst)])\n          (cons max (max-k\
    \ (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwka6z043.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (= k 0)\n     \
    \   '()\n        (let ([max (apply max arr)])\n          (cons max (max-k-nums\
    \ (remove max arr) (- k 1))))))\n  (sort (max-k-nums arr k) >))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqriava1p.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (maximum-helper arr k)\n    (cond ((= k 0)\
    \ '())\n          ((null? arr) '())\n          (else\n           (let ((max (apply\
    \ max arr)))\n             (cons max (maximum-helper (remove max arr) (- k 1)))))))\n\
    \  (maximum-helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:32:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:35:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:36:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:37:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:38:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:40:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptbnvm5i_.rkt:41:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< b a))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp67d9k1g0.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst)\n    (if (null? lst)\n        '()\n\
    \        (cons (apply max lst) (max-k (remove (apply max lst) lst)))))\n  (max-k\
    \ arr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:30:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:31:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:32:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:33:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:34:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:35:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:36:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:37:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:38:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:39:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxz0mm53p.rkt:40:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-heapify arr i)\n    (define (left i) (+\
    \ i i))\n    (define (right i) (+ i i 1))\n    (define (swap arr i j)\n      (define\
    \ (swap-helper arr i j)\n        (define temp (vector-ref arr i))\n        (vector-set!\
    \ arr i (vector-ref arr j))\n        (vector-set! arr j temp))\n      (swap-helper\
    \ arr i j))\n    (define (max-heapify-helper arr i)\n      (define l (left i))\n\
    \      (define r (right i))\n      (define largest\n        (cond\n          [(>\
    \ l (vector-length arr)) i]\n          [(> r (vector-length arr)) (max l i)]\n\
    \          [(> (vector-ref arr l) (vector-ref arr r)) l]\n          [else r]))\n\
    \      (when (> (vector-ref arr largest) (vector-ref arr i))\n        (swap arr\
    \ i largest)\n        (max-heapify-helper arr largest)))\n    (max-heapify-helper\
    \ arr i))\n  (define (build-max-heap arr)\n    (define (build-max-heap-helper\
    \ arr i)\n      (when (> i 0)\n        (max-heapify arr i)\n        (build-max-heap-helper\
    \ arr (- i 1))))\n    (build-max-heap-helper arr (- (vector-length arr) 1)))\n\
    \  (define (heap-sort arr)\n    (define (heap-sort-helper arr i)\n      (when\
    \ (> i 0)\n        (swap arr 0 i)\n        (max-heapify arr 0)\n        (heap-sort-helper\
    \ arr (- i 1))))\n    (heap-sort-helper arr (- (vector-length arr) 1)))\n  (define\
    \ (heap-extract-max arr)\n    (define (heap-extract-max-helper arr i)\n      (when\
    \ (> i 0)\n        (swap arr 0 i)\n        (max-heapify arr 0)\n        (heap-\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb95lcs9p.rkt:59:8: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 60\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max arr)])\n          (cons max (helper (remove max\
    \ arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn85akv7l.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (let ([max (apply max lst)])\n\
    \         (cons max (max-k (remove max lst) (- k 1))))]))\n  (max-k arr k))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:33:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:36:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:37:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:38:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:39:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:41:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp881vbcyx.rkt:42:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdissthqb.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp509il1g3.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjlyao3m0.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond\n      [(empty? arr)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (let* ([max (max (first arr)\
    \ (maximum (rest arr) (- k 1)))]\n              [max-count (count (lambda (x)\
    \ (= x max)) arr)])\n         (append (build-list max-count max)\n           \
    \      (helper (filter (lambda (x) (not (= x max))) arr) (- k max-count))))]))\n\
    \  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:42:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:43:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpystp11do.rkt:44:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy_fnnoy8.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6hu_14ri.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmppi7a4jfz.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw9npzb6p.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuy258prj.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond\n      [(empty? arr)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define (max-helper arr max)\n\
    \         (cond\n           [(empty? arr) max]\n           [(> (first arr) max)\
    \ (max-helper (rest arr) (first arr))]\n           [else (max-helper (rest arr)\
    \ max)]))\n       (define max (max-helper arr (first arr)))\n       (cons max\
    \ (helper (remove arr max) (- k 1)))]))\n  (helper arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:38:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:39:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 4\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:40:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 2\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:41:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 123\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:42:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 20\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:43:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 15\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:44:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:45:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 5\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:46:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 4\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpilgot8lk.rkt:47:4\n\
    \nremove: contract violation\n  expected: list?\n  given: 10\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6qkgh0on.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuyov7slo.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (= k 0)\n        '()\n\
    \        (let ([max (apply max arr)])\n          (cons max (max-k (remove max\
    \ arr) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsypwnqf5.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw8lq50ln.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpns3nwnvp.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k result)\n    (cond\n      [(empty?\
    \ arr) result]\n      [(>= k (length result))\n       (helper (rest arr) k (insert\
    \ (first arr) result))]\n      [else\n       (helper (rest arr) k (insert-or-delete\
    \ (first arr) result))]))\n  (helper arr k (list)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplus5qvhv.rkt:23:29: insert: unbound identifier\n  in: insert\n\
    \  location...:\n   /tmp/tmplus5qvhv.rkt:23:29\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond [(= k 0) '()]\n \
    \         [(= k 1) (list (max-number arr))]\n          [else (cons (max-number\
    \ arr) (helper (remove-max arr) (- k 1)))]))\n  (helper arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp55zzvszo.rkt:21:26: max-number: unbound identifier\n  in: max-number\n\
    \  location...:\n   /tmp/tmp55zzvszo.rkt:21:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (= k 0)\n        '()\n\
    \        (cons (max-k-helper arr)\n              (max-k (remove (max-k-helper\
    \ arr) arr) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0k4lhq2s.rkt:22:15: max-k-helper: unbound identifier\n  in: max-k-helper\n\
    \  location...:\n   /tmp/tmp0k4lhq2s.rkt:22:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (zero? k)\n       \
    \ '()\n        (let* ([max (apply max arr)]\n               [index (index-of arr\
    \ max)])\n          (cons max (helper (remove-at arr index) (- k 1))))))\n  (helper\
    \ arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzge7zhir.rkt:24:29: remove-at: unbound identifier\n  in: remove-at\n\
    \  location...:\n   /tmp/tmpzge7zhir.rkt:24:29\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond ((= k 0) '())\n  \
    \        ((null? lst) '())\n          (else (cons (max (car lst) (max-k (cdr lst)\
    \ (- k 1)))\n                      (max-k (cdr lst) (- k 1))))))\n  (max-k arr\
    \ k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_v9ubmli.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (cond [(empty? arr)\
    \ empty]\n          [(= k 0) empty]\n          [(= k 1) (list (max (first arr)\
    \ (max-k-helper (rest arr) k)))]\n          [else (cons (max (first arr) (max-k-helper\
    \ (rest arr) k))\n                      (max-k-helper (rest arr) (- k 1)))]))\n\
    \  (max-k-helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpr5kooq9g.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst)\n    (if (null? lst)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)))))\n\
    \  (max-k arr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4\
    \ -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:32:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:33:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:34:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:35:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:36:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:37:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:38:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpadwt7dh1.rkt:41:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-nums arr k)\n    (cond ((or (null? arr)\
    \ (= k 0)) '())\n          ((= k 1) (list (apply max arr)))\n          (else\n\
    \           (let ((max-num (apply max arr)))\n             (cons max-num (max-nums\
    \ (remove max-num arr) (- k 1)))))))\n  (max-nums arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:32:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:35:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:36:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:37:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:38:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:40:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfrg59p5y.rkt:41:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (define (max-k-nums-iter\
    \ arr k acc)\n      (if (zero? k)\n          acc\n          (max-k-nums-iter (remove-max\
    \ arr) (- k 1) (cons (max arr) acc))))\n    (max-k-nums-iter arr k '()))\n  (reverse\
    \ (max-k-nums arr k)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmehv9734.rkt:23:28: remove-max: unbound identifier\n  in: remove-max\n\
    \  location...:\n   /tmp/tmpmehv9734.rkt:23:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst)\n    (cond [(empty? lst) empty]\n\
    \          [(= k 0) empty]\n          [(< k 0) (error \"k must be positive\")]\n\
    \          [else (cons (max (first lst) (max-k (rest lst)))\n                \
    \      (max-k (remove (max (first lst) (max-k (rest lst))) lst)))]))\n  (max-k\
    \ arr))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6p4jwmlg.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-list arr)\n    (cond ((null? arr) '())\n\
    \          ((null? (cdr arr)) (list (car arr)))\n          (else (cons (max (car\
    \ arr) (cadr arr)) (max-list (cdr arr))))))\n  (define (max-k arr k)\n    (cond\
    \ ((zero? k) '())\n          ((null? arr) '())\n          ((null? (cdr arr)) (list\
    \ (car arr)))\n          (else (cons (max (car arr) (cadr arr)) (max-k (cdr arr)\
    \ (- k 1))))))\n  (define (max-k-helper arr k)\n    (cond ((zero? k) '())\n  \
    \        ((null? arr) '())\n          ((null? (cdr arr)) (list (car arr)))\n \
    \         (else (cons (max (car arr) (cadr arr)) (max-k-helper (cdr arr) (- k\
    \ 1))))))\n  (define (max-k-helper-helper arr k)\n    (cond ((zero? k) '())\n\
    \          ((null? arr) '())\n          ((null? (cdr arr)) (list (car arr)))\n\
    \          (else (cons (max (car arr) (cadr arr)) (max-k-helper-helper (cdr arr)\
    \ (- k 1))))))\n  (define (max-k-helper-helper-helper arr k)\n    (cond ((zero?\
    \ k) '())\n          ((null? arr) '())\n          ((null? (cdr arr)) (list (car\
    \ arr)))\n          (else (cons (max (car arr) (cadr arr)) (max-k-helper-helper-helper\
    \ (cdr arr) (- k 1))))))\n  (define (max-k-helper-helper-helper-helper arr k)\n\
    \    (cond ((zero? k) '())\n          ((null? arr) '())\n          ((null? (cdr\
    \ arr)) (list (car arr)))\n          (else (cons (max (car arr) (cadr arr)) (max-k-helper-helper-helper-helper\
    \ (cdr arr) (- k 1\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps3k9h515.rkt:47:94: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 48\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-heapify arr i)\n    (define (swap arr\
    \ i j)\n      (define (swap-helper arr i j)\n        (define (swap-helper-helper\
    \ arr i j)\n          (define (swap-helper-helper-helper arr i j)\n          \
    \  (define (swap-helper-helper-helper-helper arr i j)\n              (define (swap-helper-helper-helper-helper-helper\
    \ arr i j)\n                (define (swap-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                  (define (swap-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                    (define (swap-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                      (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                        (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                          (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                            (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                              (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                (define (swap-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper-helper\
    \ arr i j)\n                                  (define (swap-helper-helper-\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n  \
    \  (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnx45lrcq.rkt:35:42: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 36\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq0v638zz.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgmru8cpi.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd69nolbi.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (if (zero? k)\n \
    \       '()\n        (define (max-helper arr)\n          (if (null? arr)\n   \
    \           '()\n              (define (helper arr max)\n                (if (null?\
    \ arr)\n                    max\n                    (if (> (car arr) max)\n \
    \                       (helper (cdr arr) (car arr))\n                       \
    \ (helper (cdr arr) max))))\n          (helper arr (car arr))))\n    (cons (max-helper\
    \ arr) (max-k-helper (remove (max-helper arr) arr) (- k 1)))))\n  (sort (max-k-helper\
    \ arr k) <))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3)\
    \ (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n\
    \    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal?\
    \ (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal?\
    \ (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate\
    \ (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpt2dvquu_.rkt:20:4: if: bad syntax\n  in: (if (zero? k) (quote ())\
    \ (define (max-helper arr) (if (null? arr) (quote ()) (define (helper arr max)\
    \ (if (null? arr) max (if (> (car arr) max) (helper (cdr arr) (car arr)) (helper\
    \ (cdr arr) max)))) (helper arr (car arr)))) (cons (max-helper arr) (max-k...\n\
    \  location...:\n   /tmp/tmpt2dvquu_.rkt:20:4\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3ad65chv.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (if (zero? k)\n       \
    \ '()\n        (let ([max (apply max arr)])\n          (cons max (helper (remove\
    \ max arr) (- k 1))))))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmps5p44b7u.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k arr k)\n    (if (zero? k)\n        '()\n\
    \        (cons (apply max arr)\n              (max-k (remove (apply max arr) arr)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpl_816a40.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6j_oxlht.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx19apggs.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_h7e7xf5.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< b a))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6y7rawgu.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (< x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyg7b3i7w.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkgugtn3j.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (let ([len (length arr)])\n    (cond\n      [(= len\
    \ 0) '()]\n      [(= len 1) arr]\n      [(= len k) (sort arr >)]\n      [else\n\
    \       (let ([pivot (list-ref arr (quotient len 2))])\n         (let ([left (filter\
    \ (lambda (x) (< x pivot)) arr)]\n               [right (filter (lambda (x) (>\
    \ x pivot)) arr)])\n           (append (maximum left (- k (length right)))\n \
    \                  (filter (lambda (x) (= x pivot)) arr)\n                   (maximum\
    \ right (- k (length left))))))])))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:37:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:38:4\nactual:\
    \     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:39:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:40:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:41:4\n\
    actual:     '(-3 -123 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:42:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:43:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:44:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:45:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:46:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsh2gr2uj.rkt:47:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8zce7zaq.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (define (max-k-helper lst\
    \ k max)\n         (cond\n           [(empty? lst) (cons max (max-k empty (- k\
    \ 1)))]\n           [(> (first lst) max) (max-k-helper (rest lst) k (first lst))]\n\
    \           [else (max-k-helper (rest lst) k max)]))\n       (max-k-helper (rest\
    \ lst) (- k 1) (first lst))]))\n  (max-k arr k))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:37:4\n\
    actual:     '(5)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:38:4\nactual:\
    \     '(4)\nexpected:   '(4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:40:4\nactual:     '(123)\n\
    expected:   '(2 20 123)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:41:4\nactual:     '(20)\n\
    expected:   '(0 1 2 20)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:42:4\nactual:     '(15)\n\
    expected:   '(-13 -8 0 0 3 5 15)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:43:4\nactual:\
    \     '(5)\nexpected:   '(3 5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:45:4\nactual:     '(4)\n\
    expected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\nname:\
    \       check-equal?\nlocation:   /tmp/tmp6oklckl2.rkt:46:4\nactual:     '(10)\n\
    expected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuso11dii.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp2lwb4fa.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6ld8vr6t.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam1avqy5.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdst4m9ma.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4nensv5o.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (zero? k)\n   \
    \     '()\n        (let ((max-num (apply max arr)))\n          (cons max-num (max-k-nums\
    \ (remove max-num arr) (- k 1))))))\n  (sort (max-k-nums arr k) <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n  \
    \  (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (zero? k)\n        '()\n\
    \        (cons (apply max lst)\n              (max-k (remove (apply max lst) lst)\
    \ (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjauh_y__.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpskzw11ky.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort (take arr k) >))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal? (candidate\
    \ (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4)\
    \ 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list\
    \ 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20\
    \ 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n\
    \    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5\
    \ 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n  \
    \  (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate\
    \ (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list\
    \ -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list\
    \ ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:27:4\nactual:\
    \     '(4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:28:4\nactual:\
    \     '(-3)\nexpected:   '(2)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:29:4\nactual:     '(123\
    \ 20 -123)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:30:4\nactual:\
    \     '(20 1 0 -123)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:31:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:32:4\n\
    actual:     '(0 -1)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:33:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:34:4\nactual:     '(4\
    \ -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkeih6c59.rkt:35:4\nactual:     '(10\
    \ -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (x y) (> x y))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpofder9im.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (define (max-k-nums-iter\
    \ arr k max-k-nums)\n      (cond [(empty? arr) max-k-nums]\n            [(> k\
    \ (length max-k-nums)) (max-k-nums-iter (rest arr) k (cons (first arr) max-k-nums))]\n\
    \            [(>= (first arr) (first max-k-nums)) (max-k-nums-iter (rest arr)\
    \ k (cons (first arr) max-k-nums))]\n            [else (max-k-nums-iter (rest\
    \ arr) k max-k-nums)]))\n    (max-k-nums-iter arr k '()))\n  (sort (max-k-nums\
    \ arr k) >))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:33:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:34:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:35:4\nactual:\
    \     '(2 2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:36:4\nactual:\
    \     '(123 20 -123)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:37:4\nactual:\
    \     '(20 2 1 0 -123)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:38:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:39:4\n\
    actual:     '(5 2 0 -1)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:40:4\nactual:\
    \     '(5 1)\nexpected:   '(5)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:41:4\nactual:     '(4\
    \ -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:42:4\nactual:     '(10\
    \ -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpbzlql_wm.rkt:43:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (zero? k)\n   \
    \     '()\n        (let ([max-num (apply max arr)])\n          (cons max-num (max-k-nums\
    \ (remove max-num arr) (- k 1))))))\n  (max-k-nums arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbcb366pd.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmph_suif43.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0hx2gqnz.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp34zhoiff.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4xoyqmmy.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (cons (max (car lst) (max-k (cdr lst) (- k 1)))\n\
    \              (max-k (cdr lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:31:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsg0kva30.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (&gt; a b))))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpypj38dk1.rkt:19:26: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst)\n    (if (or (= k 0) (null? lst))\n\
    \        '()\n        (cons (apply max lst)\n              (max-k (remove (apply\
    \ max lst) lst)))))\n  (max-k arr))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:32:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:33:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:34:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:35:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:36:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:37:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:38:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsrnuwk8p.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond ((or (null? lst) (=\
    \ k 0)) '())\n          ((= k 1) (list (apply max lst)))\n          (else (cons\
    \ (apply max lst) (max-k (remove (apply max lst) lst) (- k 1))))))\n  (max-k arr\
    \ k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:30:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:33:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:34:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:35:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:36:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:38:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfw9ua103.rkt:39:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond\n      [(empty? lst)\
    \ empty]\n      [(= k 0) empty]\n      [else\n       (let ([max (apply max lst)])\n\
    \         (cons max (max-k (remove max lst) (- k 1))))]))\n  (max-k arr k))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:33:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:36:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:37:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:38:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:39:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:41:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmwai7tkg.rkt:42:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfxkzvi39.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-helper arr k)\n    (if (zero? k)\n \
    \       '()\n        (let ([max (apply max arr)])\n          (cons max (max-k-helper\
    \ (remove max arr) (- k 1))))))\n  (max-k-helper arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp640_mtxy.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (max-k-helper lst)\n              (max-k (remove (max-k-helper\
    \ lst) lst) (- k 1)))))\n  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpkrq_yscm.rkt:22:15: max-k-helper: unbound identifier\n  in: max-k-helper\n\
    \  location...:\n   /tmp/tmpkrq_yscm.rkt:22:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (zero? k)\n   \
    \     '()\n        (let ([max (apply max arr)])\n          (cons max (max-k-nums\
    \ (remove max arr) (- k 1))))))\n  (max-k-nums arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpntb0hs3v.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (= k 0)\n        '()\n\
    \        (cons (max (car lst) (car (cdr lst))) (max-k (cdr lst) (- k 1)))))\n\
    \  (max-k arr k))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list\
    \ -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:30:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:33:4\n\
    actual:     '(123 20 20)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:34:4\nactual:\
    \     '(20 20 1 2)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:35:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: '()\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:36:4\n\
    actual:     '(0 2)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:37:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:38:4\n\ncar: contract\
    \ violation\n  expected: pair?\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsuztzfx0.rkt:39:4\n\ncar:\
    \ contract violation\n  expected: pair?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (if (or (null? lst) (= k\
    \ 0))\n        '()\n        (let ([max (apply max lst)])\n          (cons max\
    \ (max-k (remove max lst) (- k 1))))))\n  (max-k arr k))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:31:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:34:4\nactual:\
    \     '(123 20 2)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:35:4\nactual:\
    \     '(20 2 1 0)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:36:4\nactual:\
    \     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:37:4\n\
    actual:     '(5 3)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:39:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqqnpu760.rkt:40:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (&gt; a b))))\n</code>\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwz81yvqp.rkt:19:26: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 20\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxcnbj67.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpep3pxczy.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k-nums arr k)\n    (if (empty? arr)\n\
    \        empty\n        (let ([max-num (apply max arr)])\n          (cons max-num\
    \ (max-k-nums (remove max-num arr) (- k 1))))))\n  (reverse (max-k-nums arr k)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate maximum))\n\
    \    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal?\
    \ (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list\
    \ -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate (list 123 -123\
    \ 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate (list -123 20\
    \ 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13\
    \ -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0\
    \ 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list\
    \ 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal?\
    \ (candidate (list -10 10) 2) (list -10 10))\n    (check-equal? (candidate (list\
    \ 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:32:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:33:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:34:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:35:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:37:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:38:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3zjcwe0r.rkt:41:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-heapify arr i)\n    (define (left i) (+\
    \ (* 2 i) 1))\n    (define (right i) (+ (* 2 i) 2))\n    (define (swap i j)\n\
    \      (define temp (vector-ref arr i))\n      (vector-set! arr i (vector-ref\
    \ arr j))\n      (vector-set! arr j temp))\n    (define (max-heapify-helper arr\
    \ i)\n      (define l (left i))\n      (define r (right i))\n      (define largest\n\
    \        (cond\n          [(> l (vector-length arr)) i]\n          [(> r (vector-length\
    \ arr))\n           (if (> (vector-ref arr l) (vector-ref arr i)) l i)]\n    \
    \      [else\n           (if (> (vector-ref arr l) (vector-ref arr r)) l r)]))\n\
    \      (when (> (vector-ref arr largest) (vector-ref arr i))\n        (swap i\
    \ largest)\n        (max-heapify-helper arr largest)))\n    (max-heapify-helper\
    \ arr i))\n  (define (build-max-heap arr)\n    (for ([i (in-range (quotient (vector-length\
    \ arr) 2) -1 -1)])\n      (max-heapify arr i)))\n  (define (heap-sort arr)\n \
    \   (build-max-heap arr)\n    (for ([i (in-range (sub1 (vector-length arr)) 0\
    \ -1)])\n      (swap 0 i)\n      (max-heapify arr 0)))\n  (define (heap-extract-max\
    \ arr)\n    (define max (vector-ref arr 0))\n    (vector-set! arr 0 (vector-ref\
    \ arr (sub1 (vector-length arr))))\n    (vector-set! arr (sub1 (vector-length\
    \ arr)) #f)\n    (max-heapify arr 0)\n    max)\n  (define (heap-increase-key arr\
    \ i key)\n    (vector-set! arr i key)\n    (define (heap-increase-key-helper arr\
    \ i)\n      (\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2jrdu08o.rkt:57:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 58\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcdx5pz3d.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-k lst k)\n    (cond [(empty? lst) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first lst) (max-k (rest\
    \ lst) (- k 1))))]\n          [else (cons (max (first lst) (max-k (rest lst) (-\
    \ k 1)))\n                      (max-k (rest lst) (- k 1)))]))\n  (sort (max-k\
    \ arr k) >))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ maximum))\n    (check-equal? (candidate (list -3 -4 5) 3) (list -4 -3 5))\n\
    \    (check-equal? (candidate (list 4 -4 4) 2) (list 4 4))\n    (check-equal?\
    \ (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n    (check-equal? (candidate\
    \ (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n    (check-equal? (candidate\
    \ (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n    (check-equal? (candidate (list\
    \ 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n    (check-equal? (candidate\
    \ (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal? (candidate (list 1 0\
    \ 5 -7) 1) (list 5))\n    (check-equal? (candidate (list 4 -4) 2) (list -4 4))\n\
    \    (check-equal? (candidate (list -10 10) 2) (list -10 10))\n    (check-equal?\
    \ (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:32:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:33:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:34:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:35:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:36:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:37:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:38:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:39:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:40:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_1bi5ww0.rkt:41:4\n\
    \nmax: contract violation\n  expected: real?\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (max-heapify arr i)\n    (define (swap arr\
    \ i j)\n      (define temp (vector-ref arr i))\n      (vector-set! arr i (vector-ref\
    \ arr j))\n      (vector-set! arr j temp))\n    (define (max-heapify-helper arr\
    \ i)\n      (define l (+ i 1))\n      (define r (+ i 2))\n      (define largest\n\
    \        (cond\n          [(> l (vector-length arr)) i]\n          [(> r (vector-length\
    \ arr)) (if (> (vector-ref arr l) (vector-ref arr i)) l i)]\n          [else (if\
    \ (> (vector-ref arr l) (vector-ref arr r)) l r)]))\n      (if (> (vector-ref\
    \ arr largest) (vector-ref arr i))\n          (begin\n            (swap arr i\
    \ largest)\n            (max-heapify-helper arr largest))))\n    (max-heapify-helper\
    \ arr i))\n  (define (build-max-heap arr)\n    (define (build-max-heap-helper\
    \ arr i)\n      (if (< i (quotient (vector-length arr) 2))\n          (begin\n\
    \            (max-heapify arr i)\n            (build-max-heap-helper arr (+ i\
    \ 1)))))\n    (build-max-heap-helper arr 0)\n    arr)\n  (define (heap-sort arr)\n\
    \    (define (heap-sort-helper arr i)\n      (if (> i 0)\n          (begin\n \
    \           (swap arr 0 i)\n            (max-heapify arr 0)\n            (heap-sort-helper\
    \ arr (- i 1)))))\n    (heap-sort-helper arr (- (vector-length arr) 1))\n    arr)\n\
    \  (define (heap-extract-max arr)\n    (define (heap-extract-max-helper arr i)\n\
    \      (if (> i 0)\n          (begin\n            (swap arr 0 i)\n           \
    \ (max-heapify arr 0)\n            (heap-extract-max-helper arr (-\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn0gsffl3.rkt:60:41: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 61\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpof0o354j.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr >))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmptj9il4bk.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (> a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:26:4\n\
    actual:     '(5 -3 -4)\nexpected:   '(-4 -3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:27:4\nactual:\
    \     '(4 4 -4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:28:4\nactual:\
    \     '(2 2 1 1 -1 -2 -3)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:29:4\nactual:\
    \     '(123 20 2 1 0 -3 -123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:30:4\n\
    actual:     '(20 2 1 0 -3 -123)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:31:4\n\
    actual:     '(15 5 3 0 0 -8 -13)\nexpected:   '(-13 -8 0 0 3 5 15)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:32:4\n\
    actual:     '(5 3 2 0 -1 -10)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:33:4\nactual:\
    \     '(5 1 0 -7)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:34:4\nactual:\
    \     '(4 -4)\nexpected:   '(-4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:35:4\nactual:\
    \     '(10 -10)\nexpected:   '(-10 10)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsvcs98sm.rkt:36:4\nactual:\
    \     '(243 3 2 1 0 -23 -400)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (sort arr (lambda (a b) (< a b))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate maximum))\n    (check-equal?\
    \ (candidate (list -3 -4 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list\
    \ 4 -4 4) 2) (list 4 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1)\
    \ 1) (list 2))\n    (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list\
    \ 2 20 123))\n    (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0\
    \ 1 2 20))\n    (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13\
    \ -8 0 0 3 5 15))\n    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list\
    \ 3 5))\n    (check-equal? (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal?\
    \ (candidate (list 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10\
    \ 10) 2) (list -10 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400\
    \ 0) 0) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:27:4\n\
    actual:     '(-4 4 4)\nexpected:   '(4 4)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:28:4\nactual:\
    \     '(-3 -2 -1 1 1 2 2)\nexpected:   '(2)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:29:4\nactual:\
    \     '(-123 -3 0 1 2 20 123)\nexpected:   '(2 20 123)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:30:4\n\
    actual:     '(-123 -3 0 1 2 20)\nexpected:   '(0 1 2 20)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:32:4\n\
    actual:     '(-10 -1 0 2 3 5)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:33:4\nactual:\
    \     '(-7 0 1 5)\nexpected:   '(5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpor_1oi_k.rkt:36:4\nactual:\
    \     '(-400 -23 0 1 2 3 243)\nexpected:   '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given an array arr of integers and a positive integer\
    \ k, return a sorted list \n;; of length k with the maximum k numbers in arr.\n\
    ;; Example 1:\n;; Input: arr = [-3, -4, 5], k = 3\n;; Output: [-4, -3, 5]\n;;\
    \ Example 2:\n;; Input: arr = [4, -4, 4], k = 2\n;; Output: [4, 4]\n;; Example\
    \ 3:\n;; Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n;; Output: [2]\n;; Note:\n\
    ;; 1. The length of the array will be in the range of [1, 1000].\n;; 2. The elements\
    \ in the array will be in the range of [-1000, 1000].\n;; 3. 0 <= k <= len(arr)\n\
    (define (maximum arr k)\n  (define (helper arr k)\n    (cond [(empty? arr) empty]\n\
    \          [(= k 0) empty]\n          [(= k 1) (list (max (first arr) (second\
    \ arr)))]\n          [else (cons (max (first arr) (second arr)) (helper (rest\
    \ arr) (- k 1)))]))\n  (helper arr k))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate maximum))\n    (check-equal? (candidate (list -3 -4\
    \ 5) 3) (list -4 -3 5))\n    (check-equal? (candidate (list 4 -4 4) 2) (list 4\
    \ 4))\n    (check-equal? (candidate (list -3 2 1 2 -1 -2 1) 1) (list 2))\n   \
    \ (check-equal? (candidate (list 123 -123 20 0 1 2 -3) 3) (list 2 20 123))\n \
    \   (check-equal? (candidate (list -123 20 0 1 2 -3) 4) (list 0 1 2 20))\n   \
    \ (check-equal? (candidate (list 5 15 0 3 -13 -8 0) 7) (list -13 -8 0 0 3 5 15))\n\
    \    (check-equal? (candidate (list -1 0 2 5 3 -10) 2) (list 3 5))\n    (check-equal?\
    \ (candidate (list 1 0 5 -7) 1) (list 5))\n    (check-equal? (candidate (list\
    \ 4 -4) 2) (list -4 4))\n    (check-equal? (candidate (list -10 10) 2) (list -10\
    \ 10))\n    (check-equal? (candidate (list 1 2 3 -23 243 -400 0) 0) (list ))\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:31:4\n\
    \nsecond: list contains too few elements\n  list: '(5)\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:34:4\n\
    actual:     '(123 20 20)\nexpected:   '(2 20 123)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:35:4\nactual:\
    \     '(20 20 1 2)\nexpected:   '(0 1 2 20)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:36:4\n\nsecond:\
    \ list contains too few elements\n  list: '(0)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:37:4\nactual:\
    \     '(0 2)\nexpected:   '(3 5)\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:38:4\nactual:\
    \     '(1)\nexpected:   '(5)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:39:4\n\nsecond: list\
    \ contains too few elements\n  list: '(-4)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpe4q87pxp.rkt:40:4\n\nsecond:\
    \ list contains too few elements\n  list: '(10)\n--------------------\n"
  exit_code: 0
  status: Exception
