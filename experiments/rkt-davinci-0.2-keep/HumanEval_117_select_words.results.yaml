name: HumanEval_117_select_words
language: racket
results:
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpf0a_rwue.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpf0a_rwue.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (count-consonants\
    \ word)\n    (define (count-consonants-iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is-consonant? (first word)) (count-consonants-iter\
    \ (rest word) (+ count 1))]\n        [else (count-consonants-iter (rest word)\
    \ count)]))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count-consonants\
    \ (first s)) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select-words-iter (rest s) n result)]))\n  (select-words-iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyviv6b0w.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyviv6b0w.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyviv6b0w.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyviv6b0w.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyviv6b0w.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpyviv6b0w.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants w)\n    (cond\n      [(empty?\
    \ w) 0]\n      [(consonant? (first w)) (+ 1 (count-consonants (rest w)))]\n  \
    \    [else (count-consonants (rest w))]))\n  (define (select-words-helper s n)\n\
    \    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first s)))\
    \ (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp87npzl5y.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp87npzl5y.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp87npzl5y.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp87npzl5y.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp87npzl5y.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp87npzl5y.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants s)\n    (cond ((empty? s) 0)\n          ((is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s))))\n          (else (count-consonants\
    \ (rest s)))))\n  (define (select-words s n)\n    (cond ((empty? s) empty)\n \
    \         ((= n (count-consonants (first s))) (cons (first s) (select-words (rest\
    \ s) n)))\n          (else (select-words (rest s) n))))\n  (select-words (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmplayf_oxw.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplayf_oxw.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplayf_oxw.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplayf_oxw.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmplayf_oxw.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmplayf_oxw.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count_consonants word)\n    (cond [(empty? word) 0]\n\
    \          [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n\
    \          [else (count_consonants (rest word))]))\n  (define (select_words_helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count_consonants (first\
    \ s))) (cons (first s) (select_words_helper (rest s) n))]\n          [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpprva23jb.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpprva23jb.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpprva23jb.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpprva23jb.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpprva23jb.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpprva23jb.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants word)\n    (if (empty? word)\n        0\n       \
    \ (+ (if (consonant? (first word)) 1 0)\n           (count-consonants (rest word)))))\n\
    \  (define (select-words-iter words n)\n    (if (empty? words)\n        '()\n\
    \        (if (= n (count-consonants (first words)))\n            (cons (first\
    \ words) (select-words-iter (rest words) n))\n            (select-words-iter (rest\
    \ words) n))))\n  (select-words-iter (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprmjyz2r4.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprmjyz2r4.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprmjyz2r4.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprmjyz2r4.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprmjyz2r4.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprmjyz2r4.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8jw_2a.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxq8jw_2a.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8jw_2a.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxq8jw_2a.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxq8jw_2a.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxq8jw_2a.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-iter s n result)\n    (cond [(empty? s)\
    \ result]\n          [(equal? n (count-consonants (first s)))\n           (select-words-iter\
    \ (rest s) n (append result (list (first s))))]\n          [else (select-words-iter\
    \ (rest s) n result)]))\n  (select-words-iter (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp59zsd5fb.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59zsd5fb.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp59zsd5fb.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59zsd5fb.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp59zsd5fb.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp59zsd5fb.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ s)\n    (cond\n      [(empty? s) 0]\n      [(is_consonant? (first s)) (+ 1 (count_consonants\
    \ (rest s)))]\n      [else (count_consonants (rest s))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(is_consonant?\
    \ (first s))\n       (select_words_iter (rest s) (- n 1) (cons (first s) acc))]\n\
    \      [else (select_words_iter (rest s) n acc)]))\n  (define (select_words_iter2\
    \ s n acc)\n    (cond\n      [(empty? s) (reverse acc)]\n      [(is_consonant?\
    \ (first s))\n       (select_words_iter2 (rest s) (- n 1) (cons (first s) acc))]\n\
    \      [(char-whitespace? (first s))\n       (if (= n 0)\n           (select_words_iter2\
    \ (rest s) n (cons (list->string (reverse acc)) acc))\n           (select_words_iter2\
    \ (rest s) n (cons (first s) acc)))]\n      [else (select_words_iter2 (rest s)\
    \ n acc)]))\n  (define (select_words_iter3 s n acc)\n    (cond\n      [(empty?\
    \ s) (reverse acc)]\n      [(is_consonant? (first s))\n       (select_words_iter3\
    \ (rest s) (- n 1) (cons (first s) acc))]\n      [(char-whitespace? (first s))\n\
    \       (if (= n 0)\n           (select_words_\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgg78474j.rkt:51:11: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 52\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-iter words\
    \ n result)\n    (cond\n      [(empty? words) result]\n      [(= n (count-consonants\
    \ (first words)))\n       (select-words-iter (rest words) n (append result (list\
    \ (first words))))]\n      [else (select-words-iter (rest words) n result)]))\n\
    \  (select-words-iter (string-split s) n '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtd_56jt.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtd_56jt.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtd_56jt.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtd_56jt.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxtd_56jt.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxtd_56jt.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word)\
    \ 0)\n          ((consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n\
    \          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n)\n    (cond ((null? s) '())\n          ((= n (count-consonants (car s)))\
    \ (cons (car s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper\
    \ (cdr s) n))))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppzh04k6l.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n        [else (select_words (rest\
    \ s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptw94z8ma.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmptw94z8ma.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (if (empty? word)\n        0\n \
    \       (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper s n)\n    (if (empty? s)\n \
    \       '()\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-helper (rest s) n))\n       \
    \       (select-words-helper (rest s) n)))))\n  (select-words-helper (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3mmojmd2.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3mmojmd2.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3mmojmd2.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3mmojmd2.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3mmojmd2.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3mmojmd2.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n        [else (select_words (rest\
    \ s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpe8p1n4ba.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpe8p1n4ba.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw8qfedh5.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpw8qfedh5.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count_consonants s)\n    (cond [(empty? s) 0]\n          [(is_consonant\
    \ (first s)) (+ 1 (count_consonants (rest s)))]\n          [else (count_consonants\
    \ (rest s))]))\n  (define (select_words_iter s n acc)\n    (cond [(empty? s) acc]\n\
    \          [(equal? n (count_consonants (first s))) (select_words_iter (rest s)\
    \ n (append acc (list (first s))))]\n          [else (select_words_iter (rest\
    \ s) n acc)]))\n  (select_words_iter (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp88bi7vpt.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp88bi7vpt.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88bi7vpt.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp88bi7vpt.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp88bi7vpt.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp88bi7vpt.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (count-consonants s)\n    (define (count-consonants-iter s i acc)\n\
    \      (if (= i (string-length s))\n          acc\n          (if (is-vowel? (string-ref\
    \ s i))\n              (count-consonants-iter s (+ i 1) acc)\n              (count-consonants-iter\
    \ s (+ i 1) (+ acc 1)))))\n    (count-consonants-iter s 0 0))\n  (define (select-words-iter\
    \ s i acc)\n    (if (= i (string-length s))\n        acc\n        (let* ([word\
    \ (string-tokenize s #\\space)]\n               [word-consonants (count-consonants\
    \ word)]\n               [acc (if (= word-consonants n)\n                    \
    \    (cons word acc)\n                        acc)])\n          (select-words-iter\
    \ s (+ i (string-length word)) acc))))\n  (select-words-iter s 0 '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn1tunshq.rkt:32:22: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmpn1tunshq.rkt:32:22\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (define (count-consonants-iter word\
    \ count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count-consonants word))\n              (select-words-iter (regexp-replace\
    \ #rx\"\\w+\" s \"\") n (append result (list word)))\n              (select-words-iter\
    \ (regexp-replace #rx\"\\w+\" s \"\") n result)))))\n  (select-words-iter s n\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxnw7q0wn.rkt:28:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n\
    \        (if (equal? (count-consonants (car w)) n)\n            (cons (car w)\
    \ (select_words (string-join (cdr w) \" \") n))\n            (select_words (string-join\
    \ (cdr w) \" \") n)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6zwujrbr.rkt:17:16: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmp6zwujrbr.rkt:17:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count-consonants\
    \ (first s)) (= n (count-consonants (first s))) (select-words-helper (rest s)\
    \ n (append result (list (first s))))]\n      [else (select-words-helper (rest\
    \ s) n result)]))\n  (select-words-helper (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnqz9i1p.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvnqz9i1p.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnqz9i1p.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvnqz9i1p.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvnqz9i1p.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvnqz9i1p.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let* ([words (string-split s)]\n   \
    \          [words-with-n-consonants (filter (lambda (word)\n                 \
    \                               (= n (count-consonants word)))\n             \
    \                                 words)])\n        words-with-n-consonants)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpfnb5kte6.rkt:19:54: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpfnb5kte6.rkt:19:54\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n    \
    \      [(= n (count-consonants (first s)))\n           (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn1k9nygm.rkt:17:17: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpn1k9nygm.rkt:17:17\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (or (equal? c #\\b)\n        (equal? c\
    \ #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c #\\\
    g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\k)\n\
    \        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n \
    \       (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n  \
    \      (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n   \
    \     (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n    \
    \    (equal? c #\\z)))\n  (define (count_consonants word)\n    (if (empty? word)\n\
    \        0\n        (if (is_consonant? (first word))\n            (+ 1 (count_consonants\
    \ (rest word)))\n            (count_consonants (rest word)))))\n  (define (select_words_iter\
    \ s n acc)\n    (if (empty? s)\n        acc\n        (let ((word (first s)))\n\
    \          (if (= n (count_consonants word))\n              (select_words_iter\
    \ (rest s) n (append acc (list word)))\n              (select_words_iter (rest\
    \ s) n acc)))))\n  (select_words_iter (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu_c_7.rkt:57:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lyu_c_7.rkt:58:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu_c_7.rkt:59:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lyu_c_7.rkt:60:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0lyu_c_7.rkt:61:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0lyu_c_7.rkt:63:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let ([w (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s)])\n        (if (and w (= n (count-consonants (car w))))\n            (cons\
    \ (car w) (select_words (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n))\n      \
    \      (select_words (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmxif3q03.rkt:18:25: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpmxif3q03.rkt:18:25\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoflejhwr.rkt:17:16: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmpoflejhwr.rkt:17:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a) (char-ci=?\
    \ c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=? c #\\u))))\n  (define\
    \ (count-consonants s)\n    (if (string-empty? s)\n        0\n        (+ (if (is-consonant?\
    \ (string-ref s 0)) 1 0)\n           (count-consonants (string-tail s)))))\n \
    \ (define (select-words-helper s n)\n    (if (string-empty? s)\n        '()\n\
    \        (let ((word (string-trim (string-take-while (lambda (c) (not (char-whitespace?\
    \ c))) s))))\n          (if (= n (count-consonants word))\n              (cons\
    \ word (select-words-helper (string-drop-while (lambda (c) (not (char-whitespace?\
    \ c))) s) n))\n              (select-words-helper (string-drop-while (lambda (c)\
    \ (not (char-whitespace? c))) s) n)))))\n  (select-words-helper s n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7rq8w0er.rkt:18:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp7rq8w0er.rkt:18:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n         \
    \    (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (string-trim (first (string-split\
    \ s #\\space)))))\n          (if (= n (count-consonants word))\n             \
    \ (select-words-iter (rest (string-split s #\\space)) n (append result (list word)))\n\
    \              (select-words-iter (rest (string-split s #\\space)) n result)))))\n\
    \  (select-words-iter s n '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wnup_4o.rkt:43:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_wnup_4o.rkt:44:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wnup_4o.rkt:45:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_wnup_4o.rkt:46:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wnup_4o.rkt:47:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_wnup_4o.rkt:48:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wnup_4o.rkt:49:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let ([words (string-split s #\\space)])\n\
    \        (filter (lambda (w) (= n (count-consonants w))) words))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_uewdyp_.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp_uewdyp_.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word)\
    \ 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n\
    \          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2sjjayaf.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (append acc (list (first s))))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnq1voknb.rkt:40:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnq1voknb.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnq1voknb.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnq1voknb.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnq1voknb.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnq1voknb.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s\
    \ #\\space)]\n             [words-with-n-consonants (filter (\u03BB (w) (= n (count-consonants\
    \ w))) words)])\n        words-with-n-consonants)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpmj1veekw.rkt:18:59: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpmj1veekw.rkt:18:59\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnnpnf7j0.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpnnpnf7j0.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cazizuy.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cazizuy.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cazizuy.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cazizuy.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3cazizuy.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3cazizuy.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n\
    \             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n     \
    \        [consonant-count (lambda (word)\n                                (apply\
    \ + (map (lambda (c)\n                                                (if (member\
    \ c consonants)\n                                                    1\n     \
    \                                               0))\n                        \
    \                      (string-&gt;list word))))]\n             [selected-words\
    \ (filter (lambda (word)\n                                       (= (consonant-count\
    \ word) n))\n                                     words)])\n        selected-words)))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpqvvwn5wp.rkt:19:13: read-syntax: expected a `]` to close `[`\n\
    \  possible cause: indentation suggests a missing `]` before line 29\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= (count-consonants (first s)) n)\n\
    \         (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcipywdim.rkt:16:13: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpcipywdim.rkt:16:13\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt59hq4_2.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt59hq4_2.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt59hq4_2.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt59hq4_2.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpt59hq4_2.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpt59hq4_2.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (cond [(empty? word) 0]\n      \
    \    [(is_consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n   \
    \       [else (count-consonants (rest word))]))\n  (define (select-words-iter\
    \ s n result)\n    (cond [(empty? s) result]\n          [(= n (count-consonants\
    \ (first s))) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \          [else (select-words-iter (rest s) n result)]))\n  (select-words-iter\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxrceq4y.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxxrceq4y.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxrceq4y.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxxrceq4y.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpxxrceq4y.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpxxrceq4y.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants s)\n    (if (string-empty? s)\n        0\n\
    \        (+ (if (is-consonant? (string-ref s 0)) 1 0)\n           (count-consonants\
    \ (substring s 1)))))\n  (define (select-words-helper s n acc)\n    (if (string-empty?\
    \ s)\n        (reverse acc)\n        (let ((word (string-trim s)))\n         \
    \ (if (= n (count-consonants word))\n              (select-words-helper (substring\
    \ s (string-length word)) n (cons word acc))\n              (select-words-helper\
    \ (substring s (string-length word)) n acc)))))\n  (select-words-helper s n '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp63e05wvm.rkt:18:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp63e05wvm.rkt:18:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n        [else (select_words (rest\
    \ s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0z4x_j60.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp0z4x_j60.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let ([words (string-split s)])\n   \
    \     (filter (lambda (w) (= n (count-consonants w))) words))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxi1c_f9l.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpxi1c_f9l.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (x) (= n (count-consonants x))) (string-split s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpw2_jcvi5.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpw2_jcvi5.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1\
    \ (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n acc)\n    (cond\n      [(empty? s) acc]\n\
    \      [(= n (count_consonants (first s))) (select_words_helper (rest s) n (append\
    \ acc (list (first s))))]\n      [else (select_words_helper (rest s) n acc)]))\n\
    \  (select_words_helper (string-split s) n '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq1m0wbg.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq1m0wbg.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq1m0wbg.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq1m0wbg.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpmq1m0wbg.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpmq1m0wbg.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (cond ((null? s) 0)\n          ((is-consonant?\
    \ (car s)) (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants\
    \ (cdr s)))))\n  (define (select-words-helper s n acc)\n    (cond ((null? s) acc)\n\
    \          ((= n (count-consonants (car s))) (select-words-helper (cdr s) n (cons\
    \ (car s) acc)))\n          (else (select-words-helper (cdr s) n acc))))\n  (reverse\
    \ (select-words-helper (string-split s) n '())))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp20av__s2.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpku7gubzm.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpku7gubzm.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (car (string-split\
    \ s #\\space))))\n     (cons (car (string-split s #\\space))\n           (select_words\
    \ (cdr (string-split s #\\space)) n))]\n    [else (select_words (cdr (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyqisliz5.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpyqisliz5.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (consonant? (first word))\n\
    \              (count-consonants-iter (rest word) (+ count 1))\n             \
    \ (count-consonants-iter (rest word) count))))\n    (count-consonants-iter word\
    \ 0))\n  (define (select-words-iter s n words)\n    (if (empty? s)\n        words\n\
    \        (if (= n (count-consonants (first s)))\n            (select-words-iter\
    \ (rest s) n (append words (list (first s))))\n            (select-words-iter\
    \ (rest s) n words))))\n  (select-words-iter (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphlnc0pht.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphlnc0pht.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphlnc0pht.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphlnc0pht.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphlnc0pht.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphlnc0pht.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is_vowel?\
    \ (first s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-iter s n acc)\n    (cond [(empty? s)\
    \ acc]\n          [(is_vowel? (first s)) (select-words-iter (rest s) n acc)]\n\
    \          [else (select-words-iter (rest s) n (cons (first s) acc))]))\n  (define\
    \ (select-words-iter2 s n acc)\n    (cond [(empty? s) acc]\n          [(is_vowel?\
    \ (first s)) (select-words-iter2 (rest s) n acc)]\n          [else (select-words-iter2\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select-words-iter3 s n acc)\n\
    \    (cond [(empty? s) acc]\n          [(is_vowel? (first s)) (select-words-iter3\
    \ (rest s) n acc)]\n          [else (select-words-iter3 (rest s) n (cons (first\
    \ s) acc))]))\n  (define (select-words-iter4 s n acc)\n    (cond [(empty? s) acc]\n\
    \          [(is_vowel? (first s)) (select-words-iter4 (rest s) n acc)]\n     \
    \     [else (select-words-iter4 (rest s) n (cons (first s) acc))]))\n  (define\
    \ (select-words-iter5 s n acc)\n    (cond [(empty? s) acc]\n          [(is_vowel?\
    \ (first s)) (select-words-iter5 (rest s) n acc)]\n          [else (select-words-iter5\
    \ (rest s) n (cons (first s) acc))]))\n  (define (select-words-iter6 s n acc)\n\
    \    (cond [(\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyoulq_m0.rkt:42:11: read-syntax: expected a `)` to close `(`\n\
    \  possible cause: indentation suggests a missing `)` before line 43\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a) (char-ci=?\
    \ c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=? c #\\u))))\n  (define\
    \ (count-consonants word)\n    (cond ((null? word) 0)\n          ((is-consonant?\
    \ (car word)) (+ 1 (count-consonants (cdr word))))\n          (else (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper s n)\n    (cond ((null? s) '())\n\
    \          ((= n (count-consonants (car s))) (cons (car s) (select-words-helper\
    \ (cdr s) n)))\n          (else (select-words-helper (cdr s) n))))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nyo2u7_.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\\
    i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants w)\n    (define\
    \ (count-consonants-iter w n)\n      (cond\n        [(empty? w) n]\n        [(is-consonant?\
    \ (first w)) (count-consonants-iter (rest w) (+ n 1))]\n        [else (count-consonants-iter\
    \ (rest w) n)]))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(= n (count-consonants (first\
    \ s))) (select-words-iter (rest s) n (append acc (list (first s))))]\n      [else\
    \ (select-words-iter (rest s) n acc)]))\n  (select-words-iter (string-split s)\
    \ n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_adp8p0.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq_adp8p0.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_adp8p0.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq_adp8p0.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq_adp8p0.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq_adp8p0.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count_consonants s)\n    (cond ((null? s) 0)\n\
    \          ((is_consonant (car s)) (+ 1 (count_consonants (cdr s))))\n       \
    \   (else (count_consonants (cdr s)))))\n  (define (select_words_iter s n acc)\n\
    \    (cond ((null? s) acc)\n          ((equal? n (count_consonants (car s))) (select_words_iter\
    \ (cdr s) n (append acc (list (car s)))))\n          (else (select_words_iter\
    \ (cdr s) n acc))))\n  (select_words_iter (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpny9tlt7t.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants word)\n    (cond ((null? word) 0)\n          ((consonant?\
    \ (car word)) (+ 1 (count-consonants (cdr word))))\n          (else (count-consonants\
    \ (cdr word)))))\n  (define (select-words-helper s n)\n    (cond ((null? s) '())\n\
    \          ((= n (count-consonants (car s))) (cons (car s) (select-words-helper\
    \ (cdr s) n)))\n          (else (select-words-helper (cdr s) n))))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0cl81fo9.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (cond [(empty? word) 0]\n\
    \          [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond [(empty? words) empty]\n          [(= n (count-consonants\
    \ (first words)))\n           (cons (first words) (select-words-helper (rest words)\
    \ n))]\n          [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1yt_95qr.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1yt_95qr.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1yt_95qr.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1yt_95qr.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1yt_95qr.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1yt_95qr.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvww8tcp_.rkt:17:16: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmpvww8tcp_.rkt:17:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count-consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word))\
    \ (+ 1 (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words)))\n       (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiceu_tdx.rkt:41:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiceu_tdx.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiceu_tdx.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiceu_tdx.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiceu_tdx.rkt:45:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiceu_tdx.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprwpxs8pz.rkt:40:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprwpxs8pz.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprwpxs8pz.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprwpxs8pz.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmprwpxs8pz.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmprwpxs8pz.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (x) (= n (count-consonants x))) (string-split s #\\space)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9kgwo4mp.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp9kgwo4mp.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants s)\n   \
    \ (cond\n      [(empty? s) 0]\n      [(is-consonant? (first s)) (+ 1 (count-consonants\
    \ (rest s)))]\n      [else (count-consonants (rest s))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) '()]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8siln9r.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq8siln9r.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8siln9r.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq8siln9r.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpq8siln9r.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpq8siln9r.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_tbnhqoq.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp_tbnhqoq.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([word (string-tokenize s)])\n\
    \        (if (= n (count-consonants word))\n            (cons word (select_words\
    \ (substring s (string-length word)) n))\n            (select_words (substring\
    \ s (string-length word)) n)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp30fsatji.rkt:17:19: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmp30fsatji.rkt:17:19\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count_consonants word)\n    (define (count_consonants_iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is_consonant\
    \ (first word))\n              (count_consonants_iter (rest word) (+ count 1))\n\
    \              (count_consonants_iter (rest word) count))))\n    (count_consonants_iter\
    \ word 0))\n  (define (select_words_iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count_consonants word))\n              (select_words_iter (string-drop\
    \ s (string-length word)) n (append result (list word)))\n              (select_words_iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select_words_iter s n\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3yymbsn2.rkt:28:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond [(empty? word)\
    \ 0]\n          [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond [(empty? words) empty]\n          [(= n (count-consonants\
    \ (first words))) (cons (first words) (select-words-helper (rest words) n))]\n\
    \          [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpcll73rnu.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcll73rnu.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcll73rnu.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcll73rnu.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpcll73rnu.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpcll73rnu.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null?\
    \ word) 0)\n          ((is_consonant? (car word)) (+ 1 (count-consonants (cdr\
    \ word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpx8ccisqm.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (or (char=? c #\\b)\n        (char=? c #\\\
    c)\n        (char=? c #\\d)\n        (char=? c #\\f)\n        (char=? c #\\g)\n\
    \        (char=? c #\\h)\n        (char=? c #\\j)\n        (char=? c #\\k)\n \
    \       (char=? c #\\l)\n        (char=? c #\\m)\n        (char=? c #\\n)\n  \
    \      (char=? c #\\p)\n        (char=? c #\\q)\n        (char=? c #\\r)\n   \
    \     (char=? c #\\s)\n        (char=? c #\\t)\n        (char=? c #\\v)\n    \
    \    (char=? c #\\w)\n        (char=? c #\\x)\n        (char=? c #\\y)\n     \
    \   (char=? c #\\z)))\n  (define (count-consonants word)\n    (if (string-empty?\
    \ word)\n        0\n        (if (consonant? (string-ref word 0))\n           \
    \ (+ 1 (count-consonants (substring word 1)))\n            (count-consonants (substring\
    \ word 1)))))\n  (define (select-words-helper s n)\n    (if (string-empty? s)\n\
    \        '()\n        (if (= n (count-consonants (car (string-split s #\\space))))\n\
    \            (cons (car (string-split s #\\space))\n                  (select-words-helper\
    \ (cdr (string-split s #\\space)) n))\n            (select-words-helper (cdr (string-split\
    \ s #\\space)) n))))\n  (select-words-helper s n))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0g8ht809.rkt:38:9: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmp0g8ht809.rkt:38:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n acc)\n    (cond [(empty? s)\
    \ acc]\n          [(= n (count-consonants (first s)))\n           (select-words-helper\
    \ (rest s) n (append acc (list (first s))))]\n          [else (select-words-helper\
    \ (rest s) n acc)]))\n  (select-words-helper (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppvuhuu55.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppvuhuu55.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppvuhuu55.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppvuhuu55.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppvuhuu55.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppvuhuu55.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\\
    i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpre13zmit.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpre13zmit.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpre13zmit.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpre13zmit.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpre13zmit.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpre13zmit.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants word)\n    (define (count-consonants-iter word count)\n  \
    \    (if (empty? word)\n          count\n          (if (is_vowel (first word))\n\
    \              (count-consonants-iter (rest word) count)\n              (count-consonants-iter\
    \ (rest word) (+ count 1)))))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter words n result)\n    (if (empty? words)\n        result\n\
    \        (if (= n (count-consonants (first words)))\n            (select-words-iter\
    \ (rest words) n (append result (list (first words))))\n            (select-words-iter\
    \ (rest words) n result))))\n  (select-words-iter (string-split s) n '()))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zkjb8n7.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zkjb8n7.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zkjb8n7.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zkjb8n7.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3zkjb8n7.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3zkjb8n7.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7o8qh4sa.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp7o8qh4sa.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp64ya757j.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp64ya757j.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants s)\n    (cond ((null? s) 0)\n          ((is-consonant?\
    \ (car s)) (+ 1 (count-consonants (cdr s))))\n          (else (count-consonants\
    \ (cdr s)))))\n  (define (select-words-helper s n acc)\n    (cond ((null? s) acc)\n\
    \          ((= n (count-consonants (car s))) (select-words-helper (cdr s) n (append\
    \ acc (list (car s)))))\n          (else (select-words-helper (cdr s) n acc))))\n\
    \  (select-words-helper (string-split s) n '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuzy0b1l3.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants s)\n    (cond ((null? s) 0)\n       \
    \   ((is-consonant? (car s)) (+ 1 (count-consonants (cdr s))))\n          (else\
    \ (count-consonants (cdr s)))))\n  (define (select-words-helper s n result)\n\
    \    (cond ((null? s) result)\n          ((= n (count-consonants (car s)))\n \
    \          (select-words-helper (cdr s) n (append result (list (car s)))))\n \
    \         (else (select-words-helper (cdr s) n result))))\n  (select-words-helper\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpypltq3_7.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count_consonants s)\n    (if (empty? s)\n        0\n        (+ (if\
    \ (is_consonant (first s)) 1 0) (count_consonants (rest s)))))\n  (define (select_words_iter\
    \ s n acc)\n    (if (empty? s)\n        (reverse acc)\n        (let ([w (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s)])\n          (if (and w (= n (count_consonants (first w))))\n\
    \              (select_words_iter (regexp-replace #rx\"^[a-zA-Z]+\" s \"\") n\
    \ (cons (first w) acc))\n              (select_words_iter (regexp-replace #rx\"\
    ^[a-zA-Z]+\" s \"\") n acc)))))\n  (select_words_iter s n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv0dxluz.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvv0dxluz.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv0dxluz.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpvv0dxluz.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpvv0dxluz.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n"
  exit_code: -1
  status: Timeout
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))]\n     \
    \ [else (select_words_iter (rest s) n (cons (first s) acc))]))\n  (select_words_iter\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ckcld6d.rkt:40:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ckcld6d.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ckcld6d.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ckcld6d.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7ckcld6d.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7ckcld6d.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-alphabetic? c) (char-whitespace?\
    \ c))))\n  (define (count-consonants word)\n    (for/fold ([count 0]) ([c (in-string\
    \ word)])\n      (if (is-consonant? c)\n          (+ count 1)\n          count)))\n\
    \  (for/list ([word (in-string s)])\n    (if (= n (count-consonants word))\n \
    \       word\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:32:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\M\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:33:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\M\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:34:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\s\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:35:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\H\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:36:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\U\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv44auphb.rkt:38:4\n\
    \nin-string: contract violation\n  expected: string\n  given: #\\a\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n\
    \             [consonants (lambda (word)\n                           (let* ([vowels\
    \ \"aeiou\"]\n                                  [count (lambda (c)\n         \
    \                                  (if (member c vowels)\n                   \
    \                            0\n                                             \
    \  1))])\n                             (apply + (map count word))))]\n       \
    \      [filtered (filter (lambda (word)\n                                 (= (consonants\
    \ word) n))\n                               words)])\n        filtered)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:35:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:36:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:37:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:38:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:39:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdd_gaker.rkt:41:4\n\
    \nmap: contract violation\n  expected: list?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (word) (= n (count-consonants word))) (string-split s)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpas4r9yeq.rkt:15:31: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpas4r9yeq.rkt:15:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ((words (string-split s #\\\
    space)))\n        (for/list ([word words])\n          (if (= (count-consonants\
    \ word) n)\n              word)))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzimgqtih.rkt:19:10: if: missing an \"else\" expression\n  in: (if\
    \ (= (count-consonants word) n) word)\n  location...:\n   /tmp/tmpzimgqtih.rkt:19:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (or (char-ci=? c #\\a)\n         \
    \    (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count_consonants word)\n\
    \    (define (count_consonants_iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is_consonant? (first word))\n              (count_consonants_iter\
    \ (rest word) (+ count 1))\n              (count_consonants_iter (rest word) count))))\n\
    \    (count_consonants_iter word 0))\n  (define (select_words_iter s n words)\n\
    \    (if (empty? s)\n        words\n        (if (= n (count_consonants (first\
    \ words)))\n            (select_words_iter (rest s) n (cons (first words) words))\n\
    \            (select_words_iter (rest s) n words))))\n  (select_words_iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd518ubhu.rkt:42:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ '()\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd518ubhu.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd518ubhu.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd518ubhu.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd518ubhu.rkt:46:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: '()\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpd518ubhu.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: '()\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((empty?\
    \ word) 0)\n          ((consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word))))\n          (else (count-consonants (rest word)))))\n  (define (select-words-iter\
    \ words n)\n    (cond ((empty? words) empty)\n          ((= n (count-consonants\
    \ (first words))) (cons (first words) (select-words-iter (rest words) n)))\n \
    \         (else (select-words-iter (rest words) n))))\n  (select-words-iter (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpkosqbajx.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkosqbajx.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkosqbajx.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkosqbajx.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpkosqbajx.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpkosqbajx.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-iter words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-iter (rest words) n))\n            (select-words-iter\
    \ (rest words) n))))\n  (select-words-iter (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpo374c8m0.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo374c8m0.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo374c8m0.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo374c8m0.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpo374c8m0.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpo374c8m0.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants w)\n    (define (count-consonants-iter w i)\n    \
    \  (if (&lt; i (string-length w))\n          (if (is-vowel? (string-ref w i))\n\
    \              (count-consonants-iter w (+ i 1))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1))))\n          0))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (&lt; i (string-length s))\n        (let ((c (string-ref s i)))\n\
    \          (if (char-whitespace? c)\n              (select-words-iter s (+ i 1))\n\
    \              (let ((w (string-trim (string-take s i))))\n                (if\
    \ (= n (count-consonants w))\n                    (cons w (select-words-iter s\
    \ (+ i 1)))\n                    (select-words-iter s (+ i 1))))))\n        '()))\n\
    \  (select-words-iter s 0))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwlq_su57.rkt:17:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 25\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\h\
    \ #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (consonants s)\n    (cond ((empty? s) 0)\n          ((consonant? (first\
    \ s)) (+ 1 (consonants (rest s))))\n          (else (consonants (rest s)))))\n\
    \  (define (select_words-helper s n)\n    (cond ((empty? s) empty)\n         \
    \ ((= n (consonants (first s))) (cons (first s) (select_words-helper (rest s)\
    \ n)))\n          (else (select_words-helper (rest s) n))))\n  (select_words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpif8dv8ro.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpif8dv8ro.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif8dv8ro.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpif8dv8ro.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpif8dv8ro.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpif8dv8ro.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpabbewwud.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpabbewwud.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n         \
    \    (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (string-trim (first s))))\n\
    \          (if (= n (count-consonants word))\n              (select-words-iter\
    \ (rest s) n (append result (list word)))\n              (select-words-iter (rest\
    \ s) n result)))))\n  (select-words-iter (string-split s #\\space) n '()))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tfu0k57.rkt:43:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9tfu0k57.rkt:44:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tfu0k57.rkt:45:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9tfu0k57.rkt:46:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tfu0k57.rkt:47:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp9tfu0k57.rkt:48:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp9tfu0k57.rkt:49:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s\
    \ #\\space)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\"\
    )]\n             [consonant-count (lambda (word)\n                           \
    \     (for/fold ([count 0]) ([c (in-string word)])\n                         \
    \         (if (member c consonants)\n                                      (+\
    \ count 1)\n                                      count)))])\n        (for/list\
    \ ([word words]\n                   #:when (= n (consonant-count word)))\n   \
    \       word))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplwifkaa5.rkt:26:15: read-syntax: missing `]` to close `[` on line\
    \ 18, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 24\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n     \
    \ [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words))) (cons (first words) (select-words-helper (rest words) n))]\n\
    \      [else (select-words-helper (rest words) n)]))\n  (select-words-helper (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpk81lyw6j.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk81lyw6j.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk81lyw6j.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk81lyw6j.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpk81lyw6j.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpk81lyw6j.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp223r_bla.rkt:17:16: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmp223r_bla.rkt:17:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\\
    i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count_consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words-iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count_consonants\
    \ (first s)) n]\n      [(select_words-iter (rest s) n (cons (first s) result))]\n\
    \      [else (select_words-iter (rest s) n result)]))\n  (select_words-iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bvoziex.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bvoziex.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bvoziex.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bvoziex.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_bvoziex.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_bvoziex.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\\
    e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (string-empty? word)\n          count\n          (if (is-vowel? (string-ref\
    \ word 0))\n              (count-consonants-iter (substring word 1) count)\n \
    \             (count-consonants-iter (substring word 1) (+ count 1)))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n words)\n    (if (string-empty? s)\n\
    \        words\n        (let ((word (string-trim (string-take-while (lambda (c)\
    \ (not (char=? c #\\space))) s))))\n          (if (= n (count-consonants word))\n\
    \              (select-words-iter (string-drop-while (lambda (c) (not (char=?\
    \ c #\\space))) s) n (cons word words))\n              (select-words-iter (string-drop-while\
    \ (lambda (c) (not (char=? c #\\space))) s) n words)))))\n  (select-words-iter\
    \ s n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptp1qys6e.rkt:23:11: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmptp1qys6e.rkt:23:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpar7kwcp5.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpar7kwcp5.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppvn052ej.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmppvn052ej.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnjcirv_5.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpnjcirv_5.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n  \
    \    [else (count-consonants (rest s))]))\n  (define (select-words s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpk2tdmj.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdpk2tdmj.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpk2tdmj.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdpk2tdmj.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdpk2tdmj.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdpk2tdmj.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (for/fold ([count 0]) ([c (in-string\
    \ word)])\n      (if (is-consonant? c)\n          (add1 count)\n          count)))\n\
    \  (for/list ([word (in-list (string-split s))])\n    (if (= n (count-consonants\
    \ word))\n        word\n        #f)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeq8rq10.rkt:32:4\n\
    actual:     '(#f #f #f \"little\" #f)\nexpected:   '(\"little\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfeq8rq10.rkt:33:4\n\
    actual:     '(\"Mary\" #f #f #f \"lamb\")\nexpected:   '(\"Mary\" \"lamb\")\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfeq8rq10.rkt:34:4\nactual:     '(#f #f #f)\nexpected:   '()\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfeq8rq10.rkt:35:4\nactual:     '(#f \"world\")\nexpected:\
    \   '(\"world\")\n--------------------\n--------------------\nFAILURE\nname: \
    \      check-equal?\nlocation:   /tmp/tmpfeq8rq10.rkt:36:4\nactual:     '(#f #f)\n\
    expected:   '(\"Uncle\")\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfeq8rq10.rkt:38:4\nactual:     '(#f\
    \ \"b\" \"c\" \"d\" #f \"f\")\nexpected:   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count_consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word)) (+ 1 (count_consonants\
    \ (rest word)))]\n      [else (count_consonants (rest word))]))\n  (define (select_words_iter\
    \ s n acc)\n    (cond\n      [(empty? s) acc]\n      [(count_consonants (first\
    \ s)) (= n (count_consonants (first s)))]\n      [else (select_words_iter (rest\
    \ s) n (append acc (list (first s))))]))\n  (select_words_iter (string-split s)\
    \ n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpme1fsh_5.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpme1fsh_5.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpme1fsh_5.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpme1fsh_5.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpme1fsh_5.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpme1fsh_5.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppfyttdhb.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmppfyttdhb.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7zp_bp1m.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp7zp_bp1m.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (cond ((null? word) count)\n            ((is_vowel? (car word)) (count-consonants-iter\
    \ (cdr word) count))\n            (else (count-consonants-iter (cdr word) (+ count\
    \ 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter words\
    \ n count)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words)))\n           (cons (car words) (select-words-iter (cdr words) n count)))\n\
    \          (else (select-words-iter (cdr words) n count))))\n  (select-words-iter\
    \ (string-split s) n 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzkfb2ojn.rkt:41:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) '()]\n      [(= n (count-consonants (first s)))\n       (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vmpttau.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_vmpttau.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vmpttau.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_vmpttau.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_vmpttau.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_vmpttau.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([words (string-split s)])\n\
    \        (filter (lambda (w) (= n (count-consonants w))) words))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmppvfsc3i6.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmppvfsc3i6.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n \
    \     [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (define (count_consonants_iter word count)\n      (cond\n       \
    \ [(empty? word) count]\n        [(is_consonant (first word)) (count_consonants_iter\
    \ (rest word) (+ count 1))]\n        [else (count_consonants_iter (rest word)\
    \ count)]))\n    (count_consonants_iter word 0))\n  (define (select_words_iter\
    \ s n result)\n    (cond\n      [(empty? s) result]\n      [(count_consonants\
    \ (first s)) (= n (count_consonants (first s))) (select_words_iter (rest s) n\
    \ (append result (list (first s))))]\n      [else (select_words_iter (rest s)\
    \ n result)]))\n  (select_words_iter (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpijszc55i.rkt:42:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpijszc55i.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpijszc55i.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpijszc55i.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpijszc55i.rkt:46:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpijszc55i.rkt:48:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (word-consonants w)\n    (length (filter consonant?\
    \ (string->list w))))\n  (define (word-n-consonants? w)\n    (= n (word-consonants\
    \ w)))\n  (filter word-n-consonants? (string-split s)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgub3fd4v.rkt:28:4\n\
    actual:     '()\nexpected:   '(\"little\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgub3fd4v.rkt:29:4\nactual:\
    \     '()\nexpected:   '(\"Mary\" \"lamb\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgub3fd4v.rkt:31:4\nactual:\
    \     '()\nexpected:   '(\"world\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgub3fd4v.rkt:32:4\nactual:\
    \     '()\nexpected:   '(\"Uncle\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgub3fd4v.rkt:34:4\nactual:\
    \     '()\nexpected:   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a)\n         \
    \    (char-ci=? c #\\e)\n             (char-ci=? c #\\i)\n             (char-ci=?\
    \ c #\\o)\n             (char-ci=? c #\\u))))\n  (define (count-consonants word)\n\
    \    (define (count-consonants-iter word count)\n      (if (empty? word)\n   \
    \       count\n          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ((word (regexp-match #rx\"^[a-zA-Z]+\"\
    \ s)))\n          (if (and (not (empty? word))\n                   (= n (count-consonants\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"^[a-zA-Z]+\"\
    \ s \"\") n (append result (list word)))\n              (select-words-iter (regexp-replace\
    \ #rx\"^[a-zA-Z]+\" s \"\") n result)))))\n  (select-words-iter s n '()))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:44:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:45:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:46:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:47:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:48:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgqh96cax.rkt:49:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ #f\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgqh96cax.rkt:50:4\n\nchar-ci=?: contract violation\n  expected:\
    \ char?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let ([w (regexp-match #rx\"^[^ ]+\"\
    \ s)])\n        (if (and w (= n (count-consonants (car w))))\n            (cons\
    \ (car w) (select_words (regexp-replace #rx\"^[^ ]+ \" \"\" s) n))\n         \
    \   (select_words (regexp-replace #rx\"^[^ ]+ \" \"\" s) n)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9cbvn4st.rkt:18:25: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp9cbvn4st.rkt:18:25\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-vowel?\
    \ (first s)) (count-consonants (rest s))]\n      [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-iter s n acc)\n    (cond\n      [(empty?\
    \ s) acc]\n      [(count-consonants (first s)) (select-words-iter (rest s) n (cons\
    \ (first s) acc))]\n      [else (select-words-iter (rest s) n acc)]))\n  (select-words-iter\
    \ (string-split s #\\space) n '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r8e9adf.rkt:34:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6r8e9adf.rkt:35:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r8e9adf.rkt:36:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6r8e9adf.rkt:37:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r8e9adf.rkt:38:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp6r8e9adf.rkt:39:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp6r8e9adf.rkt:40:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpznuatz9x.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpznuatz9x.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (word)\n            (= n (count-consonants word)))\n \
    \         (string-split s #\\space)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_y1gxy1p.rkt:16:18: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp_y1gxy1p.rkt:16:18\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpffwdi9tr.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpffwdi9tr.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((empty?\
    \ word) 0)\n          ((is-consonant? (first word)) (+ 1 (count-consonants (rest\
    \ word))))\n          (else (count-consonants (rest word)))))\n  (define (select-words-helper\
    \ s n acc)\n    (cond ((empty? s) acc)\n          ((= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append acc (list (first s)))))\n     \
    \     (else (select-words-helper (rest s) n acc))))\n  (select-words-helper (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3rfzjbrm.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3rfzjbrm.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3rfzjbrm.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3rfzjbrm.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp3rfzjbrm.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp3rfzjbrm.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (or (equal? c #\\b)\n        (equal? c\
    \ #\\c)\n        (equal? c #\\d)\n        (equal? c #\\f)\n        (equal? c #\\\
    g)\n        (equal? c #\\h)\n        (equal? c #\\j)\n        (equal? c #\\k)\n\
    \        (equal? c #\\l)\n        (equal? c #\\m)\n        (equal? c #\\n)\n \
    \       (equal? c #\\p)\n        (equal? c #\\q)\n        (equal? c #\\r)\n  \
    \      (equal? c #\\s)\n        (equal? c #\\t)\n        (equal? c #\\v)\n   \
    \     (equal? c #\\w)\n        (equal? c #\\x)\n        (equal? c #\\y)\n    \
    \    (equal? c #\\z)))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (count-consonants word))\n              (select-words-iter (substring\
    \ s (add1 (string-length word))) n (append result (list word)))\n            \
    \  (select-words-iter (substring s (add1 (string-length word))) n result)))))\n\
    \  (select-words-iter s n '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv3r3s1vo.rkt:48:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxb_dnrcj.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpxb_dnrcj.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2d3ud473.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp2d3ud473.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s))))\n     (cons (first (string-split s)) (select_words (rest (string-split\
    \ s)) n))]\n    [else (select_words (rest (string-split s)) n)]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpixggcfwd.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpixggcfwd.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp_ivbmrd.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpp_ivbmrd.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (cond\n      [(empty? word)\
    \ 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ words n)\n    (cond\n      [(empty? words) empty]\n      [(= n (count-consonants\
    \ (first words)))\n       (cons (first words) (select-words-helper (rest words)\
    \ n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s \" \") n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq7c6u57.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiq7c6u57.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq7c6u57.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiq7c6u57.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpiq7c6u57.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpiq7c6u57.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n         (cons (first (string-split s #\\space)) (select_words\
    \ (rest (string-split s #\\space)) n))]\n        [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpotvich5v.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpotvich5v.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n      \
    \    [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n         \
    \ [else (count-consonants (rest s))]))\n  (define (select-words-helper s n)\n\
    \    (cond [(empty? s) empty]\n          [(= n (count-consonants (first s)))\n\
    \           (cons (first s) (select-words-helper (rest s) n))]\n          [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp44lz4eix.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp44lz4eix.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp44lz4eix.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp44lz4eix.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp44lz4eix.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp44lz4eix.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (if (empty? s)\n        0\n       \
    \ (+ (if (is-consonant? (first s)) 1 0)\n           (count-consonants (rest s)))))\n\
    \  (define (select-words-iter s n words)\n    (cond ((empty? s) words)\n     \
    \     ((char=? (first s) #\\space)\n           (select-words-iter (rest s) n words))\n\
    \          (else (let ((word (first s)))\n                  (select-words-iter\
    \ (rest s) n\n                                     (if (= (count-consonants word)\
    \ n)\n                                         (cons word words)\n           \
    \                              words))))))\n  (reverse (select-words-iter s n\
    \ '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtka1azj.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpgtka1azj.rkt:39:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgtka1azj.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtka1azj.rkt:41:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgtka1azj.rkt:42:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgtka1azj.rkt:43:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpgtka1azj.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is_vowel?\
    \ (first s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants\
    \ (rest s)))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s #\\space) n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmperzirn69.rkt:32:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperzirn69.rkt:33:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmperzirn69.rkt:34:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperzirn69.rkt:35:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmperzirn69.rkt:36:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmperzirn69.rkt:37:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmperzirn69.rkt:38:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6thmilbx.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp6thmilbx.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (and (not (char-alphabetic? c))\n     \
    \    (not (char-whitespace? c))))\n  (define (count-consonants word)\n    (define\
    \ (count-consonants-iter word count)\n      (if (empty? word)\n          count\n\
    \          (if (is-consonant? (first word))\n              (count-consonants-iter\
    \ (rest word) (+ count 1))\n              (count-consonants-iter (rest word) count))))\n\
    \    (count-consonants-iter word 0))\n  (define (select-words-iter s n result)\n\
    \    (if (empty? s)\n        result\n        (let ([word (first (regexp-match\
    \ #rx\"\\w+\" s))])\n          (if (= n (count-consonants word))\n           \
    \   (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append result (list\
    \ word)))\n              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\"\
    ) n result)))))\n  (select-words-iter s n '()))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate\
    \ \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptus1btl1.rkt:29:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplw9p7he3.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmplw9p7he3.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (define (count-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (is-consonant?\
    \ (first word))\n              (count-consonants-iter (rest word) (+ count 1))\n\
    \              (count-consonants-iter (rest word) count))))\n    (count-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-iter (rest s) n (append result (list word)))\n\
    \              (select-words-iter (rest s) n result)))))\n  (select-words-iter\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphjl_f2j7.rkt:39:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphjl_f2j7.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphjl_f2j7.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphjl_f2j7.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphjl_f2j7.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphjl_f2j7.rkt:45:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= (count-consonants (first s)) n)\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpnu66e5a0.rkt:17:9: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpnu66e5a0.rkt:17:9\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu3a59f6c.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpu3a59f6c.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (count-consonants s)\n    (define (is-consonant? c)\n      (member\
    \ c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\"\
    \ \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\" \"z\")))\n    (cond ((string=?\
    \ s \"\") 0)\n          ((is-consonant? (string-ref s 0)) (+ 1 (count-consonants\
    \ (substring s 1))))\n          (else (count-consonants (substring s 1)))))\n\
    \  (define (select-words-helper s n acc)\n    (cond ((string=? s \"\") acc)\n\
    \          ((= n (count-consonants (car (string-split s)))) (select-words-helper\
    \ (cdr (string-split s)) n (append acc (list (car (string-split s))))))\n    \
    \      (else (select-words-helper (cdr (string-split s)) n acc))))\n  (select-words-helper\
    \ s n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfgk_ig.rkt:32:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: '(\"had\" \"a\"\
    \ \"little\" \"lamb\")\n--------------------\n--------------------\nERROR\nname:\
    \       check-equal?\nlocation:   /tmp/tmp0gfgk_ig.rkt:33:4\n\nstring=?: contract\
    \ violation\n  expected: string?\n  given: '(\"had\" \"a\" \"little\" \"lamb\"\
    )\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0gfgk_ig.rkt:34:4\n\nstring=?: contract violation\n  expected:\
    \ string?\n  given: '(\"white\" \"space\")\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfgk_ig.rkt:35:4\n\nstring=?:\
    \ contract violation\n  expected: string?\n  given: '(\"world\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfgk_ig.rkt:36:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: '(\"sam\")\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0gfgk_ig.rkt:38:4\n\
    \nstring=?: contract violation\n  expected: string?\n  given: '(\"b\" \"c\" \"\
    d\" \"e\" \"f\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpoo8scxx8.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpoo8scxx8.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (if (null? word)\n        0\n  \
    \      (+ (if (is_consonant? (car word)) 1 0)\n           (count-consonants (cdr\
    \ word)))))\n  (define (select-words-helper s n acc)\n    (if (null? s)\n    \
    \    acc\n        (let ((word (car s)))\n          (if (= n (count-consonants\
    \ word))\n              (select-words-helper (cdr s) n (cons word acc))\n    \
    \          (select-words-helper (cdr s) n acc)))))\n  (reverse (select-words-helper\
    \ (string-split s) n '())))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:37:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:39:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:40:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvmq3wagc.rkt:42:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (if (empty? word)\n\
    \        0\n        (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-helper words n)\n    (if (empty? words)\n\
    \        '()\n        (if (= n (count-consonants (first words)))\n           \
    \ (cons (first words) (select-words-helper (rest words) n))\n            (select-words-helper\
    \ (rest words) n))))\n  (select-words-helper (string-split s) n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxruk63p.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxruk63p.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxruk63p.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxruk63p.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpdxruk63p.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpdxruk63p.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([word (car (regexp-match\
    \ #rx\"^[a-zA-Z]+\" s))])\n        (if (and word (= n (count-consonants word)))\n\
    \            (cons word (select_words (substring s (string-length word)) n))\n\
    \            (select_words (substring s (string-length word)) n)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpylh1efq0.rkt:18:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpylh1efq0.rkt:18:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpacfg4sbh.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpacfg4sbh.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n\
    \      [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count_consonants (first s))) (cons (first s) (select_words_helper\
    \ (rest s) n))]\n      [else (select_words_helper (rest s) n)]))\n  (select_words_helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpv86jp4xz.rkt:40:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv86jp4xz.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv86jp4xz.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv86jp4xz.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpv86jp4xz.rkt:44:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpv86jp4xz.rkt:46:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n)\n    (cond [(empty? s) empty]\n\
    \          [(= n (count-consonants (first s)))\n           (cons (first s) (select-words-helper\
    \ (rest s) n))]\n          [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdkr0v_l.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsdkr0v_l.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdkr0v_l.rkt:35:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsdkr0v_l.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsdkr0v_l.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsdkr0v_l.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n \
    \     [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) (reverse\
    \ acc)]\n      [(= n (count_consonants (first s)))\n       (select_words_iter\
    \ (rest s) n (cons (first s) acc))]\n      [else (select_words_iter (rest s) n\
    \ acc)]))\n  (select_words_iter (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp52kjvas4.rkt:41:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp52kjvas4.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp52kjvas4.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp52kjvas4.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp52kjvas4.rkt:45:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp52kjvas4.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (or (char-ci=? c #\\a) (char-ci=?\
    \ c #\\e) (char-ci=? c #\\i) (char-ci=? c #\\o) (char-ci=? c #\\u))))\n  (define\
    \ (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant? (first\
    \ s)) (+ 1 (count-consonants (rest s)))]\n          [else (count-consonants (rest\
    \ s))]))\n  (define (select-words-helper s n result)\n    (cond [(empty? s) result]\n\
    \          [(is-consonant? (first s)) (select-words-helper (rest s) (+ 1 n) result)]\n\
    \          [(= n 0) (select-words-helper (rest s) 0 (append result (list (string-join\
    \ (first s)))))\n           (select-words-helper (rest s) 0 result)]))\n  (select-words-helper\
    \ (string-split s) 0 '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:33:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:34:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:35:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:36:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:37:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3my8aqjy.rkt:39:4\n\
    \nchar-ci=?: contract violation\n  expected: char?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (filter (lambda (x) (= n (count-consonants x))) w))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwszcwpp7.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpwszcwpp7.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n      \
    \    [(is-consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n         \
    \ [else (count-consonants (rest s))]))\n  (define (select-words-helper s n acc)\n\
    \    (cond [(empty? s) acc]\n          [(= n (count-consonants (first s))) (select-words-helper\
    \ (rest s) n (append acc (list (first s))))]\n          [else (select-words-helper\
    \ (rest s) n acc)]))\n  (select-words-helper (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nnfh_4k.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_nnfh_4k.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nnfh_4k.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_nnfh_4k.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_nnfh_4k.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_nnfh_4k.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants word)\n    (if (empty? word)\n        0\n        (if\
    \ (is-vowel? (first word))\n            (count-consonants (rest word))\n     \
    \       (+ 1 (count-consonants (rest word))))))\n  (define (select-words-helper\
    \ words n)\n    (if (empty? words)\n        '()\n        (if (= n (count-consonants\
    \ (first words)))\n            (cons (first words) (select-words-helper (rest\
    \ words) n))\n            (select-words-helper (rest words) n))))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtsy018c.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtsy018c.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtsy018c.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtsy018c.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqtsy018c.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqtsy018c.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s #\\space)])\n\
    \        (for/list ([w w])\n          (if (= n (count-consonants w))\n       \
    \       w)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate select_words))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\"\
    \ 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\"\
    \ 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"\
    ))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplcwnuhyp.rkt:19:10: if: missing an \"else\" expression\n  in: (if\
    \ (= n (count-consonants w)) w)\n  location...:\n   /tmp/tmplcwnuhyp.rkt:19:10\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (empty? s)\n      '()\n      (let ([words (string-split s #\\space)])\n\
    \        (filter (lambda (w) (= n (count-consonants w))) words))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph9_5exgy.rkt:18:34: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmph9_5exgy.rkt:18:34\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpixmrxas8.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpixmrxas8.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) '()]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpiv3pt7ku.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpiv3pt7ku.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants word)\n    (if (empty? word)\n        0\n        (if\
    \ (is_vowel? (first word))\n            (count-consonants (rest word))\n     \
    \       (+ 1 (count-consonants (rest word))))))\n  (define (is-n-consonants? word)\n\
    \    (= n (count-consonants word)))\n  (define (select-words-helper words)\n \
    \   (if (empty? words)\n        empty\n        (if (is-n-consonants? (first words))\n\
    \            (cons (first words) (select-words-helper (rest words)))\n       \
    \     (select-words-helper (rest words)))))\n  (select-words-helper (string-split\
    \ s)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpscj_h0xb.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpscj_h0xb.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpscj_h0xb.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpscj_h0xb.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpscj_h0xb.rkt:42:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpscj_h0xb.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond [(empty? word)\
    \ 0]\n          [(is_consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond [(empty? s) empty]\n          [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n          [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0xuuyr6t.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0xuuyr6t.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0xuuyr6t.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0xuuyr6t.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp0xuuyr6t.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp0xuuyr6t.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null?\
    \ word) 0)\n          ((is_consonant? (car word)) (+ 1 (count-consonants (cdr\
    \ word))))\n          (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ words n)\n    (cond ((null? words) '())\n          ((= n (count-consonants (car\
    \ words))) (cons (car words) (select-words-helper (cdr words) n)))\n         \
    \ (else (select-words-helper (cdr words) n))))\n  (select-words-helper (string-split\
    \ s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpeurdpr2_.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants w)\n    (define (count-consonants-iter w n)\n    \
    \  (if (empty? w)\n          n\n          (if (is_vowel? (first w))\n        \
    \      (count-consonants-iter (rest w) n)\n              (count-consonants-iter\
    \ (rest w) (+ n 1)))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s n l)\n    (if (empty? s)\n        l\n        (let ((w (first s)))\n      \
    \    (if (= n (count-consonants w))\n              (select-words-iter (rest s)\
    \ n (cons w l))\n              (select-words-iter (rest s) n l)))))\n  (select-words-iter\
    \ (string-split s #\\space) n '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr6a0rhk.rkt:39:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnr6a0rhk.rkt:40:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr6a0rhk.rkt:41:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnr6a0rhk.rkt:42:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr6a0rhk.rkt:43:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpnr6a0rhk.rkt:44:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpnr6a0rhk.rkt:45:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\\
    i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants word)\n    (cond\n\
    \      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1 (count-consonants\
    \ (rest word)))]\n      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpid45jzhk.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpid45jzhk.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpid45jzhk.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpid45jzhk.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpid45jzhk.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpid45jzhk.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplfsij21z.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmplfsij21z.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\n\
    \     (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest\
    \ s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp67weh49p.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp67weh49p.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([word (car (regexp-match\
    \ #rx\"\\w+\" s))])\n        (if (eq? (count-consonants word) n)\n           \
    \ (cons word (select_words (substring s (string-length word)) n))\n          \
    \  (select_words (substring s (string-length word)) n)))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaebzvucc.rkt:17:37: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-tokenize s)])\n\
    \        (cond\n         [(= n (count-consonants (car w))) (cons (car w) (select_words\
    \ (string-join (cdr w) \" \") n))]\n         [else (select_words (string-join\
    \ (cdr w) \" \") n)]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp63z4i9df.rkt:17:16: string-tokenize: unbound identifier\n  in:\
    \ string-tokenize\n  location...:\n   /tmp/tmp63z4i9df.rkt:17:16\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0neskham.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp0neskham.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants s)\n    (cond ((string=? s \"\") 0)\n          ((is_consonant?\
    \ (string-ref s 0)) (+ 1 (count-consonants (substring s 1))))\n          (else\
    \ (count-consonants (substring s 1)))))\n  (define (select-words s n)\n    (cond\
    \ ((string=? s \"\") '())\n          ((= n (count-consonants (string-take s (string-index\
    \ #\\space s))))\n           (cons (string-take s (string-index #\\space s)) (select-words\
    \ (string-drop s (string-index #\\space s)) n)))\n          (else (select-words\
    \ (string-drop s (string-index #\\space s)) n))))\n  (select-words s n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp0sf5r11v.rkt:23:35: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmp0sf5r11v.rkt:23:35\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count_consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is_vowel (first\
    \ s)) (count_consonants (rest s))]\n      [else (+ 1 (count_consonants (rest s)))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) (reverse\
    \ acc)]\n      [(equal? n (count_consonants (first s)))\n       (select_words_iter\
    \ (rest s) n (cons (first s) acc))]\n      [else (select_words_iter (rest s) n\
    \ acc)]))\n  (select_words_iter (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp2043odqn.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2043odqn.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2043odqn.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2043odqn.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp2043odqn.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp2043odqn.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n lst)\n    (cond\n      [(empty?\
    \ s) lst]\n      [(= n (count-consonants (first s))) (select-words-helper (rest\
    \ s) n (append lst (list (first s))))]\n      [else (select-words-helper (rest\
    \ s) n lst)]))\n  (select-words-helper (string-split s) n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyyj9e9r.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyyj9e9r.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyyj9e9r.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyyj9e9r.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpsyyj9e9r.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpsyyj9e9r.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (w) (= n (count-consonants w))) (string-split s #\\space)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpq81md83t.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpq81md83t.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (filter (lambda (w) (= n (count-consonants w))) (string-split s)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpcn4dmi4t.rkt:15:28: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpcn4dmi4t.rkt:15:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants w)\n    (define (count-consonants-iter w i c)\n  \
    \    (if (= i (string-length w))\n          c\n          (if (is_vowel? (string-ref\
    \ w i))\n              (count-consonants-iter w (+ i 1) c)\n              (count-consonants-iter\
    \ w (+ i 1) (+ c 1)))))\n    (count-consonants-iter w 0 0))\n  (define (select-words-iter\
    \ s i l)\n    (if (= i (string-length s))\n        l\n        (let ((w (string-trim\
    \ (string-take s i))))\n          (if (= n (count-consonants w))\n           \
    \   (select-words-iter s (+ i (string-length w)) (cons w l))\n              (select-words-iter\
    \ s (+ i (string-length w)) l)))))\n  (select-words-iter s 0 '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu1a0bbel.rkt:28:31: string-take: unbound identifier\n  in: string-take\n\
    \  location...:\n   /tmp/tmpu1a0bbel.rkt:28:31\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (regexp-split\
    \ #rx\" \" s))))\n     (cons (first (regexp-split #rx\" \" s)) (select_words (rest\
    \ (regexp-split #rx\" \" s)) n))]\n    [else (select_words (rest (regexp-split\
    \ #rx\" \" s)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyyd8qmf_.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpyyd8qmf_.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is-consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper words n)\n    (cond\n      [(empty? words) empty]\n\
    \      [(= n (count-consonants (first words))) (cons (first words) (select-words-helper\
    \ (rest words) n))]\n      [else (select-words-helper (rest words) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d8_ew3i.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d8_ew3i.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d8_ew3i.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d8_ew3i.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp7d8_ew3i.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp7d8_ew3i.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\")) #f]\n      [else #t]))\n  (define (count-consonants word)\n\
    \    (cond\n      [(empty? word) 0]\n      [(is_consonant? (first word)) (+ 1\
    \ (count-consonants (rest word)))]\n      [else (count-consonants (rest word))]))\n\
    \  (define (select-words-helper s n)\n    (cond\n      [(empty? s) empty]\n  \
    \    [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_gr8xug.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_gr8xug.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_gr8xug.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_gr8xug.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpj_gr8xug.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpj_gr8xug.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(member c '(#\\a #\\e #\\\
    i #\\o #\\u)) #f]\n      [else #t]))\n  (define (count-consonants w)\n    (cond\n\
    \      [(empty? w) 0]\n      [(is-consonant? (first w)) (+ 1 (count-consonants\
    \ (rest w)))]\n      [else (count-consonants (rest w))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s)))\n       (cons (first s) (select-words-helper (rest s) n))]\n      [else\
    \ (select-words-helper (rest s) n)]))\n  (select-words-helper (string-split s)\
    \ n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp17a1yel_.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp17a1yel_.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp17a1yel_.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp17a1yel_.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp17a1yel_.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp17a1yel_.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (cond ((null? word) 0)\n \
    \         ((is-consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n \
    \         (else (count-consonants (cdr word)))))\n  (define (select-words-helper\
    \ s n result)\n    (cond ((null? s) result)\n          ((= n (count-consonants\
    \ (car s))) (select-words-helper (cdr s) n (append result (list (car s)))))\n\
    \          (else (select-words-helper (cdr s) n result))))\n  (select-words-helper\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp92_b0g2y.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n\
    \             [words-with-n-consonants (filter (lambda (w) (= n (count-consonants\
    \ w))) words)])\n        words-with-n-consonants)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpn7hswkpq.rkt:18:64: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpn7hswkpq.rkt:18:64\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n         (cons (first (string-split s #\\space))\n         \
    \      (select_words (string-drop s (string-length (first (string-split s #\\\
    space)))) n))]\n        [else (select_words (string-drop s (string-length (first\
    \ (string-split s #\\space)))) n)]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmph59e6qxj.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmph59e6qxj.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space)) (select_words (rest\
    \ (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps02jsdqr.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmps02jsdqr.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (cond\n      [(or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n\
    \  (define (count-consonants s)\n    (cond\n      [(empty? s) 0]\n      [(is-consonant?\
    \ (first s)) (+ 1 (count-consonants (rest s)))]\n      [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n)\n    (cond\n      [(empty?\
    \ s) empty]\n      [(= n (count-consonants (first s))) (cons (first s) (select-words-helper\
    \ (rest s) n))]\n      [else (select-words-helper (rest s) n)]))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjbbvp82.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqjbbvp82.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjbbvp82.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqjbbvp82.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpqjbbvp82.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpqjbbvp82.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond [(empty? s) empty]\n        [(= n (count-consonants (first s)))\n\
    \         (cons (first s) (select_words (rest s) n))]\n        [else (select_words\
    \ (rest s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxtzsktn2.rkt:16:15: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpxtzsktn2.rkt:16:15\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants w)\n    (define (count-consonants-iter w i)\n      (if (=\
    \ i (string-length w))\n          0\n          (if (is-vowel (string-ref w i))\n\
    \              (count-consonants-iter w (+ i 1))\n              (+ 1 (count-consonants-iter\
    \ w (+ i 1))))))\n    (count-consonants-iter w 0))\n  (define (select-words-iter\
    \ s i)\n    (if (= i (string-length s))\n        '()\n        (let ((w (string-trim\
    \ (substring s i (string-index-right s #\\space i)))))\n          (if (= n (count-consonants\
    \ w))\n              (cons w (select-words-iter s (+ i (string-length w))))\n\
    \              (select-words-iter s (+ i (string-length w)))))))\n  (select-words-iter\
    \ s 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpu1zd_6mp.rkt:28:46: string-index-right: unbound identifier\n  in:\
    \ string-index-right\n  location...:\n   /tmp/tmpu1zd_6mp.rkt:28:46\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (length (filter is-consonant?\
    \ (string->list word))))\n  (define (is-n-consonants? word)\n    (= n (count-consonants\
    \ word)))\n  (filter is-n-consonants? (string-split s #\\space)))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpznrtco_3.rkt:28:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpznrtco_3.rkt:29:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpznrtco_3.rkt:30:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpznrtco_3.rkt:31:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpznrtco_3.rkt:32:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpznrtco_3.rkt:33:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpznrtco_3.rkt:34:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count_consonants s)\n    (cond\n      [(empty? s) 0]\n\
    \      [(is_consonant? (first s)) (+ 1 (count_consonants (rest s)))]\n      [else\
    \ (count_consonants (rest s))]))\n  (define (select_words_iter s n result)\n \
    \   (cond\n      [(empty? s) result]\n      [(= n (count_consonants (first s)))\n\
    \       (select_words_iter (rest s) n (append result (list (first s))))]\n   \
    \   [else (select_words_iter (rest s) n result)]))\n  (select_words_iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ysprjda.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ysprjda.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ysprjda.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ysprjda.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1ysprjda.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1ysprjda.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s)]\n\
    \             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\")]\n     \
    \        [consonant-count (lambda (word)\n                                (let\
    \ loop ([word word]\n                                           [count 0])\n \
    \                                 (if (string-null? word)\n                  \
    \                    count\n                                      (if (member\
    \ (string-ref word 0) consonants)\n                                          (loop\
    \ (substring word 1) (+ count 1))\n                                          (loop\
    \ (substring word 1) count)))))]\n             [selected-words (filter (lambda\
    \ (word) (= (consonant-count word) n)) words)])\n        selected-words)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpxwjlhzos.rkt:28:22: read-syntax: missing `]` to close `[` on line\
    \ 18, found instead `)`\n  possible cause: indentation suggests a missing `]`\
    \ before line 28\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants word)\n    (cond\n      [(empty?\
    \ word) 0]\n      [(consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \      [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n)\n    (cond\n      [(empty? s) empty]\n      [(= n (count-consonants (first\
    \ s))) (cons (first s) (select-words-helper (rest s) n))]\n      [else (select-words-helper\
    \ (rest s) n)]))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8w2lr0c8.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8w2lr0c8.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8w2lr0c8.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8w2lr0c8.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8w2lr0c8.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8w2lr0c8.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\
    \ (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest s)\
    \ n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpbtjd3c9e.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpbtjd3c9e.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is_vowel (first\
    \ s)) (count-consonants (rest s))]\n          [else (+ 1 (count-consonants (rest\
    \ s)))]))\n  (define (select-words-iter s n result)\n    (cond [(empty? s) result]\n\
    \          [(is_vowel (first s)) (select-words-iter (rest s) n result)]\n    \
    \      [(= n (count-consonants s)) (select-words-iter (rest s) n (cons s result))]\n\
    \          [else (select-words-iter (rest s) n result)]))\n  (select-words-iter\
    \ (string-split s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt2yzv3rh.rkt:33:4\n\
    actual:     '((\"had\" \"a\" \"little\" \"lamb\"))\nexpected:   '(\"little\")\n\
    --------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpt2yzv3rh.rkt:34:4\nactual:     '((\"a\" \"little\" \"lamb\"\
    ))\nexpected:   '(\"Mary\" \"lamb\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt2yzv3rh.rkt:35:4\nactual:\
    \     '((\"white\" \"space\"))\nexpected:   '()\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt2yzv3rh.rkt:36:4\nactual:\
    \     '()\nexpected:   '(\"world\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt2yzv3rh.rkt:37:4\nactual:\
    \     '()\nexpected:   '(\"Uncle\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpt2yzv3rh.rkt:39:4\nactual:\
    \     '((\"f\"))\nexpected:   '(\"b\" \"c\" \"d\" \"f\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpx6c580xu.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpx6c580xu.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwjtnmhmz.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpwjtnmhmz.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define\
    \ (count_consonants word)\n    (define (count_consonants-iter word count)\n  \
    \    (cond\n        [(empty? word) count]\n        [(is_vowel (first word)) (count_consonants-iter\
    \ (rest word) count)]\n        [else (count_consonants-iter (rest word) (+ count\
    \ 1))]))\n    (count_consonants-iter word 0))\n  (define (select-words-iter s\
    \ n result)\n    (cond\n      [(empty? s) result]\n      [(equal? n (count_consonants\
    \ (first s))) (select-words-iter (rest s) n (append result (list (first s))))]\n\
    \      [else (select-words-iter (rest s) n result)]))\n  (select-words-iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp80yrct98.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80yrct98.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80yrct98.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80yrct98.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp80yrct98.rkt:40:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp80yrct98.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let* ([words (string-split s\
    \ #\\space)]\n             [consonants (string-&gt;list \"bcdfghjklmnpqrstvwxyz\"\
    )]\n             [consonant-count (lambda (word)\n                           \
    \     (length (filter (lambda (c)\n                                          \
    \        (member c consonants))\n                                            \
    \    (string-&gt;list word))))]\n             [selected-words (filter (lambda\
    \ (word)\n                                       (= (consonant-count word) n))\n\
    \                                     words)])\n        selected-words)))\n</code>\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpia4gq5h9.rkt:19:13: read-syntax: expected a `]` to close `[`\n\
    \  possible cause: indentation suggests a missing `]` before line 27\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"\
    g\" \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"\
    w\" \"x\" \"z\")))\n  (define (count-consonants word)\n    (cond ((null? word)\
    \ 0)\n          ((is-consonant? (car word)) (+ 1 (count-consonants (cdr word))))\n\
    \          (else (count-consonants (cdr word)))))\n  (define (select-words-iter\
    \ s n words)\n    (cond ((null? s) words)\n          ((equal? (count-consonants\
    \ (car s)) n) (select-words-iter (cdr s) n (append words (list (car s)))))\n \
    \         (else (select-words-iter (cdr s) n words))))\n  (select-words-iter (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp34q4knxy.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp52615xua.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp52615xua.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants w)\n    (cond ((null? w) 0)\n\
    \          ((consonant? (car w)) (+ 1 (count-consonants (cdr w))))\n         \
    \ (else (count-consonants (cdr w)))))\n  (define (select-words-helper s n)\n \
    \   (cond ((null? s) '())\n          ((= n (count-consonants (car s))) (cons (car\
    \ s) (select-words-helper (cdr s) n)))\n          (else (select-words-helper (cdr\
    \ s) n))))\n  (select-words-helper (string-split s) n))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Mary\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"simple\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:35:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Hello\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:36:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"Uncle\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpsciz5lm0.rkt:38:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (word-consonants word)\n    (define (word-consonants-iter\
    \ word count)\n      (if (empty? word)\n          count\n          (if (consonant?\
    \ (first word))\n              (word-consonants-iter (rest word) (+ count 1))\n\
    \              (word-consonants-iter (rest word) count))))\n    (word-consonants-iter\
    \ word 0))\n  (define (select-words-iter s n result)\n    (if (empty? s)\n   \
    \     result\n        (let ((word (first (regexp-match #rx\"\\w+\" s))))\n   \
    \       (if (= n (word-consonants word))\n              (select-words-iter (string-drop\
    \ s (string-length word)) n (append result (list word)))\n              (select-words-iter\
    \ (string-drop s (string-length word)) n result)))))\n  (select-words-iter s n\
    \ '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmps4mu0d1k.rkt:28:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (member c '(#\\b #\\c #\\d #\\f #\\g #\\\
    h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z)))\n\
    \  (define (count-consonants w)\n    (if (empty? w)\n        0\n        (+ (if\
    \ (is-consonant? (first w)) 1 0) (count-consonants (rest w)))))\n  (define (select-words-helper\
    \ s n)\n    (if (empty? s)\n        '()\n        (let ((w (first s)))\n      \
    \    (if (= n (count-consonants w))\n              (cons w (select-words-helper\
    \ (rest s) n))\n              (select-words-helper (rest s) n)))))\n  (select-words-helper\
    \ (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary had a\
    \ little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had\
    \ a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"\
    simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7vg7sz6.rkt:35:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7vg7sz6.rkt:36:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7vg7sz6.rkt:37:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7vg7sz6.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpw7vg7sz6.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpw7vg7sz6.rkt:41:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (cond\n      [(or (char=? c #\\a) (char=?\
    \ c #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u)) #f]\n      [else #t]))\n\
    \  (define (count_consonants word)\n    (cond\n      [(empty? word) 0]\n     \
    \ [(is_consonant? (first word)) (+ 1 (count_consonants (rest word)))]\n      [else\
    \ (count_consonants (rest word))]))\n  (define (select_words_helper s n)\n   \
    \ (cond\n      [(empty? s) empty]\n      [(= n (count_consonants (first s))) (cons\
    \ (first s) (select_words_helper (rest s) n))]\n      [else (select_words_helper\
    \ (rest s) n)]))\n  (select_words_helper (string-split s #\\space) n))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphvfjmeee.rkt:36:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphvfjmeee.rkt:37:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphvfjmeee.rkt:38:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphvfjmeee.rkt:39:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphvfjmeee.rkt:40:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmphvfjmeee.rkt:41:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmphvfjmeee.rkt:42:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\" \"\
    u\"))))\n  (define (count-consonants word)\n    (length (filter consonant? (string->list\
    \ word))))\n  (filter (lambda (word) (= n (count-consonants word)))\n        \
    \  (regexp-split #rx\"\\s+\" s)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4wywfjyj.rkt:20:24: read-syntax: unknown escape sequence `\\s`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n\
    \        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n\
    \  (define (count_consonants s)\n    (define (count_consonants_iter s n)\n   \
    \   (if (string-empty? s)\n          n\n          (if (is_vowel (string-ref s\
    \ 0))\n              (count_consonants_iter (substring s 1) n)\n             \
    \ (count_consonants_iter (substring s 1) (+ n 1)))))\n    (count_consonants_iter\
    \ s 0))\n  (define (select_words_iter s n lst)\n    (if (string-empty? s)\n  \
    \      lst\n        (let ((word (string-tokenize s #\\space)))\n          (if\
    \ (= n (count_consonants word))\n              (select_words_iter (substring s\
    \ (+ (string-length word) 1)) n (cons word lst))\n              (select_words_iter\
    \ (substring s (+ (string-length word) 1)) n lst)))))\n  (select_words_iter s\
    \ n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpjpnm940j.rkt:23:11: string-empty?: unbound identifier\n  in: string-empty?\n\
    \  location...:\n   /tmp/tmpjpnm940j.rkt:23:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants word)\n    (if (empty? word)\n        0\n \
    \       (+ (if (is-consonant? (first word)) 1 0)\n           (count-consonants\
    \ (rest word)))))\n  (define (select-words-iter words n)\n    (if (empty? words)\n\
    \        '()\n        (let ((word (first words)))\n          (if (= n (count-consonants\
    \ word))\n              (cons word (select-words-iter (rest words) n))\n     \
    \         (select-words-iter (rest words) n)))))\n  (select-words-iter (string-split\
    \ s #\\space) n))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpalf6s2r6.rkt:36:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpalf6s2r6.rkt:37:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpalf6s2r6.rkt:38:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpalf6s2r6.rkt:39:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpalf6s2r6.rkt:40:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpalf6s2r6.rkt:41:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpalf6s2r6.rkt:42:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (cond\n        [(empty? word) count]\n        [(is-vowel? (first word))\
    \ (count-consonants-iter (rest word) count)]\n        [else (count-consonants-iter\
    \ (rest word) (+ count 1))]))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter words n result)\n    (cond\n      [(empty? words) result]\n\
    \      [(= n (count-consonants (first words)))\n       (select-words-iter (rest\
    \ words) n (append result (list (first words))))]\n      [else (select-words-iter\
    \ (rest words) n result)]))\n  (select-words-iter (string-split s) n '()))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b9shl6_.rkt:37:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4b9shl6_.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b9shl6_.rkt:39:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4b9shl6_.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp4b9shl6_.rkt:41:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp4b9shl6_.rkt:43:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u)))\n \
    \ (define (count-consonants word)\n    (define (count-consonants-iter word n)\n\
    \      (if (empty? word)\n          n\n          (if (is-vowel? (first word))\n\
    \              (count-consonants-iter (rest word) n)\n              (count-consonants-iter\
    \ (rest word) (+ n 1)))))\n    (count-consonants-iter word 0))\n  (define (select-words-iter\
    \ s n result)\n    (if (empty? s)\n        result\n        (let ([word (first\
    \ (regexp-match #rx\"\\w+\" s))])\n          (if (= n (count-consonants word))\n\
    \              (select-words-iter (regexp-replace #rx\"\\w+\" s \"\") n (append\
    \ result (list word)))\n              (select-words-iter (regexp-replace #rx\"\
    \\w+\" s \"\") n result)))))\n  (select-words-iter s n '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzp5ycx3k.rkt:28:41: read-syntax: unknown escape sequence `\\w`\
    \ in string\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (rest (string-split s #\\space)) n))]\n    [else (select_words (rest (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpigbwudn3.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpigbwudn3.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_vowel c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n\
    \        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n\
    \  (define (count-consonants word)\n    (define (count-consonants-iter word count)\n\
    \      (if (empty? word)\n          count\n          (if (is_vowel (first word))\n\
    \              (count-consonants-iter (rest word) count)\n              (count-consonants-iter\
    \ (rest word) (+ count 1)))))\n    (count-consonants-iter word 0))\n  (define\
    \ (select-words-iter s n words)\n    (if (empty? s)\n        words\n        (let\
    \ ((word (string-trim (first (string-split s #\\space)))))\n          (if (= n\
    \ (count-consonants word))\n              (select-words-iter (rest (string-split\
    \ s #\\space)) n (append words (list word)))\n              (select-words-iter\
    \ (rest (string-split s #\\space)) n words)))))\n  (select-words-iter s n '()))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppbt5308o.rkt:43:4\n\
    \nstring-split: contract violation\n  expected: (or/c string? regexp?)\n  given:\
    \ #\\space\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppbt5308o.rkt:44:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppbt5308o.rkt:45:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppbt5308o.rkt:46:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppbt5308o.rkt:47:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmppbt5308o.rkt:48:4\n\nstring-split: contract violation\n  expected:\
    \ (or/c string? regexp?)\n  given: #\\space\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmppbt5308o.rkt:49:4\n\nstring-split:\
    \ contract violation\n  expected: (or/c string? regexp?)\n  given: #\\space\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant? c)\n    (not (member c '(\"a\" \"e\" \"i\" \"o\"\
    \ \"u\"))))\n  (define (count-consonants word)\n    (cond [(empty? word) 0]\n\
    \          [(is_consonant? (first word)) (+ 1 (count-consonants (rest word)))]\n\
    \          [else (count-consonants (rest word))]))\n  (define (select-words-helper\
    \ s n acc)\n    (cond [(empty? s) acc]\n          [(= n (count-consonants (first\
    \ s))) (select-words-helper (rest s) n (append acc (list (first s))))]\n     \
    \     [else (select-words-helper (rest s) n acc)]))\n  (select-words-helper (string-split\
    \ s) n '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_dj5wf7b.rkt:32:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_dj5wf7b.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_dj5wf7b.rkt:34:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_dj5wf7b.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_dj5wf7b.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_dj5wf7b.rkt:38:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is_consonant c)\n    (cond\n      [(char-ci=? c #\\a) #f]\n \
    \     [(char-ci=? c #\\e) #f]\n      [(char-ci=? c #\\i) #f]\n      [(char-ci=?\
    \ c #\\o) #f]\n      [(char-ci=? c #\\u) #f]\n      [else #t]))\n  (define (count_consonants\
    \ word)\n    (cond\n      [(empty? word) 0]\n      [(is_consonant (first word))\
    \ (+ 1 (count_consonants (rest word)))]\n      [else (count_consonants (rest word))]))\n\
    \  (define (select_words_iter s n acc)\n    (cond\n      [(empty? s) acc]\n  \
    \    [(count_consonants (first s)) (= n (count_consonants (first s)))\n      \
    \ (select_words_iter (rest s) n (append acc (list (first s))))]\n      [else (select_words_iter\
    \ (rest s) n acc)]))\n  (select_words_iter (string-split s) n '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate select_words))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n\
    \    (check-equal? (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"\
    lamb\"))\n    (check-equal? (candidate \"simple white space\" 2) (list ))\n  \
    \  (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n    (check-equal?\
    \ (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal? (candidate\
    \ \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1) (list \"b\"\
    \ \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmph23v885q.rkt:41:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph23v885q.rkt:42:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph23v885q.rkt:43:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph23v885q.rkt:44:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmph23v885q.rkt:45:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmph23v885q.rkt:47:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\"\
    \ \"h\" \"j\" \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\"\
    \ \"x\" \"y\" \"z\")))\n  (define (count-consonants s)\n    (cond\n      [(empty?\
    \ s) 0]\n      [(consonant? (first s)) (+ 1 (count-consonants (rest s)))]\n  \
    \    [else (count-consonants (rest s))]))\n  (define (select-words s n)\n    (cond\n\
    \      [(empty? s) empty]\n      [(= n (count-consonants (first s))) (cons (first\
    \ s) (select-words (rest s) n))]\n      [else (select-words (rest s) n)]))\n \
    \ (select-words (string-split s) n))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpso6xfvwi.rkt:34:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpso6xfvwi.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Mary\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpso6xfvwi.rkt:36:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"simple\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpso6xfvwi.rkt:37:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"Hello\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpso6xfvwi.rkt:38:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Uncle\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpso6xfvwi.rkt:40:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first s)))\n\
    \     (cons (first s) (select_words (rest s) n))]\n    [else (select_words (rest\
    \ s) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ select_words))\n    (check-equal? (candidate \"Mary had a little lamb\" 4) (list\
    \ \"little\"))\n    (check-equal? (candidate \"Mary had a little lamb\" 3) (list\
    \ \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white space\" 2)\
    \ (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"world\"))\n\
    \    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n    (check-equal?\
    \ (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"a b c d e f\" 1)\
    \ (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6swnsr3x.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp6swnsr3x.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (if (string=? s \"\")\n      '()\n      (let ([w (string-split s)])\n\
    \        (if (not (empty? w))\n            (let ([w1 (first w)])\n           \
    \   (if (= n (count-consonants w1))\n                  (cons w1 (select_words\
    \ (string-join (rest w)) n))\n                  (select_words (string-join (rest\
    \ w)) n)))\n            '()))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate select_words))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary\
    \ had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate\
    \ \"simple white space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\"\
    \ 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"\
    Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate\
    \ \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp00_4p9z2.rkt:20:24: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp00_4p9z2.rkt:20:24\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n))]\n    [else (select_words\
    \ (string-join (rest (string-split s #\\space)) #\\space) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp5iz_knaw.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp5iz_knaw.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (define (is-consonant? c)\n    (not (member c '(#\\a #\\e #\\i #\\o #\\\
    u))))\n  (define (count-consonants s)\n    (cond [(empty? s) 0]\n          [(is-consonant?\
    \ (first s)) (add1 (count-consonants (rest s)))]\n          [else (count-consonants\
    \ (rest s))]))\n  (define (select-words-helper s n lst)\n    (cond [(empty? s)\
    \ lst]\n          [(is-consonant? (first s)) (select-words-helper (rest s) (add1\
    \ n) lst)]\n          [(zero? n) (select-words-helper (rest s) 0 (cons (list->string\
    \ (reverse lst)) lst))]\n          [else (select-words-helper (rest s) 0 (cons\
    \ (first s) lst))]))\n  (select-words-helper s 0 '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit6t21d1.rkt:33:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Mary had a little lamb\"\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpit6t21d1.rkt:34:4\n\nfirst: contract\
    \ violation\n  expected: (and/c list? (not/c empty?))\n  given: \"Mary had a little\
    \ lamb\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpit6t21d1.rkt:35:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"simple white space\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit6t21d1.rkt:36:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"Hello world\"\n--------------------\n--------------------\nERROR\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpit6t21d1.rkt:37:4\n\nfirst: contract violation\n\
    \  expected: (and/c list? (not/c empty?))\n  given: \"Uncle sam\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpit6t21d1.rkt:38:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpit6t21d1.rkt:39:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"a b c d e f\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (first (string-split\
    \ s #\\space))))\n     (cons (first (string-split s #\\space))\n           (select_words\
    \ (string-trim-both s (first (string-split s #\\space))) n))]\n    [else (select_words\
    \ (string-trim-both s (first (string-split s #\\space))) n)]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate select_words))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 4) (list \"little\"))\n    (check-equal?\
    \ (candidate \"Mary had a little lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal?\
    \ (candidate \"simple white space\" 2) (list ))\n    (check-equal? (candidate\
    \ \"Hello world\" 4) (list \"world\"))\n    (check-equal? (candidate \"Uncle sam\"\
    \ 3) (list \"Uncle\"))\n    (check-equal? (candidate \"\" 4) (list ))\n    (check-equal?\
    \ (candidate \"a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpau6t24gs.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmpau6t24gs.rkt:17:11\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a string s and a natural number n, you have been\
    \ tasked to implement \n;; a function that returns a list of all words from string\
    \ s that contain exactly \n;; n consonants, in order these words appear in the\
    \ string s.\n;; If the string s is empty then the function should return an empty\
    \ list.\n;; Note: you may assume the input string contains only letters and spaces.\n\
    ;; Examples:\n;; select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n\
    ;; select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n;; select_words(\"\
    simple white space\", 2) ==> []\n;; select_words(\"Hello world\", 4) ==> [\"world\"\
    ]\n;; select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n(define (select_words s\
    \ n)\n  (cond\n    [(empty? s) empty]\n    [(= n (count-consonants (car (string-split\
    \ s #\\space))))\n     (cons (car (string-split s #\\space)) (select_words (cdr\
    \ (string-split s #\\space)) n))]\n    [else (select_words (cdr (string-split\
    \ s #\\space)) n)]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate select_words))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 4) (list \"little\"))\n    (check-equal? (candidate \"Mary had a little\
    \ lamb\" 3) (list \"Mary\" \"lamb\"))\n    (check-equal? (candidate \"simple white\
    \ space\" 2) (list ))\n    (check-equal? (candidate \"Hello world\" 4) (list \"\
    world\"))\n    (check-equal? (candidate \"Uncle sam\" 3) (list \"Uncle\"))\n \
    \   (check-equal? (candidate \"\" 4) (list ))\n    (check-equal? (candidate \"\
    a b c d e f\" 1) (list \"b\" \"c\" \"d\" \"f\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2au0vjyb.rkt:17:11: count-consonants: unbound identifier\n  in:\
    \ count-consonants\n  location...:\n   /tmp/tmp2au0vjyb.rkt:17:11\n"
  exit_code: 1
  status: OK
