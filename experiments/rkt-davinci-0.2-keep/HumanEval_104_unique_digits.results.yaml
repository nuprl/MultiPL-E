language: racket
name: HumanEval_104_unique_digits
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has-even-digit? n)\n    (cond ((zero? n) #f)\n         \
    \ ((is-even? n) #t)\n          (else (has-even-digit? (quotient n 10)))))\n  (define\
    \ (has-even-digit-list? l)\n    (cond ((null? l) #f)\n          ((has-even-digit?\
    \ (car l)) #t)\n          (else (has-even-digit-list? (cdr l)))))\n  (define (unique-digits-helper\
    \ l)\n    (cond ((null? l) '())\n          ((has-even-digit? (car l)) (unique-digits-helper\
    \ (cdr l)))\n          (else (cons (car l) (unique-digits-helper (cdr l))))))\n\
    \  (if (has-even-digit-list? x)\n      '()\n      (unique-digits-helper x)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmple1fgf51.rkt:35:4

    actual:     ''()

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmple1fgf51.rkt:37:4

    actual:     ''()

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmple1fgf51.rkt:38:4

    actual:     ''()

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilcifvdk.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilcifvdk.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilcifvdk.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpilcifvdk.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n)\n            (not (even?\
    \ (remainder n 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4c4xma6e.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4c4xma6e.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4c4xma6e.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzabep_3c.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzabep_3c.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzabep_3c.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzabep_3c.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78jhwjsl.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78jhwjsl.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78jhwjsl.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp78jhwjsl.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has-even-digit? n)\n    (cond ((zero? n) #f)\n         \
    \ ((is-even? n) #t)\n          (else (has-even-digit? (quotient n 10)))))\n  (define\
    \ (unique-digits-helper x acc)\n    (cond ((null? x) acc)\n          ((has-even-digit?\
    \ (car x)) (unique-digits-helper (cdr x) acc))\n          (else (unique-digits-helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique-digits-helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (modulo y\
    \ 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ew96bey.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ew96bey.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ew96bey.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5ew96bey.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y)\n              \
    \    (not (even? (remainder y 10))))\n                x)\n        <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmlb18c72.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmlb18c72.rkt:24:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmlb18c72.rkt:25:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has-even-digit? n)\n    (cond\n      [(empty? n) false]\n\
    \      [(is-even? (first n)) true]\n      [else (has-even-digit? (rest n))]))\n\
    \  (define (filter-even-digits x)\n    (cond\n      [(empty? x) empty]\n     \
    \ [(has-even-digit? (list->string (number->string (first x))))\n       (filter-even-digits\
    \ (rest x))]\n      [else (cons (first x) (filter-even-digits (rest x)))]))\n\
    \  (sort (filter-even-digits x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0h833d7z.rkt:32:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"15\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0h833d7z.rkt:33:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"152\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0h833d7z.rkt:34:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"12345\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0h833d7z.rkt:35:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"135\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplnwu086x.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplnwu086x.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplnwu086x.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplnwu086x.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has_even_digit? n)\n    (cond ((zero? n) #f)\n          ((is_even?\
    \ n) #t)\n          (else (has_even_digit? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has_even_digit? (car x)) (unique_digits_helper\
    \ (cdr x) acc))\n          (else (unique_digits_helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique_digits_helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1rx7rtdb.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1rx7rtdb.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1rx7rtdb.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1rx7rtdb.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxrnma5d_.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxrnma5d_.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxrnma5d_.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxrnma5d_.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (zero? (remainder\
    \ n 2))\n        #t\n        #f))\n  (define (has_even_digit? n)\n    (if (zero?\
    \ n)\n        #f\n        (if (is_even? (remainder n 10))\n            #t\n  \
    \          (has_even_digit? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x result)\n    (if (null? x)\n        result\n        (if (has_even_digit? (car\
    \ x))\n            (unique_digits_helper (cdr x) result)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) result)))))\n  (sort (unique_digits_helper x '()) <))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(empty? x) (reverse acc)]\n      [(has-even-digit? (first x)) (unique-digits-helper\
    \ (rest x) acc)]\n      [else (unique-digits-helper (rest x) (cons (first x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd_cagg8g.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd_cagg8g.rkt:32:4

    actual:     ''(135 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y)\n            (not (even?\
    \ (remainder y 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppbdpkygw.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppbdpkygw.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmppbdpkygw.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (even? x)\n\
    \        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (null? x)\n\
    \        #f\n        (if (is_even? (car x))\n            #t\n            (has_even_digit?\
    \ (cdr x)))))\n  (define (unique_digits_helper x acc)\n    (if (null? x)\n   \
    \     acc\n        (if (has_even_digit? (list->string (number->string (car x))))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort < (unique_digits_helper x '())))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0al0ieyw.rkt:35:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"15\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0al0ieyw.rkt:36:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"152\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0al0ieyw.rkt:37:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"12345\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp0al0ieyw.rkt:38:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"135\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (if (= (remainder\
    \ n 2) 0)\n        #t\n        #f))\n  (define (has-even-digit? n)\n    (if (=\
    \ n 0)\n        #f\n        (if (is-even? (remainder n 10))\n            #t\n\
    \            (has-even-digit? (quotient n 10)))))\n  (define (unique-digits-helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has-even-digit? (car x))\n\
    \            (unique-digits-helper (cdr x) acc)\n            (unique-digits-helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique-digits-helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (eq? (remainder\
    \ n 2) 0))\n  (define (has-even-digit? n)\n    (cond ((zero? n) #f)\n        \
    \  ((is-even? (remainder n 10)) #t)\n          (else (has-even-digit? (quotient\
    \ n 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null? x) acc)\n\
    \          ((has-even-digit? (car x)) (unique-digits-helper (cdr x) acc))\n  \
    \        (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n  (sort <\
    \ (unique-digits-helper x '())))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62pub7ej.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62pub7ej.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62pub7ej.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp62pub7ej.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0n0smxg1.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0n0smxg1.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0n0smxg1.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0n0smxg1.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gjzdanm.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gjzdanm.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gjzdanm.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmhhw900r.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmhhw900r.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmhhw900r.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmhhw900r.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique n)\n    (cond\n      [(empty?\
    \ n) #t]\n      [(even? (first n)) #f]\n      [else (is_unique (rest n))]))\n\
    \  (define (helper x acc)\n    (cond\n      [(empty? x) acc]\n      [(is_unique\
    \ (number->string (first x)))\n       (helper (rest x) (append acc (list (first\
    \ x))))]\n      [else (helper (rest x) acc)]))\n  (sort (helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpp57d7l1m.rkt:30:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"15\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp57d7l1m.rkt:31:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"152\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpp57d7l1m.rkt:32:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"12345\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpp57d7l1m.rkt:33:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"135\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx55adu4n.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx55adu4n.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx55adu4n.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpx55adu4n.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n)\n            (not (even?\
    \ (remainder n 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi9iedlb3.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi9iedlb3.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi9iedlb3.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1plthias.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1plthias.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1plthias.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1plthias.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (sort (filter (lambda (n) (not (has-even-digit? n)))\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ n 0) #f)\n          ((even? (remainder n 10)) #t)\n          (else (has-even-digit?\
    \ (quotient n 10)))))\n  (sort (filter (lambda (n) (not (has-even-digit? n)))\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (sort < (filter (lambda (n) (not (has-even-digit? n)))\
    \ x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt6eecyp2.rkt:24:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt6eecyp2.rkt:25:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt6eecyp2.rkt:26:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt6eecyp2.rkt:27:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digits? n)\n    (cond\n\
    \      [(zero? n) #t]\n      [(even? (remainder n 10)) #f]\n      [else (is_unique_digits?\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digits? x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5j8qk9gt.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5j8qk9gt.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5j8qk9gt.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5j8qk9gt.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv1qr7xka.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv1qr7xka.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv1qr7xka.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpv1qr7xka.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (zero? (remainder\
    \ n 2))\n        #t\n        #f))\n  (define (has_even_digit? n)\n    (if (zero?\
    \ n)\n        #f\n        (if (is_even? (remainder n 10))\n            #t\n  \
    \          (has_even_digit? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ n 0) #f)\n          ((even? (remainder n 10)) #t)\n          (else (has-even-digit?\
    \ (quotient n 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null?\
    \ x) acc)\n          ((has-even-digit? (car x)) (unique-digits-helper (cdr x)\
    \ acc))\n          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpixtacqyx.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpixtacqyx.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpixtacqyx.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpixtacqyx.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgujk9ib.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgujk9ib.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgujk9ib.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgujk9ib.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuyu_woi.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuyu_woi.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuyu_woi.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpeuyu_woi.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y)\n            (not (even?\
    \ (modulo y 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuu6ue0nl.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuu6ue0nl.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuu6ue0nl.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpr5wci7.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpr5wci7.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpr5wci7.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfpr5wci7.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfhqiqr50.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfhqiqr50.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfhqiqr50.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpfhqiqr50.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y)\n            (not (even?\
    \ (remainder y 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo56jjcy_.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo56jjcy_.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpo56jjcy_.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gh1lv1f.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gh1lv1f.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gh1lv1f.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp8gh1lv1f.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpozgi_i5o.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpozgi_i5o.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpozgi_i5o.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpozgi_i5o.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplhleowk2.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplhleowk2.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplhleowk2.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplhleowk2.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digits n)\n    (cond\n\
    \      [(zero? n) #t]\n      [(even? (remainder n 10)) #f]\n      [else (is_unique_digits\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digits x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcsczjlf.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcsczjlf.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcsczjlf.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbcsczjlf.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (if (= n\
    \ 0)\n        #f\n        (or (= (remainder n 10) 0)\n            (= (remainder\
    \ n 10) 2)\n            (= (remainder n 10) 4)\n            (= (remainder n 10)\
    \ 6)\n            (= (remainder n 10) 8)\n            (has-even-digit? (quotient\
    \ n 10)))))\n  (define (unique-digits-helper x acc)\n    (if (null? x)\n     \
    \   acc\n        (if (has-even-digit? (car x))\n            (unique-digits-helper\
    \ (cdr x) acc)\n            (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1irkq3i0.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1irkq3i0.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1irkq3i0.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1irkq3i0.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper xs acc)\n    (cond\n  \
    \    [(empty? xs) (sort < acc)]\n      [(has-even-digit? (first xs)) (unique-digits-helper\
    \ (rest xs) acc)]\n      [else (unique-digits-helper (rest xs) (cons (first xs)\
    \ acc))]))\n  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprf802tqz.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprf802tqz.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprf802tqz.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmprf802tqz.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g6f7e_z.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g6f7e_z.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g6f7e_z.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1g6f7e_z.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_od57tl.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_od57tl.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_od57tl.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj_od57tl.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (first x)) (unique_digits (rest x))]\n        [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn6qcx25w.rkt:21:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn6qcx25w.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn6qcx25w.rkt:23:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpn6qcx25w.rkt:24:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kwfcyyd.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kwfcyyd.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kwfcyyd.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp3kwfcyyd.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (zero? (remainder\
    \ n 2)))\n  (define (has-even-digit? n)\n    (cond\n      [(zero? n) #f]\n   \
    \   [(is-even? (remainder n 10)) #t]\n      [else (has-even-digit? (quotient n\
    \ 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n      [(null? x)\
    \ acc]\n      [(has-even-digit? (car x)) (unique-digits-helper (cdr x) acc)]\n\
    \      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n  (sort (unique-digits-helper\
    \ x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y)\n              \
    \    (not (even? (modulo y 10))))\n                x)\n        <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_z0l3ito.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_z0l3ito.rkt:24:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_z0l3ito.rkt:25:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (= (remainder\
    \ x 2) 0)\n        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (=\
    \ x 0)\n        #f\n        (if (is_even? (remainder x 10))\n            #t\n\
    \            (has_even_digit? (quotient x 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (first x)) (unique_digits (rest x))]\n        [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n</code>\nI'm not sure if this is the best way to do it, but it\
    \ works.\n\n\nA:\n\nI would use <code>filter</code> to filter out the numbers\
    \ with even digits, and then <code>sort</code> the result.\n<code>(define (unique-digits\
    \ x)\n  (sort (filter (lambda (n) (not (even? (remainder n 10)))) x) &lt;))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp760zoav3.rkt:23:2: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 24\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (even? x)\n\
    \        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (is_even? (modulo\
    \ x 10))\n        #t\n        (if (zero? (quotient x 10))\n            #f\n  \
    \          (has_even_digit? (quotient x 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (zero? (remainder\
    \ n 2))\n        #t\n        #f))\n  (define (has_even? n)\n    (if (zero? n)\n\
    \        #f\n        (if (is_even? (remainder n 10))\n            #t\n       \
    \     (has_even? (quotient n 10)))))\n  (define (unique_digits_helper x acc)\n\
    \    (if (null? x)\n        acc\n        (if (has_even? (car x))\n           \
    \ (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper (cdr x)\
    \ (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mfyg_ov.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mfyg_ov.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0mfyg_ov.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0sqxief.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0sqxief.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0sqxief.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpj0sqxief.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3w5rlxa.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3w5rlxa.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3w5rlxa.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpz3w5rlxa.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? x)\n    (even? (remainder\
    \ x 10)))\n  (define (has-even? x)\n    (cond\n      [(null? x) #f]\n      [(is-even?\
    \ (car x)) #t]\n      [else (has-even? (cdr x))]))\n  (define (unique-digits-helper\
    \ x)\n    (cond\n      [(null? x) '()]\n      [(has-even? (car x)) (unique-digits-helper\
    \ (cdr x))]\n      [else (cons (car x) (unique-digits-helper (cdr x)))]))\n  (sort\
    \ (unique-digits-helper x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m6h8kc2.rkt:31:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 15\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m6h8kc2.rkt:32:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 152\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m6h8kc2.rkt:33:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 12345\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp3m6h8kc2.rkt:34:4\n\
    \ncar: contract violation\n  expected: pair?\n  given: 135\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (even? (modulo x\
    \ 10)))\n  (define (has_even_digit? x)\n    (cond ((null? x) #f)\n          ((is_even?\
    \ (car x)) #t)\n          (else (has_even_digit? (cdr x)))))\n  (define (unique_digits_helper\
    \ x)\n    (cond ((null? x) '())\n          ((has_even_digit? (list->string (number->string\
    \ (car x))))\n           (unique_digits_helper (cdr x)))\n          (else (cons\
    \ (car x) (unique_digits_helper (cdr x))))))\n  (sort < (unique_digits_helper\
    \ x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt__82qdu.rkt:30:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"15\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt__82qdu.rkt:31:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"152\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt__82qdu.rkt:32:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"12345\"\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpt__82qdu.rkt:33:4\n\
    \nlist->string: contract violation\n  expected: list?\n  given: \"135\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11moadwr.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11moadwr.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11moadwr.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp11moadwr.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0ny1ani5.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0ny1ani5.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0ny1ani5.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0ny1ani5.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkuzyglmp.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkuzyglmp.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkuzyglmp.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkuzyglmp.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (= (remainder\
    \ n 2) 0)\n        #t\n        #f))\n  (define (has_even? n)\n    (if (= n 0)\n\
    \        #f\n        (if (is_even? (remainder n 10))\n            #t\n       \
    \     (has_even? (quotient n 10)))))\n  (define (unique_digits_helper x acc)\n\
    \    (if (null? x)\n        acc\n        (if (has_even? (car x))\n           \
    \ (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper (cdr x)\
    \ (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has-even-digit? n)\n    (cond ((zero? n) #f)\n          ((is-even?\
    \ n) #t)\n          (else (has-even-digit? (quotient n 10)))))\n  (define (unique-digits-helper\
    \ lst)\n    (cond ((null? lst) '())\n          ((has-even-digit? (car lst)) (unique-digits-helper\
    \ (cdr lst)))\n          (else (cons (car lst) (unique-digits-helper (cdr lst))))))\n\
    \  (unique-digits-helper (sort x <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpom58zxii.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpom58zxii.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpom58zxii.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpom58zxii.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bvap098.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bvap098.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bvap098.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4bvap098.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (zero? (modulo\
    \ x 2))\n        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (zero?\
    \ x)\n        #f\n        (if (is_even? (modulo x 10))\n            #t\n     \
    \       (has_even_digit? (quotient x 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ n 0) #f)\n          ((even? (remainder n 10)) #t)\n          (else (has-even-digit?\
    \ (quotient n 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null?\
    \ x) acc)\n          ((has-even-digit? (car x)) (unique-digits-helper (cdr x)\
    \ acc))\n          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(= n 0) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (filter-even-digits lst)\n    (cond\n      [(null?\
    \ lst) '()]\n      [(has-even-digit? (car lst)) (filter-even-digits (cdr lst))]\n\
    \      [else (cons (car lst) (filter-even-digits (cdr lst)))]))\n  (sort (filter-even-digits\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl8teikrg.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl8teikrg.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl8teikrg.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl8teikrg.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55fr34cq.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55fr34cq.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55fr34cq.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp55fr34cq.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dfbnzjq.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dfbnzjq.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dfbnzjq.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4dfbnzjq.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y)\n              \
    \    (not (even? (modulo y 10))))\n                x)\n        <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprcmc9y7z.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprcmc9y7z.rkt:24:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprcmc9y7z.rkt:25:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (even? n)\n    (even? (modulo n 10)))\n\
    \  (define (unique-digits-helper x)\n    (cond ((null? x) '())\n          ((even?\
    \ (car x)) (unique-digits-helper (cdr x)))\n          (else (cons (car x) (unique-digits-helper\
    \ (cdr x))))))\n  (sort < (unique-digits-helper x)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpokw2lob8.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpokw2lob8.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpokw2lob8.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpokw2lob8.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp383uyo6n.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp383uyo6n.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp383uyo6n.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has_even? n)\n    (cond ((zero? n) #f)\n          ((is_even?\
    \ n) #t)\n          (else (has_even? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has_even? (car x)) (unique_digits_helper\
    \ (cdr x) acc))\n          (else (unique_digits_helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique_digits_helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_8vlay3.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_8vlay3.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_8vlay3.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpw_8vlay3.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit x)\n    (cond ((=\
    \ x 0) #f)\n          ((even? (remainder x 10)) #t)\n          (else (has-even-digit\
    \ (quotient x 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null?\
    \ x) acc)\n          ((has-even-digit (car x)) (unique-digits-helper (cdr x) acc))\n\
    \          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n  (sort\
    \ (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has-even? n)\n    (cond\n      [(zero? n) #f]\n      [(is-even?\
    \ n) #t]\n      [else (has-even? (quotient n 10))]))\n  (define (unique-digits-helper\
    \ x acc)\n    (cond\n      [(empty? x) (sort < acc)]\n      [(has-even? (first\
    \ x)) (unique-digits-helper (rest x) acc)]\n      [else (unique-digits-helper\
    \ (rest x) (cons (first x) acc))]))\n  (unique-digits-helper x '()))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp72nfbj3c.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp72nfbj3c.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp72nfbj3c.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp72nfbj3c.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digit? n)\n    (cond\n\
    \      [(= n 0) #f]\n      [(even? (modulo n 10)) #f]\n      [else (is_unique_digit?\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digit? x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq46jkaru.rkt:24:4

    actual:     ''()

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq46jkaru.rkt:26:4

    actual:     ''()

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpq46jkaru.rkt:27:4

    actual:     ''()

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique n)\n    (cond [(empty?\
    \ n) #t]\n          [(even? (first n)) #f]\n          [else (is_unique (rest n))]))\n\
    \  (define (helper x acc)\n    (cond [(empty? x) (sort acc <)]\n          [(is_unique\
    \ (number->string (first x))) (helper (rest x) (cons (first x) acc))]\n      \
    \    [else (helper (rest x) acc)]))\n  (helper x '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpuehowewk.rkt:27:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"15\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuehowewk.rkt:28:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"152\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpuehowewk.rkt:29:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"12345\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpuehowewk.rkt:30:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"135\"\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (remainder (car x) 10)) (unique_digits (cdr x))]\n        [(even? (remainder\
    \ (car x) 100)) (unique_digits (cdr x))]\n        [(even? (remainder (car x) 1000))\
    \ (unique_digits (cdr x))]\n        [(even? (remainder (car x) 10000)) (unique_digits\
    \ (cdr x))]\n        [(even? (remainder (car x) 100000)) (unique_digits (cdr x))]\n\
    \        [(even? (remainder (car x) 1000000)) (unique_digits (cdr x))]\n     \
    \   [(even? (remainder (car x) 10000000)) (unique_digits (cdr x))]\n        [(even?\
    \ (remainder (car x) 100000000)) (unique_digits (cdr x))]\n        [(even? (remainder\
    \ (car x) 1000000000)) (unique_digits (cdr x))]\n        [else (cons (car x) (unique_digits\
    \ (cdr x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2q6vwh0g.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2q6vwh0g.rkt:30:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2q6vwh0g.rkt:31:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2q6vwh0g.rkt:32:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjkx3ov8.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjkx3ov8.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjkx3ov8.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzjkx3ov8.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (zero? (modulo\
    \ x 2))\n        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (zero?\
    \ x)\n        #f\n        (if (is_even? (modulo x 10))\n            #t\n     \
    \       (has_even_digit? (quotient x 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgx0609wt.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgx0609wt.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgx0609wt.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpgx0609wt.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_o4sxdml.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_o4sxdml.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_o4sxdml.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_o4sxdml.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (equal? (remainder\
    \ x 2) 0))\n  (define (has_even_digit? x)\n    (cond\n      [(empty? x) #f]\n\
    \      [(is_even? (first x)) #t]\n      [else (has_even_digit? (rest x))]))\n\
    \  (define (unique_digits_helper x acc)\n    (cond\n      [(empty? x) acc]\n \
    \     [(has_even_digit? (first x)) (unique_digits_helper (rest x) acc)]\n    \
    \  [else (unique_digits_helper (rest x) (cons (first x) acc))]))\n  (sort < (unique_digits_helper\
    \ x '())))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_lolv5n.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ 15\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8_lolv5n.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: 152\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp8_lolv5n.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 12345\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp8_lolv5n.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: 135\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(= n 0) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (sort (filter (lambda (n) (not (has-even-digit? n)))\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpig5o8d94.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpig5o8d94.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpig5o8d94.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpig5o8d94.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_odd? n)\n    (and (not (zero?\
    \ (remainder n 2)))\n         (not (zero? (remainder n 5)))))\n  (define (has_odd_digit?\
    \ n)\n    (if (zero? n)\n        #f\n        (or (is_odd? n)\n            (has_odd_digit?\
    \ (quotient n 10)))))\n  (define (unique_digits_helper x acc)\n    (if (null?\
    \ x)\n        acc\n        (if (has_odd_digit? (car x))\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc))\n            (unique_digits_helper (cdr x) acc))))\n\
    \  (sort < (unique_digits_helper x '())))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcxugl11.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcxugl11.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcxugl11.rkt:35:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpqcxugl11.rkt:36:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n        [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n        [(even? (remainder (first\
    \ x) 1000)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 10000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 100000)) (unique_digits\
    \ (rest x))]\n        [(even? (remainder (first x) 1000000)) (unique_digits (rest\
    \ x))]\n        [(even? (remainder (first x) 10000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n\
    \        [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b0gv4y_.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b0gv4y_.rkt:30:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b0gv4y_.rkt:31:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_b0gv4y_.rkt:32:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper xs acc)\n    (cond\n  \
    \    [(empty? xs) (sort < acc)]\n      [(has-even-digit? (first xs)) (unique-digits-helper\
    \ (rest xs) acc)]\n      [else (unique-digits-helper (rest xs) (cons (first xs)\
    \ acc))]))\n  (unique-digits-helper x empty))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rezujzd.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rezujzd.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rezujzd.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp8rezujzd.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpputcimi2.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpputcimi2.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpputcimi2.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpputcimi2.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi_bvjhg6.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi_bvjhg6.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi_bvjhg6.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi_bvjhg6.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4y1lk7f.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4y1lk7f.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4y1lk7f.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4y1lk7f.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(null? x) (sort < acc)]\n      [(has-even-digit? (car x)) (unique-digits-helper\
    \ (cdr x) acc)]\n      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwz7osnhg.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwz7osnhg.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwz7osnhg.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwz7osnhg.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has_even? n)\n    (cond ((zero? n) #f)\n          ((is_even?\
    \ n) #t)\n          (else (has_even? (quotient n 10)))))\n  (define (unique_digits-iter\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has_even? (car x)) (unique_digits-iter\
    \ (cdr x) acc))\n          (else (unique_digits-iter (cdr x) (cons (car x) acc)))))\n\
    \  (sort < (unique_digits-iter x '())))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04a9p2fn.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04a9p2fn.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04a9p2fn.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp04a9p2fn.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0c0jepjd.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0c0jepjd.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0c0jepjd.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digit? n)\n    (cond\n\
    \      [(zero? n) #t]\n      [(even? (remainder n 10)) #f]\n      [else (is_unique_digit?\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digit? x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpli7qfwz0.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpli7qfwz0.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpli7qfwz0.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpli7qfwz0.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 1
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (even? x)\n\
    \        #t\n        #f))\n  (define (has_even? x)\n    (if (null? x)\n      \
    \  #f\n        (if (is_even? (car x))\n            #t\n            (has_even?\
    \ (cdr x)))))\n  (define (unique_digits_helper x)\n    (if (null? x)\n       \
    \ '()\n        (if (has_even? (number->list (car x)))\n            (unique_digits_helper\
    \ (cdr x))\n            (cons (car x) (unique_digits_helper (cdr x))))))\n  (sort\
    \ unique_digits_helper < x))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "/tmp/tmp3jwnu4qw.rkt:25:24: number->list: unbound identifier\n  in: number->list\n\
    \  location...:\n   /tmp/tmp3jwnu4qw.rkt:25:24\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(empty? x) (sort < acc)]\n      [(has-even-digit? (first x)) (unique-digits-helper\
    \ (rest x) acc)]\n      [else (unique-digits-helper (rest x) (cons (first x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzyeya5bt.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzyeya5bt.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzyeya5bt.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpzyeya5bt.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(null? x) '()]\n    [(even? (remainder\
    \ (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 100))\
    \ (unique_digits (rest x))]\n    [(even? (remainder (first x) 1000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 1000000000))\
    \ (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5uc5e4zj.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5uc5e4zj.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5uc5e4zj.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp5uc5e4zj.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (and (not (zero?\
    \ (remainder n 2)))\n         (not (zero? (remainder n 5)))))\n  (define (has-even-digit?\
    \ n)\n    (cond\n      [(zero? n) #f]\n      [(is-even? (remainder n 10)) #t]\n\
    \      [else (has-even-digit? (quotient n 10))]))\n  (define (unique-digits-helper\
    \ x acc)\n    (cond\n      [(null? x) (sort < acc)]\n      [(has-even-digit? (car\
    \ x)) (unique-digits-helper (cdr x) acc)]\n      [else (unique-digits-helper (cdr\
    \ x) (cons (car x) acc))]))\n  (unique-digits-helper x '()))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi3ziql7.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi3ziql7.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi3ziql7.rkt:34:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpwi3ziql7.rkt:35:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (even? n)\n\
    \        #t\n        #f))\n  (define (has_even_digit? n)\n    (if (empty? n)\n\
    \        #f\n        (if (is_even? (first n))\n            #t\n            (has_even_digit?\
    \ (rest n)))))\n  (define (unique_digits_helper x)\n    (if (empty? x)\n     \
    \   '()\n        (if (has_even_digit? x)\n            (unique_digits_helper (rest\
    \ x))\n            (cons (first x) (unique_digits_helper (rest x))))))\n  (sort\
    \ unique_digits_helper < x))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpyo3tf347.rkt:35:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n\
    \   #<procedure:<>\n   '(15 33 1422 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyo3tf347.rkt:36:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(152 323 1422 10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyo3tf347.rkt:37:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(12345 2033 111 151)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpyo3tf347.rkt:38:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(135 103 31)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9to3fy8.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9to3fy8.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpa9to3fy8.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has-even-digit? n)\n    (cond ((zero? n) #f)\n          ((is-even?\
    \ n) #t)\n          (else (has-even-digit? (quotient n 10)))))\n  (define (unique-digits-helper\
    \ xs)\n    (cond ((null? xs) '())\n          ((has-even-digit? (car xs)) (unique-digits-helper\
    \ (cdr xs)))\n          (else (cons (car xs) (unique-digits-helper (cdr xs))))))\n\
    \  (sort < (unique-digits-helper x)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xlkn482.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xlkn482.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xlkn482.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp4xlkn482.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpph3yw31h.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpph3yw31h.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpph3yw31h.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpph3yw31h.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n        [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n        [(even? (remainder (first\
    \ x) 1000)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 10000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 100000)) (unique_digits\
    \ (rest x))]\n        [(even? (remainder (first x) 1000000)) (unique_digits (rest\
    \ x))]\n        [(even? (remainder (first x) 10000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n\
    \        [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimxbja5k.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimxbja5k.rkt:30:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimxbja5k.rkt:31:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpimxbja5k.rkt:32:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ n 0) #f)\n          ((even? (remainder n 10)) #t)\n          (else (has-even-digit?\
    \ (quotient n 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null?\
    \ x) (sort acc <))\n          ((has-even-digit? (car x)) (unique-digits-helper\
    \ (cdr x) acc))\n          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y)\n            (not (even?\
    \ (remainder y 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgjsw10m.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgjsw10m.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdgjsw10m.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbj3apb1g.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbj3apb1g.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbj3apb1g.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbj3apb1g.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjgmm8cca.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjgmm8cca.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjgmm8cca.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjgmm8cca.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpid1fh92t.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpid1fh92t.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpid1fh92t.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpin7y11ly.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpin7y11ly.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpin7y11ly.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpin7y11ly.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y2q6rwe.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y2q6rwe.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y2q6rwe.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0y2q6rwe.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (modulo y\
    \ 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbraf57by.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbraf57by.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbraf57by.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbraf57by.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y)\n              \
    \    (not (even? (remainder y 10))))\n                x)\n        <))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvfqzmkbu.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvfqzmkbu.rkt:24:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpvfqzmkbu.rkt:25:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyz66fc9.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyz66fc9.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyz66fc9.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpuyz66fc9.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphh76rsqb.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphh76rsqb.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphh76rsqb.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphh76rsqb.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(empty? x) (reverse acc)]\n      [(has-even-digit? (first x)) (unique-digits-helper\
    \ (rest x) acc)]\n      [else (unique-digits-helper (rest x) (cons (first x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdl8pzbvt.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdl8pzbvt.rkt:32:4

    actual:     ''(135 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: -1
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (even? n)\n    (even? (modulo n 10)))\n\
    \  (define (unique-digits-helper x)\n    (cond [(empty? x) empty]\n          [(even?\
    \ (first x)) (unique-digits-helper (rest x))]\n          [else (cons (first x)\
    \ (unique-digits-helper (rest x)))]))\n  (sort < (unique-digits-helper x)))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Timeout
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80s9nmv_.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80s9nmv_.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80s9nmv_.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp80s9nmv_.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (= (remainder\
    \ n 2) 0)\n        #t\n        #f))\n  (define (has_even_digit? n)\n    (if (=\
    \ n 0)\n        #f\n        (if (is_even? (remainder n 10))\n            #t\n\
    \            (has_even_digit? (quotient n 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp00ecwbyr.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp00ecwbyr.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp00ecwbyr.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplf3j9aai.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplf3j9aai.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplf3j9aai.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmplf3j9aai.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort < (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg00c4g7.rkt:19:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg00c4g7.rkt:20:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg00c4g7.rkt:21:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmppg00c4g7.rkt:22:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_hanxkc.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_hanxkc.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpe_hanxkc.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6y8a74b.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6y8a74b.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6y8a74b.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph6y8a74b.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyos_5w1r.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyos_5w1r.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyos_5w1r.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyos_5w1r.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdieu5byt.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdieu5byt.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdieu5byt.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdieu5byt.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdu0asa_r.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdu0asa_r.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdu0asa_r.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdu0asa_r.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n        [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n        [(even? (remainder (first\
    \ x) 1000)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 10000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 100000)) (unique_digits\
    \ (rest x))]\n        [(even? (remainder (first x) 1000000)) (unique_digits (rest\
    \ x))]\n        [(even? (remainder (first x) 10000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n\
    \        [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ryw90_d.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ryw90_d.rkt:30:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ryw90_d.rkt:31:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1ryw90_d.rkt:32:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(empty? x) (reverse acc)]\n      [(has-even-digit? (first x)) (unique-digits-helper\
    \ (rest x) acc)]\n      [else (unique-digits-helper (rest x) (cons (first x) acc))]))\n\
    \  (unique-digits-helper x empty))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpovzir2qj.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpovzir2qj.rkt:32:4

    actual:     ''(135 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4xh589_.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4xh589_.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpi4xh589_.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4s4cjnbk.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4s4cjnbk.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp4s4cjnbk.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73iiktu7.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73iiktu7.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73iiktu7.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp73iiktu7.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd681q1lw.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd681q1lw.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd681q1lw.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpd681q1lw.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (even? (remainder\
    \ x 10)))\n  (define (has_even_digit? x)\n    (cond\n      [(empty? x) false]\n\
    \      [(is_even? (first x)) true]\n      [else (has_even_digit? (rest x))]))\n\
    \  (define (unique_digits_helper x)\n    (cond\n      [(empty? x) empty]\n   \
    \   [(has_even_digit? (first x)) (unique_digits_helper (rest x))]\n      [else\
    \ (cons (first x) (unique_digits_helper (rest x)))]))\n  (sort (unique_digits_helper\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpir71t05e.rkt:31:4\n\
    \nfirst: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ 15\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpir71t05e.rkt:32:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: 152\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpir71t05e.rkt:33:4\n\nfirst:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: 12345\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmpir71t05e.rkt:34:4\n\nfirst: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: 135\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(null? x) (reverse acc)]\n      [(has-even-digit? (car x)) (unique-digits-helper\
    \ (cdr x) acc)]\n      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1byxdyv_.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1byxdyv_.rkt:32:4

    actual:     ''(135 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (if (even? n)\n\
    \        #t\n        #f))\n  (define (has_even_digit? n)\n    (if (empty? n)\n\
    \        #f\n        (if (is_even? (first n))\n            #t\n            (has_even_digit?\
    \ (rest n)))))\n  (define (unique_digits_helper x)\n    (if (empty? x)\n     \
    \   '()\n        (if (has_even_digit? x)\n            (unique_digits_helper (rest\
    \ x))\n            (cons (first x) (unique_digits_helper (rest x))))))\n  (sort\
    \ unique_digits_helper < x))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wcsl8tq.rkt:35:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n\
    \   #<procedure:<>\n   '(15 33 1422 1)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wcsl8tq.rkt:36:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(152 323 1422 10)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wcsl8tq.rkt:37:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(12345 2033 111 151)\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_wcsl8tq.rkt:38:4\n\nsort:\
    \ arity mismatch;\n the expected number of arguments does not match the given\
    \ number\n  expected: 2 plus optional arguments with keywords #:cache-keys? and\
    \ #:key\n  given: 3\n  arguments...:\n   #<procedure:unique_digits_helper>\n \
    \  #<procedure:<>\n   '(135 103 31)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has_even_digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has_even_digit?\
    \ (quotient n 10))]))\n  (define (unique_digits-helper x acc)\n    (cond\n   \
    \   [(null? x) (sort < acc)]\n      [(has_even_digit? (car x)) (unique_digits-helper\
    \ (cdr x) acc)]\n      [else (unique_digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (unique_digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkyt38gz.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkyt38gz.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkyt38gz.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpnkyt38gz.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cc73xzs.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cc73xzs.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_cc73xzs.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has_even_digit? x)\n    (cond ((=\
    \ x 0) #f)\n          ((even? (remainder x 10)) #t)\n          (else (has_even_digit?\
    \ (quotient x 10)))))\n  (define (unique_digits_helper x acc)\n    (cond ((null?\
    \ x) (sort acc <))\n          ((has_even_digit? (car x)) (unique_digits_helper\
    \ (cdr x) acc))\n          (else (unique_digits_helper (cdr x) (cons (car x) acc)))))\n\
    \  (unique_digits_helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0j3noi1v.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0j3noi1v.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0j3noi1v.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0j3noi1v.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_s33h0p.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_s33h0p.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_s33h0p.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpc_s33h0p.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkhxeyjh7.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkhxeyjh7.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkhxeyjh7.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpkhxeyjh7.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl87lyzsu.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl87lyzsu.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl87lyzsu.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpl87lyzsu.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (modulo y\
    \ 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fzhij2h.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fzhij2h.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fzhij2h.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp2fzhij2h.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbhaktv9c.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbhaktv9c.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbhaktv9c.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbhaktv9c.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(null? x) (sort < acc)]\n      [(has-even-digit? (car x)) (unique-digits-helper\
    \ (cdr x) acc)]\n      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (unique-digits-helper x '()))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0ivbfxu.rkt:29:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0ivbfxu.rkt:30:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0ivbfxu.rkt:31:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpf0ivbfxu.rkt:32:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:<>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has_even_digit? n)\n    (cond ((zero? n) #f)\n         \
    \ ((is_even? n) #t)\n          (else (has_even_digit? (quotient n 10)))))\n  (define\
    \ (unique_digits_helper x)\n    (cond ((null? x) '())\n          ((has_even_digit?\
    \ (car x)) (unique_digits_helper (cdr x)))\n          (else (cons (car x) (unique_digits_helper\
    \ (cdr x))))))\n  (sort (unique_digits_helper x) <))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digit? n)\n    (cond\n\
    \      [(= n 0) #f]\n      [(even? (modulo n 10)) #f]\n      [else (is_unique_digit?\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digit? x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9fu7for1.rkt:24:4

    actual:     ''()

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9fu7for1.rkt:26:4

    actual:     ''()

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp9fu7for1.rkt:27:4

    actual:     ''()

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbatd1ywl.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbatd1ywl.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbatd1ywl.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpbatd1ywl.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9986zob.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9986zob.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9986zob.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpg9986zob.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n)\n            (not (even?\
    \ (remainder n 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxv2zjjk.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxv2zjjk.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmprxv2zjjk.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (even? n)\n    (zero? (remainder n\
    \ 2)))\n  (define (has-even-digit? n)\n    (cond\n      [(zero? n) #f]\n     \
    \ [(even? (remainder n 10)) #t]\n      [else (has-even-digit? (quotient n 10))]))\n\
    \  (define (unique-digits-helper xs)\n    (cond\n      [(empty? xs) empty]\n \
    \     [(has-even-digit? (first xs)) (unique-digits-helper (rest xs))]\n      [else\
    \ (cons (first xs) (unique-digits-helper (rest xs)))]))\n  (sort (unique-digits-helper\
    \ x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15\
    \ 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list ))\n    (check-equal?\
    \ (candidate (list 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate\
    \ (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxtaf3um.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxtaf3um.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxtaf3um.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpxxtaf3um.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsrvcovgi.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsrvcovgi.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsrvcovgi.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpsrvcovgi.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has_even? n)\n    (cond\n      [(zero? n) #f]\n      [(is_even?\
    \ n) #t]\n      [else (has_even? (quotient n 10))]))\n  (define (unique_digits_helper\
    \ x)\n    (cond\n      [(null? x) '()]\n      [(has_even? (car x)) (unique_digits_helper\
    \ (cdr x))]\n      [else (cons (car x) (unique_digits_helper (cdr x)))]))\n  (sort\
    \ (unique_digits_helper x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (modulo\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxum1v55.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxum1v55.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpqxum1v55.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcw6_rtec.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcw6_rtec.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcw6_rtec.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpcw6_rtec.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond [(empty? x) empty]\n        [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n        [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n        [(even? (remainder (first\
    \ x) 1000)) (unique_digits (rest x))]\n        [(even? (remainder (first x) 10000))\
    \ (unique_digits (rest x))]\n        [(even? (remainder (first x) 100000)) (unique_digits\
    \ (rest x))]\n        [(even? (remainder (first x) 1000000)) (unique_digits (rest\
    \ x))]\n        [(even? (remainder (first x) 10000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 100000000)) (unique_digits (rest x))]\n\
    \        [(even? (remainder (first x) 1000000000)) (unique_digits (rest x))]\n\
    \        [else (cons (first x) (unique_digits (rest x)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjd8p91lm.rkt:29:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjd8p91lm.rkt:30:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjd8p91lm.rkt:31:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjd8p91lm.rkt:32:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm03zbep8.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm03zbep8.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpm03zbep8.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf22th2ju.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf22th2ju.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf22th2ju.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpf22th2ju.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (even? (modulo n\
    \ 10)))\n  (define (has-even? n)\n    (cond ((zero? n) #f)\n          ((is-even?\
    \ n) #t)\n          (else (has-even? (quotient n 10)))))\n  (define (unique-digits-helper\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has-even? (car x)) (unique-digits-helper\
    \ (cdr x) acc))\n          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (y)\n            (not (even?\
    \ (modulo y 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1tn3glx.rkt:22:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1tn3glx.rkt:23:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpr1tn3glx.rkt:24:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? n)\n    (even? (remainder\
    \ n 10)))\n  (define (has_even? n)\n    (cond ((= n 0) #f)\n          ((is_even?\
    \ n) #t)\n          (else (has_even? (quotient n 10)))))\n  (define (unique_digits-iter\
    \ x acc)\n    (cond ((null? x) acc)\n          ((has_even? (car x)) (unique_digits-iter\
    \ (cdr x) acc))\n          (else (unique_digits-iter (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique_digits-iter x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10)))) x))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9vg33na.rkt:19:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9vg33na.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9vg33na.rkt:21:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmph9vg33na.rkt:22:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi33lfqo.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi33lfqo.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi33lfqo.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpdi33lfqo.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is-even? n)\n    (if (zero? (remainder\
    \ n 2))\n        #t\n        #f))\n  (define (has-even-digit? n)\n    (if (zero?\
    \ n)\n        #f\n        (if (is-even? (remainder n 10))\n            #t\n  \
    \          (has-even-digit? (quotient n 10)))))\n  (define (unique-digits-helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has-even-digit? (car x))\n\
    \            (unique-digits-helper (cdr x) acc)\n            (unique-digits-helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique-digits-helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphwg_7zac.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphwg_7zac.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphwg_7zac.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphwg_7zac.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (modulo (first x) 10)) (unique_digits (rest x))]\n    [(even? (modulo (first\
    \ x) 100)) (unique_digits (rest x))]\n    [(even? (modulo (first x) 1000)) (unique_digits\
    \ (rest x))]\n    [(even? (modulo (first x) 10000)) (unique_digits (rest x))]\n\
    \    [(even? (modulo (first x) 100000)) (unique_digits (rest x))]\n    [(even?\
    \ (modulo (first x) 1000000)) (unique_digits (rest x))]\n    [(even? (modulo (first\
    \ x) 10000000)) (unique_digits (rest x))]\n    [(even? (modulo (first x) 100000000))\
    \ (unique_digits (rest x))]\n    [(even? (modulo (first x) 1000000000)) (unique_digits\
    \ (rest x))]\n    [else (cons (first x) (unique_digits (rest x)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyrk4ulr2.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyrk4ulr2.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyrk4ulr2.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpyrk4ulr2.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (n) (not (even? (modulo\
    \ n 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaa3how3t.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaa3how3t.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpaa3how3t.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x < (filter (lambda (y) (not (even?\
    \ (remainder y 10)))) x)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33\
    \ 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10))\
    \ (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111\
    \ 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvcjc_caz.rkt:19:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(15 33 1422 1)\n   #<procedure:<>\n\
    \   '(15 33 1)\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpvcjc_caz.rkt:20:4\n\nsort: arity mismatch;\n\
    \ the expected number of arguments does not match the given number\n  expected:\
    \ 2 plus optional arguments with keywords #:cache-keys? and #:key\n  given: 3\n\
    \  arguments...:\n   '(152 323 1422 10)\n   #<procedure:<>\n   '(323)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpvcjc_caz.rkt:21:4\n\
    \nsort: arity mismatch;\n the expected number of arguments does not match the\
    \ given number\n  expected: 2 plus optional arguments with keywords #:cache-keys?\
    \ and #:key\n  given: 3\n  arguments...:\n   '(12345 2033 111 151)\n   #<procedure:<>\n\
    \   '(12345 2033 111 151)\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpvcjc_caz.rkt:22:4\n\nsort: arity\
    \ mismatch;\n the expected number of arguments does not match the given number\n\
    \  expected: 2 plus optional arguments with keywords #:cache-keys? and #:key\n\
    \  given: 3\n  arguments...:\n   '(135 103 31)\n   #<procedure:<>\n   '(135 103\
    \ 31)\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ (modulo n 10) 0) #t)\n          ((= (modulo n 10) 2) #t)\n          ((= (modulo\
    \ n 10) 4) #t)\n          ((= (modulo n 10) 6) #t)\n          ((= (modulo n 10)\
    \ 8) #t)\n          (else (has-even-digit? (quotient n 10)))))\n  (define (filter-even-digits\
    \ lst)\n    (cond ((null? lst) '())\n          ((has-even-digit? (car lst)) (filter-even-digits\
    \ (cdr lst)))\n          (else (cons (car lst) (filter-even-digits (cdr lst))))))\n\
    \  (sort (filter-even-digits x) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkkkmr9z.rkt:30:4

    actual:     ''()

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkkkmr9z.rkt:32:4

    actual:     ''()

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpnkkkmr9z.rkt:33:4

    actual:     ''()

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1gtjj0jj.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1gtjj0jj.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1gtjj0jj.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp1gtjj0jj.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_unique_digit? n)\n    (cond\n\
    \      [(zero? n) #t]\n      [(even? (remainder n 10)) #f]\n      [else (is_unique_digit?\
    \ (quotient n 10))]))\n  (sort (filter is_unique_digit? x) <))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (filter (lambda (n) (not (even? (remainder\
    \ n 10))))\n          (sort x <)))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0dj9noj_.rkt:21:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0dj9noj_.rkt:22:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp0dj9noj_.rkt:23:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6nk51vyi.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6nk51vyi.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6nk51vyi.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp6nk51vyi.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (first x)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_eqpap8w.rkt:22:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_eqpap8w.rkt:23:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_eqpap8w.rkt:24:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp_eqpap8w.rkt:25:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort (filter (lambda (y) (not (even? (remainder\
    \ y 10)))) x) <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422\
    \ 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphdjrbvkv.rkt:20:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphdjrbvkv.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmphdjrbvkv.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmkdso7lv.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmkdso7lv.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmkdso7lv.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpmkdso7lv.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzvslpfi.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzvslpfi.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzvslpfi.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjzvslpfi.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (define (has-even-digit-helper\
    \ n)\n      (if (zero? n)\n          #f\n          (if (even? (remainder n 10))\n\
    \              #t\n              (has-even-digit-helper (quotient n 10)))))\n\
    \    (has-even-digit-helper n))\n  (define (unique-digits-helper x)\n    (if (null?\
    \ x)\n        '()\n        (if (has-even-digit? (car x))\n            (unique-digits-helper\
    \ (cdr x))\n            (cons (car x) (unique-digits-helper (cdr x))))))\n  (sort\
    \ unique-digits-helper <))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list 15 33\
    \ 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10))\
    \ (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111\
    \ 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n\
    (test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o6jzsuz.rkt:33:4\n\
    \nsort: contract violation\n  expected: list?\n  given: #<procedure:unique-digits-helper>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1o6jzsuz.rkt:34:4\n\nsort: contract violation\n  expected:\
    \ list?\n  given: #<procedure:unique-digits-helper>\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp1o6jzsuz.rkt:35:4\n\nsort:\
    \ contract violation\n  expected: list?\n  given: #<procedure:unique-digits-helper>\n\
    --------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp1o6jzsuz.rkt:36:4\n\nsort: contract violation\n  expected:\
    \ list?\n  given: #<procedure:unique-digits-helper>\n--------------------\n"
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpth4y9c2d.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpth4y9c2d.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpth4y9c2d.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpth4y9c2d.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond\n \
    \     [(zero? n) #f]\n      [(even? (remainder n 10)) #t]\n      [else (has-even-digit?\
    \ (quotient n 10))]))\n  (define (unique-digits-helper x acc)\n    (cond\n   \
    \   [(null? x) acc]\n      [(has-even-digit? (car x)) (unique-digits-helper (cdr\
    \ x) acc)]\n      [else (unique-digits-helper (cdr x) (cons (car x) acc))]))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflgslddz.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflgslddz.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflgslddz.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpflgslddz.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (has-even-digit? n)\n    (cond ((=\
    \ n 0) #f)\n          ((even? (remainder n 10)) #t)\n          (else (has-even-digit?\
    \ (quotient n 10)))))\n  (define (unique-digits-helper x acc)\n    (cond ((null?\
    \ x) acc)\n          ((has-even-digit? (car x)) (unique-digits-helper (cdr x)\
    \ acc))\n          (else (unique-digits-helper (cdr x) (cons (car x) acc)))))\n\
    \  (sort (unique-digits-helper x '()) <))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate unique_digits))\n    (check-equal? (candidate (list\
    \ 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422\
    \ 10)) (list ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list\
    \ 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryy_hzw3.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryy_hzw3.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryy_hzw3.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpryy_hzw3.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_q8elc.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_q8elc.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_q8elc.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmp45_q8elc.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (cond\n    [(empty? x) empty]\n    [(even?\
    \ (remainder (first x) 10)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100)) (unique_digits (rest x))]\n    [(even? (remainder (first x)\
    \ 1000)) (unique_digits (rest x))]\n    [(even? (remainder (first x) 10000)) (unique_digits\
    \ (rest x))]\n    [(even? (remainder (first x) 100000)) (unique_digits (rest x))]\n\
    \    [(even? (remainder (first x) 1000000)) (unique_digits (rest x))]\n    [(even?\
    \ (remainder (first x) 10000000)) (unique_digits (rest x))]\n    [(even? (remainder\
    \ (first x) 100000000)) (unique_digits (rest x))]\n    [(even? (remainder (first\
    \ x) 1000000000)) (unique_digits (rest x))]\n    [else (cons (first x) (unique_digits\
    \ (rest x)))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate unique_digits))\n    (check-equal? (candidate (list 15 33 1422 1))\
    \ (list 1 15 33))\n    (check-equal? (candidate (list 152 323 1422 10)) (list\
    \ ))\n    (check-equal? (candidate (list 12345 2033 111 151)) (list 111 151))\n\
    \    (check-equal? (candidate (list 135 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjs30vo3o.rkt:30:4

    actual:     ''(15 33 1)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjs30vo3o.rkt:31:4

    actual:     ''(323)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjs30vo3o.rkt:32:4

    actual:     ''(12345 2033 111 151)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpjs30vo3o.rkt:33:4

    actual:     ''(135 103 31)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (sort x <))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate unique_digits))\n    (check-equal?\
    \ (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal? (candidate\
    \ (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list 12345 2033\
    \ 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135 103 31)) (list\
    \ 31 135))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: '--------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzxhet9cm.rkt:19:4

    actual:     ''(1 15 33 1422)

    expected:   ''(1 15 33)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzxhet9cm.rkt:20:4

    actual:     ''(10 152 323 1422)

    expected:   ''()

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzxhet9cm.rkt:21:4

    actual:     ''(111 151 2033 12345)

    expected:   ''(111 151)

    --------------------

    --------------------

    FAILURE

    name:       check-equal?

    location:   /tmp/tmpzxhet9cm.rkt:22:4

    actual:     ''(31 103 135)

    expected:   ''(31 135)

    --------------------

    '
  stdout: ''
- exit_code: 0
  program: "#lang racket\n\n;; Given a list of positive integers x. return a sorted\
    \ list of all \n;; elements that hasn't any even digit.\n;; Note: Returned list\
    \ should be sorted in increasing order.\n;; For example:\n;; >>> unique_digits([15,\
    \ 33, 1422, 1])\n;; [1, 15, 33]\n;; >>> unique_digits([152, 323, 1422, 10])\n\
    ;; []\n(define (unique_digits x)\n  (define (is_even? x)\n    (if (zero? (modulo\
    \ x 2))\n        #t\n        #f))\n  (define (has_even_digit? x)\n    (if (zero?\
    \ x)\n        #f\n        (if (is_even? (modulo x 10))\n            #t\n     \
    \       (has_even_digit? (quotient x 10)))))\n  (define (unique_digits_helper\
    \ x acc)\n    (if (null? x)\n        acc\n        (if (has_even_digit? (car x))\n\
    \            (unique_digits_helper (cdr x) acc)\n            (unique_digits_helper\
    \ (cdr x) (cons (car x) acc)))))\n  (sort (unique_digits_helper x '()) <))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate unique_digits))\n\
    \    (check-equal? (candidate (list 15 33 1422 1)) (list 1 15 33))\n    (check-equal?\
    \ (candidate (list 152 323 1422 10)) (list ))\n    (check-equal? (candidate (list\
    \ 12345 2033 111 151)) (list 111 151))\n    (check-equal? (candidate (list 135\
    \ 103 31)) (list 31 135))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
