name: HumanEval_85_add
language: racket
results:
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4l_s89_1.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4l_s89_1.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4l_s89_1.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4l_s89_1.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa7555dyr.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa7555dyr.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa7555dyr.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa7555dyr.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpth95r0v0.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpth95r0v0.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpth95r0v0.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpth95r0v0.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3xb2zsp_.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3xb2zsp_.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3xb2zsp_.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3xb2zsp_.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7pt9oak4.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7pt9oak4.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7pt9oak4.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7pt9oak4.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4rsfe72e.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4rsfe72e.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4rsfe72e.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4rsfe72e.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6bic5tvd.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmp6bic5tvd.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9kvhpemv.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9kvhpemv.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9kvhpemv.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9kvhpemv.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmuec28zr.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmuec28zr.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmuec28zr.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmuec28zr.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeoupqn5d.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeoupqn5d.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpeoupqn5d.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeoupqn5d.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(= (remainder (first lst)\
    \ 2) 0) (+ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr1l8p_78.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpr1l8p_78.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpr1l8p_78.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpr1l8p_78.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy70sq26e.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy70sq26e.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy70sq26e.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy70sq26e.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmph90pedam.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmph90pedam.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmph90pedam.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmph90pedam.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(= (remainder (first lst)\
    \ 2) 0) (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1wr6zkc5.rkt:17:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1wr6zkc5.rkt:18:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1wr6zkc5.rkt:19:4\nactual:     7\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1wr6zkc5.rkt:20:4\nactual:     0\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq_n6h1bq.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq_n6h1bq.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpq_n6h1bq.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq_n6h1bq.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp07ra38lz.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp07ra38lz.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp07ra38lz.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp07ra38lz.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vsv95ub.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6vsv95ub.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6vsv95ub.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6vsv95ub.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpehltve4c.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpehltve4c.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpehltve4c.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpehltve4c.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpybuh01vx.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpybuh01vx.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpybuh01vx.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpybuh01vx.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeoh0aacs.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeoh0aacs.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpeoh0aacs.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeoh0aacs.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp71lhymi3.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp71lhymi3.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp71lhymi3.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp71lhymi3.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpzgtcgliw.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpzgtcgliw.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0_3q04fh.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0_3q04fh.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0_3q04fh.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0_3q04fh.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjmxpzc16.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjmxpzc16.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjmxpzc16.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjmxpzc16.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq7le245p.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq7le245p.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpq7le245p.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq7le245p.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa0nefruz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa0nefruz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa0nefruz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa0nefruz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9akyug4n.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9akyug4n.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9akyug4n.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9akyug4n.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp38v7tdvv.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp38v7tdvv.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp38v7tdvv.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp38v7tdvv.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (length lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn_6blxmw.rkt:16:4\n\
    actual:     4\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn_6blxmw.rkt:17:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn_6blxmw.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn_6blxmw.rkt:19:4\nactual:     10\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptpc4u8ts.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptpc4u8ts.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptpc4u8ts.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptpc4u8ts.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (null? lst)\n        acc\n\
    \        (if (and (even? (car lst)) (odd? (length lst)))\n            (helper\
    \ (cdr lst) (+ acc (car lst)))\n            (helper (cdr lst) acc))))\n  (helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2kpmtk0r.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2kpmtk0r.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2kpmtk0r.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2kpmtk0r.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpku2heij6.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpku2heij6.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpku2heij6.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpku2heij6.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpykmo3k4n.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpykmo3k4n.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpykmo3k4n.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpykmo3k4n.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp869rjkfu.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp869rjkfu.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp869rjkfu.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp869rjkfu.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpycmqy8zk.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpycmqy8zk.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpycmqy8zk.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpycmqy8zk.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7z7yj847.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7z7yj847.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7z7yj847.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7z7yj847.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8aicb4k.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_8aicb4k.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_8aicb4k.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_8aicb4k.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp24kzs39k.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp24kzs39k.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp24kzs39k.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp24kzs39k.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoiq_rpul.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoiq_rpul.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoiq_rpul.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoiq_rpul.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdgnxydu7.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdgnxydu7.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdgnxydu7.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdgnxydu7.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprnoo6zge.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprnoo6zge.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprnoo6zge.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprnoo6zge.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (cdr lst)) (+ (car\
    \ lst) (add (cddr lst)))]\n        [else (add (cddr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgioolarq.rkt:16:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(88)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgioolarq.rkt:17:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(5 6 7 2 122)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgioolarq.rkt:18:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(0 6 7)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpgioolarq.rkt:19:4\n\
    \nodd?: contract violation\n  expected: integer?\n  given: '(4 6 8)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy5ypcfyw.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy5ypcfyw.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy5ypcfyw.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy5ypcfyw.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzd96k_xd.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzd96k_xd.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzd96k_xd.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzd96k_xd.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwhy7es4s.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwhy7es4s.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwhy7es4s.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwhy7es4s.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter odd? (range (length lst)))))\n\
    \  )\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpk1ytf78d.rkt:15:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpk1ytf78d.rkt:16:4\nactual:     0\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpk1ytf78d.rkt:18:4\nactual:     0\nexpected:\
    \   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0yi0ux5y.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0yi0ux5y.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0yi0ux5y.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0yi0ux5y.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnz50_i81.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnz50_i81.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnz50_i81.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnz50_i81.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpfbaqifw6.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpfbaqifw6.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpfbaqifw6.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpfbaqifw6.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmkhcyo2y.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmkhcyo2y.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmkhcyo2y.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmkhcyo2y.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0v03ppm5.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0v03ppm5.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0v03ppm5.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0v03ppm5.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7k6o_we5.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7k6o_we5.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7k6o_we5.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7k6o_we5.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (empty? lst)\n    \
    \    acc\n        (if (and (even? (first lst)) (odd? (length lst)))\n        \
    \    (add-helper (rest lst) (+ acc (first lst)))\n            (add-helper (rest\
    \ lst) acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0lh6nxoa.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0lh6nxoa.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0lh6nxoa.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0lh6nxoa.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqbbrkivm.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqbbrkivm.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqbbrkivm.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqbbrkivm.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_ab41_4f.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_ab41_4f.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_ab41_4f.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_ab41_4f.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpixwv1wkd.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpixwv1wkd.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpixwv1wkd.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpixwv1wkd.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_1imkkiq.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_1imkkiq.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_1imkkiq.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_1imkkiq.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzwnv2rn6.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzwnv2rn6.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzwnv2rn6.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzwnv2rn6.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw3_1b7bz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw3_1b7bz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpw3_1b7bz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw3_1b7bz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplccrazge.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplccrazge.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplccrazge.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplccrazge.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdu513gff.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdu513gff.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdu513gff.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdu513gff.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpimmh8w5o.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpimmh8w5o.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpimmh8w5o.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpimmh8w5o.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpf6fplijt.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpf6fplijt.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpf6fplijt.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpf6fplijt.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdd1pynq2.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdd1pynq2.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdd1pynq2.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdd1pynq2.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpn1xej9xf.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpn1xej9xf.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpn1xej9xf.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpn1xej9xf.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplaj6r7sk.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplaj6r7sk.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplaj6r7sk.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplaj6r7sk.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpy8__lj1g.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpy8__lj1g.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpy8__lj1g.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpy8__lj1g.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnzgqafo7.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnzgqafo7.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnzgqafo7.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnzgqafo7.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppd8vg2lp.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppd8vg2lp.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppd8vg2lp.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppd8vg2lp.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp9o4yqlgn.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp9o4yqlgn.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp9o4yqlgn.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp9o4yqlgn.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx1moz1tq.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx1moz1tq.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpx1moz1tq.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx1moz1tq.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvlh_ovel.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvlh_ovel.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpvlh_ovel.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvlh_ovel.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpv79ja6y0.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpv79ja6y0.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdf15od6s.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdf15od6s.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdf15od6s.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdf15od6s.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_sx0dr2z.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sx0dr2z.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_sx0dr2z.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_sx0dr2z.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpa9iwrvgf.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpa9iwrvgf.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpa9iwrvgf.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpa9iwrvgf.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkeco6iiz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkeco6iiz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkeco6iiz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkeco6iiz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiwsuxxgz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpiwsuxxgz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpiwsuxxgz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpiwsuxxgz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp422krjel.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp422krjel.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp422krjel.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp422krjel.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoq972tiu.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoq972tiu.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoq972tiu.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoq972tiu.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz_ukd8mp.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpz_ukd8mp.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpbphebnqo.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpbphebnqo.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpbphebnqo.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpbphebnqo.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8jhjecnz.rkt:7:26: filter-odd: unbound identifier\n  in: filter-odd\n\
    \  location...:\n   /tmp/tmp8jhjecnz.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzoakn5i5.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzoakn5i5.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzoakn5i5.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzoakn5i5.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ztdbdsa.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2ztdbdsa.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2ztdbdsa.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2ztdbdsa.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpolt9o5c8.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpolt9o5c8.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw0qlezzm.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw0qlezzm.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpw0qlezzm.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw0qlezzm.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmplrk5k3n9.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmplrk5k3n9.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(even? (first lst)) (helper (rest lst) (+ acc (first lst)))]\n\
    \      [else (helper (rest lst) acc)]))\n  (helper lst 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps3sizaj8.rkt:19:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps3sizaj8.rkt:20:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmps3sizaj8.rkt:21:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps3sizaj8.rkt:22:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpng3b85k4.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpng3b85k4.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpng3b85k4.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpng3b85k4.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwyevd6c9.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwyevd6c9.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwyevd6c9.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwyevd6c9.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (let loop ([lst lst] [acc 0])\n    (cond [(empty? lst) acc]\n\
    \          [(even? (car lst)) (loop (cdr lst) (+ acc (car lst)))]\n          [else\
    \ (loop (cdr lst) acc)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n \
    \   (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcoj1nxaf.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcoj1nxaf.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcoj1nxaf.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcoj1nxaf.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp56qs_uca.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp56qs_uca.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp56qs_uca.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp56qs_uca.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8xt8x3p.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv8xt8x3p.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpv8xt8x3p.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpv8xt8x3p.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqq2vd__z.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpqq2vd__z.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpqq2vd__z.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpqq2vd__z.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp13wgbe5y.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp13wgbe5y.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp13wgbe5y.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp13wgbe5y.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (length lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_8o_soga.rkt:17:4\n\
    actual:     4\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_8o_soga.rkt:18:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_8o_soga.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_8o_soga.rkt:20:4\nactual:     10\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplxfkgxsu.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmplxfkgxsu.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmplxfkgxsu.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmplxfkgxsu.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpsdvrl57s.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpsdvrl57s.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpsdvrl57s.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpsdvrl57s.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptmcl90x9.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptmcl90x9.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptmcl90x9.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptmcl90x9.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkkaltmyn.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkkaltmyn.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkkaltmyn.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkkaltmyn.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuk0w1znz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuk0w1znz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuk0w1znz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuk0w1znz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnkolcmcb.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnkolcmcb.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnkolcmcb.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnkolcmcb.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (add\
    \ (cdr lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7fh9in9s.rkt:17:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7fh9in9s.rkt:18:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7fh9in9s.rkt:19:4\nactual:     7\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7fh9in9s.rkt:20:4\nactual:     0\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpswr8n1mq.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpswr8n1mq.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpswr8n1mq.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpswr8n1mq.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3gl71thg.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3gl71thg.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3gl71thg.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3gl71thg.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw_9fpnb5.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw_9fpnb5.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpw_9fpnb5.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw_9fpnb5.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmput2k1i_j.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmput2k1i_j.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmput2k1i_j.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmput2k1i_j.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpd5t_tn3r.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpd5t_tn3r.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpd5t_tn3r.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpd5t_tn3r.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2ocods02.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2ocods02.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2ocods02.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2ocods02.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmposvod3xd.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmposvod3xd.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpddxtf9lf.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpddxtf9lf.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpddxtf9lf.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpddxtf9lf.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (helper lst acc)\n    (if (empty? lst)\n        acc\n\
    \        (if (even? (first lst))\n            (helper (rest lst) (+ acc (first\
    \ lst)))\n            (helper (rest lst) acc))))\n  (helper lst 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi931ll3y.rkt:20:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi931ll3y.rkt:21:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi931ll3y.rkt:22:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi931ll3y.rkt:23:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmppdwv8riw.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmppdwv8riw.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmppdwv8riw.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmppdwv8riw.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyd2r17y8.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyd2r17y8.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyd2r17y8.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyd2r17y8.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-map (lambda (x) (if (odd?\
    \ x) (list-ref lst x) #f)) (range (length lst))))))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjrfig_nh.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjrfig_nh.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjrfig_nh.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjrfig_nh.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (first lst)) (add\
    \ (rest lst))]\n        [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuzbjro_0.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuzbjro_0.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuzbjro_0.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuzbjro_0.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(empty? (rest lst)) 0]\n\
    \    [(even? (first lst)) (+ (first lst) (add (rest (rest lst))))]\n    [else\
    \ (add (rest (rest lst)))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0a85a2p4.rkt:18:4\n\
    actual:     4\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp0a85a2p4.rkt:19:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp0a85a2p4.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp0a85a2p4.rkt:21:4\nactual:     10\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (if (empty? lst)\n      0\n      (if (even? (car lst))\n\
    \          (+ (car lst) (add (cdr lst)))\n          (add (cdr lst)))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp3d2e09e3.rkt:18:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp3d2e09e3.rkt:19:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp3d2e09e3.rkt:20:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp3d2e09e3.rkt:21:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (let loop ([lst lst] [sum 0])\n    (if (null? lst)\n    \
    \    sum\n        (if (and (even? (car lst)) (odd? (length lst)))\n          \
    \  (loop (cdr lst) (+ sum (car lst)))\n            (loop (cdr lst) sum)))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (empty? lst)\n    \
    \    acc\n        (if (and (even? (first lst)) (odd? (length lst)))\n        \
    \    (add-helper (rest lst) (+ acc (first lst)))\n            (add-helper (rest\
    \ lst) acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjjm26p12.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjjm26p12.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjjm26p12.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjjm26p12.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8_75zp9g.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8_75zp9g.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8_75zp9g.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8_75zp9g.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp_b9b12oz.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmp_b9b12oz.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_9jb8gtj.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_9jb8gtj.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_9jb8gtj.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_9jb8gtj.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmps241rk3m.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmps241rk3m.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmps241rk3m.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmps241rk3m.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw1nd32my.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw1nd32my.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpw1nd32my.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw1nd32my.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1jhx_14t.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1jhx_14t.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1jhx_14t.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1jhx_14t.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcl3b2stx.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcl3b2stx.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcl3b2stx.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcl3b2stx.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(and (even? (first lst))\
    \ (odd? (index lst))) (+ (first lst) (add (rest lst)))]\n    [else (add (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwffjipf9.rkt:9:37: index: unbound identifier\n  in: index\n  location...:\n\
    \   /tmp/tmpwffjipf9.rkt:9:37\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmptc4ww1g2.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmptc4ww1g2.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5re7uxoh.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5re7uxoh.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5re7uxoh.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5re7uxoh.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp62l_pwb4.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp62l_pwb4.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp62l_pwb4.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp62l_pwb4.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5idh4c86.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5idh4c86.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5idh4c86.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5idh4c86.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp886k2_7d.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp886k2_7d.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp886k2_7d.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp886k2_7d.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-index lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpegzhstaa.rkt:7:26: filter-odd-index: unbound identifier\n  in:\
    \ filter-odd-index\n  location...:\n   /tmp/tmpegzhstaa.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(= (modulo (first lst)\
    \ 2) 0) (add (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgxzgmg1y.rkt:17:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgxzgmg1y.rkt:18:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgxzgmg1y.rkt:19:4\nactual:     7\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgxzgmg1y.rkt:20:4\nactual:     0\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpmv5odf16.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpmv5odf16.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpmv5odf16.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpmv5odf16.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptst4w5rs.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptst4w5rs.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptst4w5rs.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptst4w5rs.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdxooj94q.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdxooj94q.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdxooj94q.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdxooj94q.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst)) (add\
    \ (rest lst))]\n    [else (+ (first lst) (add (rest lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxu_mpeoi.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxu_mpeoi.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxu_mpeoi.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxu_mpeoi.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd lst))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb4o85wpa.rkt:7:26: filter-odd: unbound identifier\n  in: filter-odd\n\
    \  location...:\n   /tmp/tmpb4o85wpa.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8i_4qg1a.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8i_4qg1a.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8i_4qg1a.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8i_4qg1a.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpaf8jkc2j.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpaf8jkc2j.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpaf8jkc2j.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpaf8jkc2j.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpud8ezokv.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpud8ezokv.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpud8ezokv.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpud8ezokv.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe03t04ua.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe03t04ua.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe03t04ua.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe03t04ua.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpxicaibzs.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpxicaibzs.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpxicaibzs.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpxicaibzs.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjheg5jrm.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjheg5jrm.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjheg5jrm.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjheg5jrm.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8nf99idz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8nf99idz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8nf99idz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8nf99idz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpll5r9n73.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpll5r9n73.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpkmbh3qid.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpkmbh3qid.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpkmbh3qid.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpkmbh3qid.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8mka8t38.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8mka8t38.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8mka8t38.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8mka8t38.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n```\n\n### [Exercise\
    \ 3](https://www.codewars.com/kata/5a3fe3dde1ce0e8ed6000097)\n\n```racket\n#lang\
    \ racket\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2g4fyqpv.rkt:13:0: read-syntax: bad syntax `##`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(even? (first lst)) (add-helper (rest lst) (+ acc (first lst)))]\n\
    \      [else (add-helper (rest lst) acc)]))\n  (add-helper lst 0))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2renxu9f.rkt:19:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp2renxu9f.rkt:20:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp2renxu9f.rkt:21:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp2renxu9f.rkt:22:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpi1ifc9ft.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpi1ifc9ft.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpi1ifc9ft.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpi1ifc9ft.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcjsj_yp1.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcjsj_yp1.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcjsj_yp1.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcjsj_yp1.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmptwl0foot.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmptwl0foot.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmptwl0foot.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmptwl0foot.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpam3q93d9.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpam3q93d9.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpam3q93d9.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpam3q93d9.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp1rh5kqri.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp1rh5kqri.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp1rh5kqri.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp1rh5kqri.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp144iu3lp.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp144iu3lp.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp144iu3lp.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp144iu3lp.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (apply + (filter even? (filter-odd-indices lst))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal?\
    \ (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122))\
    \ 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8s9qm__n.rkt:7:26: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmp8s9qm__n.rkt:7:26\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmprj78j0p_.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmprj78j0p_.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmprj78j0p_.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmprj78j0p_.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(= (remainder (first lst)\
    \ 2) 0)\n         (+ (first lst) (add (rest lst)))]\n        [else (add (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpcw3tpe6r.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpcw3tpe6r.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpcw3tpe6r.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpcw3tpe6r.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (foldl + 0 (filter even? (filter-odd-indices lst))))\n\n\
    (require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate add))\n\
    \    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate (list\
    \ 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal?\
    \ (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb7ov9h_o.rkt:7:28: filter-odd-indices: unbound identifier\n  in:\
    \ filter-odd-indices\n  location...:\n   /tmp/tmpb7ov9h_o.rkt:7:28\n"
  exit_code: 1
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpjus6vwlp.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpjus6vwlp.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpjus6vwlp.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpjus6vwlp.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp35n_obt6.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp35n_obt6.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp35n_obt6.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp35n_obt6.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp85_2l7w9.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp85_2l7w9.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp85_2l7w9.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp85_2l7w9.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst sum)\n    (cond [(empty? lst) sum]\n\
    \          [(odd? (car lst)) (add-helper (cdr lst) (+ sum (car lst)))]\n     \
    \     [else (add-helper (cdr lst) sum)]))\n  (add-helper lst 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpq2_kk62a.rkt:18:4\n\
    actual:     0\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpq2_kk62a.rkt:19:4\nactual:     12\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpq2_kk62a.rkt:20:4\nactual:     7\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpq2_kk62a.rkt:21:4\nactual:     0\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpeircpmrx.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpeircpmrx.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpeircpmrx.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpeircpmrx.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(odd? (car lst)) (add (cdr\
    \ lst))]\n        [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6tn18vn4.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp6tn18vn4.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp6tn18vn4.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp6tn18vn4.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n    [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuz6adgia.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpuz6adgia.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpuz6adgia.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpuz6adgia.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpvoer3827.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpvoer3827.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpvoer3827.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpvoer3827.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp7vkd6sxe.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp7vkd6sxe.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp7vkd6sxe.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp7vkd6sxe.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpx8qjco2e.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpx8qjco2e.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpx8qjco2e.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpx8qjco2e.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5lq8cywh.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5lq8cywh.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5lq8cywh.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5lq8cywh.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp4q_l1pnu.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp4q_l1pnu.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp4q_l1pnu.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp4q_l1pnu.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpahf26h1d.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpahf26h1d.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpahf26h1d.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpahf26h1d.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm7qjm_vi.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm7qjm_vi.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm7qjm_vi.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm7qjm_vi.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_wxx1j3w.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_wxx1j3w.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_wxx1j3w.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_wxx1j3w.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnqvs5jsd.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpnqvs5jsd.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpnqvs5jsd.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpnqvs5jsd.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (let loop ([lst lst] [sum 0])\n    (cond [(empty? lst) sum]\n\
    \          [(even? (car lst)) (loop (cdr lst) (+ sum (car lst)))]\n          [else\
    \ (loop (cdr lst) sum)])))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n \
    \   (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgoksf00h.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpgoksf00h.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpgoksf00h.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpgoksf00h.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5jiez4_k.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp5jiez4_k.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp5jiez4_k.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp5jiez4_k.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpwrc4c0d7.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpwrc4c0d7.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpwrc4c0d7.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpwrc4c0d7.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (first lst)) (+ (first\
    \ lst) (add (rest lst)))]\n        [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpyuauxrzb.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpyuauxrzb.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpyuauxrzb.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpyuauxrzb.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (cond\n      [(empty? lst)\
    \ acc]\n      [(even? (car lst)) (add-helper (cdr lst) (+ acc (car lst)))]\n \
    \     [else (add-helper (cdr lst) acc)]))\n  (add-helper lst 0))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpm8pkkc_y.rkt:19:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpm8pkkc_y.rkt:20:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpm8pkkc_y.rkt:21:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpm8pkkc_y.rkt:22:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe85s_7mo.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpe85s_7mo.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpe85s_7mo.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpe85s_7mo.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpc37g96bu.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpc37g96bu.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpc37g96bu.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpc37g96bu.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(odd? (car lst)) (add (cdr\
    \ lst))]\n    [else (+ (car lst) (add (cdr lst)))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp_f150jt9.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp_f150jt9.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp_f150jt9.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp_f150jt9.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8u6zbl13.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmp8u6zbl13.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmp8u6zbl13.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmp8u6zbl13.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (empty? lst)\n    \
    \    acc\n        (if (even? (first lst))\n            (add-helper (rest lst)\
    \ (+ acc (first lst)))\n            (add-helper (rest lst) acc))))\n  (add-helper\
    \ lst 0))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ add))\n    (check-equal? (candidate (list 4 88)) 88)\n    (check-equal? (candidate\
    \ (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate (list 4 0 6 7)) 0)\n\
    \    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpzcrqeja7.rkt:20:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpzcrqeja7.rkt:21:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpzcrqeja7.rkt:22:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpzcrqeja7.rkt:23:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoijlk1mz.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpoijlk1mz.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpoijlk1mz.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpoijlk1mz.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (define (add-helper lst acc)\n    (if (null? lst)\n     \
    \   acc\n        (if (and (even? (car lst)) (odd? (length lst)))\n           \
    \ (add-helper (cdr lst) (+ acc (car lst)))\n            (add-helper (cdr lst)\
    \ acc))))\n  (add-helper lst 0))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate add))\n    (check-equal? (candidate (list 4 88)) 88)\n\
    \    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n    (check-equal? (candidate\
    \ (list 4 0 6 7)) 0)\n    (check-equal? (candidate (list 4 4 6 8)) 12)\n))\n\n\
    (test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond\n    [(empty? lst) 0]\n    [(even? (first lst)) (+\
    \ (first lst) (add (rest lst)))]\n    [else (add (rest lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdn3wioe8.rkt:17:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdn3wioe8.rkt:18:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpdn3wioe8.rkt:19:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpdn3wioe8.rkt:20:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a non-empty list of integers lst. add the even\
    \ elements that are at odd indices..\n;; Examples:\n;; add([4, 2, 6, 7]) ==> 2\n\
    (define (add lst)\n  (cond [(empty? lst) 0]\n        [(even? (car lst)) (+ (car\
    \ lst) (add (cdr lst)))]\n        [else (add (cdr lst))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate add))\n    (check-equal? (candidate\
    \ (list 4 88)) 88)\n    (check-equal? (candidate (list 4 5 6 7 2 122)) 122)\n\
    \    (check-equal? (candidate (list 4 0 6 7)) 0)\n    (check-equal? (candidate\
    \ (list 4 4 6 8)) 12)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpw2m7_vj3.rkt:16:4\n\
    actual:     92\nexpected:   88\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpw2m7_vj3.rkt:17:4\nactual:     134\n\
    expected:   122\n--------------------\n--------------------\nFAILURE\nname:  \
    \     check-equal?\nlocation:   /tmp/tmpw2m7_vj3.rkt:18:4\nactual:     10\nexpected:\
    \   0\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpw2m7_vj3.rkt:19:4\nactual:     22\nexpected:   12\n--------------------\n"
  exit_code: 0
  status: Exception
