name: HumanEval_63_fibfib
language: ts
prompt: "//The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n// fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2)\
  \ == 1\n// fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n// Please write\
  \ a function to efficiently compute the n-th element of the fibfib number sequence.\n\
  // >>> fibfib(1)\n// 0\n// >>> fibfib(5)\n// 4\n// >>> fibfib(8)\n// 24\nfunction\
  \ fibfib(n: number): number {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = fibfib;\n  assert.deepEqual(candidate(2),1);\n  assert.deepEqual(candidate(1),0);\n\
  \  assert.deepEqual(candidate(5),4);\n  assert.deepEqual(candidate(8),24);\n  assert.deepEqual(candidate(10),81);\n\
  \  assert.deepEqual(candidate(12),274);\n  assert.deepEqual(candidate(14),927);\n\
  }\n\ntest();"
completions: ["  const fibs = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n    fibs[i]\
    \ = fibs[i - 1] + fibs[i - 2] + fibs[i - 3];\n  }\n  return fibs[n];\n}\n", " \
    \ let a = 0;\n  let b = 0;\n  let c = 1;\n  if (n === 0) {\n    return a;\n  }\n\
    \  if (n === 1) {\n    return b;\n  }\n  if (n === 2) {\n    return c;\n  }\n\
    \  for (let i = 2; i < n; i++) {\n    let temp = a + b + c;\n    a = b;\n    b\
    \ = c;\n    c = temp;\n  }\n  return c;\n}\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\n\
    console.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\n\
    console.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\n\
    console.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\n\
    console.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\n\
    console.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\n\
    console.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\n\
    console.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\n\
    console.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\n\
    console.log(fibfib(31));\n", "  let a = 0, b = 0, c = 1;\n  for (let i = 0; i\
    \ < n; i++) {\n    let temp = a + b + c;\n    a = b;\n    b = c;\n    c = temp;\n\
    \  }\n  return a;\n}\n", "    return 0;\n}\n\nexport {\n    nthFib,\n    fibFib,\n\
    \    fibfib\n}", "    if (n <= 1) return 0;\n    if (n == 2) return 1;\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    if (n === 0) {\n\
    \        return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if\
    \ (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\n\
    console.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\n\
    console.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\n\
    console.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\n\
    console.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\n\
    console.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\n\
    console.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\n\
    console.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\n\
    console.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\n\
    console.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\n\
    console.log(fibfib(34));\nconsole.log(fibfib", "  if (n < 0) {\n    throw Error('Illegal\
    \ input');\n  }\n\n  if (n === 0) {\n    return 0;\n  }\n\n  if (n === 1) {\n\
    \    return 0;\n  }\n\n  if (n === 2) {\n    return 1;\n  }\n\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    let dp: number[] = [0, 0,\
    \ 1];\n    for (let i = 3; i <= n; i++) {\n        dp[i] = dp[i - 1] + dp[i -\
    \ 2] + dp[i - 3];\n    }\n    return dp[n];\n}\n", "  let a = 0, b = 0, c = 1;\n\
    \  for (let i = 0; i < n; i++) {\n    a = b;\n    b = c;\n    c = a + b + c;\n\
    \  }\n  return a;\n}\n", "  let i: number = 0;\n  let j: number = 0;\n  let k:\
    \ number = 1;\n  let fibfib_n: number = 0;\n  for (let index = 0; index < n; index++)\
    \ {\n    fibfib_n = i + j + k;\n    i = j;\n    j = k;\n    k = fibfib_n;\n  }\n\
    \  return fibfib_n;\n}\nconsole.log(fibfib(8));\n", "    if (n < 3) {\n      \
    \  return n - 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n -\
    \ 3);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n\
    \  let c = 1;\n  let sum = 0;\n  for (let i = 3; i <= n; i++) {\n    sum = a +\
    \ b + c;\n    a = b;\n    b = c;\n    c = sum;\n  }\n  return sum;\n}\n", "  \
    \  const prev3 = 0;\n    const prev2 = 0;\n    const prev1 = 1;\n    let fibfib\
    \ = 0;\n    for (let i = 2; i <= n; i++) {\n        fibfib = prev1 + prev2 + prev3;\n\
    \        prev3 = prev2;\n        prev2 = prev1;\n        prev1 = fibfib;\n   \
    \ }\n    return fibfib;\n}\n", "  const fibonacci: number[] = [0, 0, 1];\n  for\
    \ (let i = 3; i <= n; i++) {\n    fibonacci[i] = fibonacci[i - 1] + fibonacci[i\
    \ - 2] + fibonacci[i - 3];\n  }\n  return fibonacci[n];\n}\n", "  return n;\n\
    }\n\ntest(fibfib, [[0, 0], [1, 0], [2, 1], [5, 4], [8, 24], [16, 17496]]);\n",
  "    if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    if (n == 3) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n < 2) {\n    return 0;\n\
    \  } else if (n === 2) {\n    return 1;\n  } else {\n    let prevPrev: number\
    \ = 0;\n    let prev: number = 0;\n    let next: number = 1;\n    for (let i =\
    \ 2; i < n; i++) {\n      prevPrev = prev;\n      prev = next;\n      next = prevPrev\
    \ + prev + next;\n    }\n    return next;\n  }\n}\n", "  let arr = [0, 0, 1];\n\
    \  for (let i = 3; i <= n; i++) {\n    arr[i] = arr[i - 1] + arr[i - 2] + arr[i\
    \ - 3];\n  }\n  return arr[n];\n}\n", "  if (n === 0) {\n    return 0;\n  }\n\
    \  let a = 0;\n  let b = 0;\n  let c = 1;\n  for (let i = 2; i <= n; i++) {\n\
    \    a = b;\n    b = c;\n    c = a + b + c;\n  }\n  return c;\n}\n", "  return\
    \ 0;\n}\n", "    if (n < 0) {\n        throw new Error('negative numbers not allowed');\n\
    \    }\n\n    if (n === 0) {\n        return 0;\n    }\n\n    if (n === 1) {\n\
    \        return 0;\n    }\n\n    if (n === 2) {\n        return 1;\n    }\n\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n ===\
    \ 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n\
    \ === 2) {\n    return 1;\n  }\n  let first = 0;\n  let second = 0;\n  let third\
    \ = 1;\n  let result = 0;\n  for (let i = 3; i <= n; i++) {\n    result = first\
    \ + second + third;\n    first = second;\n    second = third;\n    third = result;\n\
    \  }\n  return result;\n}\n", "    if (n === 0) {\n        return 0;\n    }\n\
    \    if (n === 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "  if (n < 0) {\n    throw new Error(\"Negative numbers not allowed\");\n  }\n \
    \ if (n === 0) {\n    return 0;\n  }\n  if (n <= 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n === 0) {\n  \
    \  return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n\
    \    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n  }\n}\n\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));\n", "  if (n <= 1) {\n    return\
    \ 0;\n  } else if (n == 2) {\n    return 1;\n  } else {\n    let f1 = 0;\n   \
    \ let f2 = 0;\n    let f3 = 1;\n    let fn = 0;\n    for (let i = 3; i <= n; i++)\
    \ {\n      fn = f1 + f2 + f3;\n      f1 = f2;\n      f2 = f3;\n      f3 = fn;\n\
    \    }\n    return fn;\n  }\n}\n", "    if (n === 0) return 0;\n    if (n ===\
    \ 1) return 0;\n    if (n === 2) return 1;\n    let a = 0;\n    let b = 0;\n \
    \   let c = 1;\n    let d = 1;\n    for (let i = 3; i <= n; i++) {\n        d\
    \ = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return\
    \ d;\n}\n\nexport { fibfib };", "    if (n <= 1) {\n        return 0;\n    }\n\
    \    if (n == 2) {\n        return 1;\n    }\n    if (n == 3) {\n        return\
    \ 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "  const cache: number[] = []\n  function helper(n: number): number {\n    if (n\
    \ === 0) return 0\n    if (n === 1) return 0\n    if (n === 2) return 1\n    const\
    \ temp = cache[n]\n    if (temp !== undefined) return temp\n    const result =\
    \ helper(n - 1) + helper(n - 2) + helper(n - 3)\n    cache[n] = result\n    return\
    \ result\n  }\n  return helper(n)\n}\n\nconsole.log(fibfib(0))\nconsole.log(fibfib(1))\n\
    console.log(fibfib(2))\nconsole.log(fibfib(3))\nconsole.log(fibfib(4))\nconsole.log(fibfib(5))\n\
    console.log(fibfib(6))\nconsole.log(fibfib(7))\nconsole.log(fibfib(8))\nconsole.log(fibfib(9))\n\
    console.log(fibfib(10))\nconsole.log(fibfib(11))\nconsole.log(fibfib(12))\nconsole.log(fibfib(13))\n\
    console.log(fibfib(14))\nconsole.log(fibfib(15))\nconsole.log(fibfib(16))\nconsole.log(fibfib(17))\n\
    console.log(fibfib(18))\nconsole.log(fibfib(19))\nconsole.log(fibfib(20))\nconsole.log(fibfib(21))\n\
    console.log(fibfib(22))\nconsole.log(fibfib(23))\nconsole.log(fibfib(24))\nconsole.log(fibfib(25))\n\
    console.log(fibfib(26))\nconsole.log(fibfib(27))\nconsole.log(fibfib(28))\nconsole.log(fibfib(29))\n\
    console.log(fibfib(30))\nconsole.log(fibfib(31))\nconsole.log(fibf", "    let\
    \ a = 0;\n    let b = 0;\n    let c = 1;\n    for (let i = 0; i < n; i++) {\n\
    \        let temp = c;\n        c = a + b + c;\n        a = b;\n        b = temp;\n\
    \    }\n    return a;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "    if (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n -\
    \ 3);\n    }\n}\nconsole.log(fibfib(5));\n", "    if (n < 3) {\n        return\
    \ n - 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\
    console.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return\
    \ 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}", "  if (n === 0) {\n    return 0;\n\
    \  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n\
    \  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n\
    }\n", "  if (n < 0) return 0;\n  if (n === 0) return 0;\n  if (n === 1) return\
    \ 0;\n  if (n === 2) return 1;\n  if (n === 3) return 1;\n  let prev3 = 0;\n \
    \ let prev2 = 0;\n  let prev1 = 1;\n  let curr = 0;\n  for (let i = 3; i <= n;\
    \ i++) {\n    curr = prev1 + prev2 + prev3;\n    prev3 = prev2;\n    prev2 = prev1;\n\
    \    prev1 = curr;\n  }\n  return curr;\n}\n", "    let count = 0;\n    let fibArr\
    \ = [0, 0, 1];\n    if (n <= 2) {\n        return fibArr[n];\n    }\n    while\
    \ (count < n) {\n        let last = fibArr[fibArr.length - 1];\n        let secondToLast\
    \ = fibArr[fibArr.length - 2];\n        let thirdToLast = fibArr[fibArr.length\
    \ - 3];\n        fibArr.push(last + secondToLast + thirdToLast);\n        count++;\n\
    \    }\n    return fibArr[fibArr.length - 1];\n}\n", "    if (n === 0) {\n   \
    \     return 0;\n    }\n    if (n === 1) {\n        return 0;\n    }\n    if (n\
    \ === 2) {\n        return 1;\n    }\n    let prev1 = 0;\n    let prev2 = 0;\n\
    \    let prev3 = 1;\n    let val = 0;\n    for (let i = 3; i <= n; i++) {\n  \
    \      val = prev1 + prev2 + prev3;\n        prev1 = prev2;\n        prev2 = prev3;\n\
    \        prev3 = val;\n    }\n    return val;\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return\
    \ 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    \  }\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return\
    \ 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(\"\
    fibfib(0): \", fibfib(0));\nconsole.log(\"fibfib(1): \", fibfib(1));\nconsole.log(\"\
    fibfib(2): \", fibfib(2));\nconsole.log(\"fibfib(3): \", fibfib(3));\nconsole.log(\"\
    fibfib(4): \", fibfib(4));\nconsole.log(\"fibfib(5): \", fibfib(5));\nconsole.log(\"\
    fibfib(6): \", fibfib(6));\nconsole.log(\"fibfib(7): \", fibfib(7));\nconsole.log(\"\
    fibfib(8): \", fibfib(8));\nconsole.log(\"fibfib(9): \", fibfib(9));\nconsole.log(\"\
    fibfib(10): \", fibfib(10));\nconsole.log(\"fibfib(11): \", fibfib(11));\nconsole.log(\"\
    fibfib(12): \", fibfib(12));\nconsole.log(\"fibfib(13): \", fibfib(13));\nconsole.log(\"\
    fibfib(14): \", fibfib(14));\nconsole.log(\"fibfib(15): \", fibfib(15));\nconsole.log(\"\
    fibfib(16): \", fibfib(16));\nconsole.log(\"fibfib(17): \", fibfib(17));\nconsole.log(\"\
    fibfib(18): \", fibfib(18));\nconsole.log(\"fibfib(19): \", fibfib(19));\nconsole.log(\"\
    fibfib(20): \", fibfib(20));\nconsole.log(\"fibfib(21): \",", "    const cache:\
    \ { [key: number]: number } = { 0: 0, 1: 0, 2: 1 };\n    for (let i = 3; i <=\
    \ n; i++) {\n        const cachedValue = cache[i - 1] + cache[i - 2] + cache[i\
    \ - 3];\n        cache[i] = cachedValue;\n    }\n    return cache[n];\n}\n\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));\n", "  if (n <= 1) {\n    return 0;\n  }\n  if (n ===\
    \ 2) {\n    return 1;\n  }\n  let f1 = 0;\n  let f2 = 0;\n  let f3 = 1;\n  let\
    \ res = 0;\n  for (let i = 3; i <= n; i++) {\n    res = f1 + f2 + f3;\n    f1\
    \ = f2;\n    f2 = f3;\n    f3 = res;\n  }\n  return res;\n}\n", "  if (n < 2)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\nconsole.log(fibfib(9));\n",
  "    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return\
    \ 1;\n    let a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 0;\n    for\
    \ (let i = 3; i <= n; i++) {\n        d = a + b + c;\n        a = b;\n       \
    \ b = c;\n        c = d;\n    }\n    return d;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));\n", "  if (n < 2) {\n    return 0;\n  }\n  if (n === 2)\
    \ {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\n\ntest('fibfib', () => {\n  expect(fibfib(1)).toBe(0);\n  expect(fibfib(5)).toBe(4);\n\
    \  expect(fibfib(8)).toBe(24);\n});\n", "    if (n < 3) {\n        return n;\n\
    \    }\n\n    let fibfibPrevPrevPrev = 0;\n    let fibfibPrevPrev = 0;\n    let\
    \ fibfibPrev = 1;\n    let fibfibCurr = 1;\n\n    for (let i = 3; i <= n; i++)\
    \ {\n        fibfibCurr = fibfibPrev + fibfibPrevPrev + fibfibPrevPrevPrev;\n\
    \        fibfibPrevPrevPrev = fibfibPrevPrev;\n        fibfibPrevPrev = fibfibPrev;\n\
    \        fibfibPrev = fibfibCurr;\n    }\n\n    return fibfibCurr;\n}\n\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));", "    const fibfibArr = new\
    \ Array(n);\n    fibfibArr[0] = 0;\n    fibfibArr[1] = 0;\n    fibfibArr[2] =\
    \ 1;\n    for (let i = 3; i < n; i++) {\n        fibfibArr[i] = fibfibArr[i -\
    \ 1] + fibfibArr[i - 2] + fibfibArr[i - 3];\n    }\n    return fibfibArr[n - 1];\n\
    }\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "  return n;\n}\n", "  let arr = [0, 0, 1];\n  if (n < 3) {\n \
    \   return arr[n];\n  }\n  for (let i = 3; i <= n; i++) {\n    arr[i] = arr[i\
    \ - 1] + arr[i - 2] + arr[i - 3];\n  }\n  return arr[n];\n}\n", "  if (n === 0)\
    \ {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2)\
    \ {\n    return 1;\n  }\n  let res = 0;\n  let p1 = 0;\n  let p2 = 0;\n  let p3\
    \ = 1;\n  for (let i = 3; i <= n; i++) {\n    res = p1 + p2 + p3;\n    p1 = p2;\n\
    \    p2 = p3;\n    p3 = res;\n  }\n  return res;\n}\n", "  if (n === 0) {\n  \
    \  return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n  \
    \  return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n  }\n}\n", "    if (n <= 1) {\n        return 0;\n  \
    \  }\n    if (n === 2) {\n        return 1;\n    }\n    if (n === 3) {\n     \
    \   return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    }\n", "  const result: number[] = [0, 0, 1];\n  for (let i = 3; i <= n; i++) {\n\
    \    result[i % 3] = result[(i - 1) % 3] + result[(i - 2) % 3] + result[(i - 3)\
    \ % 3];\n  }\n  return result[n % 3];\n}\n", "    if (n < 2) {\n        return\
    \ 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "  const memo =\
    \ new Map();\n  memo.set(0, 0);\n  memo.set(1, 0);\n  memo.set(2, 1);\n  return\
    \ fibfibHelper(n, memo);\n}\n", "    if (n < 0) {\n        throw new Error('number\
    \ must be positive');\n    }\n\n    let a = 0;\n    let b = 0;\n    let c = 1;\n\
    \    let d = 0;\n\n    if (n === 0) {\n        return 0;\n    } else if (n ===\
    \ 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    }\n\
    \n    for (let i = 3; i <= n; i++) {\n        d = c + b + a;\n        a = b;\n\
    \        b = c;\n        c = d;\n    }\n\n    return d;\n}", "    if (n < 2) {\n\
    \        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}", "  const cache: number[]\
    \ = [];\n  cache[0] = 0;\n  cache[1] = 0;\n  cache[2] = 1;\n  function recurse(n:\
    \ number): number {\n    if (cache[n] !== undefined) {\n      return cache[n];\n\
    \    }\n    return (cache[n] = recurse(n - 1) + recurse(n - 2) + recurse(n - 3));\n\
    \  }\n  return recurse(n);\n}\n", "  if (n <= 1) {\n    return 0;\n  }\n  if (n\
    \ === 2) {\n    return 1;\n  }\n  let first = 0;\n  let second = 0;\n  let third\
    \ = 1;\n  let result = 0;\n  for (let i = 2; i < n; i++) {\n    result = first\
    \ + second + third;\n    first = second;\n    second = third;\n    third = result;\n\
    \  }\n  return result;\n}\n", "  if (n === 0) {\n    return 0;\n  } else if (n\
    \ === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n}\n", "    if\
    \ (n <= 1) {\n        return 0;\n    } else if (n == 2) {\n        return 1;\n\
    \    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    \    }\n}\n", "    // TODO your code goes here\n    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n", "    if (n === 0) {\n        return 0;\n    }\
    \ else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return\
    \ 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n -\
    \ 3);\n    }\n}\n", "  let cache: number[] = [0, 0, 1];\n  let result: number\
    \ = 0;\n  if (n < cache.length) {\n    return cache[n];\n  } else {\n    for (let\
    \ i = 3; i <= n; i++) {\n      result = cache[0] + cache[1] + cache[2];\n    \
    \  cache[0] = cache[1];\n      cache[1] = cache[2];\n      cache[2] = result;\n\
    \    }\n    return result;\n  }\n}\n", "    if (n < 3) return n === 0 ? 0 : 1;\n\
    \    let a = 0, b = 1, c = 1;\n    for (let i = 3; i <= n; i++) {\n        a =\
    \ b;\n        b = c;\n        c = a + b + c;\n    }\n    return c;\n}\n", "  \
    \  if (n <= 1) {\n        return 0;\n    } else if (n === 2) {\n        return\
    \ 1;\n    }\n    let last_num = 0;\n    let second_last_num = 0;\n    let next_num\
    \ = 1;\n    for (let i = 3; i <= n; i++) {\n        last_num = second_last_num;\n\
    \        second_last_num = next_num;\n        next_num = last_num + second_last_num\
    \ + next_num;\n    }\n    return next_num;\n}\n", "  // return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n  if (n === 0) {\n    return 0;\n  }\n  if (n\
    \ === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n <= 1) {\n   \
    \ return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    const result: number[] = [0, 0,\
    \ 1];\n    if (n < 3) {\n        return result[n];\n    }\n    for (let i = 3;\
    \ i <= n; i++) {\n        result[i] = result[i - 1] + result[i - 2] + result[i\
    \ - 3];\n    }\n    return result[n];\n}\n", "  let fibs = [0, 0, 1];\n  if (n\
    \ < 3) {\n    return fibs[n];\n  }\n  while (fibs.length <= n) {\n    fibs.push(fibs[fibs.length\
    \ - 1] + fibs[fibs.length - 2] + fibs[fibs.length - 3]);\n  }\n  return fibs[n];\n\
    }\n", "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n    \
    \    return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let a\
    \ = 0;\n    let b = 0;\n    let c = 1;\n    let d = 0;\n    for (let i = 3; i\
    \ <= n; i++) {\n        d = a + b + c;\n        a = b;\n        b = c;\n     \
    \   c = d;\n    }\n    return d;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));\n", "  return 0;\n}\n", "  if (n === 0) {\n    return\
    \ 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return\
    \ 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if\
    \ (n <= 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    if (n === 0) return\
    \ 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n === 3)\
    \ return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "    if (n <= 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 0;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "  if (n === 0)\
    \ {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n ===\
    \ 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n  }\n}", "    if (n < 0) {\n        throw new Error(`Negative\
    \ input: ${n}`);\n    }\n    if (n < 2) {\n        return 0;\n    }\n    if (n\
    \ === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n}\n", "  let prev1 = 0;\n  let prev2 = 0;\n  let prev3 = 1;\n\
    \  let result = 0;\n  for (let i = 2; i <= n; i++) {\n    result = prev1 + prev2\
    \ + prev3;\n    prev1 = prev2;\n    prev2 = prev3;\n    prev3 = result;\n  }\n\
    \  return result;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  // your code goes here\n  const fib = [0, 0, 1];\n  for (let i = 3; i <= n; i++)\
    \ {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n  return fib[n];\n\
    }\n", "  if (n < 3) {\n    return n < 2 ? 0 : 1;\n  }\n  return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    if (n === 0) return 0;\n    if\
    \ (n === 1) return 0;\n    if (n === 2) return 1;\n    let previous2 = 0;\n  \
    \  let previous1 = 0;\n    let current = 1;\n    for (let i = 3; i <= n; i++)\
    \ {\n        previous2 = previous1;\n        previous1 = current;\n        current\
    \ = previous1 + previous2 + current;\n    }\n    return current;\n}\n", "  if\
    \ (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\
    \  let res = 0;\n  for (let i = 2; i < n; i++) {\n    res = a + b + c;\n    a\
    \ = b;\n    b = c;\n    c = res;\n  }\n  return res;\n}\n", "    if (n <= 1) {\n\
    \        return 0;\n    } else if (n === 2) {\n        return 1;\n    }\n    let\
    \ a = 0;\n    let b = 0;\n    let c = 1;\n    let d = 0;\n    while (n > 2) {\n\
    \        d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    \
    \    n--;\n    }\n    return d;\n}\n", "  let fibList = [0,0,1];\n  if (n < 3)\
    \ {\n    return fibList[n];\n  }\n  while (fibList.length <= n) {\n    let len\
    \ = fibList.length;\n    fibList.push(fibList[len-1] + fibList[len-2] + fibList[len-3]);\n\
    \  }\n  return fibList[n];\n}\n", "    let cur = 0;\n    let prev = 0;\n    let\
    \ prev2 = 0;\n    let prev3 = 0;\n    for (let i = 0; i < n; i++) {\n        if\
    \ (i == 0) {\n            cur = 0;\n        } else if (i == 1) {\n           \
    \ cur = 0;\n        } else if (i == 2) {\n            cur = 1;\n        } else\
    \ {\n            cur = prev + prev2 + prev3;\n        }\n        prev3 = prev2;\n\
    \        prev2 = prev;\n        prev = cur;\n    }\n    return cur;\n}\n", " \
    \   if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return\
    \ 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n\
    \ <= 1) {\n    return 0;\n  }\n  if (n == 2) {\n    return 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n === 0) {\n    return 0;\n\
    \  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n\
    \  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  let a\
    \ = 0;\n  let b = 0;\n  let c = 1;\n  let d;\n  for (let i = 2; i <= n; i++) {\n\
    \    d = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n",
  "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n  }\n}\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  if (n <= 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    const arr = new Array(n\
    \ + 1).fill(0);\n    arr[1] = 0;\n    arr[2] = 1;\n    for (let i = 3; i <= n;\
    \ i++) {\n        arr[i] = arr[i - 1] + arr[i - 2] + arr[i - 3];\n    }\n    return\
    \ arr[n];\n}\n", "  // return n < 3 ? n - 1 : fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n  if (n < 3) return n - 1;\n  const cache = [0, 0, 1];\n  let\
    \ i = 3;\n  while (i <= n) {\n    cache[i % 3] = cache[(i - 1) % 3] + cache[(i\
    \ - 2) % 3] + cache[(i - 3) % 3];\n    i++;\n  }\n  return cache[(i - 1) % 3];\n\
    }\n", "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n    \
    \    return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    let arr\
    \ = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        arr.push(arr[i - 1]\
    \ + arr[i - 2] + arr[i - 3]);\n    }\n    return arr[n];\n}\n\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));", "    return 0;\n}\n", "   \
    \ if (n <= 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n\
    \    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if\
    \ (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  let fibfib0 = 0;\n  let fibfib1 = 0;\n  let\
    \ fibfib2 = 1;\n  let fibfib3 = 0;\n  for (let i = 3; i <= n; i++) {\n    fibfib3\
    \ = fibfib0 + fibfib1 + fibfib2;\n    fibfib0 = fibfib1;\n    fibfib1 = fibfib2;\n\
    \    fibfib2 = fibfib3;\n  }\n  return fibfib3;\n}\n", "    let a = 0, b = 0,\
    \ c = 1, next;\n    for (let i = 2; i <= n; i++) {\n        next = a + b + c;\n\
    \        a = b;\n        b = c;\n        c = next;\n    }\n    return next;\n\
    }\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n}\n", "  let a = 0;\n  let b = 0;\n  let c = 1;\n  let\
    \ result = 0;\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  for (let i = 3; i <= n; i++)\
    \ {\n    result = a + b + c;\n    a = b;\n    b = c;\n    c = result;\n  }\n \
    \ return result;\n}\n", "    let a = 0;\n    let b = 0;\n    let c = 1;\n    for\
    \ (let i = 0; i < n; i++) {\n        a = b;\n        b = c;\n        c = a + b\
    \ + c;\n    }\n    return a;\n}\n\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));\n", "  // code here\n}\n", "  if (n < 0) {\n    throw\
    \ new Error('n can not be negative');\n  }\n\n  if (n < 2) {\n    return 0;\n\
    \  }\n\n  if (n === 2) {\n    return 1;\n  }\n\n  let a = 0;\n  let b = 0;\n \
    \ let c = 1;\n  let d = 0;\n\n  for (let i = 3; i <= n; i++) {\n    d = a + b\
    \ + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n\n  return d;\n}\n", "    let\
    \ n1 = 0;\n    let n2 = 0;\n    let n3 = 1;\n    for (let i = 3; i <= n; i++)\
    \ {\n        let num = n1 + n2 + n3;\n        n1 = n2;\n        n2 = n3;\n   \
    \     n3 = num;\n    }\n    return n3;\n}\n", "  let a: number = 0,\n    b: number\
    \ = 0,\n    c: number = 1;\n  for (let i = 2; i <= n; i++) {\n    a = b;\n   \
    \ b = c;\n    c = a + b + c;\n  }\n  return c;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));", "    let prev3 = 0;\n    let prev2 = 0;\n    let prev1\
    \ = 1;\n    let current = 0;\n    for (let i = 2; i <= n; i++) {\n        current\
    \ = prev1 + prev2 + prev3;\n        prev3 = prev2;\n        prev2 = prev1;\n \
    \       prev1 = current;\n    }\n    return current;\n}\n", "    if (n < 3) return\
    \ n - 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", " \
    \ if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n  }\n}\n", "    if (n < 2) return 0;\n    if (n === 2)\
    \ return 1;\n    let a = 0, b = 0, c = 1;\n    for (let i = 3; i <= n; i++) {\n\
    \        let sum = a + b + c;\n        a = b;\n        b = c;\n        c = sum;\n\
    \    }\n    return c;\n}", "    let num1 = 0;\n    let num2 = 0;\n    let num3\
    \ = 1;\n    let fibfibNum = 0;\n    if (n == 0) {\n        return 0;\n    }\n\
    \    if (n == 1) {\n        return 0;\n    }\n    if (n == 2) {\n        return\
    \ 1;\n    }\n    for (let i = 3; i <= n; i++) {\n        fibfibNum = num1 + num2\
    \ + num3;\n        num1 = num2;\n        num2 = num3;\n        num3 = fibfibNum;\n\
    \    }\n    return fibfibNum;\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\n\
    console.log(fibfib(8));", "    let fib = [0, 0, 1];\n    for (let i = 3; i <=\
    \ n; i++) {\n        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n    }\n \
    \   return fib[n];\n}\n", "  if (n <= 1) {\n    return 0;\n  } else if (n ===\
    \ 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n  }\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  if (n ===\
    \ 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let f0 = 0;\n  let f1 = 0;\n\
    \  let f2 = 1;\n  let f3 = 0;\n  for (let i = 3; i <= n; i++) {\n    f3 = f0 +\
    \ f1 + f2;\n    f0 = f1;\n    f1 = f2;\n    f2 = f3;\n  }\n  return f3;\n}\n",
  "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) +\
    \ fibfib(n - 3);\n}\n", "  let last = 0;\n  let curr = 0;\n  let next = 1;\n \
    \ for (let i = 0; i < n; i++) {\n    last = curr;\n    curr = next;\n    next\
    \ = last + curr + (i > 1 ? next : 0);\n  }\n  return curr;\n}\n", "  if (n ===\
    \ 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n\
    \ === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "    if (n < 3) {\n        return n - 1;\n    }\n    const f1 =\
    \ 0;\n    const f2 = 1;\n    let f3 = 1;\n    for (let i = 3; i <= n; i++) {\n\
    \        f3 = f1 + f2 + f3;\n        f1 = f2;\n        f2 = f3;\n    }\n    return\
    \ f3;\n}\n", "  // Write your code here.\n  let prev = 1;\n  let curr = 0;\n \
    \ let res = 0;\n  for (let i = 0; i < n; i++) {\n    res = prev + curr + (i >\
    \ 1 ? 1 : 0);\n    prev = curr;\n    curr = res;\n  }\n  return res;\n}\n", " \
    \ let a = 0, b = 0, c = 1, d;\n  if (n === 0) return a;\n  if (n === 1) return\
    \ b;\n  if (n === 2) return c;\n  for (let i = 3; i <= n; i++) {\n    d = a +\
    \ b + c;\n    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n", "  if (n\
    \ <= 0) {\n    return 0;\n  }\n  if (n == 1) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "  if (n < 0) {\n    throw new Error('n must be positive');\n \
    \ }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n \
    \ }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n -\
    \ 2) + fibfib(n - 3);\n}\n", "    let a = 0;\n    let b = 0;\n    let c = 1;\n\
    \    let sum = 0;\n    if (n == 0) {\n        return 0;\n    }\n    if (n == 1)\
    \ {\n        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n \
    \   else {\n        for (let i = 3; i <= n; i++) {\n            sum = a + b +\
    \ c;\n            a = b;\n            b = c;\n            c = sum;\n        }\n\
    \        return sum;\n    }\n}\n\ntest(fibfib(1), 0);\ntest(fibfib(5), 4);\ntest(fibfib(8),\
    \ 24);\n", "    let last = 0;\n    let last2 = 0;\n    let last3 = 1;\n    let\
    \ curr = 0;\n    for (let i = 0; i < n; i++) {\n        curr = last + last2 +\
    \ last3;\n        last3 = last2;\n        last2 = last;\n        last = curr;\n\
    \    }\n    return curr;\n}\n", "  let fibfib = 0;\n  let a = 0;\n  let b = 0;\n\
    \  let c = 1;\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  for (let i = 3; i <= n; i++)\
    \ {\n    fibfib = a + b + c;\n    a = b;\n    b = c;\n    c = fibfib;\n  }\n \
    \ return fibfib;\n}\n", "    if (n <= 1) return 0;\n    if (n == 2) return 1;\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    // TODO:\
    \ implement\n    return 0;\n}\n", "    if (n === 0) {\n        return 0;\n   \
    \ } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n      \
    \  return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n    }\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "    let fibonacci = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        fibonacci[i]\
    \ = fibonacci[i - 1] + fibonacci[i - 2] + fibonacci[i - 3];\n    }\n    return\
    \ fibonacci[n];\n}\nconsole.log(fibfib(8));", "  const fibfibs: number[] = [0,\
    \ 0, 1];\n  if (n < 3) {\n    return fibfibs[n];\n  }\n  for (let i = 3; i <=\
    \ n; i++) {\n    fibfibs[i] = fibfibs[i - 1] + fibfibs[i - 2] + fibfibs[i - 3];\n\
    \  }\n  return fibfibs[n];\n}\n", "    return 0;\n}\n\n", "  if (n < 2) {\n  \
    \  return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n}", "    let fib = [0, 0, 1];\n    if (n <=\
    \ 2) return fib[n];\n    else {\n        for (let i = 3; i <= n; i++) {\n    \
    \        fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n        }\n        return\
    \ fib[n];\n    }\n}", "  if (n < 3) {\n    return n - 1;\n  }\n  let cache = {};\n\
    \  let getFibFib = (i: number): number => {\n    if (i < 3) {\n      return i\
    \ - 1;\n    }\n    if (cache[i]) {\n      return cache[i];\n    }\n    let result\
    \ = getFibFib(i - 1) + getFibFib(i - 2) + getFibFib(i - 3);\n    cache[i] = result;\n\
    \    return result;\n  };\n  return getFibFib(n);\n}\n", "    if (n <= 1) {\n\
    \        return 0;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "    if (n <= 1) {\n\
    \        return 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n\
    \        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", " \
    \   if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return\
    \ 0;\n    } else if (n === 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "  if (n < 3) {\n\
    \    return n === 0 ? 0 : 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n\
    \  let c = 1;\n  let d;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n\
    \    a = b;\n    b = c;\n    c = d;\n  }\n  return d;\n}\n", "  if (n === 0) {\n\
    \    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n\
    \    return 1;\n  }\n  let fib0 = 0;\n  let fib1 = 0;\n  let fib2 = 1;\n  let\
    \ fibn = 0;\n  for (let i = 3; i <= n; i++) {\n    fibn = fib0 + fib1 + fib2;\n\
    \    fib0 = fib1;\n    fib1 = fib2;\n    fib2 = fibn;\n  }\n  return fibn;\n}\n",
  "  // O(n)\n  if (n < 3) return n - 1;\n  let fibPrevPrev = 0;\n  let fibPrev =\
    \ 0;\n  let fib = 1;\n  for (let i = 3; i <= n; i++) {\n    fibPrevPrev = fibPrev;\n\
    \    fibPrev = fib;\n    fib = fibPrevPrev + fibPrev + fib;\n  }\n  return fib;\n\
    }\n", "  let memo: any = {};\n  function recurse(num: number): number {\n    if\
    \ (num < 3) return num - 1;\n    if (memo[num]) return memo[num];\n    else {\n\
    \      memo[num] = recurse(num - 1) + recurse(num - 2) + recurse(num - 3);\n \
    \     return memo[num];\n    }\n  }\n  return recurse(n);\n}\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));\n", "    if (n === 0) return\
    \ 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    if (n > 2) return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    const f = new Array(n\
    \ + 1);\n    f[0] = 0;\n    f[1] = 0;\n    f[2] = 1;\n    for (let i = 3; i <=\
    \ n; i++) {\n        f[i] = f[i - 1] + f[i - 2] + f[i - 3];\n    }\n    return\
    \ f[n];\n}\n", "    if (n < 2) return 0;\n    if (n === 2) return 1;\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    let fibfibArray =\
    \ [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        fibfibArray[i] = fibfibArray[i\
    \ - 1] + fibfibArray[i - 2] + fibfibArray[i - 3];\n    }\n    return fibfibArray[n];\n\
    }\n", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n\
    \  } else if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n  }\n}\n", "  let a = 0;\n  let b = 0;\n \
    \ let c = 1;\n  let t = 0;\n  if (n < 1) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  if (n > 2) {\n\
    \    for (let i = 0; i < n - 2; i++) {\n      t = a + b + c;\n      a = b;\n \
    \     b = c;\n      c = t;\n    }\n    return t;\n  }\n}\n", "  let a: number\
    \ = 0;\n  let b: number = 0;\n  let c: number = 1;\n  let d: number = 1;\n  for\
    \ (let i: number = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n    b =\
    \ c;\n    c = d;\n  }\n  return d;\n}\n\nlet a: number = fibfib(1);\nlet b: number\
    \ = fibfib(5);\nlet c: number = fibfib(8);\n", "  const fibs = [0, 0, 1];\n  for\
    \ (let i = 3; i <= n; i++) {\n    fibs[i] = fibs[i - 1] + fibs[i - 2] + fibs[i\
    \ - 3];\n  }\n  return fibs[n];\n}\n", "  if (n < 0) {\n    throw new Error(\"\
    n must be >= 0\");\n  }\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1)\
    \ {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n < 0) {\n    throw new\
    \ Error(\"n must be a positive number\")\n  }\n  if (n === 0) {\n    return 0\n\
    \  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 1\n  }\n\
    \  let n_1 = 1\n  let n_2 = 1\n  let n_3 = 0\n  let current = 2\n  let temp =\
    \ 0\n  while (current < n) {\n    temp = n_1 + n_2 + n_3\n    n_3 = n_2\n    n_2\
    \ = n_1\n    n_1 = temp\n    current += 1\n  }\n  return n_1\n}\n", "  if (n ===\
    \ 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n ===\
    \ 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if\
    \ (n === 2) return 1;\n    const cache = [0, 0, 1];\n    for (let i = 3; i <=\
    \ n; i++) {\n        cache[i] = cache[i - 1] + cache[i - 2] + cache[i - 3];\n\
    \    }\n    return cache[n];\n}\n", "    if (n <= 1) {\n        return 0;\n  \
    \  } else if (n == 2) {\n        return 1;\n    } else {\n        return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n}\n", "  if (n < 2) {\n    return\
    \ 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n}", "  let fib: number[] = [0, 0, 1];\n  for (let i =\
    \ 3; i <= n; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2] + fib[i - 3];\n  }\n\
    \  return fib[n];\n}", "  if (n < 3) {\n    return n - 1;\n  }\n  return fibfib(n\
    \ - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n < 2) {\n    return 0;\n\
    \  }\n  if (n == 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c\
    \ = 1;\n  let result = 0;\n  for (let i = 3; i <= n; i++) {\n    result = a +\
    \ b + c;\n    a = b;\n    b = c;\n    c = result;\n  }\n  return result;\n}\n",
  "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else\
    \ if (n === 2) {\n    return 1;\n  } else {\n    return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n  }\n}\n", "    if (n <= 1) {\n        return 0;\n  \
    \  }\n    if (n === 2) {\n        return 1;\n    }\n    return fibfib(n - 1) +\
    \ fibfib(n - 2) + fibfib(n - 3);\n}\n", "  let seq = [0, 0, 1];\n  for (let i\
    \ = 3; i <= n; i++) {\n    seq[i] = seq[i - 1] + seq[i - 2] + seq[i - 3];\n  }\n\
    \  return seq[n];\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));",
  "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  if (n === 3) {\n    return 1;\n  }\n  let\
    \ a = 0;\n  let b = 0;\n  let c = 1;\n  let d = 1;\n  for (let i = 4; i <= n;\
    \ i++) {\n    let temp = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n    d\
    \ = temp;\n  }\n  return d;\n}\n", "  if (n < 3) {\n    return (n - 1) * (n -\
    \ 1);\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n\
    \  }\n}\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n",
  "  let fibfibN3 = 0;\n  let fibfibN2 = 0;\n  let fibfibN1 = 1;\n  let fibfibN =\
    \ 0;\n  if (n === 0) {\n    return fibfibN3;\n  }\n  if (n === 1) {\n    return\
    \ fibfibN2;\n  }\n  if (n === 2) {\n    return fibfibN1;\n  }\n  for (let i =\
    \ 3; i <= n; i++) {\n    fibfibN = fibfibN3 + fibfibN2 + fibfibN1;\n    fibfibN3\
    \ = fibfibN2;\n    fibfibN2 = fibfibN1;\n    fibfibN1 = fibfibN;\n  }\n  return\
    \ fibfibN;\n}\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n  \
    \  return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n}\n", "  if (n <= 1) {\n    return 0;\n  }\n\
    \  if (n == 2) {\n    return 1;\n  }\n  let a = 0;\n  let b = 0;\n  let c = 1;\n\
    \  let d;\n  for (let i = 3; i <= n; i++) {\n    d = a + b + c;\n    a = b;\n\
    \    b = c;\n    c = d;\n  }\n  return d;\n}\n", "    let a = 0, b = 0, c = 1,\
    \ d = 1, e = 0\n    for (let i = 2; i <= n; i++) {\n        e = d + c + a\n  \
    \      a = b\n        b = c\n        c = d\n        d = e\n    }\n    return e\n\
    }\n\n", "  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n\
    \  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n}\n", "  if (n < 2) {\n    return 0;\n  }\n  if (n ==\
    \ 2) {\n    return 1;\n  }\n  let n1 = 0;\n  let n2 = 0;\n  let n3 = 1;\n  let\
    \ nth = 0;\n  for (let i = 3; i <= n; i++) {\n    nth = n1 + n2 + n3;\n    n1\
    \ = n2;\n    n2 = n3;\n    n3 = nth;\n  }\n  return nth;\n}\n", "    let a = 0,\
    \ b = 0, c = 1;\n    if (n === 0) return a;\n    if (n === 1) return b;\n    if\
    \ (n === 2) return c;\n    for (let i = 3; i <= n; i++) {\n        let d = a +\
    \ b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n    return c;\n\
    }\n\nfibfib(8);\n", "  const tmp = [0, 0, 1];\n  if (n < 3) {\n    return tmp[n];\n\
    \  }\n  for (let i = 3; i <= n; i++) {\n    tmp[0] = tmp[1];\n    tmp[1] = tmp[2];\n\
    \    tmp[2] = tmp[0] + tmp[1] + tmp[2];\n  }\n  return tmp[2];\n}\n", "  if (n\
    \ === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n\
    \ === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n\
    \ - 3);\n}\n", "    if (n === 0) {\n        return 0;\n    }\n    if (n === 1)\
    \ {\n        return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n\
    \    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    let a =\
    \ 0;\n    let b = 0;\n    let c = 1;\n    let d = 1;\n    if (n === 0) {\n   \
    \     return a;\n    }\n    if (n === 1) {\n        return b;\n    }\n    if (n\
    \ === 2) {\n        return c;\n    }\n    for (let i = 3; i <= n; i++) {\n   \
    \     d = a + b + c;\n        a = b;\n        b = c;\n        c = d;\n    }\n\
    \    return d;\n}\n", "    if (n < 0) throw new Error(\"n < 0\");\n    if (n ===\
    \ 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    const\
    \ result = [0, 0, 1];\n    for (let i = 3; i <= n; i++) {\n        result.push(result[i\
    \ - 1] + result[i - 2] + result[i - 3]);\n    }\n    return result[n];\n}\n",
  "  if (n <= 1) {\n    return 0;\n  } else if (n == 2) {\n    return 1;\n  } else\
    \ {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n  }\n}\n\nconsole.log(fibfib(10));\n\
    console.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\n\
    console.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\n\
    console.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\n\
    console.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\n\
    console.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\n\
    console.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\n\
    console.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\n\
    console.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\n\
    console.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\n\
    console.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\n\
    console.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\n\
    console.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(", "  if\
    \ (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if\
    \ (n === 2) {\n    return 1;\n  }\n  let currNum = 1;\n  let lastNum = 1;\n  let\
    \ numTwoAgo = 0;\n  for (let i = 3; i <= n; i++) {\n    currNum = lastNum + numTwoAgo\
    \ + currNum;\n    numTwoAgo = lastNum;\n    lastNum = currNum;\n  }\n  return\
    \ currNum;\n}\n", "    if (n === 0) return 0;\n    if (n === 1) return 0;\n  \
    \  if (n === 2) return 1;\n    const base = [0, 0, 1];\n    let prev = base;\n\
    \    let next = [];\n    for (let i = 3; i <= n; i++) {\n        next = [prev[1],\
    \ prev[2], prev[0] + prev[1] + prev[2]];\n        prev = next;\n    }\n    return\
    \ next[2];\n}\n", "  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n\
    \    return 0;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    let last\
    \ = 0;\n    let secondToLast = 0;\n    let thirdToLast = 1;\n    let fibfib =\
    \ 0;\n    for (let i = 2; i < n; i++) {\n      fibfib = last + secondToLast +\
    \ thirdToLast;\n      thirdToLast = secondToLast;\n      secondToLast = last;\n\
    \      last = fibfib;\n    }\n    return fibfib;\n  }\n}\n", "  return 0;\n}\n",
  "    if (n < 2) {\n        return 0;\n    }\n    if (n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "  let memo: number[] = [0, 0, 1];\n  if (n <= 2) {\n    return memo[n];\n  }\n\
    \  for (let i = 3; i <= n; i++) {\n    memo[i] = memo[i - 1] + memo[i - 2] + memo[i\
    \ - 3];\n  }\n  return memo[n];\n}\n", "    if (n === 0) return 0;\n    if (n\
    \ === 1) return 0;\n    if (n === 2) return 1;\n    let a = 0;\n    let b = 0;\n\
    \    let c = 1;\n    let d = a + b + c;\n    for (let i = 3; i <= n; i++) {\n\
    \        a = b;\n        b = c;\n        c = d;\n        d = a + b + c;\n    }\n\
    \    return d;\n}\n", "  let a = 0, b = 0, c = 1, d = 1, temp;\n  for (let i =\
    \ 1; i < n; i++) {\n    temp = a + b + c;\n    a = b;\n    b = c;\n    c = d;\n\
    \    d = temp;\n  }\n  return d;\n}\n", "    let last = 0;\n    let lastlast =\
    \ 0;\n    let lastlastlast = 0;\n    let result = 0;\n    for (let i = 0; i <\
    \ n; i++) {\n        result = last + lastlast + lastlastlast;\n        lastlastlast\
    \ = lastlast;\n        lastlast = last;\n        last = result;\n    }\n    return\
    \ result;\n}\n", "    if (n === 0) {\n        return 0;\n    } else if (n ===\
    \ 1) {\n        return 0;\n    } else if (n === 2) {\n        return 1;\n    }\
    \ else {\n        return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n    }\n\
    }\n\n", "    if (n <= 0) {\n        return 0;\n    }\n    if (n === 1) {\n   \
    \     return 0;\n    }\n    if (n === 2) {\n        return 1;\n    }\n    return\
    \ fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(1));\n\
    console.log(fibfib(5));\nconsole.log(fibfib(8));\n", "    if (n === 0) {\n   \
    \     return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n\
    \ === 2) {\n        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n\
    \ - 2) + fibfib(n - 3);\n    }\n}\n", "    if (n <= 1) return 0;\n    if (n ===\
    \ 2) return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n",
  "    if (n <= 1) {\n        return 0;\n    }\n    if (n === 2) {\n        return\
    \ 1;\n    }\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n\
    test(`fibfib(4) should return 2`, function () {\n    assert.strictEqual(fibfib(4),\
    \ 2);\n});\n\ntest(`fibfib(1) should return 0`, function () {\n    assert.strictEqual(fibfib(1),\
    \ 0);\n});\n\ntest(`fibfib(5) should return 4`, function () {\n    assert.strictEqual(fibfib(5),\
    \ 4);\n});\n\ntest(`fibfib(8) should return 24`, function () {\n    assert.strictEqual(fibfib(8),\
    \ 24);\n});\n", "  if (n < 3) {\n    return n - 1;\n  }\n  return fibfib(n - 1)\
    \ + fibfib(n - 2) + fibfib(n - 3);\n}\n", "    if (n === 0) {\n        return\
    \ 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n\
    \        return 1;\n    } else {\n        return fibfib(n - 1) + fibfib(n - 2)\
    \ + fibfib(n - 3);\n    }\n}\n\n\n", "    const last3 = [0, 0, 1];\n    let rtn:\
    \ number;\n    if (n <= 2) {\n        rtn = last3[n];\n    } else {\n        for\
    \ (let i = 3; i <= n; i++) {\n            rtn = last3[0] + last3[1] + last3[2];\n\
    \            last3[0] = last3[1];\n            last3[1] = last3[2];\n        \
    \    last3[2] = rtn;\n        }\n    }\n    return rtn;\n}\n", "    let a: number\
    \ = 0, b: number = 0, c: number = 1;\n    for (let i = 0; i < n; i++) {\n    \
    \    a = b;\n        b = c;\n        c = a + b + c;\n    }\n    return a;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
