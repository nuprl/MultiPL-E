name: HumanEval_100_make_a_pile
language: ts
prompt: "//Given a positive integer n, you have to make a pile of n levels of stones.\n\
  // The first level has n stones.\n// The number of stones in the next level is:\n\
  // - the next odd number if n is odd.\n// - the next even number if n is even.\n\
  // Return the number of stones in each level in an array, where element at index\n\
  // i represents the number of stones in the level (i+1).\n// Examples:\n// >>> make_a_pile(3)\n\
  // [3, 5, 7]\nfunction make_a_pile(n: number): number[] {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = make_a_pile;\n  assert.deepEqual(candidate(3),[3,\
  \ 5, 7]);\n  assert.deepEqual(candidate(4),[4, 6, 8, 10]);\n  assert.deepEqual(candidate(5),[5,\
  \ 7, 9, 11, 13]);\n  assert.deepEqual(candidate(6),[6, 8, 10, 12, 14, 16]);\n  assert.deepEqual(candidate(8),[8,\
  \ 10, 12, 14, 16, 18, 20, 22]);\n}\n\ntest();"
completions: ["    const result: number[] = [];\n    let count = n;\n    while (count)\
    \ {\n        result.push(count);\n        count += count % 2 === 0 ? 2 : 1;\n\
    \    }\n    return result;\n}\n", "  const stonePile: number[] = [];\n  stonePile.push(n);\n\
    \  for (let i = 0; i < n - 1; i++) {\n    if (stonePile[i] % 2 === 0) {\n    \
    \  stonePile.push(stonePile[i] + 2);\n    } else {\n      stonePile.push(stonePile[i]\
    \ + 1);\n    }\n  }\n  return stonePile;\n}\n", "    let result: number[] = [];\n\
    \    for (let i = 0; i < n; i++) {\n        result.push(n + i * 2);\n    }\n \
    \   return result;\n}\nconsole.log(make_a_pile(3));\n", "    const out: number[]\
    \ = [];\n    while (n) {\n        out.push(n);\n        n = n % 2 ? n + 2 : n\
    \ + 1;\n    }\n    return out;\n}\n", "  const result: number[] = [];\n  for (let\
    \ i = n; i > 0; i--) {\n    result.push(n * 2 - i + 1);\n  }\n  return result;\n\
    }\n", "  if (n < 1) return [0];\n  let pile = [n];\n  let nextNum = 1;\n  while\
    \ (n + nextNum < n * 2) {\n    if (pile[pile.length - 1] % 2 === 0) {\n      pile.push(pile[pile.length\
    \ - 1] + nextNum);\n      nextNum += 2;\n    } else {\n      pile.push(pile[pile.length\
    \ - 1] + nextNum);\n      nextNum += 1;\n    }\n  }\n  return pile;\n}\n", " \
    \ if (n < 1) {\n    return [];\n  }\n  if (n === 1) {\n    return [1];\n  }\n\
    \  const ret: number[] = [n];\n  const next = n % 2 === 0 ? n + 1 : n + 2;\n \
    \ return ret.concat(make_a_pile(next));\n}", "  let arr: number[] = [n];\n  for\
    \ (let i = 1; i < n; i++) {\n    if (arr[i - 1] % 2 == 0) {\n      arr.push(arr[i\
    \ - 1] + 2);\n    } else {\n      arr.push(arr[i - 1] + 1);\n    }\n  }\n  return\
    \ arr;\n}\nconsole.log(make_a_pile(3));\nconsole.log(make_a_pile(1));\nconsole.log(make_a_pile(0));\n\
    console.log(make_a_pile(5));\nconsole.log(make_a_pile(7));\n", "    let a = []\n\
    \    while (n > 0) {\n        a.push(n)\n        if (n % 2 == 0) {\n         \
    \   n = n / 2\n        } else {\n            n = (n - 1) / 2\n        }\n    }\n\
    \    return a\n}\n\nconsole.log(make_a_pile(3))\n", "    let arr: number[] = [];\n\
    \    for (let i = 1; i <= n; i++) {\n        let num: number = n + (i * 2);\n\
    \        arr.push(num);\n    }\n    return arr;\n}\nconsole.log(make_a_pile(3));\n\
    console.log(make_a_pile(10));\nconsole.log(make_a_pile(17));", "  let res: number[]\
    \ = [n];\n  while (n > 1) {\n    if (n % 2 === 0) {\n      n = n - 1;\n    } else\
    \ {\n      n = n / 2;\n    }\n    res.push(n);\n  }\n  return res;\n}\nconsole.log(make_a_pile(11));\n\
    console.log(make_a_pile(8));\n", "    let arr: number[] = [];\n    arr.push(n);\n\
    \    for (let i = 0; i < n; i++) {\n        if (n % 2 == 0) {\n            n +=\
    \ 1;\n            arr.push(n);\n        } else {\n            n += 2;\n      \
    \      arr.push(n);\n        }\n    }\n    return arr;\n}", "  let ans: number[]\
    \ = [];\n  for (let i = 0; i < n; i++) {\n    if (i === 0) {\n      ans.push(n);\n\
    \    } else if (i % 2 === 0) {\n      ans.push(ans[i - 1] + 2);\n    } else {\n\
    \      ans.push(ans[i - 1] + 1);\n    }\n  }\n  return ans;\n}\n\nconsole.log(make_a_pile(3));",
  "    const res: number[] = [];\n    let level = n;\n    res.push(level);\n    for\
    \ (let i = 1; i < n; i++) {\n        level = level % 2 === 0 ? level + 1 : level\
    \ + 2;\n        res.push(level);\n    }\n    return res;\n}\n", "  let res: number[]\
    \ = [n];\n  while (n > 1) {\n    if (n % 2) {\n      res.push(n + 2);\n      n\
    \ += 2;\n    } else {\n      res.push(n + 1);\n      n += 1;\n    }\n  }\n  return\
    \ res;\n}\n\nconsole.log(make_a_pile(3));\nconsole.log(make_a_pile(4));\n", " \
    \   const result: number[] = [];\n    for (let i = 0; i < n; i++) {\n        result.push(2\
    \ * n - i);\n    }\n    return result;\n}\n", "    let arr: number[] = [];\n \
    \   for (let i = 0; i < n; i++) {\n        arr.push(i + 1);\n    }\n    return\
    \ arr;\n}\n", "  let pile: number[] = [];\n  for (let i = n; i > 0; i--) {\n \
    \   pile.push(i);\n  }\n  return pile;\n}\n", "    let result: number[] = [];\n\
    \    let curr: number = n;\n    while (curr > 0) {\n        result.push(curr);\n\
    \        if (curr % 2 === 0) {\n            curr -= 1;\n        } else {\n   \
    \         curr -= 2;\n        }\n    }\n    return result;\n}", "  const arr =\
    \ [];\n  while (n > 0) {\n    arr.push(n);\n    n = n % 2 ? n + 2 : n + 1;\n \
    \ }\n  return arr;\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
