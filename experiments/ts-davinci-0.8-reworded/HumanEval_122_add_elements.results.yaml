language: ts
name: HumanEval_122_add_elements
results:
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const x = arr[i];\n        if (x <\
    \ 100) {\n            sum += x;\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).reduce((acc, num) => {\n    return num < 100 ? acc + num : acc;\n  }, 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if(arr.length ===\
    \ 0) {\n        return 0;\n    }\n\n    let sum = 0;\n    for(let i = 0; i < k;\
    \ i++) {\n        if(Math.floor(arr[i] / 10) > 0) {\n            sum += arr[i];\n\
    \        }\n    }\n\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmppj9qsy2d.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppj9qsy2d.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if (k === 0) return\
    \ 0;\n    let sum = 0;\n    const is_len_2 = (num: number): boolean => {\n   \
    \     const num_str = num.toString();\n        return num_str.length === 2;\n\
    \    };\n    for (let i = 0; i < k; i++) {\n        if (is_len_2(arr[i])) {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n-5\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp9rpj3sl0.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9rpj3sl0.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: -5,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659821790
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // code goes here\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmprzxwy7_m.ts(9,50): error TS2355: A function whose
    declared type is neither ''void'' nor ''any'' must return a value.

    '
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // Write code here\n\
    \    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpydydicvq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpydydicvq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let temp = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            temp\
    \ += arr[i];\n        }\n    }\n    return temp;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((acc, curr) => acc + +(curr > 9) + curr, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n234\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmpn4eoq15u.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn4eoq15u.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 234,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpdmj15ewm.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdmj15ewm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((a, b) => a + (b < 100 ? b : 0), 0);\n}\n\nexport { add_elements };\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((acc, val) => {\n        if (val < 100) {\n            acc += val;\n\
    \        }\n        return acc;\n    }, 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const result: number[]\
    \ = [];\n    let sum: number = 0;\n    for (let i: number = 0; i < k; i++) {\n\
    \        if (arr[i] < 10) {\n            result.push(arr[i]);\n        } else\
    \ if (arr[i] < 100) {\n            result.push(arr[i]);\n        }\n    }\n  \
    \  for (let j: number = 0; j < result.length; j++) {\n        sum += result[j];\n\
    \    }\n    return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // No need to check\
    \ k against arr.length, as k <= arr.length by problem statement\n    if (k < 1)\
    \ {\n        return 0;\n    }\n\n    // No need to check k > arr.length, as k\
    \ <= arr.length by problem statement\n    if (k > arr.length) {\n        k = arr.length;\n\
    \    }\n\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n        const\
    \ int = arr[i];\n        if (int < 100) {\n            result += int;\n      \
    \  }\n    }\n\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: -1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let i = 0;\n  let\
    \ count = 0;\n  let sum = 0;\n  while (count < k) {\n    if (arr[i] > 9 && arr[i]\
    \ < 100) {\n      sum += arr[i];\n      count++;\n    }\n    i++;\n  }\n  return\
    \ sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659821805
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n  \
    \  } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  const filtered =\
    \ arr.filter(\n    (e) => e > 9 && e < 100 || e === 1000 || e === 10000\n  );\n\
    \  if (k > filtered.length) {\n    return filtered.reduce((acc, c) => (acc +=\
    \ c), 0);\n  }\n  return filtered.slice(0, k).reduce((acc, c) => (acc += c), 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n174\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmpkue_n8l2.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkue_n8l2.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 174,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpa83d4gjl.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpa83d4gjl.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  //Solution1:\n  let\
    \ sum = 0;\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum\
    \ += arr[i];\n    } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n\
    \  return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  let\
    \ i = 0;\n  while (i < k) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n    i++;\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).filter(x => x < 100).reduce((x, y) => x + y);\n}\n\ndescribe(\"add_elements\"\
    , () => {\n    it(\"should sum elements with two digits or less\", () => {\n \
    \       let arr = [111, 21, 3, 4000, 5, 6, 7, 8, 9];\n        let k = 4;\n   \
    \     let expected = 24;\n        let actual = add_elements(arr, k);\n       \
    \ expect(actual).toBe(expected);\n    });\n});\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpfkkv235b.ts(13,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpfkkv235b.ts(14,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpfkkv235b.ts(19,9): error TS2552: Cannot find name ''expect''.
    Did you mean ''expected''?

    '
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpdmj15ewm.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdmj15ewm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const curr = arr[i];\n    if (curr < 10) {\n\
    \      sum += curr;\n    } else if (curr >= 10 && curr < 100) {\n      sum +=\
    \ curr;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  const firstKArray\
    \ = arr.slice(0, k);\n  const twoDigitNumbers = firstKArray.filter(\n    (el:\
    \ number) => el >= 10 && el < 100\n  );\n  const singleDigitNumbers = firstKArray.filter((el:\
    \ number) => el < 10);\n  return twoDigitNumbers.reduce((acc: number, el: number)\
    \ => acc + el, 0) +\n    singleDigitNumbers.reduce((acc: number, el: number) =>\
    \ acc + el, 0)\n    ? singleDigitNumbers.reduce((acc: number, el: number) => acc\
    \ + el, 0)\n    : 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n125\n    at test (/tmp/tmpbntfk5t5.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbntfk5t5.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 125,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if(arr.length ===\
    \ 0) return 0;\n    let sum = 0;\n    for(let i = 0; i < k; i++){\n        if(arr[i]\
    \ < 100) sum += arr[i];\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let summ = 0;\n \
    \ for (let i = 0; i < k; i++) {\n    let numStr = arr[i].toString();\n    if (numStr.length\
    \ < 3) {\n      summ += arr[i];\n    }\n  }\n  return summ;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let count = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let num\
    \ = arr[i];\n        while (num > 9) {\n            num = Math.floor(num / 10);\n\
    \        }\n        sum += arr[i];\n        count++;\n        if (count == k)\
    \ {\n            break;\n        }\n    }\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n232\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp8iydu09k.js:29:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8iydu09k.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 232,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const digits = arr[i].toString().length;\n  \
    \  if (digits <= 2) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let temp = 0;\n        let flag =\
    \ true;\n        for (let j = 0; j < arr[i].toString().length; j++) {\n      \
    \      if (arr[i].toString()[j] == 0 && flag) continue;\n            flag = false;\n\
    \            temp += Number(arr[i].toString()[j]);\n        }\n        if (temp\
    \ <= 9) sum += temp;\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmplcc6n9nd.ts(15,17): error TS2367: This condition
    will always return ''false'' since the types ''string'' and ''0'' have no overlap.

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    let element = arr[i];\n    if (element < 10)\
    \ {\n      sum += element;\n    } else if (element < 100) {\n      sum += element;\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const current = arr[i];\n        if\
    \ (current < 100) {\n            sum += current;\n        }\n    }\n    return\
    \ sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let total = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    const val = arr[i];\n    if (val < 100)\
    \ {\n      total += val;\n    }\n  }\n  return total;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const element = arr[i];\n    if (element <= 99)\
    \ {\n      sum += element;\n    }\n  }\n  return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  if (k < 1 || k >\
    \ arr.length) {\n    throw \"K is out of bounds\";\n  }\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const twoDigitNum = arr[i];\n    if (twoDigitNum\
    \ < 100) {\n      sum += twoDigitNum;\n    }\n  }\n  return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmppbq4f43t.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmppbq4f43t.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).filter(num => num < 100).reduce((acc, num) => acc + num, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // 1. Check the\
    \ array is not empty\n    if (arr.length == 0) return 0;\n    // 2. Create a variable\
    \ to hold the count of numbers with at most two digits\n    let numbersWithTwoDigits\
    \ = 0;\n    // 3. Create a for loop that loops to the value of k\n    for (let\
    \ i = 0; i < k; i++) {\n        // 4. Count up how many numbers with at most two\
    \ digits are in the loop\n        if (arr[i] < 100) numbersWithTwoDigits++;\n\
    \    }\n    // 5. Create a variable to hold the sum of the numbers and initialize\
    \ it at 0\n    let sum = 0;\n    // 6. Create a for loop to sum up the values\
    \ in the first k elements of the array\n    for (let i = 0; i < k; i++) {\n  \
    \      // 7. If the number is less than 100, add it to the sum\n        if (arr[i]\
    \ < 100) sum += arr[i];\n    }\n    // 8. Return the sum\n    return sum;\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let i = 0;\n  \
    \  let sum = 0;\n    let result = [];\n    for (i; i < k; i++) {\n        result.push(arr[i]);\n\
    \    }\n    result.forEach(function (el) {\n        if (el < 100) {\n        \
    \    sum += el;\n        }\n    });\n    return sum;\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let n = 0;\n  \
    \  for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            n +=\
    \ arr[i];\n        }\n    }\n    return n;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpydydicvq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpydydicvq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpqa8_7t29.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqa8_7t29.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] > 9 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpoxog_mo2.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpoxog_mo2.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\nlet nums: number[] = [111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9];\nlet k: number = 4;\nconsole.log(add_elements(nums,\
    \ k));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let idx = 0;\n\
    \    let total = 0;\n    while (idx < k) {\n        let item = arr[idx];\n   \
    \     if (item < 100) {\n            total += item;\n        }\n        idx++;\n\
    \    }\n    return total;\n}\n\nexport {\n    add_elements\n}\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let output = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      output += arr[i];\n\
    \    }\n  }\n  return output;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let num = arr[i];\n        if (num\
    \ > 99) {\n            continue;\n        }\n        sum += num;\n    }\n    return\
    \ sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if (arr.length\
    \ === 0) {\n        return 0;\n    }\n    if (k > arr.length) {\n        return\
    \ 0;\n    }\n    let sum = 0;\n    let digits_count = 0;\n    let i = 0;\n   \
    \ while (digits_count < k) {\n        let temp = arr[i];\n        while (temp\
    \ > 0) {\n            temp = temp / 10;\n            digits_count++;\n       \
    \ }\n        sum += arr[i];\n        i++;\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpbfpm8gik.js:33:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbfpm8gik.js:39:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).reduce((acc, curr) => (acc += curr), 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n232\n\nshould\
    \ loosely deep-equal\n\n0\n    at test (/tmp/tmp5bc_i6if.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp5bc_i6if.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 232,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4135

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  let\
    \ i = 0;\n  while (i < k) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n    i++;\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let count = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            count\
    \ += arr[i];\n        }\n    }\n    return count;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let finalSum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      finalSum += arr[i];\n\
    \    }\n  }\n  return finalSum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if (k > arr.length)\
    \ k = arr.length;\n    let result = 0;\n    for (let i = 0; i < k; i++) {\n  \
    \      if (arr[i] >= 10 && arr[i] < 100) {\n            result += arr[i];\n  \
    \      }\n    }\n    return result;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpvlwvpv2t.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvlwvpv2t.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpj23o24oc.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj23o24oc.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let res = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            res += arr[i];\n        }\n    }\n    return res;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpke2kqbii.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpke2kqbii.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const n = arr[i];\n        if (n <\
    \ 100) {\n            sum += n;\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const num = arr[i];\n    if (num >= 0 && num\
    \ < 100) {\n      sum += num;\n    }\n  }\n  return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp32scterb.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp32scterb.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let j = 0;\n    while (j < k) {\n        if (arr[j] >= 10 && arr[j] < 100)\
    \ {\n            sum += arr[j];\n        }\n        j++;\n    }\n    return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp_osv6zfb.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp_osv6zfb.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n  \
    \  } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const current_element = arr[i];\n    if (current_element\
    \ < 100) {\n      sum += current_element;\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const elements_to_add\
    \ = arr.slice(0, k);\n    let sum = 0;\n    elements_to_add.forEach(element =>\
    \ {\n        const number_of_digits = String(element).length;\n        if (number_of_digits\
    \ <= 2) {\n            sum += element;\n        }\n    });\n    return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978861
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  const take_k_elements\
    \ = arr.slice(0, k);\n  const two_digit_numbers = take_k_elements.filter(element\
    \ => element < 100);\n  return two_digit_numbers.reduce((acc, curr) => acc + curr,\
    \ 0);\n}\n\ntest(\"it works\", () => {\n  expect(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)).toBe(24);\n});\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpwg4_d39f.ts(15,6): error TS2554: Expected 0 arguments,
    but got 2.

    ../../../../../tmp/tmpwg4_d39f.ts(16,3): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  let\
    \ counter = 0;\n  while (counter < k) {\n    if (arr[counter] < 100) {\n     \
    \ sum += arr[counter];\n    }\n    counter++;\n  }\n  return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] >= 0 && arr[i] < 100) {\n   \
    \   result += arr[i];\n    }\n  }\n  return result;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpqwzb28gp.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqwzb28gp.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmplnedm4mc.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplnedm4mc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const ans: number[]\
    \ = [];\n    for (let i = 0; i < k; i++) {\n        const num = arr[i];\n    \
    \    if (num < 10) {\n            ans.push(num);\n        } else if (num < 100)\
    \ {\n            ans.push(num);\n        }\n    }\n    return ans.reduce((a, b)\
    \ => a + b, 0);\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));\nconsole.log(add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    15

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // return arr.filter(n\
    \ => n < 100).slice(0, k).reduce((acc, n) => acc + n);\n    return arr.filter(n\
    \ => n < 100).slice(0, k).reduce((acc, n) => acc + n, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp7ri043eh.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp7ri043eh.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '35

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.reduce((a,\
    \ b) => (b < 100 ? a + b : a), 0);\n}\n\nconsole.log(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n444\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmpvly6i6tu.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpvly6i6tu.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 444,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '59

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let added_k_elements\
    \ = arr.slice(0, k);\n    let two_digit_elements = added_k_elements.filter(element\
    \ => element > 9);\n    return two_digit_elements.reduce((acc, el) => acc + el,\
    \ 0);\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmptwhspthe.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptwhspthe.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '4132

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let two_digits:\
    \ number[] = []\n    let number: number\n    let sum: number = 0\n    for (let\
    \ i: number = 0; i < k; i++) {\n        number = arr[i]\n        if (number >\
    \ 9 && number < 100) {\n            two_digits.push(number)\n        }\n    }\n\
    \    if (two_digits.length == 0) {\n        return 0\n    }\n    for (let i: number\
    \ = 0; i < two_digits.length; i++) {\n        sum += two_digits[i]\n    }\n  \
    \  return sum\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4))\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\
    \nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp8sz6mnwg.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8sz6mnwg.js:37:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\n\nexport { add_elements };\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // let _arr = arr.slice(0,\
    \ k)\n    // let _sum = 0;\n    // _arr.forEach(element => {\n    //     let len\
    \ = element.toString().length\n    //     if (len == 1 || len == 2) {\n    //\
    \         _sum += element\n    //     }\n    // });\n    // return _sum\n    return\
    \ arr.slice(0, k).filter(e => e < 100).reduce((a, b) => a + b, 0)\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.reduce((acc,\
    \ curr) => {\n    return (acc += curr.toString().length > 2 ? 0 : curr);\n  },\
    \ 0);\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n444\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmp9kggohsi.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9kggohsi.js:23:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 444,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  let\
    \ counter = 0;\n  while (counter < k) {\n    if (arr[counter] >= 10 && arr[counter]\
    \ < 100) {\n      sum += arr[counter];\n    }\n    counter++;\n  }\n  return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp91dnze7k.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp91dnze7k.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).filter(n => n < 100).reduce((prev, curr) => prev + curr, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    let element = arr[i];\n    if (element <\
    \ 100) {\n      result += element;\n    }\n  }\n  return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978864
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] > 9 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp64fly3tu.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp64fly3tu.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let idx = 0;\n    while (idx < k) {\n        if (arr[idx] < 100) {\n    \
    \        sum += arr[idx];\n        }\n        idx++;\n    }\n    return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let ans: number\
    \ = 0;\n    for (let i = 0; i < k; i++) {\n        let num: number = arr[i];\n\
    \        if (num < 10) {\n            ans += num;\n        } else if (num < 100)\
    \ {\n            ans += num;\n        }\n    }\n    return ans;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    let cnt = 0;\n    while (cnt < k) {\n        let num = arr[cnt];\n      \
    \  if (num < 100) {\n            result += num;\n        }\n        cnt++;\n \
    \   }\n    return result;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const num = arr[i];\n        if (num\
    \ <= 99) {\n            sum += num;\n        }\n    }\n    return sum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978863
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  // your code here\n\
    \  return 0;\n}\n\nimport { strictEqual } from \"assert\";\n\nstrictEqual(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\nstrictEqual(add_elements([100, 5, 300,\
    \ 25, 4, 5, 400, 500, 600], 5), 1405);\nstrictEqual(add_elements([12, 34, 56,\
    \ 78, 90], 3), 128);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 9), 1035);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 1), 33);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 2), 114);\n\
    strictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3), 121);\nstrictEqual(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4), 124);\nstrictEqual(add_elements([111, 21, 3,\
    \ 4000, 5, 6, 7, 8, 9], 5), 129);\nstrictEqual(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 6), 134);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 7), 139);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 8), 144);\nstrictEqual(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9),\
    \ 149);\nstrictEqual(add_elements([100, 5, 300, 25, 4, 5, 400, 500, 600], 1),\
    \ 100);\nstrictEqual(add_elements([100, 5, 300, 25, 4, 5, 400, 500, 600], 2\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp3a9qlq4v.ts(31,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp3a9qlq4v.ts(31,9): error TS1005: '','' expected.

    '
  timestamp: 1659978863
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] > 9 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp8t0zckws.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8t0zckws.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978866
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // First, we'll\
    \ sort the array using a bubble sort (efficiency is not a concern here)\n    let\
    \ sorted_arr = bubble_sort(arr);\n    // Now we'll grab the first k elements of\
    \ the sorted array, then map them to strings\n    let str_arr = sorted_arr.slice(0,\
    \ k).map(x => String(x));\n    // Now we'll sum up the elements of the new array\
    \ that are only two digits long, using map and filter\n    let sum = str_arr.map(x\
    \ => Number(x)).filter(x => x <= 99).reduce((acc, val) => acc + val, 0);\n   \
    \ return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpahou497f.ts(11,22): error TS2304: Cannot find name
    ''bubble_sort''.

    '
  timestamp: 1659978866
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  const\
    \ kArray = arr.slice(0, k);\n  kArray.forEach((value) => {\n    if (value < 100)\
    \ {\n      sum += value;\n    }\n  });\n  return sum;\n}\n\ndescribe(\"add_elements\"\
    , () => {\n  it(\"should add the elements with two digits from the first k elements\
    \ of arr\", () => {\n    expect(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4)).toBe(24);\n  });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpxmspmuzd.ts(20,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpxmspmuzd.ts(21,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpxmspmuzd.ts(22,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659978866
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return (\n    arr\n\
    \      .filter((num, index) => index < k && num.toString().length <= 2)\n    \
    \  .reduce((a, b) => a + b, 0)\n  );\n}\n\nconsole.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 2));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 6));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 1));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 5));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 9));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 8));\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 7));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 3));\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0));\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 0));\nconsole.log(add_elements\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp0m26w23d.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmp0m26w23d.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            result += arr[i];\n        }\n    }\n    return result;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp2a7vnox7.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2a7vnox7.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    let cnt = 0;\n    while (cnt < k) {\n        if (arr[cnt] < 100) {\n    \
    \        result += arr[cnt];\n        }\n        cnt++;\n    }\n    return result;\n\
    }\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).filter(n => n > 9 && n < 100).reduce((a, b) => a + b, 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpke0dr4bg.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpke0dr4bg.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] > 9 && arr[i] < 100) {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmph2ewj4n5.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmph2ewj4n5.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).filter(v => v > 9 && v < 100).reduce((a, b) => a + b, 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp2iis66_g.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2iis66_g.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndescribe(\"add_elements\"\
    , function () {\n    it(\"should work for some examples\", function () {\n   \
    \     expect(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)).toEqual(24);\n\
    \        expect(add_elements([14, 25, 36, 47, 58, 69, 70, 81, 92], 9)).toEqual(0);\n\
    \        expect(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 3)).toEqual(24);\n\
    \        expect(add_elements([14, 25, 36, 47, 58, 69, 70, 81, 92], 1)).toEqual(14);\n\
    \        expect(add_elements([14, 25, 36, 47, 58, 69, 70, 81, 92], 3)).toEqual(125);\n\
    \    });\n});\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpbkdedoat.ts(19,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpbkdedoat.ts(20,5): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpbkdedoat.ts(21,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpbkdedoat.ts(22,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpbkdedoat.ts(23,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpbkdedoat.ts(24,9): error TS2304: Cannot find name ''expect''.

    ../../../../../tmp/tmpbkdedoat.ts(25,9): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return 0;\n}\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpzcvzrvet.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpzcvzrvet.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '0

    '
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let el = arr[i];\n        if (el <\
    \ 100) {\n            sum += el;\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    let num = arr[i];\n    if (num < 100) {\n   \
    \   sum += num;\n    }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    //const reducer\
    \ = (accumulator: number, currentValue: number) => accumulator + currentValue;\n\
    \    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] > 99) {\n            continue;\n\
    \        }\n        result += arr[i];\n    }\n    return result;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  // TODO: Implement\
    \ solution\n  let twoDigits: number[] = [];\n  for (let i = 0; i < k; i++) {\n\
    \    if (arr[i] > 9 && arr[i] < 100) {\n      twoDigits.push(arr[i]);\n    }\n\
    \  }\n  return twoDigits.reduce((a, b) => a + b, 0);\n}\n\nexport { add_elements\
    \ };\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpw97kmf4n.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpw97kmf4n.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  let count = 0;\n  while (count < k) {\n    const element = arr[count];\n  \
    \  if (element > 9 && element < 100) {\n      result += element;\n    }\n    count++;\n\
    \  }\n  return result;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp9h_91d59.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp9h_91d59.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let i = 0;\n    for (; i < k; i++) {\n        if (arr[i] < 100) {\n     \
    \       sum += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 10) {\n      sum += arr[i];\n  \
    \  } else if (arr[i] < 100) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n\
    }\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978861
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpdmj15ewm.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpdmj15ewm.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  if (k < 1 || k >\
    \ arr.length) {\n    throw new Error(\"Invalid input\");\n  }\n  return arr.slice(0,\
    \ k).reduce((acc, val) => {\n    if (val > 9 && val < 100) {\n      return acc\
    \ + val;\n    }\n    return acc;\n  }, 0);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp85ms5h02.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp85ms5h02.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let total = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let num = arr[i];\n        let digits\
    \ = 0;\n        while (num > 0) {\n            digits++;\n            num = Math.floor(num\
    \ / 10);\n        }\n        if (digits <= 2) {\n            total += arr[i];\n\
    \        }\n    }\n    return total;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      result += arr[i];\n\
    \    }\n  }\n  return result;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const element = arr[i];\n    const num = (element\
    \ % 100) / 10;\n    if (num < 1) {\n      sum += element;\n    }\n  }\n  return\
    \ sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n125\n    at test (/tmp/tmptm3ri402.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmptm3ri402.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 125,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978866
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.reduce((acc,\
    \ cv, index) => {\n        if (index < k && (cv < 10 || cv < 100)) {\n       \
    \     acc += cv;\n        }\n        return acc;\n    }, 0);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978868
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.reduce((sum,\
    \ val, index) => {\n        if (index < k && val > 9 && val < 100) {\n       \
    \     sum += val;\n        }\n        return sum;\n    }, 0);\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpo6_msh3i.js:20:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpo6_msh3i.js:26:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978868
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] > 9 && arr[i] < 100) {\n\
    \            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpqig5zdm2.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqig5zdm2.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978868
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let i = 0;\n    while (i < k) {\n        if (arr[i] < 100) {\n          \
    \  sum += arr[i];\n        }\n        i++;\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978868
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    let counter = 0;\n    while (counter < k) {\n        if (arr[counter] < 100)\
    \ {\n            sum += arr[counter];\n        }\n        counter++;\n    }\n\
    \    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\n\
    function test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978868
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((sum, el) => sum + (el < 100 ? el : 0), 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 0 && arr[i] < 10) {\n\
    \            sum += arr[i];\n        } else if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n1\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpkoykjr95.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkoykjr95.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 1,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '24

    '
  timestamp: 1659978868
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.filter(x\
    \ => x > 9 && x < 100).slice(0, k).reduce((acc, curr) => acc + curr, 0);\n}\n\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n174\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmplw2dbiyp.js:16:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplw2dbiyp.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 174,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp8ddzpv2n.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ddzpv2n.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    let val = arr[i];\n    let digits = [];\n   \
    \ while (val > 0) {\n      digits.push(val % 10);\n      val = Math.floor(val\
    \ / 10);\n    }\n    if (digits.length < 3) {\n      sum += arr[i];\n    }\n \
    \ }\n  return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7,\
    \ 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.slice(0,\
    \ k).filter(num => num < 100).reduce((a, b) => a + b, 0);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    //base case\n \
    \   if (k === 0) {\n        return 0;\n    }\n\n    const head = arr[0];\n   \
    \ //step case\n    const isHeadMoreThanTwoDigits = head > 9;\n    return add_elements(arr.slice(1),\
    \ k - 1) + (isHeadMoreThanTwoDigits ? 0 : head);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n3\n\nshould loosely\
    \ deep-equal\n\n125\n    at test (/tmp/tmp8y_ct466.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8y_ct466.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 3,\n  expected:\
    \ 125,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\nconsole.log(add_elements([111, 21, 3, 4000, 5,\
    \ 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    if (k === 0) {\n\
    \        return 0;\n    }\n    else if (k > arr.length) {\n        return add_elements(arr,\
    \ arr.length);\n    }\n    else {\n        return arr[k - 1] % 100 + add_elements(arr,\
    \ k - 1);\n    }\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n32\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpulf_jtlm.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpulf_jtlm.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 32,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  const sum = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n\
    \    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmp2wn_v8ri.ts(13,7): error TS2588: Cannot assign to
    ''sum'' because it is a constant.

    '
  timestamp: 1659978868
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let acc: number\
    \ = 0;\n    let count: number = 0;\n    let i: number = 0;\n    while (count <\
    \ k) {\n        if (arr[i] < 100) {\n            acc += arr[i];\n            count++;\n\
    \        }\n        i++;\n    }\n    return acc;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpbzahd8ka.js:26:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbzahd8ka.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let total = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            total\
    \ += arr[i];\n        }\n    }\n    return total;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // check data validity\n\
    \    if (arr.length === 0 || k > arr.length) {\n        throw new Error('Array\
    \ cannot be empty and k cannot be greater than arr length.');\n    }\n\n    let\
    \ sum = 0;\n    for (let i = 0; i < k; i++) {\n        const number = arr[i];\n\
    \        if (number < 100) {\n            sum += number;\n        }\n    }\n\n\
    \    return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp8ddzpv2n.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp8ddzpv2n.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmplnedm4mc.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplnedm4mc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    // TODO: implement\
    \ here\n    return 0;\n}\n\nexport { add_elements };\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmp2tunfyl9.js:19:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2tunfyl9.js:25:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let number = arr[i];\n        if (number\
    \ < 10) {\n            sum += number;\n        } else if (number < 100) {\n  \
    \          sum += number;\n        }\n    }\n    return sum;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  //#############################\n\
    \  //#######   SOLUTION 1 ########\n  //#############################\n  //return\
    \ arr.slice(0, k).reduce((acc, curr) => {\n  //  if (curr.toString().length <=\
    \ 2) {\n  //    acc += curr;\n  //  }\n  //  return acc;\n  //}, 0);\n\n  //#############################\n\
    \  //#######   SOLUTION 2 ########\n  //#############################\n  //return\
    \ arr.slice(0, k).filter(i => i.toString().length <= 2).reduce((acc, curr) =>\
    \ acc + curr, 0);\n\n  //#############################\n  //#######   SOLUTION\
    \ 3 ########\n  //#############################\n  return arr.slice(0, k).filter(i\
    \ => i.toString().length <= 2).reduce((acc, curr) => acc + curr);\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: Exception
  stderr: "/tmp/tmpsqvxd4r_.js:26\n    return arr.slice(0, k).filter(function (i)\
    \ { return i.toString().length <= 2; }).reduce(function (acc, curr) { return acc\
    \ + curr; });\n                                                              \
    \                       ^\n\nTypeError: Reduce of empty array with no initial\
    \ value\n    at Array.reduce (<anonymous>)\n    at add_elements (/tmp/tmpsqvxd4r_.js:26:86)\n\
    \    at test (/tmp/tmpsqvxd4r_.js:33:22)\n    at Object.<anonymous> (/tmp/tmpsqvxd4r_.js:38:1)\n\
    \    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n    at Module._extensions..js\
    \ (node:internal/modules/cjs/loader:1174:10)\n    at Module.load (node:internal/modules/cjs/loader:998:32)\n\
    \    at Module._load (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\n\
    \nNode.js v18.7.0\n"
  stdout: '24

    '
  timestamp: 1659978869
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpydydicvq.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpydydicvq.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659821790
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.reduce((acc,\
    \ curr) => acc + (curr <= 99 ? curr : 0), 0);\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n444\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmplprv4ske.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplprv4ske.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 444,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  if\
    \ (k <= arr.length) {\n    for (let i = 0; i < k; i++) {\n      if (arr[i] < 100)\
    \ {\n        sum += arr[i];\n      }\n    }\n  }\n  return sum;\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  // Write your code\
    \ here\n  return arr.slice(0, k).reduce((tot, num) => (num > 99 ? tot : tot +\
    \ num), 0);\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let total = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            total\
    \ += arr[i];\n        }\n    }\n    return total;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let count = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    let curr = arr[i];\n    if (curr <= 99)\
    \ {\n      count += curr;\n    }\n  }\n  return count;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            result\
    \ += arr[i];\n        }\n    }\n    return result;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978866
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let total = 0;\n\
    \    if (k > arr.length) {\n        throw \"K is bigger than the array length\"\
    ;\n    }\n    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i]\
    \ < 100) {\n            total += arr[i];\n        }\n    }\n    return total;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmputzwh2c4.js:24:12)\n    at Object.<anonymous>\
    \ (/tmp/tmputzwh2c4.js:30:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  let\
    \ counter = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 100)\
    \ {\n      sum += arr[i];\n      counter++;\n    }\n    if (counter === k) {\n\
    \      break;\n    }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpkw87jt6f.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkw87jt6f.js:32:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const sum = arr.reduce((acc,\
    \ curr) => {\n        if (curr.toString().length <= 2) acc += curr;\n        return\
    \ acc;\n    }, 0);\n    return sum;\n}\nexport { add_elements };\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9],\
    \ 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n\
    \  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n444\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmp2ygs135x.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2ygs135x.js:29:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 444,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      sum += arr[i];\n \
    \   }\n  }\n  return sum;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978858
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const number = arr[i];\n        if\
    \ (number < 100) {\n            sum += number;\n        }\n    }\n    return sum;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659821790
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  // Implement me!\n\
    \  const answer = arr.filter(element => element < 100)\n    .filter((_, index)\
    \ => index < k)\n    .reduce((total, current) => total + current, 0);\n  return\
    \ answer;\n}\n\nexport { add_elements };\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpn358l9yw.js:23:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpn358l9yw.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).filter(x => x < 100).reduce((a, b) => a + b, 0);\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((acc, n) => {\n        return acc + (n <= 99 ? n : 0);\n    }, 0);\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpj23o24oc.js:15:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpj23o24oc.js:21:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978861
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let res = 0;\n  let\
    \ index = 0;\n  while (index < k) {\n    if (arr[index] < 100) {\n      res +=\
    \ arr[index];\n    }\n    index++;\n  }\n  return res;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978871
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmplnedm4mc.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmplnedm4mc.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '21

    '
  timestamp: 1659978863
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let cnt = 0;\n\
    \    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i]\
    \ < 100) {\n            sum += arr[i];\n            cnt++;\n        }\n      \
    \  if (cnt == k) {\n            break;\n        }\n    }\n    return sum;\n}\n\
    console.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4));\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 7));\nconsole.log(add_elements([1,2,3,4,5,6,7,8,9],\
    \ 5));\nconsole.log(add_elements([1,2,3,4,5,6,7,8,9], 1));\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp1ff7cqko.js:31:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp1ff7cqko.js:36:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '35

    59

    15

    1

    '
  timestamp: 1659978871
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  return arr.reduce((acc,\
    \ val, idx) => {\n    if (val < 100 && idx < k) {\n      acc += val;\n    }\n\
    \    return acc;\n  }, 0);\n}\n\ndescribe(\"add_elements(arr, k)\", () => {\n\
    \  it(\"returns correct sum\", () => {\n    expect(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4)).toEqual(24);\n  });\n});\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpt2ljye86.ts(18,1): error TS2582: Cannot find name
    ''describe''. Do you need to install type definitions for a test runner? Try `npm
    i @types/jest` or `npm i @types/mocha`.

    ../../../../../tmp/tmpt2ljye86.ts(19,3): error TS2582: Cannot find name ''it''.
    Do you need to install type definitions for a test runner? Try `npm i @types/jest`
    or `npm i @types/mocha`.

    ../../../../../tmp/tmpt2ljye86.ts(20,5): error TS2304: Cannot find name ''expect''.

    '
  timestamp: 1659978871
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return 0;\n}\n\
    export default add_elements;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpkedynw89.js:18:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkedynw89.js:24:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n            sum\
    \ += arr[i];\n        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = add_elements;\n  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n\
    \  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978864
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let result = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let element = arr[i];\n        if\
    \ (element < 10) {\n            result += element;\n        } else if (element\
    \ < 100) {\n            result += element;\n        }\n    }\n    return result;\n\
    }\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        const curr = arr[i];\n        if (curr\
    \ < 100) {\n            sum += curr;\n        }\n    }\n    return sum;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let result = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    let element = arr[i];\n    if (element <\
    \ 10) {\n      result += element;\n    } else if (element < 100) {\n      result\
    \ += element;\n    }\n  }\n  return result;\n}\n\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978871
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    let arrStr = arr[i].toString();\n    let arrNum\
    \ = parseInt(arrStr);\n    if (arrStr.length <= 2) {\n      sum += arrNum;\n \
    \   }\n  }\n  return sum;\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4));\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978872
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let r = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      r += arr[i];\n   \
    \ }\n  }\n  return r;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978872
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpui0e0jbc.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpui0e0jbc.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let count = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let n = arr[i];\n        if (n <=\
    \ 9) {\n            count += n;\n        } else if (n <= 99) {\n            count\
    \ += n;\n        }\n    }\n    return count;\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978873
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.slice(0,\
    \ k).reduce((result, curr) => result + (curr < 100 ? curr : 0), 0);\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978873
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let total = 0;\n\
    \  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100) {\n      total += arr[i];\n\
    \    }\n  }\n  return total;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    return arr.filter(num\
    \ => num < 100).slice(0, k).reduce((total, num) => total + num, 0);\n}\nconsole.log(add_elements([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4));\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmpqrlerv2n.js:17:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpqrlerv2n.js:22:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: '35

    '
  timestamp: 1659978873
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const result =\
    \ arr.filter(function (value) {\n        return value < 100;\n    });\n    const\
    \ sum = result.slice(0, k).reduce(function (sum, current) {\n        return sum\
    \ + current;\n    }, 0);\n    return sum;\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n8\n\nshould loosely\
    \ deep-equal\n\n0\n    at test (/tmp/tmp2cx4rb33.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmp2cx4rb33.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 8,\n  expected:\
    \ 0,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 2
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    if (arr[i] >= 10 && arr[i] < 100) {\n      sum\
    \ += arr[i];\n    }\n  }\n  return sum;\n}\n\nimport { test } from \"../utils/index\"\
    ;\ntest(add_elements, [\n  [\n    [111, 21, 3, 4000, 5, 6, 7, 8, 9],\n    4,\n\
    \    24,\n  ],\n  [\n    [12, 123, 45, 67, 890, 9, 999],\n    5,\n    1227,\n\
    \  ],\n  [\n    [12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,\
    \ 12, 12, 12, 12, 12, 12, 12, 12, 12\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../../tmp/tmpincryhr9.ts(33,1): error TS1005: '','' expected.

    ../../../../../tmp/tmpincryhr9.ts(33,9): error TS1005: '','' expected.

    '
  timestamp: 1659978873
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    const out_arr =\
    \ [];\n    for (let i = 0; i < k; i++) {\n        if (arr[i] < 100) {\n      \
    \      out_arr.push(arr[i]);\n        }\n    }\n    return out_arr.reduce((a,\
    \ b) => a + b, 0);\n}\nconsole.log(add_elements([111, 21, 3, 4000, 5, 6, 7, 8,\
    \ 9], 4));\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '24

    '
  timestamp: 1659978873
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] >= 10 && arr[i] < 100)\
    \ {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}\n\nexport\
    \ function run_add_elements(): void {\n    console.log(add_elements([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4));\n}\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpjk96hz5r.js:27:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpjk96hz5r.js:33:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    //add code here\n\
    \    let counter = 0;\n    let result = 0;\n    for (let i of arr) {\n       \
    \ if (counter === k) {\n            break;\n        }\n        if (i > 9 && i\
    \ < 100) {\n            result += i;\n            counter += 1;\n        }\n \
    \   }\n    return result;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n174\n\nshould\
    \ loosely deep-equal\n\n-4\n    at test (/tmp/tmpcfp2p0_i.js:28:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpcfp2p0_i.js:34:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 174,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 1
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n  let sum = 0;\n  for\
    \ (let i = 0; i < k; i++) {\n    const item = arr[i];\n    if (item > 9 && item\
    \ < 100) {\n      sum += item;\n    }\n  }\n  return sum;\n}\n\nexport default\
    \ add_elements;\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n0\n\nshould loosely\
    \ deep-equal\n\n-4\n    at test (/tmp/tmpfxai07qk.js:25:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpfxai07qk.js:31:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 0,\n  expected:\
    \ -4,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1659978873
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        if (arr[i] < 10) {\n            sum\
    \ += arr[i];\n        } else if (arr[i] < 100) {\n            sum += arr[i];\n\
    \        }\n    }\n    return sum;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = add_elements;\n\
    \  assert.deepEqual(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3),-4);\n \
    \ assert.deepEqual(candidate([111, 121, 3, 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4),125);\n  assert.deepEqual(candidate([111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9], 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978869
- exit_code: 0
  program: "//Given a non-empty array of integers arr and an integer k, return\n//\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n// Example:\n// >>> add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4)\n\
    // 24\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <= len(arr)\n\
    function add_elements(arr: number[], k: number): number {\n    let sum = 0;\n\
    \    for (let i = 0; i < k; i++) {\n        let temp = arr[i];\n        if (temp\
    \ < 100) {\n            sum += temp;\n        }\n    }\n    return sum;\n}\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = add_elements;\n  assert.deepEqual(candidate([1, -2, -3,\
    \ 41, 57, 76, 87, 88, 99], 3),-4);\n  assert.deepEqual(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2),0);\n  assert.deepEqual(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4),125);\n  assert.deepEqual(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9],\
    \ 4),24);\n  assert.deepEqual(candidate([1], 1),1);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978873
