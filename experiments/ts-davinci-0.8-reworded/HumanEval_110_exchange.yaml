name: HumanEval_110_exchange
language: ts
prompt: "//In this problem, you will implement a function that takes two arrays of\
  \ numbers,\n// and determines whether it is possible to perform an exchange of elements\n\
  // between them to make lst1 an array of only even numbers.\n// There is no limit\
  \ on the number of exchanged elements between lst1 and lst2.\n// If it is possible\
  \ to exchange elements between the lst1 and lst2 to make\n// all the elements of\
  \ lst1 to be even, return \"YES\".\n// Otherwise, return \"NO\".\n// For example:\n\
  // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n// \"YES\"\n// >>> exchange([1, 2,\
  \ 3, 4], [1, 5, 3, 4])\n// \"NO\"\n// It is assumed that the input arrays will be\
  \ non-empty.\nfunction exchange(lst1: number[], lst2: number[]): string {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = exchange;\n  assert.deepEqual(candidate([1, 2, 3,\
  \ 4], [1, 2, 3, 4]),\"YES\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [1, 5,\
  \ 3, 4]),\"NO\");\n  assert.deepEqual(candidate([1, 2, 3, 4], [2, 1, 4, 3]),\"YES\"\
  );\n  assert.deepEqual(candidate([5, 7, 3], [2, 6, 4]),\"YES\");\n  assert.deepEqual(candidate([5,\
  \ 7, 3], [2, 6, 3]),\"NO\");\n  assert.deepEqual(candidate([3, 2, 6, 1, 8, 9], [3,\
  \ 5, 5, 1, 1, 1]),\"NO\");\n  assert.deepEqual(candidate([100, 200], [200, 200]),\"\
  YES\");\n}\n\ntest();"
completions: ["    const oddElementsLst1 = lst1.filter(num => num % 2 !== 0);\n  \
    \  const evenElementsLst2 = lst2.filter(num => num % 2 === 0);\n    return oddElementsLst1.length\
    \ === evenElementsLst2.length ? \"YES\" : \"NO\";\n}\n", "    for (let i = 0;\
    \ i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n            for (let\
    \ j = 0; j < lst2.length; j++) {\n                if (lst2[j] % 2 !== 0) {\n \
    \                   continue;\n                } else {\n                    let\
    \ tmp = lst1[i];\n                    lst1[i] = lst2[j];\n                   \
    \ lst2[j] = tmp;\n                    break;\n                }\n            }\n\
    \        }\n    }\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i]\
    \ % 2 !== 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  const allEven = lst1.every(num => num % 2 === 0);\n  if (allEven)\
    \ {\n    return \"YES\";\n  }\n  const lst1Odd = lst1.filter(num => num % 2 ===\
    \ 1);\n  const lst2Even = lst2.filter(num => num % 2 === 0);\n  if (lst1Odd.length\
    \ === lst2Even.length) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", " \
    \ const evenNumber = 2;\n  const oddNumbers = new Set([1, 3, 5, 7, 9]);\n  const\
    \ evenNumbers = new Set([0, 2, 4, 6, 8]);\n  const lst1Even = lst1.reduce((result,\
    \ curr) => result + (curr % evenNumber), 0);\n  const lst2Even = lst2.reduce((result,\
    \ curr) => result + (curr % evenNumber), 0);\n  if (lst1Even === 0) {\n    return\
    \ \"YES\";\n  }\n  if (lst2Even === 0) {\n    return \"YES\";\n  }\n  if (lst1Even\
    \ < lst2Even) {\n    if (oddNumbers.has(lst1Even)) {\n      return \"NO\";\n \
    \   }\n    return \"YES\";\n  }\n  if (evenNumbers.has(lst2Even)) {\n    return\
    \ \"NO\";\n  }\n  return \"YES\";\n}\n", "    // ...\n}\n", "  let odd: number[]\
    \ = [];\n  let even: number[] = [];\n  let result: string = \"NO\";\n  lst1.forEach(i\
    \ => (i % 2 !== 0 ? odd.push(i) : even.push(i)));\n  lst2.forEach(i => (i % 2\
    \ !== 0 ? odd.push(i) : even.push(i)));\n  if (odd.length == even.length || odd.length\
    \ > even.length) {\n    result = \"YES\";\n  }\n  return result;\n}", "    return\
    \ lst1.every(val => val % 2 === 0) ? \"YES\" : \"NO\";\n}\n", "  return (lst1.filter(i\
    \ => i % 2 === 0).length === lst1.length ||\n          lst2.filter(i => i % 2\
    \ === 0).length === lst2.length) ?\n          \"YES\" : \"NO\";\n}\n", "  let\
    \ [evens, odds] = [0, 0];\n  let [lst1Evens, lst2Evens] = [0, 0];\n  lst1.forEach(val\
    \ => {\n    if (val % 2 === 0) {\n      evens++;\n      lst1Evens++;\n    } else\
    \ {\n      odds++;\n    }\n  });\n  lst2.forEach(val => {\n    if (val % 2 ===\
    \ 0) {\n      evens++;\n      lst2Evens++;\n    } else {\n      odds++;\n    }\n\
    \  });\n  if (odds > evens || lst1Evens === lst1.length || lst2Evens === lst2.length)\
    \ {\n    return \"NO\";\n  }\n  return \"YES\";\n}\n", "  const evens = lst1.filter(x\
    \ => x % 2 === 0);\n  const odds = lst2.filter(x => x % 2 !== 0);\n  return (evens.length\
    \ + odds.length >= lst1.length) ? \"YES\" : \"NO\";\n}\n", "  const odds1 = lst1.filter(e\
    \ => e % 2 !== 0);\n  const odds2 = lst2.filter(e => e % 2 !== 0);\n  return odds1.length\
    \ === odds2.length ? \"YES\" : \"NO\";\n}", "  let evens: number[] = lst1.filter(val\
    \ => val % 2 === 0);\n  let odds: number[] = lst2.filter(val => val % 2 !== 0);\n\
    \  if (evens.length === lst1.length) {\n    return \"YES\";\n  } else if (odds.length\
    \ === lst2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n\
    }\n", "  let even1 = lst1.every(num => num % 2 === 0);\n  let even2 = lst2.every(num\
    \ => num % 2 === 0);\n  if (even1 && even2) {\n    return \"YES\";\n  } else if\
    \ (even1) {\n    return \"NO\";\n  } else if (even2) {\n    return \"NO\";\n \
    \ } else {\n    return \"YES\";\n  }\n}\n", "    const evenLst1 = lst1.every(num\
    \ => num % 2 === 0);\n    const evenLst2 = lst2.every(num => num % 2 === 0);\n\
    \    if (evenLst1 && evenLst2) {\n        return \"YES\";\n    }\n    return \"\
    NO\";\n}\n\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1,\
    \ 5, 3, 4]);", "    return null;\n}\n", "  let result: boolean = false;\n  lst1.forEach((x)\
    \ => {\n    if (x % 2 === 0) {\n      result = true;\n    }\n  });\n  if (result)\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "  return\
    \ lst1.some(num => num % 2 === 0)\n    ? lst2.every(num => num % 2 === 0)\n  \
    \    ? \"YES\"\n      : \"NO\"\n    : lst2.some(num => num % 2 === 0)\n    ? lst1.every(num\
    \ => num % 2 === 0)\n      ? \"YES\"\n      : \"NO\"\n    : \"NO\";\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n",
  "    if (lst1.every(num => num % 2 === 0)) {\n        return \"YES\";\n    } else\
    \ if (lst2.every(num => num % 2 === 0)) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}\n", "  for (let i = 0; i < lst1.length;\
    \ i++) {\n    let evens = lst2.filter(item => item % 2 === 0);\n    if (lst1[i]\
    \ % 2 !== 0 && evens.length > 0) {\n      lst1[i] = evens.shift();\n    }\n  }\n\
    \  return lst1.every(item => item % 2 === 0) ? \"YES\" : \"NO\";\n}\n", "  let\
    \ evenCount = 0;\n  let oddCount = 0;\n  lst1.forEach(element => {\n    if (element\
    \ % 2 === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n \
    \ });\n  lst2.forEach(element => {\n    if (element % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  });\n  if (evenCount > oddCount) {\n\
    \    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "    let evenCount1\
    \ = 0;\n    let evenCount2 = 0;\n    let oddCount1 = 0;\n    let oddCount2 = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n\
    \            evenCount1++;\n        } else {\n            oddCount1++;\n     \
    \   }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i]\
    \ % 2 === 0) {\n            evenCount2++;\n        } else {\n            oddCount2++;\n\
    \        }\n    }\n    return evenCount1 === oddCount2 && evenCount2 === oddCount1\
    \ ? \"YES\" : \"NO\";\n}\n", "  const sum1 = lst1.reduce((sum, next) => sum +\
    \ next);\n  const sum2 = lst2.reduce((sum, next) => sum + next);\n  return isEven(sum1\
    \ + sum2) ? \"YES\" : \"NO\";\n}\n", "    let odds: number[] = [];\n    let evens:\
    \ number[] = [];\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i]\
    \ % 2 != 0) {\n            odds.push(lst1[i]);\n        } else {\n           \
    \ evens.push(lst1[i]);\n        }\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        if (lst2[i] % 2 != 0) {\n            odds.push(lst2[i]);\n \
    \       } else {\n            evens.push(lst2[i]);\n        }\n    }\n    let\
    \ isOdd = odds.some(el => el % 2 != 0);\n    let isEven = evens.some(el => el\
    \ % 2 == 0);\n    if (isOdd && isEven) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}", "    let evens = lst1.filter(x => x %\
    \ 2 === 0);\n    let odds = lst2.filter(x => x % 2 === 1);\n    let count = evens.length\
    \ + odds.length;\n    let result = count === lst1.length ? \"YES\" : \"NO\";\n\
    \    return result;\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  for (let i = 0; i < lst1.length; i++) {\n \
    \   if (lst1[i] % 2 !== 0) {\n      if (lst2.includes(lst1[i])) {\n        return\
    \ \"YES\";\n      }\n    }\n  }\n  return \"NO\";\n}\n", "  if (lst1.length ==\
    \ 1 && lst1[0] % 2 == 1) {\n    return \"NO\";\n  }\n  if (lst1.length == 1 &&\
    \ lst1[0] % 2 == 0) {\n    return \"YES\";\n  }\n  if (lst1[0] % 2 == 0) {\n \
    \   lst1.shift();\n    return exchange(lst1, lst2);\n  }\n  if (lst1[0] % 2 ==\
    \ 1) {\n    for (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2 ==\
    \ 0) {\n        let temp = lst1[0];\n        lst1[0] = lst2[i];\n        lst2[i]\
    \ = temp;\n        return exchange(lst1, lst2);\n      }\n    }\n  }\n  return\
    \ \"NO\";\n}\n", "  const odds1 = lst1.filter(v => v % 2 === 1);\n  const odds2\
    \ = lst2.filter(v => v % 2 === 1);\n  return odds1.length === odds2.length ? \"\
    YES\" : \"NO\";\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]\
    \ % 2 != 0) {\n      let hasEven = false;\n      for (let j = 0; j < lst2.length;\
    \ j++) {\n        if (lst2[j] % 2 == 0) {\n          hasEven = true;\n       \
    \   let temp = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j] = temp;\n\
    \          break;\n        }\n      }\n      if (!hasEven) {\n        return \"\
    NO\";\n      }\n    }\n  }\n  return \"YES\";\n}\n\nconsole.log(exchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n\
    \nexport {};", "    let lst1Even = lst1.filter(num => num % 2 === 0);\n    let\
    \ lst2Even = lst2.filter(num => num % 2 === 0);\n    let lst1Odd = lst1.filter(num\
    \ => num % 2 !== 0);\n    let lst2Odd = lst2.filter(num => num % 2 !== 0);\n \
    \   let totalEven = lst1Even.length + lst2Even.length;\n    let totalOdd = lst1Odd.length\
    \ + lst2Odd.length;\n    if (totalEven === lst1.length || totalOdd === lst1.length)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
  "    let evens: number[] = lst1.filter(x => x % 2 === 0);\n    let odds: number[]\
    \ = lst2.filter(x => x % 2 === 1);\n    let result: string = \"NO\";\n    if (evens.length\
    \ === 0 && odds.length > 0) {\n        result = \"YES\";\n    }\n    return result;\n\
    }\n", "  const isEven = (x: number) => x % 2 === 0;\n  const hasOdd = (x: number)\
    \ => x % 2 !== 0;\n  let isPossible = false;\n  lst1.forEach((l1) => {\n    if\
    \ (isEven(l1)) {\n      isPossible = true;\n    }\n  });\n  if (isPossible ===\
    \ false) {\n    lst2.forEach((l2) => {\n      if (hasOdd(l2)) {\n        isPossible\
    \ = true;\n      }\n    });\n  }\n  return isPossible ? \"YES\" : \"NO\";\n}\n",
  "  const isLst1Even = isEven(lst1);\n  const isLst2Even = isEven(lst2);\n  const\
    \ arr = [isLst1Even, isLst2Even];\n  return arr.some(num => num === true) ? \"\
    YES\" : \"NO\";\n}\n\nconst isEven = (lst: number[]): boolean => {\n  return lst.every(element\
    \ => element % 2 === 0);\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\n\
    console.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));", "  if (lst1.some(ele => ele\
    \ % 2 === 0)) {\n    return \"YES\";\n  } else if (lst2.some(ele => ele % 2 ===\
    \ 0)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      for\
    \ (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n    \
    \      lst1[i] = lst2[j];\n          return \"YES\";\n        }\n      }\n   \
    \   return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    let evenLst1 = lst1.filter(num\
    \ => num % 2 === 0);\n    let evenLst2 = lst2.filter(num => num % 2 === 0);\n\
    \    if (evenLst1.length === lst1.length) {\n        return \"YES\";\n    } else\
    \ if (evenLst2.length >= lst1.length - evenLst1.length) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\n", "  if (lst1.some(num =>\
    \ num % 2 !== 0)) {\n    for (let i = 0; i < lst1.length; i++) {\n      if (lst1[i]\
    \ % 2 !== 0) {\n        for (let j = 0; j < lst2.length; j++) {\n          if\
    \ (lst2[j] % 2 === 0) {\n            const temp = lst1[i];\n            lst1[i]\
    \ = lst2[j];\n            lst2[j] = temp;\n            return \"YES\";\n     \
    \     }\n        }\n      }\n    }\n    return \"NO\";\n  }\n  return \"YES\"\
    ;\n}\n", "  // using reduce to check if the arrays have odd numbers\n  // if not\
    \ it returns true, meaning that it only contains even numbers\n  const reduceArr1\
    \ = lst1.reduce((prev: number, curr: number) => {\n    if (curr % 2 === 0) {\n\
    \      return prev;\n    } else {\n      return curr;\n    }\n  });\n  const reduceArr2\
    \ = lst2.reduce((prev: number, curr: number) => {\n    if (curr % 2 === 0) {\n\
    \      return prev;\n    } else {\n      return curr;\n    }\n  });\n  // if the\
    \ arrays have odd numbers, they're returned to the result,\n  // if not, they\
    \ return 0\n  if (reduceArr1 > 0 && reduceArr2 > 0) {\n    return \"NO\";\n  }\
    \ else {\n    return \"YES\";\n  }\n}\n", "  let odd1 = lst1.filter(i => i % 2\
    \ !== 0);\n  let odd2 = lst2.filter(i => i % 2 !== 0);\n  let even1 = lst1.filter(i\
    \ => i % 2 === 0);\n  let even2 = lst2.filter(i => i % 2 === 0);\n  if (odd1.length\
    \ > odd2.length) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n\
    }\n", "    let count = 0;\n    for (let i = 0; i < lst1.length; i++) {\n     \
    \   if (lst1[i] % 2 !== 0) {\n            for (let j = 0; j < lst2.length; j++)\
    \ {\n                if (lst2[j] % 2 === 0) {\n                    count++;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return count === lst1.length ? \"YES\" : \"NO\";\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));",
  "  let numOdd1 = 0;\n  let numOdd2 = 0;\n  lst1.forEach(num => {\n    if (num %\
    \ 2 === 1) {\n      numOdd1++;\n    }\n  });\n  lst2.forEach(num => {\n    if\
    \ (num % 2 === 1) {\n      numOdd2++;\n    }\n  });\n  return numOdd1 === numOdd2\
    \ ? \"YES\" : \"NO\";\n}\n", "  let evenCount = 0;\n  let oddCount = 0;\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      evenCount++;\n\
    \    } else {\n      oddCount++;\n    }\n  }\n  for (let i = 0; i < lst2.length;\
    \ i++) {\n    if (lst2[i] % 2 === 0) {\n      evenCount++;\n    } else {\n   \
    \   oddCount++;\n    }\n  }\n  if (evenCount > oddCount) {\n    return \"YES\"\
    ;\n  } else {\n    return \"NO\";\n  }\n}\n", "    // TODO: implement\n    return\
    \ 'Not Implemented';\n}\n", "  const set1 = new Set<number>(lst1);\n  const set2\
    \ = new Set<number>(lst2);\n  for (const el1 of set1) {\n    for (const el2 of\
    \ set2) {\n      if (el1 % 2 === 1 && el2 % 2 === 0) {\n        return \"YES\"\
    ;\n      }\n    }\n  }\n  return \"NO\";\n}\n", "    let evens = lst1.filter(e\
    \ => e % 2 === 0);\n    let odds = lst2.filter(e => e % 2 === 1);\n    return\
    \ (evens.length + odds.length) >= lst1.length ? \"YES\" : \"NO\";\n}", "    if\
    \ (lst1.length == 1) {\n        return lst1[0] % 2 == 0 ? \"YES\" : \"NO\";\n\
    \    }\n    const result: string[] = lst1.map((item, index) => {\n        if (item\
    \ % 2 == 0) {\n            return \"YES\";\n        } else {\n            if (lst2[index]\
    \ % 2 == 0) {\n                return \"YES\";\n            } else {\n       \
    \         return \"NO\";\n            }\n        }\n    });\n    return result.indexOf(\"\
    NO\") == -1 ? \"YES\" : \"NO\";\n}\n", "  return \"YES\";\n}\n", "  const LST1_LENGTH\
    \ = lst1.length;\n  const LST2_LENGTH = lst2.length;\n  let isPossible = false;\n\
    \  let lst1Counter = 0;\n  let lst2Counter = 0;\n  let lst1Even = 0;\n  let lst2Even\
    \ = 0;\n  for (let i = 0; i < LST1_LENGTH; i++) {\n    if (lst1[i] % 2 === 0)\
    \ {\n      lst1Even++;\n    }\n  }\n  for (let i = 0; i < LST2_LENGTH; i++) {\n\
    \    if (lst2[i] % 2 === 0) {\n      lst2Even++;\n    }\n  }\n  if (lst1Even +\
    \ lst2Even >= LST1_LENGTH) {\n    isPossible = true;\n  }\n  if (isPossible) {\n\
    \    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "  const evenOdd\
    \ = (x: number) => (x % 2 === 0 ? \"even\" : \"odd\");\n  const lst1HasOdd = lst1.some(x\
    \ => evenOdd(x) === \"odd\");\n  const lst2HasEven = lst2.some(x => evenOdd(x)\
    \ === \"even\");\n  return lst1HasOdd && lst2HasEven ? \"YES\" : \"NO\";\n}\n",
  "    // for(let i = 0; i < lst1.length; i++){\n    //     for(let j = 0; j < lst2.length;\
    \ j++){\n    //         if(lst1[i] % 2 !== 0 && lst2[j] % 2 === 0){\n    //  \
    \           lst1[i] = lst2[j];\n    //             return \"YES\";\n    //   \
    \      }\n    //     }\n    // }\n    // return \"NO\";\n    let odd1 = lst1.filter(ele\
    \ => ele % 2 !== 0);\n    let even2 = lst2.filter(ele => ele % 2 === 0);\n   \
    \ if(odd1.length > even2.length){\n        return \"NO\";\n    }\n    return \"\
    YES\";\n}\n", "  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n \
    \   if (lst1[i] % 2 !== 0) {\n      count++;\n    }\n  }\n  if (count === 0) {\n\
    \    return \"YES\";\n  } else {\n    let new1 = lst1.filter((el) => el % 2 !==\
    \ 0);\n    let new2 = lst2.filter((el) => el % 2 !== 0);\n    if (new1.length\
    \ === new2.length) {\n      return \"YES\";\n    } else {\n      return \"NO\"\
    ;\n    }\n  }\n}\n", "    let count = 0;\n    let end = lst1.length;\n    for\
    \ (let i = 0; i < end; i++) {\n        if (lst1[i] % 2 !== 0) {\n            for\
    \ (let j = 0; j < end; j++) {\n                if (lst2[j] % 2 !== 0) {\n    \
    \                continue;\n                } else {\n                    let\
    \ tmp = lst1[i];\n                    lst1[i] = lst2[j];\n                   \
    \ lst2[j] = tmp;\n                    count++;\n                    break;\n \
    \               }\n            }\n        }\n    }\n    if (count === end) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}", " \
    \   // Your code here.\n    return \"NO\";\n}\n", "  if (lst1.every(element =>\
    \ element % 2 === 0)) {\n    return \"YES\";\n  }\n  for (let idx1 = 0; idx1 <\
    \ lst1.length; idx1++) {\n    const elem1 = lst1[idx1];\n    if (elem1 % 2 ===\
    \ 0) {\n      continue;\n    }\n    for (let idx2 = 0; idx2 < lst2.length; idx2++)\
    \ {\n      const elem2 = lst2[idx2];\n      if (elem2 % 2 === 0) {\n        continue;\n\
    \      }\n      lst1[idx1] = elem2;\n      lst2[idx2] = elem1;\n      return exchange(lst1,\
    \ lst2);\n    }\n  }\n  return \"NO\";\n}\n", "  let pairs: string[] = [];\n \
    \ for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length;\
    \ j++) {\n      if (lst1[i] % 2 === 1 && lst2[j] % 2 === 0) {\n        pairs.push(`${lst1[i]}\
    \ ${lst2[j]}`);\n      }\n    }\n  }\n  if (pairs.length === 0) {\n    return\
    \ \"NO\";\n  } else {\n    return \"YES\";\n  }\n}\nconsole.log(exchange([1, 2,\
    \ 3, 4], [1, 2, 3, 4]));\n", "  let isExchangePossible = false;\n  let result\
    \ = lst1.filter(num => num % 2 !== 0);\n  for (let i = 0; i < result.length; i++)\
    \ {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst2[j] % 2 === 0)\
    \ {\n        isExchangePossible = true;\n        break;\n      }\n    }\n  }\n\
    \  return isExchangePossible ? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n",
  "    const lst1Odd: number[] = [];\n    const lst2Even: number[] = [];\n    lst1.forEach((num,\
    \ index) => {\n        if (num % 2 === 1) {\n            lst1Odd.push(index);\n\
    \        }\n    });\n    lst2.forEach((num, index) => {\n        if (num % 2 ===\
    \ 0) {\n            lst2Even.push(index);\n        }\n    });\n    if (lst1Odd.length\
    \ === lst2Even.length) {\n        return \"YES\";\n    }\n    return \"NO\";\n\
    }\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));", "  // loop through each item in the lists\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    const item1 = lst1[i];\n    // If the\
    \ item is even, skip to the next item\n    if (item1 % 2 === 0) {\n      continue;\n\
    \    }\n    // Otherwise, loop through each item in the second list\n    for (let\
    \ j = 0; j < lst2.length; j++) {\n      const item2 = lst2[j];\n      // If the\
    \ second item is even, swap it with the first item\n      if (item2 % 2 === 0)\
    \ {\n        lst1[i] = item2;\n        lst2[j] = item1;\n        break;\n    \
    \  }\n    }\n  }\n  // Check if any of the items in the first list are odd.\n\
    \  // If so, return \"NO\".\n  // Otherwise, return \"YES\".\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}\n", "    if (lst1.length !== lst2.length) {\n\
    \        return \"NO\";\n    }\n    let sum1 = 0;\n    let sum2 = 0;\n    for\
    \ (let i = 0; i < lst1.length; i++) {\n        sum1 += lst1[i];\n        sum2\
    \ += lst2[i];\n    }\n    if (sum1 % 2 === 0 || sum2 % 2 === 0) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "  let possible = true;\n  lst1.forEach(element\
    \ => {\n    if (element % 2 !== 0) {\n      lst2.forEach(element2 => {\n     \
    \   if (element2 % 2 === 0) {\n          possible = true;\n        } else {\n\
    \          possible = false;\n        }\n      });\n    }\n  });\n  return possible\
    \ ? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\n\
    console.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n", "    const lst1Odd = lst1.filter(num\
    \ => num % 2 !== 0);\n    const lst2Even = lst2.filter(num => num % 2 === 0);\n\
    \    if (lst1Odd.length === lst2Even.length) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}\n", "    const isOdd = (n: number) => n % 2 !== 0;\n  \
    \  return (lst1.some(isOdd) && lst2.some(isOdd)) ? \"NO\" : \"YES\";\n}\n", " \
    \ const isAllOdd = (arr: number[]): boolean => arr.every(n => n % 2 === 1);\n\
    \  return isAllOdd(lst1) && isAllOdd(lst2) ? \"NO\" : \"YES\";\n}\n", "  let evenIndexes\
    \ = lst1.map((n, i) => i).filter(i => lst1[i] % 2 === 0);\n  let oddIndexes =\
    \ lst2.map((n, i) => i).filter(i => lst2[i] % 2 !== 0);\n  if (evenIndexes.length\
    \ === 0 || oddIndexes.length === 0) {\n    return \"NO\";\n  }\n  evenIndexes.forEach(i\
    \ => {\n    let temp = lst1[i];\n    lst1[i] = lst2[oddIndexes[0]];\n    lst2[oddIndexes[0]]\
    \ = temp;\n    oddIndexes.shift();\n  });\n  return lst1.every(n => n % 2 ===\
    \ 0) ? \"YES\" : \"NO\";\n}", "    let result = \"NO\";\n    for (let i = 0; i\
    \ < lst1.length; i++) {\n        if (lst1[i] % 2 != 0) {\n            if (lst2.includes(lst1[i]))\
    \ {\n                for (let j = 0; j < lst2.length; j++) {\n               \
    \     if (lst2[j] % 2 == 0) {\n                        lst1[i] = lst2[j];\n  \
    \                      result = \"YES\";\n                        return result;\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return result;\n}\n", "    let count1 = 0;\n    let count2 = 0;\n    for (let\
    \ i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n         \
    \   count1 += 1;\n        }\n    }\n    for (let i = 0; i < lst2.length; i++)\
    \ {\n        if (lst2[i] % 2 === 0) {\n            count2 += 1;\n        }\n \
    \   }\n    if (count1 === lst1.length || count2 === lst2.length) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "  const oddToEven\
    \ = \n    lst1.filter(val => val % 2 != 0).length <=\n    lst2.filter(val => val\
    \ % 2 == 0).length\n  return oddToEven ? \"YES\" : \"NO\"\n}\n\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])) // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1,\
    \ 5, 3, 4])) // \"NO\"", "    let lst1even = lst1.every(function (item) {\n  \
    \      return item % 2 === 0;\n    });\n    let lst2even = lst2.every(function\
    \ (item) {\n        return item % 2 === 0;\n    });\n    if (lst1even || lst2even)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
  "  // Write your code here.\n  const evenLst1 = lst1.filter(num => num % 2 === 0);\n\
    \  const evenLst2 = lst2.filter(num => num % 2 === 0);\n  const oddLst1 = lst1.filter(num\
    \ => num % 2 !== 0);\n  const oddLst2 = lst2.filter(num => num % 2 !== 0);\n \
    \ if (evenLst1.length + evenLst2.length === lst1.length + lst2.length) {\n   \
    \ return \"YES\";\n  } else if (\n    evenLst1.length + oddLst2.length === lst1.length\
    \ + lst2.length ||\n    oddLst1.length + evenLst2.length === lst1.length + lst2.length\n\
    \  ) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "    const\
    \ areEven = (arr: number[]): boolean => {\n        return arr.every(num => num\
    \ % 2 === 0);\n    };\n\n    return (areEven(lst1) || areEven(lst2)) ? \"YES\"\
    \ : \"NO\";\n}", "  // Your code here\n  return \"\";\n}\n", "    const evens\
    \ = lst1.filter(num => num % 2 === 0).length;\n    const odds = lst2.filter(num\
    \ => num % 2 === 1).length;\n    return evens >= odds ? \"YES\" : \"NO\";\n}\n",
  "    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n\
    \            for (let k = 0; k < lst2.length; k++) {\n                if (lst2[k]\
    \ % 2 !== 0) {\n                    continue;\n                } else {\n    \
    \                const temp = lst1[i];\n                    lst1[i] = lst2[k];\n\
    \                    lst2[k] = temp;\n                    break;\n           \
    \     }\n            }\n        }\n    }\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 !== 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2,\
    \ 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [4, 5, 7, 6]));\n", "  let lst1Odd: number[] = [];\n  let lst2Even:\
    \ number[] = [];\n  lst1.forEach(function(element){\n    if(element % 2 !== 0){\n\
    \      lst1Odd.push(element);\n    }\n  });\n  lst2.forEach(function(element){\n\
    \    if(element % 2 === 0){\n      lst2Even.push(element);\n    }\n  });\n  if(lst1Odd.length\
    \ === lst2Even.length){\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", " \
    \ //checking\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"NO\"\
    ;\n  }\n  //check\n  if (lst1.length === 1 && lst2.length === 1) {\n    if (lst1[0]\
    \ % 2 !== 0 && lst2[0] % 2 !== 0) {\n      return \"NO\";\n    } else {\n    \
    \  return \"YES\";\n    }\n  }\n\n  //first array checkeven\n  let firstarray:\
    \ number[] = lst1.filter((num) => num % 2 !== 0);\n  //second array checkeven\n\
    \  let secondarray: number[] = lst2.filter((num) => num % 2 !== 0);\n  if (firstarray.length\
    \ > secondarray.length) {\n    return \"NO\";\n  } else {\n    return \"YES\"\
    ;\n  }\n}\n", "  const evens = lst1.filter(i => i % 2 === 0);\n  const odds =\
    \ lst2.filter(i => i % 2 !== 0);\n  return (\n    evens.length + odds.length >=\
    \ lst1.length\n      ? \"YES\"\n      : \"NO\"\n  );\n}\n", "  for (let i = 0;\
    \ i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n     \
    \ if (lst1[i] % 2 === 1 && lst2[j] % 2 === 0) {\n        [lst1[i], lst2[j]] =\
    \ [lst2[j], lst1[i]];\n      }\n    }\n  }\n  return lst1.every(num => num % 2\
    \ === 0) ? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n", "    // TODO:\
    \ Implement me!\n    let result: number[] = [];\n    let lst1evens: number[] =\
    \ [];\n    let lst2evens: number[] = [];\n    let lst1unevens: number[] = [];\n\
    \    let lst2unevens: number[] = [];\n    for (let i = 0; i < lst1.length; i++)\
    \ {\n        if (lst1[i] % 2 === 0) {\n            lst1evens.push(lst1[i]);\n\
    \        } else {\n            lst1unevens.push(lst1[i]);\n        }\n    }\n\
    \    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) {\n\
    \            lst2evens.push(lst2[i]);\n        } else {\n            lst2unevens.push(lst2[i]);\n\
    \        }\n    }\n    for (let i = 0; i < lst1evens.length; i++) {\n        result.push(lst1evens[i]);\n\
    \    }\n    for (let i = 0; i < lst2unevens.length; i++) {\n        result.push(lst2unevens[i]);\n\
    \    }\n    for (let i = 0; i < lst1unevens.length; i++) {\n        result.push(lst1unevens[i]);\n\
    \    }\n    for (let i = 0; i < lst2evens.length; i++) {\n        result.push(lst2evens[i]);\n\
    \    }\n    return result.every(e => e % 2 === 0) ? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));",
  "  let [lst1Odd, lst2Odd] = [false, false];\n  lst1.forEach(item => {\n    if (item\
    \ % 2 === 1) {\n      lst1Odd = true;\n    }\n  });\n  lst2.forEach(item => {\n\
    \    if (item % 2 === 1) {\n      lst2Odd = true;\n    }\n  });\n  return lst1Odd\
    \ && lst2Odd ? \"NO\" : \"YES\";\n}\n", "    return lst1.some(i => i % 2 === 1)\n\
    \        ? \"NO\"\n        : \"YES\";\n}\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\n\
    exchange([1, 2, 3, 4], [1, 5, 3, 4]);\n", "  let res = \"NO\";\n  for (let i =\
    \ 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n  \
    \    if (lst1[i] % 2 === 1 && lst2[j] % 2 === 0) {\n        res = \"YES\";\n \
    \     }\n    }\n  }\n  return res;\n}\n", "    let numOfEvens = 0;\n    let numOfOdds\
    \ = 0;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 ===\
    \ 0) {\n            numOfEvens++;\n        } else {\n            numOfOdds++;\n\
    \        }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i]\
    \ % 2 === 0) {\n            numOfEvens++;\n        } else {\n            numOfOdds++;\n\
    \        }\n    }\n    if (numOfEvens >= lst1.length) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\n", "    // Your code here!\n\
    \    let set1 = new Set(lst1);\n    let set2 = new Set(lst2);\n    for (let n\
    \ of set1) {\n        if (n % 2 == 1) {\n            for (let m of set2) {\n \
    \               if (m % 2 == 0) {\n                    return \"YES\";\n     \
    \           }\n            }\n        }\n    }\n    return \"NO\";\n}", "  if\
    \ (lst1.every(element => element % 2 === 0)) {\n    return \"YES\";\n  }\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n      let\
    \ evenIndex = lst2.findIndex(element => element % 2 === 0);\n      if (evenIndex\
    \ !== -1) {\n        let temp = lst1[i];\n        lst1[i] = lst2[evenIndex];\n\
    \        lst2[evenIndex] = temp;\n      } else {\n        return \"NO\";\n   \
    \   }\n    }\n  }\n  return \"YES\";\n}\n", "  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 !== 0) {\n      if (lst2.indexOf(lst1[i]) === -1)\
    \ {\n        return \"NO\";\n      }\n    }\n  }\n  return \"YES\";\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4])); // \"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1,\
    \ 5, 3, 4])); // \"NO\"\n", "  let even = true;\n  let odd = true;\n  if (lst1.length\
    \ === 1) {\n    if (lst1[0] % 2 === 0) {\n      return \"YES\";\n    } else {\n\
    \      return \"NO\";\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n\
    \    if (lst1[i] % 2 === 0) {\n      even = true;\n    } else {\n      odd = true;\n\
    \    }\n  }\n  if (even === true && odd === true) {\n    return \"YES\";\n  }\
    \ else {\n    return \"NO\";\n  }\n}\n", "  // Write your code here\n  const dic\
    \ = new Map();\n  for (let i = 0; i < lst1.length; i++) {\n    dic.set(lst1[i],\
    \ true);\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (dic.has(lst2[i]))\
    \ {\n      dic.set(lst2[i], false);\n    }\n  }\n  for (let x of dic.values())\
    \ {\n    if (x) {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n",
  "    let evenCtr = 0;\n    let oddCtr = 0;\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 === 0) {\n            evenCtr++;\n        }\
    \ else {\n            oddCtr++;\n        }\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        if (lst2[i] % 2 === 0) {\n            evenCtr++;\n        }\
    \ else {\n            oddCtr++;\n        }\n    }\n    if (oddCtr % 2 === 0) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", " \
    \   let numOddNumbers = 0;\n    let indexOddNumbers = [];\n    lst1.forEach((num,\
    \ index) => {\n        if (num % 2 === 1) {\n            numOddNumbers++;\n  \
    \          indexOddNumbers.push(index);\n        }\n    });\n    if (numOddNumbers\
    \ > lst2.length) {\n        return \"NO\";\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        let num = lst2[i];\n        if (num % 2 === 1) {\n         \
    \   let ind = indexOddNumbers.shift();\n            lst1[ind] = num;\n       \
    \ }\n    }\n    if (indexOddNumbers.length > 0) {\n        return \"NO\";\n  \
    \  }\n    return \"YES\";\n}\n", "  if (\n    lst1.reduce((c, v) => c + (v % 2\
    \ === 0 ? 1 : 0), 0) === lst1.length ||\n    lst2.reduce((c, v) => c + (v % 2\
    \ === 0 ? 1 : 0), 0) === lst2.length\n  ) {\n    return \"YES\";\n  }\n  return\
    \ \"NO\";\n}\n", "    const count = countOddNumbers(lst1);\n    const count2 =\
    \ countOddNumbers(lst2);\n    if (count + count2 % 2 === 0) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    for (let i = 0; i < lst1.length;\
    \ i++) {\n        for (let j = 0; j < lst2.length; j++) {\n            if ((lst1[i]\
    \ % 2 == 1) && (lst2[j] % 2 == 0)) {\n                let tmp = lst1[i];\n   \
    \             lst1[i] = lst2[j];\n                lst2[j] = tmp;\n           \
    \ }\n        }\n    }\n    for (let i = 0; i < lst1.length; i++) {\n        if\
    \ (lst1[i] % 2 == 1) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n    for (let j =\
    \ 0; j < lst2.length; j++) {\n      if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0)\
    \ {\n        const temp = lst1[i];\n        lst1[i] = lst2[j];\n        lst2[j]\
    \ = temp;\n      }\n    }\n  }\n  if (lst1.every(element => element % 2 === 0))\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "    let\
    \ oddNums1: number[] = [];\n    let oddNums2: number[] = [];\n    let evenNums1:\
    \ number[] = [];\n    let evenNums2: number[] = [];\n    for (let i: number =\
    \ 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n            evenNums1.push(lst1[i]);\n\
    \        } else {\n            oddNums1.push(lst1[i]);\n        }\n    }\n   \
    \ for (let i: number = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 ===\
    \ 0) {\n            evenNums2.push(lst2[i]);\n        } else {\n            oddNums2.push(lst2[i]);\n\
    \        }\n    }\n    if (oddNums1.length + evenNums2.length === lst1.length)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\
    console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4]));\n", "  const evenChecker = (e: number) => e % 2 === 0;\n\
    \  const evenChecker2 = (e: number) => !evenChecker(e);\n  const oddChecker =\
    \ (e: number) => !evenChecker(e);\n  const hasEven = (lst: number[]) => lst.some(evenChecker);\n\
    \  const hasOdd = (lst: number[]) => lst.some(oddChecker);\n  const allEven =\
    \ (lst: number[]) => lst.every(evenChecker);\n  const allOdd = (lst: number[])\
    \ => lst.every(oddChecker);\n  const lst1HasEven = hasEven(lst1);\n  const lst1HasOdd\
    \ = hasOdd(lst1);\n  const lst2HasEven = hasEven(lst2);\n  const lst2HasOdd =\
    \ hasOdd(lst2);\n  const lst1AllEven = allEven(lst1);\n  const lst1AllOdd = allOdd(lst1);\n\
    \  const lst2AllEven = allEven(lst2);\n  const lst2AllOdd = allOdd(lst2);\n  if\
    \ (lst1AllEven && lst2AllEven) {\n    return \"YES\";\n  }\n  if (lst1AllOdd &&\
    \ lst2AllOdd) {\n    return \"NO\";\n  }\n  if (lst1HasEven && lst2HasOdd) {\n\
    \    return \"YES\";\n  }\n  if (lst1HasOdd && lst2HasEven) {\n    return \"YES\"\
    ;\n  }\n  return \"NO\";\n}", "  let flag = false;\n  if (lst1.every(item => item\
    \ % 2 === 0)) {\n    return \"YES\";\n  } else {\n    lst1.forEach((item, index)\
    \ => {\n      if (item % 2 !== 0) {\n        lst2.forEach((jtem, jndex) => {\n\
    \          if (jtem % 2 === 0) {\n            const temp = lst1[index];\n    \
    \        lst1[index] = lst2[jndex];\n            lst2[jndex] = temp;\n       \
    \     flag = true;\n          }\n        });\n      }\n    });\n  }\n  return\
    \ flag ? \"YES\" : \"NO\";\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n\
    \    if (lst1[i] % 2 === 1) {\n      for (let j = 0; j < lst2.length; j++) {\n\
    \        if (lst2[j] % 2 === 0) {\n          [lst1[i], lst2[j]] = [lst2[j], lst1[i]];\n\
    \          break;\n        }\n      }\n    }\n  }\n  let even = true;\n  for (let\
    \ i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 1) {\n      even = false;\n\
    \      break;\n    }\n  }\n  return even ? \"YES\" : \"NO\";\n}\n", "    if (lst1.filter(x\
    \ => x % 2 === 0).length === lst1.length) {\n        return \"YES\";\n    } else\
    \ if (lst2.filter(x => x % 2 === 0).length === lst2.length) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "    //check lst1\
    \ first\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2\
    \ === 0) {\n            continue;\n        } else {\n            //check lst2\n\
    \            for (let i = 0; i < lst2.length; i++) {\n                if (lst2[i]\
    \ % 2 === 0) {\n                    return \"YES\";\n                }\n     \
    \       }\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n\
    }", "    // TODO: implement me\n    throw new Error(\"Method not implemented.\"\
    );\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !==\
    \ 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2\
    \ === 0) {\n          const temp = lst1[i];\n          lst1[i] = lst2[j];\n  \
    \        lst2[j] = temp;\n          return \"YES\";\n        }\n      }\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";\n}\n", "    let evenLst1: number[]\
    \ = lst1.filter(num => num % 2 === 0);\n    let oddsLst2: number[] = lst2.filter(num\
    \ => num % 2 !== 0);\n    return evenLst1.length + oddsLst2.length >= lst1.length\
    \ ? \"YES\" : \"NO\";\n}", "    for (let i = 0; i < lst1.length; i++) {\n    \
    \    if (lst1[i] % 2 !== 0) {\n            for (let j = 0; j < lst2.length; j++)\
    \ {\n                if (lst2[j] % 2 !== 0) {\n                    let temp =\
    \ lst1[i];\n                    lst1[i] = lst2[j];\n                    lst2[j]\
    \ = temp;\n                    return \"YES\";\n                }\n          \
    \  }\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n",
  "  let lst1Even: number[] = lst1.filter(val => val % 2 === 0);\n  let lst2Odd: number[]\
    \ = lst2.filter(val => val % 2 !== 0);\n  return lst1Even.length >= lst2Odd.length\
    \ ? \"YES\" : \"NO\";\n}\n", "  let odds1 = lst1.filter(num => num % 2 !== 0);\n\
    \  let odds2 = lst2.filter(num => num % 2 !== 0);\n  if (odds1.length === odds2.length)\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}", "  for (let\
    \ i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 1) {\n      for (let\
    \ j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n         \
    \ const temp: number = lst1[i];\n          lst1[i] = lst2[j];\n          lst2[j]\
    \ = temp;\n          break;\n        }\n      }\n    }\n  }\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    if (lst1[i] % 2 === 1) {\n      return \"NO\";\n\
    \    }\n  }\n  return \"YES\";\n}\n", "    let odds = 0;\n    let evens = 0;\n\
    \    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n\
    \            evens++;\n        } else {\n            odds++;\n        }\n    }\n\
    \    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) {\n\
    \            evens++;\n        } else {\n            odds++;\n        }\n    }\n\
    \    if (odds % 2 === 0) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  return lst1.some(n => n % 2 !== 0)\n    ? \"\
    NO\"\n    : lst2.some(n => n % 2 === 0)\n    ? \"YES\"\n    : \"NO\";\n}\n", " \
    \   let countOdd = 0;\n    let countEven = 0;\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 == 0) {\n            countEven++;\n        }\
    \ else {\n            countOdd++;\n        }\n    }\n    for (let i = 0; i < lst2.length;\
    \ i++) {\n        if (lst2[i] % 2 == 0) {\n            countEven++;\n        }\
    \ else {\n            countOdd++;\n        }\n    }\n    if (countEven > 0 &&\
    \ countOdd > 0) {\n        return \"YES\";\n    } else {\n        return \"NO\"\
    ;\n    }\n}\n", "    const hasOdd = (lst: number[]): boolean => lst.some(num =>\
    \ num % 2 !== 0);\n    const swap = (lst1: number[], lst2: number[]): void =>\
    \ {\n        if (hasOdd(lst1)) {\n            lst1[lst1.indexOf(lst1.find(num\
    \ => num % 2 !== 0))] = lst2[lst2.indexOf(lst2.find(num => num % 2 === 0))];\n\
    \            lst2[lst2.indexOf(lst2.find(num => num % 2 === 0))] = lst1[lst1.indexOf(lst1.find(num\
    \ => num % 2 !== 0))];\n        }\n    };\n    const isSorted = (lst: number[]):\
    \ boolean => lst.every(num => num % 2 === 0);\n    while (!isSorted(lst1)) {\n\
    \        swap(lst1, lst2);\n    }\n    return \"YES\";\n}\n", "    let result:\
    \ string = \"NO\";\n    const evens = lst1.filter(n => n % 2 === 0);\n    const\
    \ odds = lst2.filter(n => n % 2 === 1);\n    if (evens.length + odds.length ===\
    \ lst1.length + lst2.length) {\n        result = \"YES\";\n    }\n    return result;\n\
    }", "    let lst1Even = lst1.filter(x => x % 2 === 0);\n    let lst2Even = lst2.filter(x\
    \ => x % 2 === 0);\n    if (lst1Even.length === lst1.length || lst2Even.length\
    \ === lst2.length) {\n        return \"YES\";\n    }\n    else {\n        return\
    \ \"NO\";\n    }\n}\n", "  let evens = lst1.filter(i => i % 2 === 0);\n  let odds\
    \ = lst2.filter(i => i % 2 !== 0);\n  return (odds.length >= evens.length) ? \"\
    YES\" : \"NO\";\n}\n", "  let even1 = 0;\n  let even2 = 0;\n  for (let i = 0;\
    \ i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even1++;\n    }\n\
    \    if (lst2[i] % 2 === 0) {\n      even2++;\n    }\n  }\n  if (even1 === lst1.length\
    \ || even2 === lst2.length) {\n    return \"YES\";\n  } else {\n    return \"\
    NO\";\n  }\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); // YES\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4])); // NO\n", "  // loop through lst1\n  for (let i =\
    \ 0; i < lst1.length; i++) {\n    // if current element is odd\n    if (lst1[i]\
    \ % 2 === 1) {\n      // loop through lst2\n      for (let j = 0; j < lst2.length;\
    \ j++) {\n        // if the current element is even\n        if (lst2[j] % 2 ===\
    \ 0) {\n          // swap them\n          let temp = lst1[i];\n          lst1[i]\
    \ = lst2[j];\n          lst2[j] = temp;\n          break;\n        }\n      }\n\
    \    }\n  }\n  // check if there are any odds left in lst1\n  let count = 0;\n\
    \  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 1) {\n   \
    \   count++;\n    }\n  }\n  if (count === 0) {\n    return \"YES\";\n  } else\
    \ {\n    return \"NO\";\n  }\n}\n", "    let isExchangeable = false;\n    lst1.forEach(item\
    \ => {\n        if (item % 2 !== 0) {\n            isExchangeable = true;\n  \
    \      }\n    });\n    return isExchangeable ? \"YES\" : \"NO\";\n}\n", "  return\
    \ \"\";\n}\n", "    let possible: boolean = false;\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 !== 0) {\n            possible = (lst2.indexOf(lst1[i])\
    \ !== -1);\n            if (!possible) {\n                break;\n           \
    \ }\n        }\n    }\n    return possible ? \"YES\" : \"NO\";\n}\n", "  let evens:\
    \ number[] = lst1.filter(n => n % 2 === 0);\n  let odds: number[] = lst2.filter(n\
    \ => n % 2 !== 0);\n  return evens.length === lst1.length && odds.length === lst2.length\n\
    \    ? \"YES\"\n    : \"NO\";\n}\n\ndescribe(\"exchange\", () => {\n  it(\"example\
    \ 1\", () => {\n    expect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toBe(\"YES\"\
    );\n  });\n  it(\"example 2\", () => {\n    expect(exchange([1, 2, 3, 4], [1,\
    \ 5, 3, 4])).toBe(\"NO\");\n  });\n  it(\"example 3\", () => {\n    expect(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 6])).toBe(\"YES\");\n  });\n  it(\"example 4\", () => {\n\
    \    expect(exchange([1, 1, 1, 1], [2, 2, 2, 2])).toBe(\"YES\");\n  });\n  it(\"\
    example 5\", () => {\n    expect(exchange([2, 2, 2, 2], [1, 1, 1, 1])).toBe(\"\
    YES\");\n  });\n  it(\"example 6\", () => {\n    expect(exchange([1, 2, 1, 2],\
    \ [2, 1, 2, 1])).toBe(\"YES\");\n  });\n  it(\"example 7\", () => {\n    expect(exchange([1,\
    \ 2, 1, 2], [1, 2, 1, 2])).toBe(\"NO\");\n  });\n  it(\"example 8\", () => {\n\
    \    expect(exchange([1, 2, 1, 2], [1, 1, 1, 1])).toBe(\"NO\");\n  });\n  it(\"\
    example 9\", () => {\n    expect(exchange([1, 1, 1, 1], [1, 2, 1, 2])).toBe(\"\
    NO\");\n  });\n  it(\"example 10\", () => {\n    expect(exchange([1, 2, 1, 2],\
    \ [2, 1, 2", "  const lst1Odds = lst1.filter(n => n % 2 === 1);\n  const lst2Odds\
    \ = lst2.filter(n => n % 2 === 1);\n  if (lst1Odds.length === lst2Odds.length)\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "    for (let lst1Num of\
    \ lst1) {\n        if (lst1Num % 2 === 1) {\n            for (let lst2Num of lst2)\
    \ {\n                if (lst2Num % 2 === 0) {\n                    return \"YES\"\
    ;\n                }\n            }\n            return \"NO\";\n        }\n \
    \   }\n    return \"YES\";\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n\
    \    if (lst1[i] % 2 === 1) {\n      if (lst2.indexOf(lst1[i] + 1) > -1) {\n \
    \       const temp = lst1[i];\n        lst1[i] = lst1[i] + 1;\n        lst2[lst2.indexOf(lst1[i])]\
    \ = temp;\n      } else if (lst2.indexOf(lst1[i] - 1) > -1) {\n        const temp\
    \ = lst1[i];\n        lst1[i] = lst1[i] - 1;\n        lst2[lst2.indexOf(lst1[i])]\
    \ = temp;\n      } else {\n        return \"NO\";\n      }\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    let allEven: boolean = true;\n    let isEven: boolean;\n\
    \    let i: number;\n    let j: number;\n    let newArr: number[] = [];\n    for\
    \ (i = 0; i < lst1.length; i++) {\n        isEven = isEvenNum(lst1[i]);\n    \
    \    if (!isEven) {\n            allEven = false;\n            break;\n      \
    \  }\n    }\n    if (allEven) {\n        return \"YES\";\n    } else {\n     \
    \   for (i = 0; i < lst1.length; i++) {\n            isEven = isEvenNum(lst1[i]);\n\
    \            if (!isEven) {\n                for (j = 0; j < lst2.length; j++)\
    \ {\n                    if (isEvenNum(lst2[j])) {\n                        newArr\
    \ = exchangeHelper(lst1, lst2, i, j);\n                        lst1 = newArr[0];\n\
    \                        lst2 = newArr[1];\n                        break;\n \
    \                   }\n                }\n            }\n        }\n        allEven\
    \ = true;\n        for (i = 0; i < lst1.length; i++) {\n            isEven = isEvenNum(lst1[i]);\n\
    \            if (!isEven) {\n                allEven = false;\n              \
    \  break;\n            }\n        }\n        if (allEven) {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }\n}\n",
  "    let temp: number;\n    let result: boolean = false;\n    for (let i = 0; i\
    \ < lst1.length; i++) {\n        if (lst1[i] % 2 === 1) {\n            temp =\
    \ lst1[i];\n            for (let j = 0; j < lst2.length; j++) {\n            \
    \    if (lst2[j] % 2 === 0) {\n                    lst1[i] = lst2[j];\n      \
    \              lst2[j] = temp;\n                    result = true;\n         \
    \           break;\n                }\n            }\n        }\n    }\n    if\
    \ (result) {\n        return \"YES\";\n    } else {\n        return \"NO\";\n\
    \    }\n}\n", "  let res: string = \"NO\";\n  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 === 1) {\n      let temp: number = lst1[i];\n  \
    \    for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n\
    \          lst1[i] = lst2[j];\n          lst2[j] = temp;\n          if (lst1.every((num)\
    \ => num % 2 === 0)) {\n            res = \"YES\";\n          }\n        }\n \
    \     }\n    }\n  }\n  return res;\n}\n", "    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 !== 0) {\n            for (let j = 0; j < lst2.length;\
    \ j++) {\n                if (lst2[j] % 2 !== 0) {\n                    continue;\n\
    \                } else {\n                    const temp = lst1[i];\n       \
    \             lst1[i] = lst2[j];\n                    lst2[j] = temp;\n      \
    \              break;\n                }\n            }\n        }\n    }\n  \
    \  let isAllEven = true;\n    for (let i = 0; i < lst1.length; i++) {\n      \
    \  if (lst1[i] % 2 !== 0) {\n            isAllEven = false;\n            break;\n\
    \        }\n    }\n    return isAllEven ? \"YES\" : \"NO\";\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));",
  "  let allEven = true;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]\
    \ % 2 !== 0) {\n      allEven = false;\n      break;\n    }\n  }\n  if (allEven)\
    \ {\n    return \"YES\";\n  }\n  for (let i = 0; i < lst1.length; i++) {\n   \
    \ if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length; j++) {\n  \
    \      if (lst2[j] % 2 === 0) {\n          let temp = lst1[i];\n          lst1[i]\
    \ = lst2[j];\n          lst2[j] = temp;\n          return exchange(lst1, lst2);\n\
    \        }\n      }\n    }\n  }\n  return \"NO\";\n}\n", "  const isEven = (num:\
    \ number) => num % 2 === 0;\n  const exchangeable = lst1.map((num, i) => {\n \
    \   return isEven(num) || (lst2[i] && isEven(lst2[i]));\n  });\n  return exchangeable.every(b\
    \ => b) ? \"YES\" : \"NO\";\n}\n", "  return lst1.every(e => e % 2 === 0) || lst2.every(e\
    \ => e % 2 === 0)\n    ? \"YES\"\n    : \"NO\";\n}\n", "  let flag: boolean =\
    \ false;\n  for (let i: number = 0; i < lst1.length; i++) {\n    if (lst1[i] %\
    \ 2 != 0) {\n      for (let j: number = 0; j < lst2.length; j++) {\n        if\
    \ (lst2[j] % 2 == 0) {\n          flag = true;\n          break;\n        }\n\
    \      }\n    }\n  }\n  if (flag) {\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  let evens1 = lst1.filter(n => n % 2 === 0);\n\
    \  let evens2 = lst2.filter(n => n % 2 === 0);\n  let odds1 = lst1.filter(n =>\
    \ n % 2 !== 0);\n  let odds2 = lst2.filter(n => n % 2 !== 0);\n  if (evens1.length\
    \ + odds2.length === lst1.length) {\n    return \"YES\";\n  } else if (evens2.length\
    \ + odds1.length === lst2.length) {\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  let position1: number = 0;\n  let position2:\
    \ number = 0;\n  while (position1 < lst1.length) {\n    if (lst1[position1] %\
    \ 2 === 0) {\n      position1++;\n    } else {\n      if (position2 === lst2.length)\
    \ {\n        return \"NO\";\n      }\n      if (lst2[position2] % 2 === 0) {\n\
    \        [lst1[position1], lst2[position2]] = [lst2[position2], lst1[position1]];\n\
    \        position1++;\n        position2++;\n      } else {\n        position2++;\n\
    \      }\n    }\n  }\n  return \"YES\";\n}\n", "  let oddCount = 0;\n  let result:\
    \ string = \"YES\";\n  for (let i: number = 0; i < lst1.length; i++) {\n    if\
    \ (lst1[i] % 2 === 1) {\n      oddCount++;\n    }\n  }\n  if (oddCount > lst2.length)\
    \ {\n    result = \"NO\";\n  }\n  return result;\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n",
  "    if (lst1.filter(num => num % 2 === 0).length === lst1.length) {\n        return\
    \ \"YES\";\n    } else if (lst2.filter(num => num % 2 === 0).length === lst2.length)\
    \ {\n        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n",
  "    let lst2_odds = [],\n        lst1_odds = [];\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 !== 0) {\n            lst1_odds.push(lst1[i]);\n\
    \        }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n        if (lst2[i]\
    \ % 2 !== 0) {\n            lst2_odds.push(lst2[i]);\n        }\n    }\n    if\
    \ (lst1_odds.length === lst2_odds.length) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}\n", "    let evenCount = 0;\n    let oddCount\
    \ = 0;\n    let lst1Evens = 0;\n    let lst2Evens = 0;\n    let lst1Odds = 0;\n\
    \    let lst2Odds = 0;\n    // count evens and odds in both lists\n    for (let\
    \ i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n         \
    \   evenCount += 1;\n            lst1Evens += 1;\n        } else {\n         \
    \   oddCount += 1;\n            lst1Odds += 1;\n        }\n    }\n    for (let\
    \ i = 0; i < lst2.length; i++) {\n        if (lst2[i] % 2 === 0) {\n         \
    \   evenCount += 1;\n            lst2Evens += 1;\n        } else {\n         \
    \   oddCount += 1;\n            lst2Odds += 1;\n        }\n    }\n    // check\
    \ for even / odd counts\n    if (evenCount > oddCount || lst1Evens > lst2Odds\
    \ || lst2Evens > lst1Odds) {\n        return \"YES\";\n    } else {\n        return\
    \ \"NO\";\n    }\n}", "  const evens = lst1.filter(x => x % 2 === 0);\n  const\
    \ odds = lst2.filter(x => x % 2 !== 0);\n  if (evens.length + odds.length >= lst1.length)\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\nexport { exchange };", " \
    \   let lst1Evens: number[] = [];\n    let lst2Evens: number[] = [];\n    let\
    \ result: string = \"NO\";\n    for (let i: number = 0; i < lst1.length; i++)\
    \ {\n        if (lst1[i] % 2 === 0) {\n            lst1Evens.push(lst1[i]);\n\
    \        }\n    }\n    for (let i: number = 0; i < lst2.length; i++) {\n     \
    \   if (lst2[i] % 2 === 0) {\n            lst2Evens.push(lst2[i]);\n        }\n\
    \    }\n    if (lst1Evens.length > lst2Evens.length) {\n        result = \"YES\"\
    ;\n    }\n    return result;\n}\n", "  const lst1Length = lst1.length;\n  let\
    \ count1 = 0;\n  let count2 = 0;\n  for (let i = 0; i < lst1Length; i++) {\n \
    \   if (lst1[i] % 2 === 0) {\n      count1++;\n    }\n    if (lst2[i] % 2 ===\
    \ 0) {\n      count2++;\n    }\n  }\n  if (count1 + count2 === lst1Length) {\n\
    \    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n",
  "  if (lst1.every(el => el % 2 === 0)) {\n    return \"YES\";\n  } else if (lst2.every(el\
    \ => el % 2 === 0)) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n \
    \ }\n}\n", "  return \"YES\";\n}\n", "    if (lst1.every(x => x % 2 === 0)) {\n\
    \        return \"YES\";\n    }\n    if (lst2.every(x => x % 2 === 0)) {\n   \
    \     return \"YES\";\n    }\n    if (lst1.every(x => x % 2 === 1)) {\n      \
    \  return \"NO\";\n    }\n    if (lst2.every(x => x % 2 === 1)) {\n        return\
    \ \"NO\";\n    }\n    return \"YES\";\n}\n", "    let lst1Evens: number[] = lst1.filter(element\
    \ => element % 2 === 0);\n    let lst2Odds: number[] = lst2.filter(element =>\
    \ element % 2 === 1);\n    if (lst1Evens.length === lst1.length) {\n        return\
    \ \"YES\";\n    } else if (lst1Evens.length === 0) {\n        return \"NO\";\n\
    \    } else if (lst2Odds.length === 0) {\n        return \"NO\";\n    } else {\n\
    \        return \"YES\";\n    }\n}\n", "  if (lst1.every(a => a % 2 === 0)) {\n\
    \    return \"YES\";\n  } else if (lst2.every(a => a % 2 === 0)) {\n    return\
    \ \"YES\";\n  } else {\n    return \"NO\";\n  }\n}", "  let evenCount = 0;\n \
    \ let foundAt = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i]\
    \ % 2 === 0) {\n      evenCount++;\n    }\n  }\n  if (evenCount === lst1.length)\
    \ {\n    return \"YES\";\n  }\n  for (let i = 0; i < lst1.length; i++) {\n   \
    \ if (lst1[i] % 2 !== 0) {\n      foundAt = lst2.indexOf(lst1[i]);\n      if (foundAt\
    \ !== -1) {\n        if (lst2[foundAt] % 2 === 0) {\n          return \"YES\"\
    ;\n        }\n      }\n    }\n  }\n  return \"NO\";\n}\n\nexport const Question_4\
    \ = {\n  number: 4,\n  name: \"Exchange\",\n  points: \"15\",\n  topic: \"Python\"\
    ,\n  level: \"Easy\",\n  prompt: \"Write a function called exchange that takes\
    \ two arrays of numbers,\\n\" +\n  \" and determines whether it is possible to\
    \ perform an exchange of elements\\n\" +\n  \" between them to make lst1 an array\
    \ of only even numbers.\\n\" +\n  \" There is no limit on the number of exchanged\
    \ elements between lst1 and lst2.\\n\" +\n  \" If it is possible to exchange elements\
    \ between the lst1 and lst2 to make\\n\" +\n  \" all the elements of lst1 to be\
    \ even, return 'YES'.\\n\" +\n  \" Otherwise, return 'NO'.\\n\" +\n  \" For example:\\\
    n\" +\n  \" >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\\n\" +\n  \" 'YES'\\n\" +\n\
    \  \" >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\\n\" +\n  \" 'NO'\\n\" +\n  \"\
    \ It is assumed that the input arrays will be non-empty.\",\n  solution: \"def\
    \ exchange(lst1, lst2):\\n\" +\n  \"    evenCount", "    let exchangePossible:\
    \ boolean = false;\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i]\
    \ % 2 !== 0) {\n            for (let j = 0; j < lst2.length; j++) {\n        \
    \        if (lst2[j] % 2 !== 0) {\n                    let temp = lst1[i];\n \
    \                   lst1[i] = lst2[j];\n                    lst2[j] = temp;\n\
    \                    exchangePossible = true;\n                    break;\n  \
    \              }\n            }\n        }\n    }\n    if (exchangePossible) {\n\
    \        return \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", " \
    \ const lst1Even = lst1.map(x => x % 2 === 0);\n  const lst2Even = lst2.map(x\
    \ => x % 2 === 0);\n  return lst1Even.some(x => x === false) && lst2Even.some(x\
    \ => x === true)\n    ? \"YES\"\n    : \"NO\";\n}\n", "    let oddCount: number\
    \ = 0;\n    lst1.forEach(num => {\n        if (num % 2 !== 0) {\n            oddCount++;\n\
    \        }\n    });\n    lst2.forEach(num => {\n        if (num % 2 === 0) {\n\
    \            oddCount--;\n        }\n    });\n    return oddCount === 0 ? \"YES\"\
    \ : \"NO\";\n}\n", "    let count1 = 0;\n    let count2 = 0;\n    for (let i of\
    \ lst1) {\n        if (i % 2 == 0) {\n            count1++;\n        }\n    }\n\
    \    for (let i of lst2) {\n        if (i % 2 == 0) {\n            count2++;\n\
    \        }\n    }\n    if (count1 == lst1.length || count2 == lst2.length) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";\n}\n", "    if (lst1.length\
    \ === 0 || lst2.length === 0) return \"NO\";\n    if (lst1.every(x => x % 2 ===\
    \ 0)) return \"YES\";\n    for (let i = 0; i < lst1.length; i++) {\n        for\
    \ (let j = 0; j < lst2.length; j++) {\n            const newList1 = lst1.map(x\
    \ => x);\n            const newList2 = lst2.map(x => x);\n            newList1[i]\
    \ = lst2[j];\n            newList2[j] = lst1[i];\n            if (newList1.every(x\
    \ => x % 2 === 0)) return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n",
  "    // 1) implement your code here.\n    return;\n}\n", "  const result = lst1.map((num)\
    \ => num % 2 === 0 ? num : NaN);\n  const lst2Odds = lst2.filter((num) => num\
    \ % 2 !== 0);\n  if(lst2Odds.length >= result.filter((num) => isNaN(num)).length)\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "    let finalArr: number[]\
    \ = [];\n    let modArr1: number[] = [];\n    let modArr2: number[] = [];\n  \
    \  lst1.forEach(e => modArr1.push(e % 2));\n    lst2.forEach(e => modArr2.push(e\
    \ % 2));\n    for (let i = 0; i < modArr1.length; i++) {\n        if (modArr1[i]\
    \ === 0) {\n            finalArr.push(0);\n        } else if (modArr2[i] === 0)\
    \ {\n            finalArr.push(0);\n        } else {\n            finalArr.push(1);\n\
    \        }\n    }\n    if (finalArr.includes(1)) {\n        return \"NO\";\n \
    \   } else {\n        return \"YES\";\n    }\n}\n\nexport {\n    addK,\n    absList,\n\
    \    concatString,\n    filterCards,\n    exchange\n}", "    const allNumbersOdd\
    \ = (numbers: number[]): boolean => {\n        return numbers.every(num => num\
    \ % 2 === 1);\n    };\n    const allNumbersEven = (numbers: number[]): boolean\
    \ => {\n        return numbers.every(num => num % 2 === 0);\n    };\n    return\
    \ allNumbersOdd(lst1) ? allNumbersEven(lst2) ? \"YES\" : \"NO\" : \"NO\";\n}\n",
  "  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 !== 0) {\n     \
    \ for (let j = 0; j < lst2.length; j++) {\n        if (lst2[j] % 2 === 0) {\n\
    \          lst1[i] = lst2[j];\n          lst2[j] = lst1[i];\n          break;\n\
    \        }\n      }\n    }\n  }\n  return lst1.every(num => num % 2 === 0) ? \"\
    YES\" : \"NO\";\n}\n", "  const mergeLists = [...lst1, ...lst2];\n  const evenNumbers\
    \ = mergeLists.filter((num) => num % 2 === 0);\n  if (evenNumbers.length >= lst1.length)\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "  const\
    \ isEven = (e: number) => e % 2 === 0;\n  const filterLst1 = lst1.filter(e =>\
    \ !isEven(e));\n  const filterLst2 = lst2.filter(e => isEven(e));\n  return filterLst1.length\
    \ === filterLst2.length ? \"YES\" : \"NO\";\n}", "  for (let i = 0; i < lst1.length;\
    \ i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] % 2 ===\
    \ 1 && lst2[j] % 2 === 0) {\n        let temp = lst1[i];\n        lst1[i] = lst2[j];\n\
    \        lst2[j] = temp;\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 === 1) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    let lst1IsEven: boolean = lst1.every(function (element)\
    \ {\n        return element % 2 === 0;\n    });\n    let lst2IsEven: boolean =\
    \ lst2.every(function (element) {\n        return element % 2 === 0;\n    });\n\
    \    if (lst1IsEven && lst2IsEven) {\n        return \"YES\";\n    } else if (lst1IsEven\
    \ && !lst2IsEven) {\n        let lst2Odd = lst2.filter(function (element) {\n\
    \            return element % 2 !== 0;\n        });\n        let result = lst2Odd.every(function\
    \ (element) {\n            let lst1Number = lst1.indexOf(element);\n         \
    \   if (lst1Number > -1) {\n                lst1.splice(lst1Number, 1, lst2[lst1Number]);\n\
    \                lst2.splice(lst1Number, 1, element);\n                return\
    \ true;\n            } else {\n                return false;\n            }\n\
    \        });\n        if (result) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else if (!lst1IsEven && lst2IsEven)\
    \ {\n        let lst1Odd = lst1.filter(function (element) {\n            return\
    \ element % 2 !== 0;\n        });\n        let result = lst1Odd.every(function\
    \ (element) {\n            let lst2Number = lst2.indexOf(element);\n         \
    \   if (lst2Number > -1) {\n                lst2.splice(lst2Number, 1, lst1[lst2Number]);\n\
    \                lst1.splice(lst2Number, 1, element);\n                return\
    \ true;\n            } else {\n                return false;\n            }\n\
    \        });\n        if (result) {\n            return \"YES\";\n        } else\
    \ {\n            return \"NO\";\n        }\n    } else {\n        return \"NO\"\
    ;\n    }\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3", "  let lst1_is_even\
    \ = lst1.every(e => e % 2 === 0);\n  let lst2_is_even = lst2.every(e => e % 2\
    \ === 0);\n  if (lst1_is_even && lst2_is_even) {\n    return \"YES\";\n  }\n \
    \ let lst1_is_odd = lst1.every(e => e % 2 !== 0);\n  let lst2_is_odd = lst2.every(e\
    \ => e % 2 !== 0);\n  if (lst1_is_odd && lst2_is_odd) {\n    return \"YES\";\n\
    \  }\n  if (!lst1_is_even && !lst1_is_odd) {\n    return \"YES\";\n  }\n  return\
    \ \"NO\";\n}\n", "  if (lst1.every(value => value % 2 === 0)) {\n    return \"\
    YES\";\n  } else if (lst2.every(value => value % 2 === 0)) {\n    return \"YES\"\
    ;\n  } else {\n    return \"NO\";\n  }\n}\n", "    return \"\";\n}\n", "  const\
    \ isEven = (num: number) => num % 2 === 0;\n  const lst1EvenCount = lst1.filter(isEven).length;\n\
    \  const lst2EvenCount = lst2.filter(isEven).length;\n  return lst1EvenCount +\
    \ lst2EvenCount >= lst1.length ? \"YES\" : \"NO\";\n}\n\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));",
  "  const lst1Odds = lst1.filter(item => item % 2 === 1);\n  const lst2Odds = lst2.filter(item\
    \ => item % 2 === 1);\n  return lst1Odds.length < lst2Odds.length ? \"YES\" :\
    \ \"NO\";\n}", "    const oddNumbers = lst1.filter(el => el % 2 !== 0);\n    const\
    \ evenNumbers = lst2.filter(el => el % 2 === 0);\n    if (oddNumbers.length >\
    \ evenNumbers.length) {\n        return \"NO\";\n    }\n    return \"YES\";\n\
    }\n", "    let even1: number = 0;\n    let even2: number = 0;\n    for (let i\
    \ = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n           \
    \ even1++;\n        }\n    }\n    for (let i = 0; i < lst2.length; i++) {\n  \
    \      if (lst2[i] % 2 === 0) {\n            even2++;\n        }\n    }\n    return\
    \ even1 >= even2 ? \"YES\" : \"NO\";\n}\n", "    // TODO: replace by a correct\
    \ solution.\n    return \"NO\";\n}\n", "  const len = lst1.length + lst2.length;\n\
    \  let a = -1;\n  let b = -1;\n  let flag = true;\n  while (flag) {\n    let a\
    \ = -1;\n    let b = -1;\n    for (let i = 0; i < lst1.length; i++) {\n      if\
    \ (lst1[i] % 2 === 1) {\n        a = i;\n        break;\n      }\n    }\n    for\
    \ (let i = 0; i < lst2.length; i++) {\n      if (lst2[i] % 2 === 0) {\n      \
    \  b = i;\n        break;\n      }\n    }\n    if (a === -1 || b === -1) {\n \
    \     flag = false;\n    } else {\n      const tmp = lst1[a];\n      lst1[a] =\
    \ lst2[b];\n      lst2[b] = tmp;\n    }\n  }\n  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 === 1) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}\n", "    let counter = 0;\n    lst1.forEach(a => {\n        if (a\
    \ % 2 !== 0) {\n            counter++;\n        }\n    });\n    let tempCounter\
    \ = 0;\n    lst2.forEach(a => {\n        if (a % 2 === 0) {\n            tempCounter++;\n\
    \        }\n    });\n    if (counter === tempCounter) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}", "    let even = false;\n \
    \   for (let i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 === 0) {\n\
    \            even = true;\n        }\n    }\n    if (even) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n", "  const firstArrayContainsEven:\
    \ boolean = lst1.some(num => num % 2 === 0);\n  const secondArrayContainsEven:\
    \ boolean = lst2.some(num => num % 2 === 0);\n  if (firstArrayContainsEven &&\
    \ secondArrayContainsEven) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n\n\
    console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4]));\n", "  let evenCount1 = 0;\n  let evenCount2 = 0;\n \
    \ let oddCount1 = 0;\n  let oddCount2 = 0;\n  for (let num of lst1) {\n    if\
    \ (num % 2 === 0) {\n      evenCount1++;\n    } else {\n      oddCount1++;\n \
    \   }\n  }\n  for (let num of lst2) {\n    if (num % 2 === 0) {\n      evenCount2++;\n\
    \    } else {\n      oddCount2++;\n    }\n  }\n  if (oddCount1 === evenCount2\
    \ || evenCount1 === oddCount2) {\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  // ...\n}\n", "  for (let i = 0; i < lst1.length;\
    \ i++) {\n    if (lst1[i] % 2 !== 0) {\n      for (let j = 0; j < lst2.length;\
    \ j++) {\n        if (lst2[j] % 2 === 0) {\n          let temp: number = lst1[i];\n\
    \          lst1[i] = lst2[j];\n          lst2[j] = temp;\n          break;\n \
    \       }\n      }\n    }\n  }\n  for (let i = 0; i < lst1.length; i++) {\n  \
    \  if (lst1[i] % 2 !== 0) {\n      return \"NO\";\n    }\n  }\n  return \"YES\"\
    ;\n}\n\nlet lst1 = [1, 2, 3, 4];\nlet lst2 = [1, 2, 3, 4];\n\nconsole.log(exchange(lst1,\
    \ lst2));", "  if (lst1.every(ele => ele % 2 === 0)) {\n    return \"YES\";\n\
    \  } else if (lst2.every(ele => ele % 2 === 0)) {\n    return \"YES\";\n  } else\
    \ {\n    return \"NO\";\n  }\n}\n", "    let isExchangeable = true;\n    for (let\
    \ i = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n         \
    \   if (lst2.filter(el => el % 2 === 0).length > 0) {\n                isExchangeable\
    \ = true;\n            } else {\n                isExchangeable = false;\n   \
    \             break;\n            }\n        }\n    }\n    return isExchangeable\
    \ ? \"YES\" : \"NO\";\n}", "    const isEven = (num: number) => num % 2 === 0;\n\
    \    let oddCount1 = 0;\n    let oddCount2 = 0;\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (!isEven(lst1[i])) {\n            oddCount1++;\n        }\n\
    \        if (!isEven(lst2[i])) {\n            oddCount2++;\n        }\n    }\n\
    \    return oddCount1 === oddCount2 ? \"YES\" : \"NO\";\n}\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n",
  "    let len: number = lst1.length;\n    for (let i: number = 0; i < len; i++) {\n\
    \        if (lst1[i] % 2 !== 0) {\n            let index: number = lst2.indexOf(lst1[i]);\n\
    \            if (index !== -1) {\n                lst2.splice(index, 1);\n   \
    \             lst1.splice(i, 1);\n                lst1.push(lst2[0]);\n      \
    \          lst2.splice(0, 1);\n                lst2.push(lst1[i]);\n         \
    \       lst1.splice(i, 1);\n            }\n        }\n    }\n    return \"YES\"\
    ;\n}\n", "  return lst1.every(num => num % 2 === 0) ? \"YES\" : \"NO\";\n}\n\n\
    console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2,\
    \ 3, 4], [1, 5, 3, 4]));", "  let isLst1Even = lst1.every(num => num % 2 === 0);\n\
    \  let isLst2Even = lst2.every(num => num % 2 === 0);\n  let exchangeEvens: number[]\
    \ = [];\n  if (isLst1Even && isLst2Even) {\n    return \"YES\";\n  } else if (isLst1Even)\
    \ {\n    let checkLst2 = (array: number[]): number[] => {\n      for (let i =\
    \ 0; i < array.length; i++) {\n        if (array[i] % 2 !== 0) {\n          exchangeEvens.push(array[i]);\n\
    \        }\n      }\n      return exchangeEvens;\n    };\n    let lst2Odds = checkLst2(lst2);\n\
    \    let checkLst1 = (array: number[]): boolean => {\n      for (let i = 0; i\
    \ < array.length; i++) {\n        if (array[i] % 2 !== 0) {\n          for (let\
    \ j = 0; j < lst2Odds.length; j++) {\n            if (lst2Odds[j] % 2 !== 0) {\n\
    \              return true;\n            }\n          }\n        }\n      }\n\
    \      return false;\n    };\n    let areLst1Odds = checkLst1(lst1);\n    if (areLst1Odds)\
    \ {\n      return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  } else\
    \ if (isLst2Even) {\n    let checkLst1 = (array: number[]): number[] => {\n  \
    \    for (let i = 0; i < array.length; i++) {\n        if (array[i] % 2 !== 0)\
    \ {\n          exchangeEvens.push(array[i]);\n        }\n      }\n      return\
    \ exchangeEvens;\n    };\n    let lst1Odds = checkLst1(lst1);\n    let checkLst2\
    \ = (array: number[]): boolean => {\n      for (let i = 0; i < array.length; i++)\
    \ {\n        if (array[i] % 2", "  if (\n    lst1.filter((element) => element\
    \ % 2 === 0).length >\n    lst2.filter((element) => element % 2 === 0).length\n\
    \  ) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n\nexchange([1,\
    \ 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\n", "    return\
    \ 'NO';\n}\n\ndescribe('exchange', () => {\n    it('should check if the elements\
    \ in list 1 are even', () => {\n        expect(exchange([1, 2, 3, 4], [1, 2, 3,\
    \ 4])).toBe('YES');\n        expect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n\
    \    });\n});\n", "  let flag = \"NO\";\n  for (let i = 0; i < lst1.length; i++)\
    \ {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] % 2 !== 0\
    \ && lst2[j] % 2 === 0) {\n        lst1[i] = lst2[j];\n        flag = \"YES\"\
    ;\n      }\n    }\n  }\n  return flag;\n}\nconsole.log(exchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\n", "  //\
    \ Base case:\n  if (lst1.length === 0) {\n    return \"YES\";\n  }\n\n  // In\
    \ this problem, we are interested in removing even numbers from lst1.\n  // We\
    \ will define an auxiliary function, removeEvenNumbersFromLst(lst),\n  // that\
    \ removes even numbers from lst, and returns\n  // the list of odd numbers extracted\
    \ from lst.\n  // >>> removeEvenNumbersFromLst([1, 2, 3, 4])\n  // [1, 3]\n  function\
    \ removeEvenNumbersFromLst(lst: number[]): number[] {\n    return lst.filter(number\
    \ => number % 2 !== 0);\n  }\n\n  // >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n\
    \  // [\"YES\", [1, 3], [1, 2, 3, 4]]\n  // >>> exchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4])\n  // [\"NO\", [1, 3], [1, 5, 3, 4]]\n  const [firstElement, ...otherElements]\
    \ = lst1;\n  if (firstElement % 2 === 0) {\n    // The first element of lst1 is\
    \ even, so we remove it from lst1,\n    // and move it to lst2, and recurse:\n\
    \    return exchange(otherElements, [firstElement, ...lst2]);\n  } else {\n  \
    \  // The first element of lst1 is odd, so we extract all the odd numbers\n  \
    \  // from lst2, and move them to lst1, and recurse:\n    return exchange(\n \
    \     [firstElement, ...removeEvenNumbersFromLst(lst2)],\n      removeEvenNumbersFromLst(lst2)\n\
    \    );\n  }\n}\n", "    let hasEven = false;\n    for (let i = 0; i < lst1.length;\
    \ i++) {\n        if (lst1[i] % 2 === 0) {\n            hasEven = true;\n    \
    \        break;\n        }\n    }\n    if (!hasEven) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";\n}\n", "  const isEven = (n: number) => n % 2 ===\
    \ 0;\n  const lst1IsEven = lst1.every(isEven);\n  const lst2IsEven = lst2.every(isEven);\n\
    \  if (lst1IsEven || lst2IsEven) {\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n", "    return lst1.some(el => el % 2 === 1) && lst2.some(el\
    \ => el % 2 === 0) ? \"YES\" : \"NO\";\n}\nconsole.log(exchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));", "  const\
    \ numOdd1 = lst1.filter(num => num % 2 !== 0).length;\n  const numOdd2 = lst2.filter(num\
    \ => num % 2 !== 0).length;\n  return numOdd1 === numOdd2 ? \"YES\" : \"NO\";\n\
    }\n", "  if (lst1.every(num => num % 2 === 0)) {\n    return \"YES\";\n  }\n \
    \ if (lst2.every(num => num % 2 === 0)) {\n    return \"YES\";\n  }\n  if (lst1.includes(2)\
    \ || lst2.includes(2)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", " \
    \   let lst1Odd = lst1.filter(val => val % 2 == 1);\n    let lst2Even = lst2.filter(val\
    \ => val % 2 == 0);\n    return lst1Odd.length == lst2Even.length ? \"YES\" :\
    \ \"NO\";\n}", "  let result = \"NO\";\n  for (let i = 0; i < lst1.length; i++)\
    \ {\n    const element = lst1[i];\n    if (element % 2 === 1) {\n      //console.log(`lst1\
    \ index ${i} is odd: ${element}`);\n      const indexOfEvenInLst2 = lst2.findIndex(n\
    \ => n % 2 === 0);\n      if (indexOfEvenInLst2 >= 0) {\n        //console.log(`swapping\
    \ ${element} with ${lst2[indexOfEvenInLst2]}`);\n        lst1[i] = lst2[indexOfEvenInLst2];\n\
    \        lst2[indexOfEvenInLst2] = element;\n        result = \"YES\";\n     \
    \ }\n    }\n  }\n  return result;\n}\n", "  let even = 0;\n  let odd = 0;\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      even++;\n\
    \    } else {\n      odd++;\n    }\n  }\n  for (let i = 0; i < lst2.length; i++)\
    \ {\n    if (lst2[i] % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n\
    \    }\n  }\n  if (even > odd) {\n    return \"YES\";\n  } else {\n    return\
    \ \"NO\";\n  }\n}\n", "    let result: string = \"YES\";\n    for (let i: number\
    \ = 0; i < lst1.length; i++) {\n        if (lst1[i] % 2 !== 0) {\n           \
    \ lst1[i] = lst2[i];\n            if (lst1[i] % 2 !== 0) {\n                result\
    \ = \"NO\";\n            }\n        }\n    }\n    return result;\n}", "  let stringAnswer:\
    \ string = \"NO\";\n  let lst1Evens: number[] = [];\n  let lst2Evens: number[]\
    \ = [];\n  let lst1Odds: number[] = [];\n  let lst2Odds: number[] = [];\n  for\
    \ (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      lst1Evens.push(lst1[i]);\n\
    \    } else {\n      lst1Odds.push(lst1[i]);\n    }\n  }\n  for (let i = 0; i\
    \ < lst2.length; i++) {\n    if (lst2[i] % 2 === 0) {\n      lst2Evens.push(lst2[i]);\n\
    \    } else {\n      lst2Odds.push(lst2[i]);\n    }\n  }\n  if (lst1Evens.length\
    \ + lst2Odds.length === lst1.length) {\n    stringAnswer = \"YES\";\n  }\n  return\
    \ stringAnswer;\n}\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "  let evens1 = lst1.filter(isEven);\n  let evens2\
    \ = lst2.filter(isEven);\n  return (evens1.length + evens2.length) >= lst1.length\
    \ ? \"YES\" : \"NO\";\n}\n", "    const isEven = (n: number) => n % 2 === 0;\n\
    \    const isOdd = (n: number) => n % 2 !== 0;\n    const hasEven = (lst: number[])\
    \ => lst.some(isEven);\n    const hasOdd = (lst: number[]) => lst.some(isOdd);\n\
    \    const hasAtLeastOneEven = hasEven(lst1) || hasEven(lst2);\n    const hasAtLeastOneOdd\
    \ = hasOdd(lst1) || hasOdd(lst2);\n    if (hasAtLeastOneEven && hasAtLeastOneOdd)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n", "  let boolArr1:\
    \ boolean[] = lst1.map(num => num % 2 == 0);\n  let boolArr2: boolean[] = lst2.map(num\
    \ => num % 2 == 0);\n  let sumArr1: number = 0;\n  let sumArr2: number = 0;\n\
    \  for (let i: number = 0; i < boolArr1.length; i++) {\n    sumArr1 += boolArr1[i]\
    \ ? 1 : 0;\n    sumArr2 += boolArr2[i] ? 1 : 0;\n  }\n  if (sumArr1 == lst1.length\
    \ || sumArr2 == lst2.length) {\n    return \"YES\";\n  } else if (sumArr1 == 0\
    \ || sumArr2 == 0) {\n    return \"NO\";\n  } else {\n    return \"YES\";\n  }\n\
    }\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1,\
    \ 2, 3, 4], [1, 5, 3, 4]));\n", "    const odds = new Set(lst1.filter(n => n %\
    \ 2 !== 0));\n    const evens = new Set(lst2.filter(n => n % 2 === 0));\n    for\
    \ (const n of odds) {\n        if (evens.has(n)) {\n            return \"YES\"\
    ;\n        }\n    }\n    return \"NO\";\n}\n\ndescribe(\"exchange\", () => {\n\
    \    it(\"should work\", () => {\n        assert.equal(exchange([1, 2, 3, 4],\
    \ [1, 2, 3, 4]), \"YES\");\n        assert.equal(exchange([1, 2, 3, 4], [1, 5,\
    \ 3, 4]), \"NO\");\n    });\n});", "    const evenLst1 = lst1.filter(v => v %\
    \ 2 === 0);\n    const evenLst2 = lst2.filter(v => v % 2 === 0);\n    const oddLst1\
    \ = lst1.filter(v => v % 2 === 1);\n    const oddLst2 = lst2.filter(v => v % 2\
    \ === 1);\n    if (evenLst1.length + oddLst2.length === lst1.length &&\n     \
    \   evenLst2.length + oddLst1.length === lst2.length) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "  for (let i = 0; i < lst1.length; i++) {\n\
    \    if (lst1[i] % 2 === 1) {\n      for (let j = 0; j < lst2.length; j++) {\n\
    \        if (lst2[j] % 2 === 0) {\n          [lst1[i], lst2[j]] = [lst2[j], lst1[i]];\n\
    \          return \"YES\";\n        }\n      }\n      return \"NO\";\n    }\n\
    \  }\n  return \"YES\";\n}\n", "  if (lst1.every(n => n % 2 === 0)) {\n    return\
    \ \"YES\";\n  }\n  for (let x of lst1) {\n    if (x % 2 === 1) {\n      for (let\
    \ y of lst2) {\n        if (y % 2 === 0) {\n          let t = x;\n          x\
    \ = y;\n          y = t;\n          return exchange(lst1, lst2);\n        }\n\
    \      }\n    }\n  }\n  return \"NO\";\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
