name: HumanEval_34_unique
language: ts
prompt: "//Return sorted unique elements in an array\n// >>> unique([5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123])\n// [0, 2, 3, 5, 9, 123]\nfunction unique(l: number[]): number[]\
  \ {\n"
tests: "declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
  \ test() {\n  let candidate = unique;\n  assert.deepEqual(candidate([5, 3, 5, 2,\
  \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]);\n}\n\ntest();"
completions: ["  let l2 = l.sort((a, b) => a - b);\n  let last = null;\n  let u: number[]\
    \ = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (l2[i] != last) {\n \
    \     u.push(l2[i]);\n      last = l2[i];\n    }\n  }\n  return u;\n}\n", "  let\
    \ sorted = l.sort();\n  let res = [sorted[0]];\n  for (let i = 1; i < sorted.length;\
    \ i++) {\n    if (sorted[i] != sorted[i - 1]) {\n      res.push(sorted[i]);\n\
    \    }\n  }\n  return res;\n}\n", "    return l.filter((x, i) => l.indexOf(x)\
    \ === i).sort((a, b) => a - b);\n}\n", "  return l.filter((_, i) => l.indexOf(_)\
    \ === i).sort()\n}\n\nexport const areUnique = (\n  l: number[],\n  uniq = unique(l)\n\
    ): boolean => uniq.length === l.length\n", "  return [...new Set(l)];\n}\n", " \
    \   return l.filter((e, i) => i === l.indexOf(e)).sort((a, b) => a - b);\n}\n",
  "  return [...new Set(l)]\n}\n", "    return l.sort().filter((d, i) => i === 0 ||\
    \ d !== l[i - 1]);\n}\n", "  return Array.from(new Set(l))\n}\n", "    let result:\
    \ number[] = [];\n    for (let element of l) {\n        if (result.indexOf(element)\
    \ == -1) {\n            result.push(element);\n        }\n    }\n    return result.sort();\n\
    }\n", "  return l.filter((x, i) => l.indexOf(x) === i);\n}\n", "  return [...new\
    \ Set(l)].sort((a, b) => a - b);\n}\n\nexport {\n  factorial,\n  fibonacci,\n\
    \  isPrime,\n  primes,\n  range,\n  unique,\n};", "    let u = l.filter((value,\
    \ index, self) => self.indexOf(value) === index);\n    u.sort((a, b) => a - b);\n\
    \    return u;\n}\n", "  return [...new Set(l)];\n}\n", "    return l.filter((value,\
    \ index, self) => self.indexOf(value) === index);\n}\n", "    return [...new Set(l)];\n\
    }\n", "    let result: number[] = [];\n    let seen: number[] = [];\n    for (let\
    \ i = 0; i < l.length; i++) {\n        let elt = l[i];\n        if (seen.indexOf(elt)\
    \ !== -1) continue;\n        seen.push(elt);\n        result.push(elt);\n    }\n\
    \    return result;\n}\n", "  let ls = l.slice(0);\n  let result = [];\n  for\
    \ (let i = 0; i < ls.length; i++) {\n    if (result.indexOf(ls[i]) == -1) {\n\
    \      result.push(ls[i]);\n    }\n  }\n  return result;\n}\n", "    const uniqued\
    \ = [];\n    const len = l.length;\n    for (let i = 0; i < len; i++) {\n    \
    \    const item = l[i];\n        if (uniqued.indexOf(item) === -1) {\n       \
    \     uniqued.push(item);\n        }\n    }\n    return uniqued.sort();\n}\n",
  "  return [...new Set(l)];\n}\n"]
stop_tokens:
- "\nfunction "
- "\n/*"
- "\n//"
- "\nclass"
